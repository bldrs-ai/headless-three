import require$$0 from 'fs';
import require$$1 from 'events';
import * as THREE from 'three';
import { TGALoader } from 'three/examples/jsm/loaders/TGALoader.js';
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';
import { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';
import { VRMLLoader } from 'three/examples/jsm/loaders/VRMLLoader.js';
import { ThreeMFLoader } from 'three/examples/jsm/loaders/3MFLoader.js';
import { AMFLoader } from 'three/examples/jsm/loaders/AMFLoader.js';
import * as fflate from 'fflate';
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader.js';

function IsDefined (val)
{
    return val !== undefined && val !== null;
}

function ValueOrDefault (val, def)
{
    if (val === undefined || val === null) {
        return def;
    }
    return val;
}

function CopyObjectAttributes (src, dest)
{
    if (!IsDefined (src)) {
        return;
    }
    for (let attribute of Object.keys (src)) {
        if (IsDefined (src[attribute])) {
            dest[attribute] = src[attribute];
        }
    }
}

function IsObjectEmpty (obj)
{
    return Object.keys (obj).length === 0;
}

function EscapeHtmlChars (str)
{
    return str.replace (/</g, '&lt;').replace (/>/g, '&gt;');
}

class EventNotifier
{
    constructor ()
    {
        this.eventListeners = new Map ();
    }

    AddEventListener (eventId, listener)
    {
        if (!this.eventListeners.has (eventId)) {
            this.eventListeners.set (eventId, []);
        }
        let listeners = this.eventListeners.get (eventId);
        listeners.push (listener);
    }

    HasEventListener (eventId)
    {
        return this.eventListeners.has (eventId);
    }

    GetEventNotifier (eventId)
    {
        return () => {
            this.NotifyEventListeners (eventId);
        };
    }

    NotifyEventListeners (eventId, ...args)
    {
        if (!this.eventListeners.has (eventId)) {
            return;
        }
        let listeners = this.eventListeners.get (eventId);
        for (let listener of listeners) {
            listener (...args);
        }
    }
}

class TaskRunner
{
    constructor ()
    {
        this.count = null;
        this.current = null;
        this.callbacks = null;
    }

    Run (count, callbacks)
    {
        this.count = count;
        this.current = 0;
        this.callbacks = callbacks;
        if (count === 0) {
            this.TaskReady ();
        } else {
            this.RunOnce ();
        }
    }

    RunBatch (count, batchCount, callbacks)
    {
        let stepCount = 0;
        if (count > 0) {
            stepCount = parseInt ((count - 1) / batchCount, 10) + 1;
        }
        this.Run (stepCount, {
            runTask : (index, ready) => {
                const firstIndex = index * batchCount;
                const lastIndex = Math.min ((index + 1) * batchCount, count) - 1;
                callbacks.runTask (firstIndex, lastIndex, ready);
            },
            onReady : callbacks.onReady
        });
    }

    RunOnce ()
    {
        setTimeout (() => {
            this.callbacks.runTask (this.current, this.TaskReady.bind (this));
        }, 0);
    }

    TaskReady ()
    {
        this.current += 1;
        if (this.current < this.count) {
            this.RunOnce ();
        } else {
            if (this.callbacks.onReady) {
                this.callbacks.onReady ();
            }
        }
    }
}

function RunTaskAsync (task)
{
    setTimeout (() => {
        task ();
    }, 10);
}

function RunTasks (count, callbacks)
{
    let taskRunner = new TaskRunner ();
    taskRunner.Run (count, callbacks);
}

function RunTasksBatch (count, batchCount, callbacks)
{
    let taskRunner = new TaskRunner ();
    taskRunner.RunBatch (count, batchCount, callbacks);
}

function WaitWhile (expression)
{
    function Waiter (expression)
    {
        if (expression ()) {
            setTimeout (() => {
                Waiter (expression);
            }, 10);
        }
    }
    Waiter (expression);
}

let externalLibLocation = null;
let loadedExternalLibs = new Set ();

/**
 * Sets the location of the external libraries used by the engine. This is the content of the libs
 * folder in the package. The location must be relative to the main file.
 * @param {string} newExternalLibLocation Relative path to the libs folder.
 */
function SetExternalLibLocation (newExternalLibLocation)
{
    externalLibLocation = newExternalLibLocation;
}

function GetExternalLibPath (libName)
{
    if (externalLibLocation === null) {
        return null;
    }
    return externalLibLocation + '/' + libName;
}

function LoadExternalLibrary (libName)
{
    return new Promise ((resolve, reject) => {
        if (externalLibLocation === null) {
            reject ();
            return;
        }

        if (loadedExternalLibs.has (libName)) {
            resolve ();
            return;
        }

        let scriptElement = document.createElement ('script');
        scriptElement.type = 'text/javascript';
        scriptElement.src = GetExternalLibPath (libName);
        scriptElement.onload = () => {
            loadedExternalLibs.add (libName);
            resolve ();
        };
        scriptElement.onerror = () => {
            reject ();
        };
        document.head.appendChild (scriptElement);
    });
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var FileReader$1 = {exports: {}};

//
// FileReader
//
// http://www.w3.org/TR/FileAPI/#dfn-filereader
// https://developer.mozilla.org/en/DOM/FileReader
(function () {

  var fs = require$$0
    , EventEmitter = require$$1.EventEmitter
    ;

  function doop(fn, args, context) {
    if ('function' === typeof fn) {
      fn.apply(context, args);
    }
  }

  function toDataUrl(data, type) {
    // var data = self.result;
    var dataUrl = 'data:';

    if (type) {
      dataUrl += type + ';';
    }

    if (/text/i.test(type)) {
      dataUrl += 'charset=utf-8,';
      dataUrl += data.toString('utf8');
    } else {
      dataUrl += 'base64,';
      dataUrl += data.toString('base64');
    }

    return dataUrl;
  }

  function mapDataToFormat(file, data, format, encoding) {
    // var data = self.result;

    switch(format) {
      case 'buffer':
        return data;
      case 'binary':
        return data.toString('binary');
      case 'dataUrl':
        return toDataUrl(data, file.type);
      case 'text':
        return data.toString(encoding || 'utf8');
    }
  }

  function FileReader() {
    var self = this,
      emitter = new EventEmitter,
      file;

    self.addEventListener = function (on, callback) {
      emitter.on(on, callback);
    };
    self.removeEventListener = function (callback) {
      emitter.removeListener(callback);
    };
    self.dispatchEvent = function (on) {
      emitter.emit(on);
    };

    self.EMPTY = 0;
    self.LOADING = 1;
    self.DONE = 2;

    self.error = undefined;         // Read only
    self.readyState = self.EMPTY;   // Read only
    self.result = undefined;        // Road only

    // non-standard
    self.on = function () {
      emitter.on.apply(emitter, arguments);
    };
    self.nodeChunkedEncoding = false;
    self.setNodeChunkedEncoding = function (val) {
      self.nodeChunkedEncoding = val;
    };
    // end non-standard



    // Whatever the file object is, turn it into a Node.JS File.Stream
    function createFileStream() {
      var stream = new EventEmitter(),
        chunked = self.nodeChunkedEncoding;

      // attempt to make the length computable
      if (!file.size && chunked && file.path) {
        fs.stat(file.path, function (err, stat) {
          file.size = stat.size;
          file.lastModifiedDate = stat.mtime;
        });
      }


      // The stream exists, do nothing more
      if (file.stream) {
        return;
      }


      // Create a read stream from a buffer
      if (file.buffer) {
        process.nextTick(function () {
          stream.emit('data', file.buffer);
          stream.emit('end');
        });
        file.stream = stream;
        return;
      }


      // Create a read stream from a file
      if (file.path) {
        // TODO url
        if (!chunked) {
          fs.readFile(file.path, function (err, data) {
            if (err) {
              stream.emit('error', err);
            }
            if (data) {
              stream.emit('data', data);
              stream.emit('end');
            }
          });

          file.stream = stream;
          return;
        }

        // TODO don't duplicate this code here,
        // expose a method in File instead
        file.stream = fs.createReadStream(file.path);
      }
    }



    // before any other listeners are added
    emitter.on('abort', function () {
      self.readyState = self.DONE;
    });



    // Map `error`, `progress`, `load`, and `loadend`
    function mapStreamToEmitter(format, encoding) {
      var stream = file.stream,
        buffers = [];
        self.nodeChunkedEncoding;

      buffers.dataLength = 0;

      stream.on('error', function (err) {
        if (self.DONE === self.readyState) {
          return;
        }

        self.readyState = self.DONE;
        self.error = err;
        emitter.emit('error', err);
      });

      stream.on('data', function (data) {
        if (self.DONE === self.readyState) {
          return;
        }

        buffers.dataLength += data.length;
        buffers.push(data);

        emitter.emit('progress', {
          // fs.stat will probably complete before this
          // but possibly it will not, hence the check
          lengthComputable: (!isNaN(file.size)) ? true : false,
          loaded: buffers.dataLength,
          total: file.size
        });

        emitter.emit('data', data);
      });

      stream.on('end', function () {
        if (self.DONE === self.readyState) {
          return;
        }

        var data;

        if (buffers.length > 1 ) {
          data = Buffer.concat(buffers);
        } else {
          data = buffers[0];
        }

        self.readyState = self.DONE;
        self.result = mapDataToFormat(file, data, format, encoding);
        emitter.emit('load', {
          target: {
            // non-standard
            nodeBufferResult: data,
            result: self.result
          }
        });

        emitter.emit('loadend');
      });
    }


    // Abort is overwritten by readAsXyz
    self.abort = function () {
      if (self.readState == self.DONE) {
        return;
      }
      self.readyState = self.DONE;
      emitter.emit('abort');
    };



    // 
    function mapUserEvents() {
      emitter.on('start', function () {
        doop(self.onloadstart, arguments);
      });
      emitter.on('progress', function () {
        doop(self.onprogress, arguments);
      });
      emitter.on('error', function (err) {
        // TODO translate to FileError
        if (self.onerror) {
          self.onerror(err);
        } else {
          if (!emitter.listeners.error || !emitter.listeners.error.length) {
            throw err;
          }
        }
      });
      emitter.on('load', function () {
        doop(self.onload, arguments);
      });
      emitter.on('end', function () {
        doop(self.onloadend, arguments);
      });
      emitter.on('abort', function () {
        doop(self.onabort, arguments);
      });
    }



    function readFile(_file, format, encoding) {
      file = _file;
      console.log(_file);
      if (!file || !file.name || !(file.path || file.stream || file.buffer)) {
        throw new Error("cannot read as File: " + JSON.stringify(file));
      }
      if (0 !== self.readyState) {
        console.log("already loading, request to change format ignored");
        return;
      }

      // 'process.nextTick' does not ensure order, (i.e. an fs.stat queued later may return faster)
      // but `onloadstart` must come before the first `data` event and must be asynchronous.
      // Hence we waste a single tick waiting
      process.nextTick(function () {
        self.readyState = self.LOADING;
        emitter.emit('loadstart');
        createFileStream();
        mapStreamToEmitter(format, encoding);
        mapUserEvents();
      });
    }

    self.readAsArrayBuffer = function (file) {
      readFile(file, 'buffer');
    };
    self.readAsBinaryString = function (file) {
      readFile(file, 'binary');
    };
    self.readAsDataURL = function (file) {
      readFile(file, 'dataUrl');
    };
    self.readAsText = function (file, encoding) {
      readFile(file, 'text', encoding);
    };
  }

  FileReader$1.exports = FileReader;
}());

var FileReaderExports = FileReader$1.exports;
var FileReader = /*@__PURE__*/getDefaultExportFromCjs(FileReaderExports);

if (!globalThis.FileReader) {
  globalThis.FileReader = FileReader;
}


/**
 * File source identifier for import.
 * @enum
 */
const FileSource =
{
	/** The file is provided by a URL. */
    Url : 1,
	/** The file is provided by a {@link File} object. */
    File : 2,
	/** Used internally if a file is originated by a compressed archive. */
	Decompressed : 3
};

const FileFormat =
{
    Text : 1,
    Binary : 2
};

function GetFileName (filePath)
{
	let fileName = filePath;

	let firstParamIndex = fileName.indexOf ('?');
	if (firstParamIndex !== -1) {
		fileName = fileName.substring (0, firstParamIndex);
	}

	let firstSeparator = fileName.lastIndexOf ('/');
	if (firstSeparator === -1) {
		firstSeparator = fileName.lastIndexOf ('\\');
	}
	if (firstSeparator !== -1) {
		fileName = fileName.substring (firstSeparator + 1);
	}

	return decodeURI (fileName);
}

function GetFileExtension (filePath)
{
	let fileName = GetFileName (filePath);
	let firstPoint = fileName.lastIndexOf ('.');
	if (firstPoint === -1) {
		return '';
	}
	let extension = fileName.substring (firstPoint + 1);
	return extension.toLowerCase ();
}

function RequestUrl (url, onProgress)
{
	return new Promise ((resolve, reject) => {
		let request = new XMLHttpRequest ();
		request.open ('GET', url, true);

		request.onprogress = (event) => {
			onProgress (event.loaded, event.total);
		};

		request.onload = () => {
			if (request.status === 200) {
				resolve (request.response);
			} else {
				reject ();
			}
		};

		request.onerror = () => {
			reject ();
		};

		request.responseType = 'arraybuffer';
		request.send (null);
	});
}

function ReadFile (file, onProgress)
{
	return new Promise ((resolve, reject) => {
		let reader = new FileReader ();

		reader.onprogress = (event) => {
			onProgress (event.loaded, event.total);
		};

		reader.onloadend = (event) => {
                        console.log('ReadFile: onloadend, going to resolve...');
			if (event.target.readyState === FileReader.DONE) {
				resolve (event.target.result);
			}
		};

		reader.onerror = () => {
                        console.error('ReadFile: error...');
			reject ();
		};
		reader.abort = () => {
                        console.error('ReadFile: abort...');
			reject ();
		};
                console.log('ReadFile: reading file:', file);
		reader.readAsArrayBuffer (file);
	});
}

function TransformFileHostUrls (urls)
{
    for (let i = 0; i < urls.length; i++) {
        let url = urls[i];
        if (url.search (/www\.dropbox\.com/u) !== -1) {
            url = url.replace ('www.dropbox.com', 'dl.dropbox.com');
            let separatorPos = url.indexOf ('?');
            if (separatorPos !== -1) {
                url = url.substring (0, separatorPos);
            }
            urls[i] = url;
        } else if (url.search (/github\.com/u) !== -1) {
            url = url.replace ('github.com', 'raw.githubusercontent.com');
            url = url.replace ('/blob', '');
            let separatorPos = url.indexOf ('?');
            if (separatorPos !== -1) {
                url = url.substring (0, separatorPos);
            }
            urls[i] = url;
        }
    }
}

function IsUrl (str)
{
	const regex = /^https?:\/\/\S+$/g;
	const match = str.match (regex);
	return match !== null;
}

const Eps = 0.00000001;
const BigEps = 0.0001;
const RadDeg = 57.29577951308232;
const DegRad = 0.017453292519943;

function IsZero (a)
{
	return Math.abs (a) < Eps;
}

function IsLower (a, b)
{
	return b - a > Eps;
}

function IsGreater (a, b)
{
	return a - b > Eps;
}

function IsLowerOrEqual (a, b)
{
	return b - a > -Eps;
}

function IsGreaterOrEqual (a, b)
{
	return a - b > -Eps;
}

function IsEqual (a, b)
{
	return Math.abs (b - a) < Eps;
}

function IsEqualEps (a, b, eps)
{
	return Math.abs (b - a) < eps;
}

function IsPositive (a)
{
	return a > Eps;
}

function IsNegative (a)
{
	return a < -Eps;
}

const Direction =
{
	X : 1,
	Y : 2,
	Z : 3
};

class Coord2D
{
	constructor (x, y)
	{
		this.x = x;
		this.y = y;
	}

	Clone ()
	{
		return new Coord2D (this.x, this.y);
	}
}

function CoordIsEqual2D (a, b)
{
	return IsEqual (a.x, b.x) && IsEqual (a.y, b.y);
}

function AddCoord2D (a, b)
{
	return new Coord2D (a.x + b.x, a.y + b.y);
}

function SubCoord2D (a, b)
{
	return new Coord2D (a.x - b.x, a.y - b.y);
}

function CoordDistance2D (a, b)
{
	return Math.sqrt ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

/**
 * RGB color object. Components are integers in the range of 0..255.
 */
class RGBColor
{
    /**
     * @param {integer} r Red component.
     * @param {integer} g Green component.
     * @param {integer} b Blue component.
     */
    constructor (r, g, b)
    {
        this.r = r;
        this.g = g;
        this.b = b;
    }

    /**
     * Sets the value of all components.
     * @param {integer} r Red component.
     * @param {integer} g Green component.
     * @param {integer} b Blue component.
     */
    Set (r, g, b)
    {
        this.r = r;
        this.g = g;
        this.b = b;
    }

    /**
     * Creates a clone of the object.
     * @returns {RGBColor}
     */
    Clone ()
    {
        return new RGBColor (this.r, this.g, this.b);
    }
}

/**
 * RGBA color object. Components are integers in the range of 0..255.
 */
class RGBAColor
{
    /**
     * @param {integer} r Red component.
     * @param {integer} g Green component.
     * @param {integer} b Blue component.
     * @param {integer} a Alpha component.
     */
    constructor (r, g, b, a)
    {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }

    /**
     * Sets the value of all components.
     * @param {integer} r Red component.
     * @param {integer} g Green component.
     * @param {integer} b Blue component.
     * @param {integer} a Alpha component.
     */
    Set (r, g, b, a)
    {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }

    /**
     * Creates a clone of the object.
     * @returns {RGBAColor}
     */
    Clone ()
    {
        return new RGBAColor (this.r, this.g, this.b, this.a);
    }
}

function ColorComponentFromFloat (component)
{
    return parseInt (Math.round (component * 255.0), 10);
}

function ColorComponentToFloat (component)
{
    return component / 255.0;
}

function RGBColorFromFloatComponents (r, g, b)
{
    return new RGBColor (
        ColorComponentFromFloat (r),
        ColorComponentFromFloat (g),
        ColorComponentFromFloat (b)
    );
}

function SRGBToLinear (component)
{
    if (component < 0.04045) {
        return component * 0.0773993808;
    } else {
        return Math.pow (component * 0.9478672986 + 0.0521327014, 2.4);
    }
}

function LinearToSRGB (component)
{
    if (component < 0.0031308) {
        return component * 12.92;
    } else {
        return 1.055 * (Math.pow (component, 0.41666)) - 0.055;
    }
}

function IntegerToHexString (intVal)
{
    let result = parseInt (intVal, 10).toString (16);
    while (result.length < 2) {
        result = '0' + result;
    }
    return result;
}

function RGBColorToHexString (color)
{
    let r = IntegerToHexString (color.r);
    let g = IntegerToHexString (color.g);
    let b = IntegerToHexString (color.b);
    return r + g + b;
}

function RGBAColorToHexString (color)
{
    let r = IntegerToHexString (color.r);
    let g = IntegerToHexString (color.g);
    let b = IntegerToHexString (color.b);
    let a = IntegerToHexString (color.a);
    return r + g + b + a;
}

function HexStringToRGBColor (hexString)
{
    if (hexString.length !== 6) {
        return null;
    }

    let r = parseInt (hexString.substring (0, 2), 16);
    let g = parseInt (hexString.substring (2, 4), 16);
    let b = parseInt (hexString.substring (4, 6), 16);
    return new RGBColor (r, g, b);
}

function HexStringToRGBAColor (hexString)
{
    if (hexString.length !== 6 && hexString.length !== 8) {
        return null;
    }

    let r = parseInt (hexString.substring (0, 2), 16);
    let g = parseInt (hexString.substring (2, 4), 16);
    let b = parseInt (hexString.substring (4, 6), 16);
    let a = 255;
    if (hexString.length === 8) {
        a = parseInt (hexString.substring (6, 8), 16);
    }
    return new RGBAColor (r, g, b, a);
}

function ArrayToRGBColor (arr)
{
	return new RGBColor (arr[0], arr[1], arr[2]);
}

function RGBColorIsEqual (a, b)
{
	return a.r === b.r && a.g === b.g && a.b === b.b;
}

class TextureMap
{
    constructor ()
    {
        this.name = null;
        this.mimeType = null;
        this.buffer = null;
        this.offset = new Coord2D (0.0, 0.0);
        this.scale = new Coord2D (1.0, 1.0);
        this.rotation = 0.0; // radians
    }

    IsValid ()
    {
        return this.name !== null && this.buffer !== null;
    }

    HasTransformation ()
    {
        if (!CoordIsEqual2D (this.offset, new Coord2D (0.0, 0.0))) {
            return true;
        }
        if (!CoordIsEqual2D (this.scale, new Coord2D (1.0, 1.0))) {
            return true;
        }
        if (!IsEqual (this.rotation, 0.0)) {
            return true;
        }
        return false;
    }

    IsEqual (rhs)
    {
        if (this.name !== rhs.name) {
            return false;
        }
        if (this.mimeType !== rhs.mimeType) {
            return false;
        }
        if (!CoordIsEqual2D (this.offset, rhs.offset)) {
            return false;
        }
        if (!CoordIsEqual2D (this.scale, rhs.scale)) {
            return false;
        }
        if (!IsEqual (this.rotation, rhs.rotation)) {
            return false;
        }
        return true;
    }
}

function TextureMapIsEqual (aTex, bTex)
{
    if (aTex === null && bTex === null) {
        return true;
    } else if (aTex === null || bTex === null) {
        return false;
    }
    return aTex.IsEqual (bTex);
}

const MaterialType =
{
    Phong : 1,
    Physical : 2
};

class MaterialBase
{
    constructor (type)
    {
        this.type = type;
        this.isDefault = false;

        this.name = '';
        this.color = new RGBColor (0, 0, 0);

        this.vertexColors = false;
    }

    IsEqual (rhs)
    {
        if (this.type !== rhs.type) {
            return false;
        }
        if (this.isDefault !== rhs.isDefault) {
            return false;
        }
        if (this.name !== rhs.name) {
            return false;
        }
        if (!RGBColorIsEqual (this.color, rhs.color)) {
            return false;
        }
        if (this.vertexColors !== rhs.vertexColors) {
            return false;
        }
        return true;
    }
}

class FaceMaterial extends MaterialBase
{
    constructor (type)
    {
        super (type);

        this.emissive = new RGBColor (0, 0, 0);

        this.opacity = 1.0; // 0.0 .. 1.0
        this.transparent = false;

        this.diffuseMap = null;
        this.bumpMap = null;
        this.normalMap = null;
        this.emissiveMap = null;

        this.alphaTest = 0.0; // 0.0 .. 1.0
        this.multiplyDiffuseMap = false;
    }

    IsEqual (rhs)
    {
        if (!super.IsEqual (rhs)) {
            return false;
        }
        if (!RGBColorIsEqual (this.emissive, rhs.emissive)) {
            return false;
        }
        if (!IsEqual (this.opacity, rhs.opacity)) {
            return false;
        }
        if (this.transparent !== rhs.transparent) {
            return false;
        }
        if (!TextureMapIsEqual (this.diffuseMap, rhs.diffuseMap)) {
            return false;
        }
        if (!TextureMapIsEqual (this.bumpMap, rhs.bumpMap)) {
            return false;
        }
        if (!TextureMapIsEqual (this.normalMap, rhs.normalMap)) {
            return false;
        }
        if (!TextureMapIsEqual (this.emissiveMap, rhs.emissiveMap)) {
            return false;
        }
        if (!IsEqual (this.alphaTest, rhs.alphaTest)) {
            return false;
        }
        if (this.multiplyDiffuseMap !== rhs.multiplyDiffuseMap) {
            return false;
        }
        return true;
    }
}

class PhongMaterial extends FaceMaterial
{
    constructor ()
    {
        super (MaterialType.Phong);

        this.ambient = new RGBColor (0, 0, 0);
        this.specular = new RGBColor (0, 0, 0);
        this.shininess = 0.0; // 0.0 .. 1.0
        this.specularMap = null;
    }

    IsEqual (rhs)
    {
        if (!super.IsEqual (rhs)) {
            return false;
        }
        if (!RGBColorIsEqual (this.ambient, rhs.ambient)) {
            return false;
        }
        if (!RGBColorIsEqual (this.specular, rhs.specular)) {
            return false;
        }
        if (!IsEqual (this.shininess, rhs.shininess)) {
            return false;
        }
        if (!TextureMapIsEqual (this.specularMap, rhs.specularMap)) {
            return false;
        }
        return true;
    }
}

class PhysicalMaterial extends FaceMaterial
{
    constructor ()
    {
        super (MaterialType.Physical);

        this.metalness = 0.0; // 0.0 .. 1.0
        this.roughness = 1.0; // 0.0 .. 1.0
        this.metalnessMap = null;
    }

    IsEqual (rhs)
    {
        if (!super.IsEqual (rhs)) {
            return false;
        }
        if (!IsEqual (this.metalness, rhs.metalness)) {
            return false;
        }
        if (!IsEqual (this.roughness, rhs.roughness)) {
            return false;
        }
        if (!TextureMapIsEqual (this.metalnessMap, rhs.metalnessMap)) {
            return false;
        }
        return true;
    }
}

function TextureIsEqual (a, b)
{
    if (a.name !== b.name) {
        return false;
    }
    if (a.mimeType !== b.mimeType) {
        return false;
    }
    if (!CoordIsEqual2D (a.offset, b.offset)) {
        return false;
    }
    if (!CoordIsEqual2D (a.scale, b.scale)) {
        return false;
    }
    if (!IsEqual (a.rotation, b.rotation)) {
        return false;
    }
    return true;
}

class Coord3D
{
	constructor (x, y, z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}

	Length ()
	{
		return Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);
	}

	MultiplyScalar (scalar)
	{
		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		return this;
	}

	Normalize ()
	{
		let length = this.Length ();
		if (length > 0.0) {
			this.MultiplyScalar (1.0 / length);
		}
		return this;
	}

	Offset (direction, distance)
	{
		let normal = direction.Clone ().Normalize ();
		this.x += normal.x * distance;
		this.y += normal.y * distance;
		this.z += normal.z * distance;
		return this;
	}

	Rotate (axis, angle, origo)
	{
		let normal = axis.Clone ().Normalize ();

		let u = normal.x;
		let v = normal.y;
		let w = normal.z;

		let x = this.x - origo.x;
		let y = this.y - origo.y;
		let z = this.z - origo.z;

		let si = Math.sin (angle);
		let co = Math.cos (angle);
		this.x = - u * (- u * x - v * y - w * z) * (1.0 - co) + x * co + (- w * y + v * z) * si;
		this.y = - v * (- u * x - v * y - w * z) * (1.0 - co) + y * co + (w * x - u * z) * si;
		this.z = - w * (- u * x - v * y - w * z) * (1.0 - co) + z * co + (- v * x + u * y) * si;

		this.x += origo.x;
		this.y += origo.y;
		this.z += origo.z;
		return this;
	}

	Clone ()
	{
		return new Coord3D (this.x, this.y, this.z);
	}
}

function CoordIsEqual3D (a, b)
{
	return IsEqual (a.x, b.x) && IsEqual (a.y, b.y) && IsEqual (a.z, b.z);
}

function AddCoord3D (a, b)
{
	return new Coord3D (a.x + b.x, a.y + b.y, a.z + b.z);
}

function SubCoord3D (a, b)
{
	return new Coord3D (a.x - b.x, a.y - b.y, a.z - b.z);
}

function CoordDistance3D (a, b)
{
	return Math.sqrt ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
}

function DotVector3D (a, b)
{
	return a.x * b.x + a.y * b.y + a.z * b.z;
}

function VectorAngle3D (a, b)
{
	let aDirection = a.Clone ().Normalize ();
	let bDirection = b.Clone ().Normalize ();
	if (CoordIsEqual3D (aDirection, bDirection)) {
		return 0.0;
	}
	let product = DotVector3D (aDirection, bDirection);
	return Math.acos (product);
}

function CrossVector3D (a, b)
{
	let result = new Coord3D (0.0, 0.0, 0.0);
	result.x = a.y * b.z - a.z * b.y;
	result.y = a.z * b.x - a.x * b.z;
	result.z = a.x * b.y - a.y * b.x;
	return result;
}

function VectorLength3D (x, y, z)
{
	return Math.sqrt (x * x + y * y + z * z);
}

function ArrayToCoord3D (arr)
{
	return new Coord3D (arr[0], arr[1], arr[2]);
}

class MeshPrimitiveBuffer
{
    constructor ()
    {
        this.indices = [];
        this.vertices = [];
        this.colors = [];
        this.normals = [];
        this.uvs = [];
        this.material = null;
    }

    GetBounds ()
    {
        let min = [Infinity, Infinity, Infinity];
        let max = [-Infinity, -Infinity, -Infinity];
        for (let i = 0; i < this.vertices.length / 3; i++) {
            for (let j = 0; j < 3; j++) {
                min[j] = Math.min (min[j], this.vertices[i * 3 + j]);
                max[j] = Math.max (max[j], this.vertices[i * 3 + j]);
            }
        }
        return {
            min : min,
            max : max
        };
    }

    GetByteLength (indexTypeSize, numberTypeSize)
    {
        let indexCount = this.indices.length;
        let numberCount = this.vertices.length + this.colors.length + this.normals.length + this.uvs.length;
        return indexCount * indexTypeSize + numberCount * numberTypeSize;
    }
}

class MeshBuffer
{
    constructor ()
    {
        this.primitives = [];
    }

    PrimitiveCount ()
    {
        return this.primitives.length;
    }

    GetPrimitive (index)
    {
        return this.primitives[index];
    }

    GetByteLength (indexTypeSize, numberTypeSize)
    {
        let byteLength = 0;
        for (let i = 0; i < this.primitives.length; i++) {
            let primitive = this.primitives[i];
            byteLength += primitive.GetByteLength (indexTypeSize, numberTypeSize);
        }
        return byteLength;
    }
}

function ConvertMeshToMeshBuffer (mesh)
{
    function AddVertexToPrimitiveBuffer (mesh, indices, primitiveBuffer, meshVertexToPrimitiveVertices)
    {
        function GetColorOrDefault (mesh, colorIndex, forceColors)
        {
            if (colorIndex !== null) {
                return mesh.GetVertexColor (colorIndex);
            } else if (forceColors) {
                return new RGBColor (0, 0, 0);
            } else {
                return null;
            }
        }

        function GetUVOrDefault (mesh, uvIndex, forceUVs)
        {
            if (uvIndex !== null) {
                return mesh.GetTextureUV (uvIndex);
            } else if (forceUVs) {
                return new Coord2D (0.0, 0.0);
            } else {
                return null;
            }
        }

        function AddVertex (mesh, indices, primitiveBuffer)
        {
            let forceColors = mesh.VertexColorCount () > 0;
            let forceUVs = mesh.TextureUVCount () > 0;

            let vertex = mesh.GetVertex (indices.vertex);
            let normal = mesh.GetNormal (indices.normal);

            let primitiveVertexIndex = primitiveBuffer.vertices.length / 3;
            primitiveBuffer.indices.push (primitiveVertexIndex);
            primitiveBuffer.vertices.push (vertex.x, vertex.y, vertex.z);

            let color = GetColorOrDefault (mesh, indices.color, forceColors);
            if (color !== null) {
                primitiveBuffer.colors.push (color.r / 255.0, color.g / 255.0, color.b / 255.0);
            }

            primitiveBuffer.normals.push (normal.x, normal.y, normal.z);

            let uv = GetUVOrDefault (mesh, indices.uv, forceUVs);
            if (uv !== null) {
                primitiveBuffer.uvs.push (uv.x, uv.y);
            }

            return {
                index : primitiveVertexIndex,
                color : color,
                normal : normal,
                uv : uv
            };
        }

        function FindMatchingPrimitiveVertex (mesh, primitiveVertices, indices)
        {
            function IsEqualColor (mesh, colorIndex, existingColor)
            {
                if (existingColor === null && colorIndex === null) {
                    return true;
                }
                let color = GetColorOrDefault (mesh, colorIndex, true);
                return RGBColorIsEqual (existingColor, color);
            }

            function IsEqualNormal (mesh, normalIndex, existingNormal)
            {
                let normal = mesh.GetNormal (normalIndex);
                return CoordIsEqual3D (existingNormal, normal);
            }

            function IsEqualUV (mesh, uvIndex, existingUv)
            {
                if (existingUv === null && uvIndex === null) {
                    return true;
                }
                let uv = GetUVOrDefault (mesh, uvIndex, true);
                return CoordIsEqual2D (existingUv, uv);
            }

            for (let i = 0; i < primitiveVertices.length; i++) {
                let primitiveVertex = primitiveVertices[i];
                let equalColor = IsEqualColor (mesh, indices.color, primitiveVertex.color);
                let equalNormal = IsEqualNormal (mesh, indices.normal, primitiveVertex.normal);
                let equalUv = IsEqualUV (mesh, indices.uv, primitiveVertex.uv);
                if (equalColor && equalNormal && equalUv) {
                    return primitiveVertex;
                }
            }
            return null;
        }

        if (meshVertexToPrimitiveVertices.has (indices.vertex)) {
            let primitiveVertices = meshVertexToPrimitiveVertices.get (indices.vertex);
            let existingPrimitiveVertex = FindMatchingPrimitiveVertex (mesh, primitiveVertices, indices);
            if (existingPrimitiveVertex !== null) {
                primitiveBuffer.indices.push (existingPrimitiveVertex.index);
            } else {
                let primitiveVertex = AddVertex (mesh, indices, primitiveBuffer);
                primitiveVertices.push (primitiveVertex);
            }
        } else {
            let primitiveVertex = AddVertex (mesh, indices, primitiveBuffer);
            meshVertexToPrimitiveVertices.set (indices.vertex, [primitiveVertex]);
        }
    }

    let meshBuffer = new MeshBuffer ();

    let triangleCount = mesh.TriangleCount ();
    if (triangleCount === 0) {
        return null;
    }

    let triangleIndices = [];
    for (let i = 0; i < triangleCount; i++) {
        triangleIndices.push (i);
    }
    triangleIndices.sort ((a, b) => {
        let aTriangle = mesh.GetTriangle (a);
        let bTriangle = mesh.GetTriangle (b);
        return aTriangle.mat - bTriangle.mat;
    });

    let primitiveBuffer = null;
    let meshVertexToPrimitiveVertices = null;
    for (let i = 0; i < triangleIndices.length; i++) {
        let triangleIndex = triangleIndices[i];
        let triangle = mesh.GetTriangle (triangleIndex);
        if (primitiveBuffer === null || primitiveBuffer.material !== triangle.mat) {
            primitiveBuffer = new MeshPrimitiveBuffer ();
            primitiveBuffer.material = triangle.mat;
            meshVertexToPrimitiveVertices = new Map ();
            meshBuffer.primitives.push (primitiveBuffer);
        }
        let v0Indices = {
            vertex : triangle.v0,
            color : triangle.c0,
            normal : triangle.n0,
            uv : triangle.u0
        };
        let v1Indices = {
            vertex : triangle.v1,
            color : triangle.c1,
            normal : triangle.n1,
            uv : triangle.u1
        };
        let v2Indices = {
            vertex : triangle.v2,
            color : triangle.c2,
            normal : triangle.n2,
            uv : triangle.u2
        };

        AddVertexToPrimitiveBuffer (mesh, v0Indices, primitiveBuffer, meshVertexToPrimitiveVertices);
        AddVertexToPrimitiveBuffer (mesh, v1Indices, primitiveBuffer, meshVertexToPrimitiveVertices);
        AddVertexToPrimitiveBuffer (mesh, v2Indices, primitiveBuffer, meshVertexToPrimitiveVertices);
    }

    return meshBuffer;
}

function ArrayBufferToUtf8String (buffer)
{
	let decoder = new TextDecoder ('utf-8');
	return decoder.decode (buffer);
}

function ArrayBufferToAsciiString (buffer)
{
	let text = '';
	let bufferView = new Uint8Array (buffer);
	for (let i = 0; i < bufferView.byteLength; i++) {
		text += String.fromCharCode (bufferView[i]);
	}
	return text;
}

function AsciiStringToArrayBuffer (str)
{
	let buffer = new ArrayBuffer (str.length);
	let bufferView = new Uint8Array (buffer);
	for (let i = 0; i < str.length; i++) {
		bufferView[i] = str.charCodeAt (i);
	}
	return buffer;
}

function Utf8StringToArrayBuffer (str)
{
	let encoder = new TextEncoder ();
	let uint8Array = encoder.encode (str);
	return uint8Array.buffer;
}

function Base64DataURIToArrayBuffer (uri)
{
	let dataPrefix = 'data:';
	if (!uri.startsWith (dataPrefix)) {
		return null;
	}

	let mimeSeparator = uri.indexOf (';');
	if (mimeSeparator === -1) {
		return null;
	}

	let bufferSeparator = uri.indexOf (',');
	if (bufferSeparator === -1) {
		return null;
	}

	let mimeType = uri.substring (dataPrefix.length, dataPrefix.length + mimeSeparator - 5);
	let base64String = atob (uri.substring (bufferSeparator + 1));
	let buffer = new ArrayBuffer (base64String.length);
	let bufferView = new Uint8Array (buffer);
	for (let i = 0; i < base64String.length; i++) {
		bufferView[i] = base64String.charCodeAt (i);
	}

	return {
		mimeType : mimeType,
		buffer : buffer
	};
}

function GetFileExtensionFromMimeType (mimeType)
{
	if (mimeType === undefined || mimeType === null) {
		return '';
	}
	let mimeParts = mimeType.split ('/');
	if (mimeParts.length === 0) {
		return '';
	}
	return mimeParts[mimeParts.length - 1];
}

function CreateObjectUrl (content)
{
	let blob = new Blob ([content]);
	let url = URL.createObjectURL (blob);
	return url;
}

function CreateObjectUrlWithMimeType (content, mimeType)
{
	let blob = new Blob ([content], { type : mimeType });
	let url = URL.createObjectURL (blob);
	return url;
}

function RevokeObjectUrl (url)
{
	URL.revokeObjectURL (url);
}

class ExportedFile
{
	constructor (name)
	{
		this.name = name;
		this.content = null;
	}

	GetName ()
	{
		return this.name;
	}

	SetName (name)
	{
		this.name = name;
	}

	GetTextContent ()
	{
		let text = ArrayBufferToUtf8String (this.content);
		return text;
	}

	GetBufferContent ()
	{
		return this.content;
	}

	SetTextContent (content)
	{
		let buffer = Utf8StringToArrayBuffer (content);
		this.content = buffer;
	}

	SetBufferContent (content)
	{
		this.content = content;
	}
}

class ExporterBase
{
    constructor ()
    {

    }

    CanExport (format, extension)
    {
        return false;
    }

	Export (exporterModel, format, onFinish)
	{
		let files = [];
		this.ExportContent (exporterModel, format, files, () => {
			onFinish (files);
		});
	}

	ExportContent (exporterModel, format, files, onFinish)
	{

	}

	GetExportedMaterialName (originalName)
	{
		return this.GetExportedName (originalName, 'Material');
	}

	GetExportedMeshName (originalName)
	{
		return this.GetExportedName (originalName, 'Mesh');
	}

	GetExportedName (originalName, defaultName)
	{
		if (originalName.length === 0) {
			return defaultName;
		}
		return originalName;
	}
}

class Exporter3dm extends ExporterBase
{
	constructor ()
	{
		super ();
        this.rhino = null;
	}

    CanExport (format, extension)
    {
        return format === FileFormat.Binary && extension === '3dm';
    }

	ExportContent (exporterModel, format, files, onFinish)
	{
		if (this.rhino === null) {
			LoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {
                rhino3dm ().then ((rhino) => {
                    this.rhino = rhino;
                    this.ExportRhinoContent (exporterModel, files, onFinish);
                });
            }).catch (() => {
                onFinish ();
            });
		} else {
			this.ExportRhinoContent (exporterModel, files, onFinish);
		}
	}

    ExportRhinoContent (exporterModel, files, onFinish)
    {
        function ColorToRhinoColor (color)
        {
            return {
                r : color.r,
                g : color.g,
                b : color.b,
                a : 255
            };
        }

		let rhinoFile = new ExportedFile ('model.3dm');
		files.push (rhinoFile);

        let rhinoDoc = new this.rhino.File3dm ();
        exporterModel.EnumerateTransformedMeshInstances ((mesh) => {
            let meshBuffer = ConvertMeshToMeshBuffer (mesh);
            for (let primitiveIndex = 0; primitiveIndex < meshBuffer.PrimitiveCount (); primitiveIndex++) {
                let primitive = meshBuffer.GetPrimitive (primitiveIndex);
                let threeJson = {
                    data : {
                        attributes : {
                            position : {
                                itemSize : 3,
                                type : 'Float32Array',
                                array : primitive.vertices
                            },
                            normal : {
                                itemSize : 3,
                                type : 'Float32Array',
                                array : primitive.normals
                            }
                        },
                        index : {
                            type : 'Uint16Array',
                            array : primitive.indices
                        }
                    }
                };

                let material = exporterModel.GetMaterial (primitive.material);
                let rhinoMaterial = new this.rhino.Material ();
                rhinoMaterial.name = this.GetExportedMaterialName (material.name);
                if (material.type === MaterialType.Phong) {
                    rhinoMaterial.ambientColor = ColorToRhinoColor (material.ambient);
                    rhinoMaterial.specularColor = ColorToRhinoColor (material.specular);
                }
                rhinoMaterial.diffuseColor = ColorToRhinoColor (material.color);
                rhinoMaterial.transparency = 1.0 - material.opacity;

                let rhinoMaterialIndex = rhinoDoc.materials ().count ();
                rhinoDoc.materials ().add (rhinoMaterial);

                let rhinoMesh = new this.rhino.Mesh.createFromThreejsJSON (threeJson);
                let rhinoAttributes = new this.rhino.ObjectAttributes ();
                rhinoAttributes.name = this.GetExportedMeshName (mesh.GetName ());
                rhinoAttributes.materialSource = this.rhino.ObjectMaterialSource.MaterialFromObject;
                rhinoAttributes.materialIndex = rhinoMaterialIndex;
                rhinoDoc.objects ().add (rhinoMesh, rhinoAttributes);
            }
        });

        let writeOptions = new this.rhino.File3dmWriteOptions ();
        writeOptions.version = 6;
        let rhinoDocBuffer = rhinoDoc.toByteArray (writeOptions);

        rhinoFile.SetBufferContent (rhinoDocBuffer);
		onFinish ();
    }
}

const PropertyType =
{
    Text : 1,
    Integer : 2,
    Number : 3,
    Boolean : 4,
    Percent : 5,
    Color : 6
};

class Property
{
    constructor (type, name, value)
    {
        this.type = type;
        this.name = name;
        this.value = value;
    }

    Clone ()
    {
        const clonable = (this.type === PropertyType.Color);
        if (clonable) {
            return new Property (this.type, this.name, this.value.Clone ());
        } else {
            return new Property (this.type, this.name, this.value);
        }
    }
}

class PropertyGroup
{
    constructor (name)
    {
        this.name = name;
        this.properties = [];
    }

    PropertyCount ()
    {
        return this.properties.length;
    }

    AddProperty (property)
    {
        this.properties.push (property);
    }

    GetProperty (index)
    {
        return this.properties[index];
    }

    Clone ()
    {
        let cloned = new PropertyGroup (this.name);
        for (let property of this.properties) {
            cloned.AddProperty (property.Clone ());
        }
        return cloned;
    }
}

function PropertyToString (property)
{
    if (property.type === PropertyType.Text) {
        return EscapeHtmlChars (property.value);
    } else if (property.type === PropertyType.Integer) {
        return property.value.toLocaleString ();
    } else if (property.type === PropertyType.Number) {
        return property.value.toLocaleString (undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    } else if (property.type === PropertyType.Boolean) {
        return property.value ? 'True' : 'False';
    } else if (property.type === PropertyType.Percent) {
        return parseInt (property.value * 100, 10).toString () + '%';
    } else if (property.type === PropertyType.Color) {
        return '#' + RGBColorToHexString (property.value);
    }
    return null;
}

function GenerateGuid ()
{
    // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid
    let template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    return template.replace (/[xy]/g, (c) => {
        let r = Math.random () * 16 | 0;
        let v = (c === 'x') ? r : (r & 0x3 | 0x8);
        return v.toString (16);
    });
}

class ExporterBim extends ExporterBase
{
    constructor ()
    {
        super ();
    }

    CanExport (format, extension)
    {
        return format === FileFormat.Text && extension === 'bim';
    }

    ExportContent (exporterModel, format, files, onFinish)
    {
        let bimContent = {
            schema_version : '1.1.0',
            meshes : [],
            elements : [],
            info : {}
        };

        this.ExportProperties (exporterModel.GetModel (), bimContent.info);

        let meshId = 0;
        exporterModel.EnumerateTransformedMeshInstances ((mesh) => {
            let bimMesh = {
                mesh_id : meshId,
                coordinates : [],
                indices : []
            };

            mesh.EnumerateVertices ((vertex) => {
                bimMesh.coordinates.push (vertex.x, vertex.y, vertex.z);
            });
            mesh.EnumerateTriangleVertexIndices ((v0, v1, v2) => {
                bimMesh.indices.push (v0, v1, v2);
            });

            let bimElement = {
                mesh_id : meshId,
                type : 'Other',
                color : {
                    r : 200,
                    g : 200,
                    b : 200,
                    a : 255
                },
                vector : {
                    x : 0.0,
                    y : 0.0,
                    z : 0.0
                },
                rotation : {
                    qx: 0.0,
                    qy: 0.0,
                    qz: 0.0,
                    qw: 1.0
                },
                guid : GenerateGuid (),
                info : {}
            };

            let defaultColor = null;
            let hasOnlyOneColor = true;
            let faceColors = [];
            for (let i = 0; i < mesh.TriangleCount (); i++) {
                let triangle = mesh.GetTriangle (i);
                let material = exporterModel.GetMaterial (triangle.mat);
                let faceColor = {
                    r : material.color.r,
                    g : material.color.g,
                    b : material.color.b,
                    a : ColorComponentFromFloat (material.opacity),
                };
                faceColors.push (faceColor.r, faceColor.g, faceColor.b, faceColor.a);
                if (hasOnlyOneColor) {
                    if (defaultColor === null) {
                        defaultColor = faceColor;
                    } else {
                        if (defaultColor.r !== faceColor.r || defaultColor.g !== faceColor.g || defaultColor.b !== faceColor.b || defaultColor.a !== faceColor.a) {
                            hasOnlyOneColor = false;
                            defaultColor = null;
                        }
                    }
                }
            }

            if (hasOnlyOneColor) {
                bimElement.color = defaultColor;
            } else {
                bimElement.face_colors = faceColors;
            }

            bimElement.info['Name'] = mesh.GetName ();
            this.ExportProperties (mesh, bimElement.info);

            bimContent.meshes.push (bimMesh);
            bimContent.elements.push (bimElement);
            meshId += 1;
        });

        let bimFile = new ExportedFile ('model.bim');
        bimFile.SetTextContent (JSON.stringify (bimContent, null, 4));
        files.push (bimFile);
        onFinish ();
    }

    ExportProperties (element, targetObject)
    {
        for (let groupIndex = 0; groupIndex < element.PropertyGroupCount (); groupIndex++) {
            let group = element.GetPropertyGroup (groupIndex);
            for (let propertyIndex = 0; propertyIndex < group.PropertyCount (); propertyIndex++) {
                let property = group.GetProperty (propertyIndex);
                targetObject[property.name] = PropertyToString (property);
            }
        }
    }
}

class BinaryWriter
{
    constructor (byteLength, isLittleEndian)
    {
        this.arrayBuffer = new ArrayBuffer (byteLength);
        this.dataView = new DataView (this.arrayBuffer);
        this.isLittleEndian = isLittleEndian;
        this.position = 0;
    }

    GetPosition ()
    {
        return this.position;
    }

    SetPosition (position)
    {
        this.position = position;
    }

    End ()
    {
        return this.position >= this.arrayBuffer.byteLength;
    }

    GetBuffer ()
    {
        return this.arrayBuffer;
    }

    WriteArrayBuffer (arrayBuffer)
    {
        let bufferView = new Uint8Array (arrayBuffer);
        let thisBufferView = new Uint8Array (this.arrayBuffer);
        thisBufferView.set (bufferView, this.position);
        this.position += arrayBuffer.byteLength;
    }

    WriteBoolean8 (val)
    {
        this.dataView.setInt8 (this.position, val ? 1 : 0);
        this.position = this.position + 1;
    }

    WriteCharacter8 (val)
    {
        this.dataView.setInt8 (this.position, val);
        this.position = this.position + 1;
    }

    WriteUnsignedCharacter8 (val)
    {
        this.dataView.setUint8 (this.position, val);
        this.position = this.position + 1;
    }

    WriteInteger16 (val)
    {
        this.dataView.setInt16 (this.position, val, this.isLittleEndian);
        this.position = this.position + 2;
    }

    WriteUnsignedInteger16 (val)
    {
        this.dataView.setUint16 (this.position, val, this.isLittleEndian);
        this.position = this.position + 2;
    }

    WriteInteger32 (val)
    {
        this.dataView.setInt32 (this.position, val, this.isLittleEndian);
        this.position = this.position + 4;
    }

    WriteUnsignedInteger32 (val)
    {
        this.dataView.setUint32 (this.position, val, this.isLittleEndian);
        this.position = this.position + 4;
    }

    WriteFloat32 (val)
    {
        this.dataView.setFloat32 (this.position, val, this.isLittleEndian);
        this.position = this.position + 4;
    }

    WriteDouble64 (val)
    {
        this.dataView.setFloat64 (this.position, val, this.isLittleEndian);
        this.position = this.position + 8;
    }
}

class Coord4D
{
	constructor (x, y, z, w)
	{
		this.x = x;
		this.y = y;
		this.z = z;
        this.w = w;
	}

	Clone ()
	{
		return new Coord4D (this.x, this.y, this.z, this.w);
	}
}

class Quaternion
{
	constructor (x, y, z, w)
	{
		this.x = x;
		this.y = y;
		this.z = z;
        this.w = w;
	}
}

function QuaternionIsEqual (a, b)
{
	return IsEqual (a.x, b.x) && IsEqual (a.y, b.y) && IsEqual (a.z, b.z) && IsEqual (a.w, b.w);
}

function ArrayToQuaternion (arr)
{
	return new Quaternion (arr[0], arr[1], arr[2], arr[3]);
}

function QuaternionFromAxisAngle (axis, angle)
{
	const a = angle / 2.0;
	const s = Math.sin (a);

	return new Quaternion (
		axis.x * s,
		axis.y * s,
		axis.z * s,
		Math.cos (a)
	);
}

function QuaternionFromXYZ (x, y, z, mode) {

	const c1 = Math.cos (x / 2.0);
	const c2 = Math.cos (y / 2.0);
	const c3 = Math.cos (z / 2.0);

	const s1 = Math.sin (x / 2.0);
	const s2 = Math.sin (y / 2.0);
	const s3 = Math.sin (z / 2.0);

	let quaternion = new Quaternion (0.0, 0.0, 0.0, 1.0);
	if (mode === 'XYZ') {
		quaternion.x = s1 * c2 * c3 + c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 - s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 + s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 - s1 * s2 * s3;
	} else if (mode === 'YXZ') {
		quaternion.x = s1 * c2 * c3 + c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 - s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 - s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 + s1 * s2 * s3;
	} else if (mode === 'ZXY') {
		quaternion.x = s1 * c2 * c3 - c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 + s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 + s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 - s1 * s2 * s3;
	} else if (mode === 'ZYX') {
		quaternion.x = s1 * c2 * c3 - c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 + s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 - s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 + s1 * s2 * s3;
	} else if (mode === 'YZX') {
		quaternion.x = s1 * c2 * c3 + c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 + s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 - s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 - s1 * s2 * s3;
	} else if (mode === 'XZY') {
		quaternion.x = s1 * c2 * c3 - c1 * s2 * s3;
		quaternion.y = c1 * s2 * c3 - s1 * c2 * s3;
		quaternion.z = c1 * c2 * s3 + s1 * s2 * c3;
		quaternion.w = c1 * c2 * c3 + s1 * s2 * s3;
	} else {
		return null;
	}

	return quaternion;
}

class Matrix
{
    constructor (matrix)
    {
        this.matrix = null;
        if (matrix !== undefined && matrix !== null) {
            this.matrix = matrix;
        }
    }

    IsValid ()
    {
        return this.matrix !== null;
    }

    Set (matrix)
    {
        this.matrix = matrix;
        return this;
    }

    Get ()
    {
        return this.matrix;
    }

    Clone ()
    {
        let result = [
            this.matrix[0], this.matrix[1], this.matrix[2], this.matrix[3],
            this.matrix[4], this.matrix[5], this.matrix[6], this.matrix[7],
            this.matrix[8], this.matrix[9], this.matrix[10], this.matrix[11],
            this.matrix[12], this.matrix[13], this.matrix[14], this.matrix[15]
        ];
        return new Matrix (result);
    }

    CreateIdentity ()
    {
        this.matrix = [
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0
        ];
        return this;
    }

    IsIdentity ()
    {
        let identity = new Matrix ().CreateIdentity ().Get ();
        for (let i = 0; i < 16; i++) {
            if (!IsEqual (this.matrix[i], identity[i])) {
                return false;
            }
        }
        return true;
    }

    CreateTranslation (x, y, z)
    {
        this.matrix = [
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            x, y, z, 1.0
        ];
        return this;
    }

    CreateRotation (x, y, z, w)
    {
        let x2 = x + x;
        let y2 = y + y;
        let z2 = z + z;
        let xx = x * x2;
        let xy = x * y2;
        let xz = x * z2;
        let yy = y * y2;
        let yz = y * z2;
        let zz = z * z2;
        let wx = w * x2;
        let wy = w * y2;
        let wz = w * z2;
        this.matrix = [
            1.0 - (yy + zz), xy + wz, xz - wy, 0.0,
            xy - wz, 1.0 - (xx + zz), yz + wx, 0.0,
            xz + wy, yz - wx, 1.0 - (xx + yy), 0.0,
            0.0, 0.0, 0.0, 1.0
        ];
        return this;
    }

    CreateRotationAxisAngle (axis, angle)
    {
        let quaternion = QuaternionFromAxisAngle (axis, angle);
        return this.CreateRotation (quaternion.x, quaternion.y, quaternion.z, quaternion.w);
    }

    CreateScale (x, y, z)
    {
        this.matrix = [
            x, 0.0, 0.0, 0.0,
            0.0, y, 0.0, 0.0,
            0.0, 0.0, z, 0.0,
            0.0, 0.0, 0.0, 1.0
        ];
        return this;
    }

    ComposeTRS (translation, rotation, scale)
    {
        let tx = translation.x;
        let ty = translation.y;
        let tz = translation.z;
        let qx = rotation.x;
        let qy = rotation.y;
        let qz = rotation.z;
        let qw = rotation.w;
        let sx = scale.x;
        let sy = scale.y;
        let sz = scale.z;

        let x2 = qx + qx;
        let y2 = qy + qy;
        let z2 = qz + qz;
        let xx = qx * x2;
        let xy = qx * y2;
        let xz = qx * z2;
        let yy = qy * y2;
        let yz = qy * z2;
        let zz = qz * z2;
        let wx = qw * x2;
        let wy = qw * y2;
        let wz = qw * z2;

        this.matrix = [
            (1.0 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0.0,
            (xy - wz) * sy, (1.0 - (xx + zz)) * sy, (yz + wx) * sy, 0.0,
            (xz + wy) * sz, (yz - wx) * sz, (1.0 - (xx + yy)) * sz, 0.0,
            tx, ty, tz, 1.0
        ];
        return this;
    }

    DecomposeTRS ()
    {
        let translation = new Coord3D (
            this.matrix[12],
            this.matrix[13],
            this.matrix[14]
        );

        let sx = VectorLength3D (this.matrix[0], this.matrix[1], this.matrix[2]);
        let sy = VectorLength3D (this.matrix[4], this.matrix[5], this.matrix[6]);
        let sz = VectorLength3D (this.matrix[8], this.matrix[9], this.matrix[10]);
        let determinant = this.Determinant ();
        if (IsNegative (determinant)) {
            sx *= -1.0;
        }
        let scale = new Coord3D (sx, sy, sz);

        let m00 = this.matrix[0] / sx;
        let m01 = this.matrix[4] / sy;
        let m02 = this.matrix[8] / sz;
        let m10 = this.matrix[1] / sx;
        let m11 = this.matrix[5] / sy;
        let m12 = this.matrix[9] / sz;
        let m20 = this.matrix[2] / sx;
        let m21 = this.matrix[6] / sy;
        let m22 = this.matrix[10] / sz;

        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        let rotation = null;
        let tr = m00 + m11 + m22;
        if (tr > 0.0) {
            let s = Math.sqrt (tr + 1.0) * 2.0;
            rotation = new Quaternion (
                (m21 - m12) / s,
                (m02 - m20) / s,
                (m10 - m01) / s,
                0.25 * s
            );
        } else if ((m00 > m11) && (m00 > m22)) {
            let s = Math.sqrt (1.0 + m00 - m11 - m22) * 2.0;
            rotation = new Quaternion (
                0.25 * s,
                (m01 + m10) / s,
                (m02 + m20) / s,
                (m21 - m12) / s
            );
        } else if (m11 > m22) {
            let s = Math.sqrt (1.0 + m11 - m00 - m22) * 2.0;
            rotation = new Quaternion (
                (m01 + m10) / s,
                0.25 * s,
                (m12 + m21) / s,
                (m02 - m20) / s
            );
        } else {
            let s = Math.sqrt (1.0 + m22 - m00 - m11) * 2.0;
            rotation = new Quaternion (
                (m02 + m20) / s,
                (m12 + m21) / s,
                0.25 * s,
                (m10 - m01) / s
            );
        }

        return {
            translation : translation,
            rotation : rotation,
            scale : scale
        };
    }

    Determinant ()
    {
        let a00 = this.matrix[0];
        let a01 = this.matrix[1];
        let a02 = this.matrix[2];
        let a03 = this.matrix[3];
        let a10 = this.matrix[4];
        let a11 = this.matrix[5];
        let a12 = this.matrix[6];
        let a13 = this.matrix[7];
        let a20 = this.matrix[8];
        let a21 = this.matrix[9];
        let a22 = this.matrix[10];
        let a23 = this.matrix[11];
        let a30 = this.matrix[12];
        let a31 = this.matrix[13];
        let a32 = this.matrix[14];
        let a33 = this.matrix[15];

        let b00 = a00 * a11 - a01 * a10;
        let b01 = a00 * a12 - a02 * a10;
        let b02 = a00 * a13 - a03 * a10;
        let b03 = a01 * a12 - a02 * a11;
        let b04 = a01 * a13 - a03 * a11;
        let b05 = a02 * a13 - a03 * a12;
        let b06 = a20 * a31 - a21 * a30;
        let b07 = a20 * a32 - a22 * a30;
        let b08 = a20 * a33 - a23 * a30;
        let b09 = a21 * a32 - a22 * a31;
        let b10 = a21 * a33 - a23 * a31;
        let b11 = a22 * a33 - a23 * a32;

        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        return determinant;
    }

    Invert ()
    {
        let a00 = this.matrix[0];
        let a01 = this.matrix[1];
        let a02 = this.matrix[2];
        let a03 = this.matrix[3];
        let a10 = this.matrix[4];
        let a11 = this.matrix[5];
        let a12 = this.matrix[6];
        let a13 = this.matrix[7];
        let a20 = this.matrix[8];
        let a21 = this.matrix[9];
        let a22 = this.matrix[10];
        let a23 = this.matrix[11];
        let a30 = this.matrix[12];
        let a31 = this.matrix[13];
        let a32 = this.matrix[14];
        let a33 = this.matrix[15];

        let b00 = a00 * a11 - a01 * a10;
        let b01 = a00 * a12 - a02 * a10;
        let b02 = a00 * a13 - a03 * a10;
        let b03 = a01 * a12 - a02 * a11;
        let b04 = a01 * a13 - a03 * a11;
        let b05 = a02 * a13 - a03 * a12;
        let b06 = a20 * a31 - a21 * a30;
        let b07 = a20 * a32 - a22 * a30;
        let b08 = a20 * a33 - a23 * a30;
        let b09 = a21 * a32 - a22 * a31;
        let b10 = a21 * a33 - a23 * a31;
        let b11 = a22 * a33 - a23 * a32;

        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (IsEqual (determinant, 0.0)) {
            return null;
        }

        let result = [
            (a11 * b11 - a12 * b10 + a13 * b09) / determinant,
            (a02 * b10 - a01 * b11 - a03 * b09) / determinant,
            (a31 * b05 - a32 * b04 + a33 * b03) / determinant,
            (a22 * b04 - a21 * b05 - a23 * b03) / determinant,
            (a12 * b08 - a10 * b11 - a13 * b07) / determinant,
            (a00 * b11 - a02 * b08 + a03 * b07) / determinant,
            (a32 * b02 - a30 * b05 - a33 * b01) / determinant,
            (a20 * b05 - a22 * b02 + a23 * b01) / determinant,
            (a10 * b10 - a11 * b08 + a13 * b06) / determinant,
            (a01 * b08 - a00 * b10 - a03 * b06) / determinant,
            (a30 * b04 - a31 * b02 + a33 * b00) / determinant,
            (a21 * b02 - a20 * b04 - a23 * b00) / determinant,
            (a11 * b07 - a10 * b09 - a12 * b06) / determinant,
            (a00 * b09 - a01 * b07 + a02 * b06) / determinant,
            (a31 * b01 - a30 * b03 - a32 * b00) / determinant,
            (a20 * b03 - a21 * b01 + a22 * b00) / determinant
        ];

        return new Matrix (result);
    }

    Transpose ()
    {
        let result = [
            this.matrix[0], this.matrix[4], this.matrix[8], this.matrix[12],
            this.matrix[1], this.matrix[5], this.matrix[9], this.matrix[13],
            this.matrix[2], this.matrix[6], this.matrix[10], this.matrix[14],
            this.matrix[3], this.matrix[7], this.matrix[11], this.matrix[15]
        ];
        return new Matrix (result);
    }

    InvertTranspose ()
    {
        let result = this.Invert ();
        if (result === null) {
            return null;
        }
        return result.Transpose ();
    }

    MultiplyVector (vector)
    {
        let a00 = vector.x;
        let a01 = vector.y;
        let a02 = vector.z;
        let a03 = vector.w;

        let b00 = this.matrix[0];
        let b01 = this.matrix[1];
        let b02 = this.matrix[2];
        let b03 = this.matrix[3];
        let b10 = this.matrix[4];
        let b11 = this.matrix[5];
        let b12 = this.matrix[6];
        let b13 = this.matrix[7];
        let b20 = this.matrix[8];
        let b21 = this.matrix[9];
        let b22 = this.matrix[10];
        let b23 = this.matrix[11];
        let b30 = this.matrix[12];
        let b31 = this.matrix[13];
        let b32 = this.matrix[14];
        let b33 = this.matrix[15];

        let result = new Coord4D (
            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,
            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,
            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,
            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33
        );
        return result;
    }

    MultiplyMatrix (matrix)
    {
        let a00 = this.matrix[0];
        let a01 = this.matrix[1];
        let a02 = this.matrix[2];
        let a03 = this.matrix[3];
        let a10 = this.matrix[4];
        let a11 = this.matrix[5];
        let a12 = this.matrix[6];
        let a13 = this.matrix[7];
        let a20 = this.matrix[8];
        let a21 = this.matrix[9];
        let a22 = this.matrix[10];
        let a23 = this.matrix[11];
        let a30 = this.matrix[12];
        let a31 = this.matrix[13];
        let a32 = this.matrix[14];
        let a33 = this.matrix[15];

        let b00 = matrix.matrix[0];
        let b01 = matrix.matrix[1];
        let b02 = matrix.matrix[2];
        let b03 = matrix.matrix[3];
        let b10 = matrix.matrix[4];
        let b11 = matrix.matrix[5];
        let b12 = matrix.matrix[6];
        let b13 = matrix.matrix[7];
        let b20 = matrix.matrix[8];
        let b21 = matrix.matrix[9];
        let b22 = matrix.matrix[10];
        let b23 = matrix.matrix[11];
        let b30 = matrix.matrix[12];
        let b31 = matrix.matrix[13];
        let b32 = matrix.matrix[14];
        let b33 = matrix.matrix[15];

        let result = [
            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,
            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,
            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,
            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,
            a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,
            a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,
            a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,
            a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,
            a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,
            a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,
            a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,
            a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,
            a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,
            a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,
            a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,
            a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33
        ];

        return new Matrix (result);
    }
}

function MatrixIsEqual (a, b)
{
    const aMatrix = a.Get ();
    const bMatrix = b.Get ();
	for (let i = 0; i < 16; i++) {
        if (!IsEqual (aMatrix[i], bMatrix[i])) {
            return false;
        }
    }
    return true;
}

class Transformation
{
    constructor (matrix)
    {
        if (matrix !== undefined && matrix !== null) {
            this.matrix = matrix;
        } else {
            this.matrix = new Matrix ();
            this.matrix.CreateIdentity ();
        }
    }

    SetMatrix (matrix)
    {
        this.matrix = matrix;
        return this;
    }

    GetMatrix ()
    {
        return this.matrix;
    }

    IsIdentity ()
    {
        return this.matrix.IsIdentity ();
    }

    AppendMatrix (matrix)
    {
        this.matrix = this.matrix.MultiplyMatrix (matrix);
        return this;
    }

    Append (transformation)
    {
        this.AppendMatrix (transformation.GetMatrix ());
        return this;
    }

    TransformCoord3D (coord)
    {
        let coord4D = new Coord4D (coord.x, coord.y, coord.z, 1.0);
        let resultCoord4D = this.matrix.MultiplyVector (coord4D);
        let result = new Coord3D (resultCoord4D.x, resultCoord4D.y, resultCoord4D.z);
        return result;
    }

    Clone ()
    {
        const clonedMatrix = this.matrix.Clone ();
        return new Transformation (clonedMatrix);
    }
}

function TransformationIsEqual (a, b)
{
    return MatrixIsEqual (a.GetMatrix (), b.GetMatrix ());
}

const MeshType =
{
    Empty : 0,
    TriangleMesh : 1
};

function GetMeshType (mesh)
{
    if (mesh.TriangleCount () > 0) {
        return MeshType.TriangleMesh;
    }
    return MeshType.Empty;
}

function CalculateTriangleNormal (v0, v1, v2)
{
    let v = SubCoord3D (v1, v0);
    let w = SubCoord3D (v2, v0);
    let normal = CrossVector3D (v, w);
    normal.Normalize ();
    return normal;
}

function TransformMesh (mesh, transformation)
{
    if (transformation.IsIdentity ()) {
        return;
    }

    for (let i = 0; i < mesh.VertexCount (); i++) {
        let vertex = mesh.GetVertex (i);
        let transformed = transformation.TransformCoord3D (vertex);
        vertex.x = transformed.x;
        vertex.y = transformed.y;
        vertex.z = transformed.z;
    }

    if (mesh.NormalCount () > 0) {
        let normalMatrix = transformation.GetMatrix ().InvertTranspose ();
        if (normalMatrix !== null) {
            let normalTransformation = new Transformation (normalMatrix);
            for (let i = 0; i < mesh.NormalCount (); i++) {
                let normal = mesh.GetNormal (i);
                let transformed = normalTransformation.TransformCoord3D (normal);
                normal.x = transformed.x;
                normal.y = transformed.y;
                normal.z = transformed.z;
            }
        }
    }
}

function FlipMeshTrianglesOrientation (mesh)
{
    for (let i = 0; i < mesh.TriangleCount (); i++) {
        let triangle = mesh.GetTriangle (i);
        let tmp = triangle.v1;
        triangle.v1 = triangle.v2;
        triangle.v2 = tmp;
    }
}

class Object3D
{
    constructor ()
    {

    }

    VertexCount ()
    {
        return 0;
    }

    VertexColorCount ()
    {
        return 0;
    }

    NormalCount ()
    {
        return 0;
    }

    TextureUVCount ()
    {
        return 0;
    }

    TriangleCount ()
    {
        return 0;
    }

    EnumerateVertices (onVertex)
    {

    }

    EnumerateTriangleVertexIndices (onTriangleVertexIndices)
    {

    }

    EnumerateTriangleVertices (onTriangleVertices)
    {

    }
}

class ModelObject3D extends Object3D
{
    constructor ()
    {
        super ();
        this.name = '';
        this.propertyGroups = [];
    }

    GetName ()
    {
        return this.name;
    }

    SetName (name)
    {
        this.name = name;
    }

    PropertyGroupCount ()
    {
        return this.propertyGroups.length;
    }

    AddPropertyGroup (propertyGroup)
    {
        this.propertyGroups.push (propertyGroup);
        return this.propertyGroups.length - 1;
    }

    GetPropertyGroup (index)
    {
        return this.propertyGroups[index];
    }

    CloneProperties (target)
    {
        for (let propertyGroup of this.propertyGroups) {
            target.AddPropertyGroup (propertyGroup.Clone ());
        }
    }
}

class MeshInstanceId
{
    constructor (nodeId, meshIndex)
    {
        this.nodeId = nodeId;
        this.meshIndex = meshIndex;
    }

    IsEqual (rhs)
    {
        return this.nodeId === rhs.nodeId && this.meshIndex === rhs.meshIndex;
    }

    GetKey ()
    {
        return this.nodeId.toString () + ':' + this.meshIndex.toString ();
    }
}

class MeshInstance extends ModelObject3D
{
    constructor (id, node, mesh)
    {
        super ();
        this.id = id;
        this.node = node;
        this.mesh = mesh;
    }

    GetId ()
    {
        return this.id;
    }

    GetTransformation ()
    {
        return this.node.GetWorldTransformation ();
    }

    GetMesh ()
    {
        return this.mesh;
    }

    VertexCount ()
    {
        return this.mesh.VertexCount ();
    }

    VertexColorCount ()
    {
        return this.mesh.VertexColorCount ();
    }

    NormalCount ()
    {
        return this.mesh.NormalCount ();
    }

    TextureUVCount ()
    {
        return this.mesh.TextureUVCount ();
    }

    TriangleCount ()
    {
        return this.mesh.TriangleCount ();
    }

    EnumerateVertices (onVertex)
    {
        let transformation = this.node.GetWorldTransformation ();
        if (transformation.IsIdentity ()) {
            this.mesh.EnumerateVertices (onVertex);
        } else {
            this.mesh.EnumerateVertices ((vertex) => {
                const transformed = transformation.TransformCoord3D (vertex);
                onVertex (transformed);
            });
        }
    }

    EnumerateTriangleVertexIndices (onTriangleVertexIndices)
    {
        this.mesh.EnumerateTriangleVertexIndices (onTriangleVertexIndices);
    }

    EnumerateTriangleVertices (onTriangleVertices)
    {
        let transformation = this.node.GetWorldTransformation ();
        if (transformation.IsIdentity ()) {
            this.mesh.EnumerateTriangleVertices (onTriangleVertices);
        } else {
            this.mesh.EnumerateTriangleVertices ((v0, v1, v2) => {
                const v0Transformed = transformation.TransformCoord3D (v0);
                const v1Transformed = transformation.TransformCoord3D (v1);
                const v2Transformed = transformation.TransformCoord3D (v2);
                onTriangleVertices (v0Transformed, v1Transformed, v2Transformed);
            });
        }
    }

    PropertyGroupCount ()
    {
        return this.mesh.PropertyGroupCount ();
    }

    AddPropertyGroup (propertyGroup)
    {
        return this.mesh.AddPropertyGroup (propertyGroup);
    }

    GetPropertyGroup (index)
    {
        return this.mesh.GetPropertyGroup (index);
    }

    GetTransformedMesh ()
    {
        let transformation = this.node.GetWorldTransformation ();
        let transformed = this.mesh.Clone ();
        TransformMesh (transformed, transformation);
        return transformed;
    }
}

const GltfComponentType$1 =
{
    UNSIGNED_INT : 5125,
    FLOAT : 5126
};

const GltfBufferType =
{
    ARRAY_BUFFER : 34962,
    ELEMENT_ARRAY_BUFFER : 34963
};

class ExporterGltf extends ExporterBase
{
	constructor ()
	{
		super ();
        this.components = {
            index : {
                type : GltfComponentType$1.UNSIGNED_INT,
                size : 4
            },
            number : {
                type : GltfComponentType$1.FLOAT,
                size : 4
            }
        };
	}

    CanExport (format, extension)
    {
        return (format === FileFormat.Text && extension === 'gltf') || (format === FileFormat.Binary && extension === 'glb');
    }

	ExportContent (exporterModel, format, files, onFinish)
	{
        if (format === FileFormat.Text) {
            this.ExportAsciiContent (exporterModel, files);
        } else if (format === FileFormat.Binary) {
            this.ExportBinaryContent (exporterModel, files);
        }
        onFinish ();
	}

	ExportAsciiContent (exporterModel, files)
	{
        let gltfFile = new ExportedFile ('model.gltf');
        let binFile = new ExportedFile ('model.bin');
        files.push (gltfFile);
        files.push (binFile);

        let meshDataArr = this.GetMeshData (exporterModel);
        let mainBuffer = this.GetMainBuffer (meshDataArr);
        let mainJson = this.GetMainJson (exporterModel, meshDataArr);
        mainJson.buffers.push ({
            uri : binFile.GetName (),
            byteLength : mainBuffer.byteLength
        });

        let fileNameToIndex = new Map ();
        this.ExportMaterials (exporterModel, mainJson, (texture) => {
            let fileName = GetFileName (texture.name);
            if (fileNameToIndex.has (fileName)) {
                return fileNameToIndex.get (fileName);
            } else {
                let textureFile = new ExportedFile (fileName);
                textureFile.SetBufferContent (texture.buffer);
                files.push (textureFile);

                let textureIndex = mainJson.textures.length;
                fileNameToIndex.set (fileName, textureIndex);

                mainJson.images.push ({
                    uri : fileName
                });

                mainJson.textures.push ({
                    source : textureIndex
                });

                return textureIndex;
            }
        });

        gltfFile.SetTextContent (JSON.stringify (mainJson, null, 4));
        binFile.SetBufferContent (mainBuffer);
    }

    ExportBinaryContent (exporterModel, files)
    {
        function AlignToBoundary (size)
        {
            let remainder = size % 4;
            if (remainder === 0) {
                return size;
            }
            return size + (4 - remainder);
        }

        function WriteCharacters (writer, char, count)
        {
            for (let i = 0; i < count; i++) {
                writer.WriteUnsignedCharacter8 (char);
            }
        }

        let glbFile = new ExportedFile ('model.glb');
        files.push (glbFile);

        let meshDataArr = this.GetMeshData (exporterModel);
        let mainBuffer = this.GetMainBuffer (meshDataArr);
        let mainJson = this.GetMainJson (exporterModel, meshDataArr);

        let textureBuffers = [];
        let textureOffset = mainBuffer.byteLength;

        let fileNameToIndex = new Map ();
        this.ExportMaterials (exporterModel, mainJson, (texture) => {
            let fileName = GetFileName (texture.name);
            let extension = GetFileExtension (texture.name);
            if (fileNameToIndex.has (fileName)) {
                return fileNameToIndex.get (fileName);
            } else {
                let bufferViewIndex = mainJson.bufferViews.length;
                let textureIndex = mainJson.textures.length;
                fileNameToIndex.set (fileName, textureIndex);
                let textureBuffer = texture.buffer;
                textureBuffers.push (textureBuffer);
                mainJson.bufferViews.push ({
                    buffer : 0,
                    byteOffset : textureOffset,
                    byteLength : textureBuffer.byteLength
                });
                textureOffset += textureBuffer.byteLength;
                mainJson.images.push ({
                    bufferView : bufferViewIndex,
                    mimeType : 'image/' + extension
                });
                mainJson.textures.push ({
                    source : textureIndex
                });

                return textureIndex;
            }
        });

        let mainBinaryBufferLength = mainBuffer.byteLength;
        for (let i = 0; i < textureBuffers.length; i++) {
            let textureBuffer = textureBuffers[i];
            mainBinaryBufferLength += textureBuffer.byteLength;
        }
        let mainBinaryBufferAlignedLength = AlignToBoundary (mainBinaryBufferLength);
        mainJson.buffers.push ({
            byteLength : mainBinaryBufferAlignedLength
        });

        let mainJsonString = JSON.stringify (mainJson);
        let mainJsonBuffer = Utf8StringToArrayBuffer (mainJsonString);
        let mainJsonBufferLength = mainJsonBuffer.byteLength;
        let mainJsonBufferAlignedLength = AlignToBoundary (mainJsonBufferLength);

        let glbSize = 12 + 8 + mainJsonBufferAlignedLength + 8 + mainBinaryBufferAlignedLength;
        let glbWriter = new BinaryWriter (glbSize, true);

        glbWriter.WriteUnsignedInteger32 (0x46546C67);
        glbWriter.WriteUnsignedInteger32 (2);
        glbWriter.WriteUnsignedInteger32 (glbSize);

        glbWriter.WriteUnsignedInteger32 (mainJsonBufferAlignedLength);
        glbWriter.WriteUnsignedInteger32 (0x4E4F534A);
        glbWriter.WriteArrayBuffer (mainJsonBuffer);
        WriteCharacters (glbWriter, 32, mainJsonBufferAlignedLength - mainJsonBufferLength);

        glbWriter.WriteUnsignedInteger32 (mainBinaryBufferAlignedLength);
        glbWriter.WriteUnsignedInteger32 (0x004E4942);
        glbWriter.WriteArrayBuffer (mainBuffer);

        for (let i = 0; i < textureBuffers.length; i++) {
            let textureBuffer = textureBuffers[i];
            glbWriter.WriteArrayBuffer (textureBuffer);
        }
        WriteCharacters (glbWriter, 0, mainBinaryBufferAlignedLength - mainBinaryBufferLength);

        glbFile.SetBufferContent (glbWriter.GetBuffer ());
    }

    GetMeshData (exporterModel)
    {
        let meshDataArr = [];

        exporterModel.EnumerateMeshes ((mesh) => {
            let buffer = ConvertMeshToMeshBuffer (mesh);
            meshDataArr.push ({
                name : mesh.GetName (),
                buffer : buffer,
                offsets : [],
                sizes : []
            });
        });

        return meshDataArr;
    }

    GetMainBuffer (meshDataArr)
    {
        let mainBufferSize = 0;
        for (let meshData of meshDataArr) {
            mainBufferSize += meshData.buffer.GetByteLength (this.components.index.size, this.components.number.size);
        }

        let writer = new BinaryWriter (mainBufferSize, true);
        for (let meshData of meshDataArr) {
            for (let primitiveIndex = 0; primitiveIndex < meshData.buffer.PrimitiveCount (); primitiveIndex++) {
                let primitive = meshData.buffer.GetPrimitive (primitiveIndex);
                let offset = writer.GetPosition ();
                for (let i = 0; i < primitive.indices.length; i++) {
                    writer.WriteUnsignedInteger32 (primitive.indices[i]);
                }
                for (let i = 0; i < primitive.vertices.length; i++) {
                    writer.WriteFloat32 (primitive.vertices[i]);
                }
                for (let i = 0; i < primitive.colors.length; i++) {
                    writer.WriteFloat32 (SRGBToLinear (primitive.colors[i]));
                }
                for (let i = 0; i < primitive.normals.length; i++) {
                    writer.WriteFloat32 (primitive.normals[i]);
                }
                for (let i = 0; i < primitive.uvs.length; i++) {
                    let texCoord = primitive.uvs[i];
                    if (i % 2 === 1) {
                        texCoord *= -1.0;
                    }
                    writer.WriteFloat32 (texCoord);
                }
                meshData.offsets.push (offset);
                meshData.sizes.push (writer.GetPosition () - offset);
            }
        }

        return writer.GetBuffer ();
    }

    GetMainJson (exporterModel, meshDataArr)
    {
        class BufferViewCreator
        {
            constructor (mainJson, byteOffset)
            {
                this.mainJson = mainJson;
                this.byteOffset = byteOffset;
            }

            AddBufferView (byteLength, target)
            {
                let bufferView = {
                    buffer : 0,
                    byteOffset : this.byteOffset,
                    byteLength : byteLength,
                    target : target
                };
                this.mainJson.bufferViews.push (bufferView);
                this.byteOffset += byteLength;
                return this.mainJson.bufferViews.length - 1;
            }
        }

        function NodeHasVisibleChildren (model, node)
        {
            for (let meshIndex of node.GetMeshIndices ()) {
                let meshInstanceId = new MeshInstanceId (node.GetId (), meshIndex);
                if (model.IsMeshInstanceVisible (meshInstanceId)) {
                    return true;
                }
            }
            for (let childNode of node.GetChildNodes ()) {
                if (NodeHasVisibleChildren (model, childNode)) {
                    return true;
                }
            }
            return false;
        }

        function AddNode (model, jsonParent, jsonNodes, node)
        {
            if (node.IsMeshNode ()) {
                for (let meshIndex of node.GetMeshIndices ()) {
                    AddMeshNode (model, jsonParent, jsonNodes, node, meshIndex, true);
                }
            } else if (NodeHasVisibleChildren (model, node)) {
                let nodeJson = {};

                let nodeName = node.GetName ();
                if (nodeName.length > 0) {
                    nodeJson.name = nodeName;
                }

                let transformation = node.GetTransformation ();
                if (!transformation.IsIdentity ()) {
                    nodeJson.matrix = node.GetTransformation ().GetMatrix ().Get ();
                }

                jsonNodes.push (nodeJson);
                jsonParent.push (jsonNodes.length - 1);

                nodeJson.children = [];
                AddChildNodes (model, nodeJson.children, jsonNodes, node);
            }
        }

        function AddMeshNode (model, jsonParent, jsonNodes, node, meshIndex, isStandaloneNode)
        {
            let meshInstanceId = new MeshInstanceId (node.GetId (), meshIndex);
            if (!model.IsMeshInstanceVisible (meshInstanceId)) {
                return;
            }

            let nodeJson = {
                mesh : model.MapMeshIndex (meshIndex)
            };
            if (isStandaloneNode) {
                let transformation = node.GetTransformation ();
                if (!transformation.IsIdentity ()) {
                    nodeJson.matrix = node.GetTransformation ().GetMatrix ().Get ();
                }
            }

            jsonNodes.push (nodeJson);
            jsonParent.push (jsonNodes.length - 1);
        }

        function AddChildNodes (model, jsonParent, jsonNodes, node)
        {
            for (let childNode of node.GetChildNodes ()) {
                AddNode (model, jsonParent, jsonNodes, childNode);
            }
            for (let meshIndex of node.GetMeshIndices ()) {
                AddMeshNode (model, jsonParent, jsonNodes, node, meshIndex, false);
            }
        }

        let mainJson = {
            asset : {
                generator : 'https://3dviewer.net',
                version : '2.0'
            },
            scene : 0,
            scenes : [
                {
                    nodes : []
                }
            ],
            nodes : [],
            materials : [],
            meshes : [],
            buffers : [],
            bufferViews : [],
            accessors : []
        };

        let rootNode = exporterModel.GetModel ().GetRootNode ();
        AddChildNodes (exporterModel, mainJson.scenes[0].nodes, mainJson.nodes, rootNode);

        for (let meshData of meshDataArr) {
            let jsonMesh = {
                name : this.GetExportedMeshName (meshData.name),
                primitives : []
            };

            let primitives = meshData.buffer.primitives;
            for (let primitiveIndex = 0; primitiveIndex < primitives.length; primitiveIndex++) {
                let primitive = primitives[primitiveIndex];

                let bufferViewCreator = new BufferViewCreator (mainJson, meshData.offsets[primitiveIndex]);
                let indicesBufferView = bufferViewCreator.AddBufferView (primitive.indices.length * this.components.index.size, GltfBufferType.ELEMENT_ARRAY_BUFFER);
                let verticesBufferView = bufferViewCreator.AddBufferView (primitive.vertices.length * this.components.number.size, GltfBufferType.ARRAY_BUFFER);
                let colorsBufferView = null;
                if (primitive.colors.length > 0) {
                    colorsBufferView = bufferViewCreator.AddBufferView (primitive.colors.length * this.components.number.size, GltfBufferType.ARRAY_BUFFER);
                }
                let normalsBufferView = bufferViewCreator.AddBufferView (primitive.normals.length * this.components.number.size, GltfBufferType.ARRAY_BUFFER);
                let uvsBufferView = null;
                if (primitive.uvs.length > 0) {
                    uvsBufferView = bufferViewCreator.AddBufferView (primitive.uvs.length * this.components.number.size, GltfBufferType.ARRAY_BUFFER);
                }

                let jsonPrimitive = {
                    attributes : {},
                    mode : 4,
                    material : primitive.material
                };

                let bounds = primitive.GetBounds ();

                mainJson.accessors.push ({
                    bufferView : indicesBufferView,
                    byteOffset : 0,
                    componentType : this.components.index.type,
                    count : primitive.indices.length,
                    type : 'SCALAR'
                });
                jsonPrimitive.indices = mainJson.accessors.length - 1;

                mainJson.accessors.push ({
                    bufferView : verticesBufferView,
                    byteOffset : 0,
                    componentType : this.components.number.type,
                    count : primitive.vertices.length / 3,
                    min : bounds.min,
                    max : bounds.max,
                    type : 'VEC3'
                });
                jsonPrimitive.attributes.POSITION = mainJson.accessors.length - 1;

                if (colorsBufferView !== null) {
                    mainJson.accessors.push ({
                        bufferView : colorsBufferView,
                        byteOffset : 0,
                        componentType : this.components.number.type,
                        count : primitive.colors.length / 3,
                        type : 'VEC3'
                    });
                    jsonPrimitive.attributes.COLOR_0 = mainJson.accessors.length - 1;
                }

                mainJson.accessors.push ({
                    bufferView : normalsBufferView,
                    byteOffset : 0,
                    componentType : this.components.number.type,
                    count : primitive.normals.length / 3,
                    type : 'VEC3'
                });
                jsonPrimitive.attributes.NORMAL = mainJson.accessors.length - 1;

                if (uvsBufferView !== null) {
                    mainJson.accessors.push ({
                        bufferView : uvsBufferView,
                        byteOffset : 0,
                        componentType : this.components.number.type,
                        count : primitive.uvs.length / 2,
                        type : 'VEC2'
                    });
                    jsonPrimitive.attributes.TEXCOORD_0 = mainJson.accessors.length - 1;
                }

                jsonMesh.primitives.push (jsonPrimitive);
            }

            mainJson.meshes.push (jsonMesh);
        }

        return mainJson;
    }

    ExportMaterials (exporterModel, mainJson, addTexture)
    {
        function ExportMaterial (obj, mainJson, material, addTexture)
        {
            function ColorToRGBA (color, opacity)
            {
                return [
                    SRGBToLinear (color.r / 255.0),
                    SRGBToLinear (color.g / 255.0),
                    SRGBToLinear (color.b / 255.0),
                    opacity
                ];
            }

            function ColorToRGB (color)
            {
                return [
                    SRGBToLinear (color.r / 255.0),
                    SRGBToLinear (color.g / 255.0),
                    SRGBToLinear (color.b / 255.0)
                ];
            }

            function GetTextureParams (mainJson, texture, addTexture)
            {
                if (texture === null || !texture.IsValid ()) {
                    return null;
                }

                if (mainJson.images === undefined) {
                    mainJson.images = [];
                }
                if (mainJson.textures === undefined) {
                    mainJson.textures = [];
                }

                let textureIndex = addTexture (texture);
                let textureParams = {
                    index : textureIndex
                };

                if (texture.HasTransformation ()) {
                    let extensionName = 'KHR_texture_transform';
                    if (mainJson.extensionsUsed === undefined) {
                        mainJson.extensionsUsed = [];
                    }
                    if (mainJson.extensionsUsed.indexOf (extensionName) === -1) {
                        mainJson.extensionsUsed.push (extensionName);
                    }
                    textureParams.extensions = {
                        KHR_texture_transform : {
                            offset : [texture.offset.x, -texture.offset.y],
                            scale : [texture.scale.x, texture.scale.y],
                            rotation : -texture.rotation
                        }
                    };
                }

                return textureParams;
            }

            let jsonMaterial = {
                name : obj.GetExportedMaterialName (material.name),
                pbrMetallicRoughness : {
                    baseColorFactor : ColorToRGBA (material.color, material.opacity)
                },
                emissiveFactor : ColorToRGB (material.emissive),
                doubleSided : true,
                alphaMode : 'OPAQUE'
            };

            if (material.transparent) {
                // TODO: mask, alphaCutoff?
                jsonMaterial.alphaMode = 'BLEND';
            }

            let baseColorTexture = GetTextureParams (mainJson, material.diffuseMap, addTexture);
            if (baseColorTexture !== null) {
                if (!material.multiplyDiffuseMap) {
                    jsonMaterial.pbrMetallicRoughness.baseColorFactor = ColorToRGBA (new RGBColor (255, 255, 255), material.opacity);
                }
                jsonMaterial.pbrMetallicRoughness.baseColorTexture = baseColorTexture;
            }
            if (material.type === MaterialType.Physical) {
                let metallicTexture = GetTextureParams (mainJson, material.metalnessMap, addTexture);
                if (metallicTexture !== null) {
                    jsonMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metallicTexture;
                } else {
                    jsonMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;
                    jsonMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;
                }
            }
            let normalTexture = GetTextureParams (mainJson, material.normalMap, addTexture);
            if (normalTexture !== null) {
                jsonMaterial.normalTexture = normalTexture;
            }
            let emissiveTexture = GetTextureParams (mainJson, material.emissiveMap, addTexture);
            if (emissiveTexture !== null) {
                jsonMaterial.emissiveTexture = emissiveTexture;
            }

            mainJson.materials.push (jsonMaterial);
        }

        for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount (); materialIndex++) {
            let material = exporterModel.GetMaterial (materialIndex);
            ExportMaterial (this, mainJson, material, addTexture);
        }
    }
}

class ExporterSettings
{
    constructor (settings)
    {
        this.transformation = new Transformation ();
        this.isMeshVisible = (meshInstanceId) => {
            return true;
        };

        CopyObjectAttributes (settings, this);
    }
}

class ExporterModel
{
    constructor (model, settings)
    {
        this.model = model;
        this.settings = settings || new ExporterSettings ();
        this.visibleMeshes = null;
        this.meshToVisibleMeshIndex = null;
    }

    GetModel ()
    {
        return this.model;
    }

    MaterialCount ()
    {
        return this.model.MaterialCount ();
    }

    GetMaterial (index)
    {
        return this.model.GetMaterial (index);
    }

    VertexCount ()
    {
        let vertexCount = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            vertexCount += meshInstance.VertexCount ();
        });
        return vertexCount;
    }

    TriangleCount ()
    {
        let triangleCount = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            triangleCount += meshInstance.TriangleCount ();
        });
        return triangleCount;
    }

    MeshCount ()
    {
        let meshCount = 0;
        this.EnumerateMeshes ((mesh) => {
            meshCount += 1;
        });
        return meshCount;
    }

    EnumerateMeshes (onMesh)
    {
        this.FillVisibleMeshCache ();
        for (let meshIndex = 0; meshIndex < this.model.MeshCount (); meshIndex++) {
            if (this.visibleMeshes.has (meshIndex)) {
                let mesh = this.model.GetMesh (meshIndex);
                onMesh (mesh);
            }
        }
    }

    MapMeshIndex (meshIndex)
    {
        this.FillVisibleMeshCache ();
        return this.meshToVisibleMeshIndex.get (meshIndex);
    }

    IsMeshInstanceVisible (meshInstanceId)
    {
        return this.settings.isMeshVisible (meshInstanceId);
    }

    MeshInstanceCount ()
    {
        let meshInstanceCount = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            meshInstanceCount += 1;
        });
        return meshInstanceCount;
    }

    EnumerateMeshInstances (onMeshInstance)
    {
        this.model.EnumerateMeshInstances ((meshInstance) => {
            if (this.settings.isMeshVisible (meshInstance.GetId ())) {
                onMeshInstance (meshInstance);
            }
        });
    }

    EnumerateTransformedMeshInstances (onMesh)
    {
        this.EnumerateMeshInstances ((meshInstance) => {
            let transformation = meshInstance.GetTransformation ();
            if (!this.settings.transformation.IsIdentity ()) {
                transformation.Append (this.settings.transformation);
            }

            let mesh = meshInstance.GetMesh ();
            let transformed = mesh.Clone ();
            if (!transformation.IsIdentity ()) {
                TransformMesh (transformed, transformation);
            }

            onMesh (transformed);
        });
    }

    EnumerateVerticesAndTriangles (callbacks)
    {
        let transformedMeshes = [];
        this.EnumerateTransformedMeshInstances ((mesh) => {
            transformedMeshes.push (mesh);
        });

        for (let mesh of transformedMeshes) {
            mesh.EnumerateVertices ((vertex) => {
                callbacks.onVertex (vertex.x, vertex.y, vertex.z);
            });
        }

        let vertexOffset = 0;
        for (let mesh of transformedMeshes) {
            mesh.EnumerateTriangleVertexIndices ((v0, v1, v2) => {
                callbacks.onTriangle (v0 + vertexOffset, v1 + vertexOffset, v2 + vertexOffset);
            });
            vertexOffset += mesh.VertexCount ();
        }
    }

    EnumerateTrianglesWithNormals (onTriangle)
    {
        this.EnumerateTransformedMeshInstances ((mesh) => {
            mesh.EnumerateTriangleVertices ((v0, v1, v2) => {
                let normal = CalculateTriangleNormal (v0, v1, v2);
                onTriangle (v0, v1, v2, normal);
            });
        });
    }

    FillVisibleMeshCache ()
    {
        if (this.visibleMeshes !== null && this.meshToVisibleMeshIndex !== null) {
            return;
        }

        this.visibleMeshes = new Set ();
        this.model.EnumerateMeshInstances ((meshInstance) => {
            let meshInstanceId = meshInstance.GetId ();
            if (this.settings.isMeshVisible (meshInstanceId)) {
                this.visibleMeshes.add (meshInstanceId.meshIndex);
            }
        });

        this.meshToVisibleMeshIndex = new Map ();
        let visibleMeshIndex = 0;
        for (let meshIndex = 0; meshIndex < this.model.MeshCount (); meshIndex++) {
            if (this.visibleMeshes.has (meshIndex)) {
                this.meshToVisibleMeshIndex.set (meshIndex, visibleMeshIndex);
                visibleMeshIndex += 1;
            }
        }
    }
}

class TextWriter
{
	constructor ()
	{
		this.text = '';
		this.indentation = 0;
	}

	GetText ()
	{
		return this.text;
	}

	Indent (diff)
	{
		this.indentation += diff;
	}

	WriteArrayLine (arr)
	{
		this.WriteLine (arr.join (' '));
	}

	WriteLine (str)
	{
		this.WriteIndentation ();
		this.Write (str + '\n');
	}

	WriteIndentation ()
	{
		for (let i = 0; i < this.indentation; i++) {
			this.Write ('  ');
		}
	}

	Write (str)
	{
		this.text += str;
	}
}

class ExporterObj extends ExporterBase
{
    constructor ()
    {
        super ();
    }

    CanExport (format, extension)
    {
        return format === FileFormat.Text && extension === 'obj';
    }

    ExportContent (exporterModel, format, files, onFinish)
    {
        function WriteTexture (mtlWriter, keyword, texture, files)
        {
            if (texture === null || !texture.IsValid ()) {
                return;
            }
            let fileName = GetFileName (texture.name);
            mtlWriter.WriteArrayLine ([keyword, fileName]);

            let fileIndex = files.findIndex ((file) => {
                return file.GetName () === fileName;
            });
            if (fileIndex === -1) {
                let textureFile = new ExportedFile (fileName);
                textureFile.SetBufferContent (texture.buffer);
                files.push (textureFile);
            }
        }

        let mtlFile = new ExportedFile ('model.mtl');
        let objFile = new ExportedFile ('model.obj');

        files.push (mtlFile);
        files.push (objFile);

        let mtlWriter = new TextWriter ();
        mtlWriter.WriteLine (this.GetHeaderText ());
        for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount (); materialIndex++) {
            let material = exporterModel.GetMaterial (materialIndex);
            mtlWriter.WriteArrayLine (['newmtl', this.GetExportedMaterialName (material.name)]);
            mtlWriter.WriteArrayLine (['Kd', material.color.r / 255.0, material.color.g / 255.0, material.color.b / 255.0]);
            mtlWriter.WriteArrayLine (['d', material.opacity]);
            if (material.type === MaterialType.Phong) {
                mtlWriter.WriteArrayLine (['Ka', material.ambient.r / 255.0, material.ambient.g / 255.0, material.ambient.b / 255.0]);
                mtlWriter.WriteArrayLine (['Ks', material.specular.r / 255.0, material.specular.g / 255.0, material.specular.b / 255.0]);
                mtlWriter.WriteArrayLine (['Ns', material.shininess * 1000.0]);
            }
            WriteTexture (mtlWriter, 'map_Kd', material.diffuseMap, files);
            if (material.type === MaterialType.Phong) {
                WriteTexture (mtlWriter, 'map_Ks', material.specularMap, files);
            }
            WriteTexture (mtlWriter, 'bump', material.bumpMap, files);
        }
        mtlFile.SetTextContent (mtlWriter.GetText ());

        let objWriter = new TextWriter ();
        objWriter.WriteLine (this.GetHeaderText ());
        objWriter.WriteArrayLine (['mtllib', mtlFile.GetName ()]);
        let vertexOffset = 0;
        let normalOffset = 0;
        let uvOffset = 0;
        let usedMaterialName = null;
        exporterModel.EnumerateTransformedMeshInstances ((mesh) => {
            objWriter.WriteArrayLine (['g', this.GetExportedMeshName (mesh.GetName ())]);
            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {
                let vertex = mesh.GetVertex (vertexIndex);
                objWriter.WriteArrayLine (['v', vertex.x, vertex.y, vertex.z]);
            }
            for (let normalIndex = 0; normalIndex < mesh.NormalCount (); normalIndex++) {
                let normal = mesh.GetNormal (normalIndex);
                objWriter.WriteArrayLine (['vn', normal.x, normal.y, normal.z]);
            }
            for (let textureUVIndex = 0; textureUVIndex < mesh.TextureUVCount (); textureUVIndex++) {
                let uv = mesh.GetTextureUV (textureUVIndex);
                objWriter.WriteArrayLine (['vt', uv.x, uv.y]);
            }
            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {
                let triangle = mesh.GetTriangle (triangleIndex);
                let v0 = triangle.v0 + vertexOffset + 1;
                let v1 = triangle.v1 + vertexOffset + 1;
                let v2 = triangle.v2 + vertexOffset + 1;
                let n0 = triangle.n0 + normalOffset + 1;
                let n1 = triangle.n1 + normalOffset + 1;
                let n2 = triangle.n2 + normalOffset + 1;
                if (triangle.mat !== null) {
                    let material = exporterModel.GetMaterial (triangle.mat);
                    let materialName = this.GetExportedMaterialName (material.name);
                    if (materialName !== usedMaterialName) {
                        objWriter.WriteArrayLine (['usemtl', materialName]);
                        usedMaterialName = materialName;
                    }
                }
                let u0 = '';
                let u1 = '';
                let u2 = '';
                if (triangle.HasTextureUVs ()) {
                    u0 = triangle.u0 + uvOffset + 1;
                    u1 = triangle.u1 + uvOffset + 1;
                    u2 = triangle.u2 + uvOffset + 1;
                }
                objWriter.WriteArrayLine (['f', [v0, u0, n0].join ('/'), [v1, u1, n1].join ('/'), [v2, u2, n2].join ('/')]);
            }
            vertexOffset += mesh.VertexCount ();
            normalOffset += mesh.NormalCount ();
            uvOffset += mesh.TextureUVCount ();
        });

        objFile.SetTextContent (objWriter.GetText ());
        onFinish ();
    }

    GetHeaderText ()
    {
        return '# exported by https://3dviewer.net';
    }
}

class ExporterOff extends ExporterBase
{
	constructor ()
	{
		super ();
	}

    CanExport (format, extension)
    {
        return format === FileFormat.Text && extension === 'off';
    }

	ExportContent (exporterModel, format, files, onFinish)
	{
		let offFile = new ExportedFile ('model.off');
		files.push (offFile);

		let offWriter = new TextWriter ();
		offWriter.WriteLine ('OFF');
		offWriter.WriteArrayLine ([exporterModel.VertexCount (), exporterModel.TriangleCount (), 0]);

		exporterModel.EnumerateVerticesAndTriangles ({
			onVertex : function (x, y, z) {
				offWriter.WriteArrayLine ([x, y, z]);
			},
			onTriangle : function (v0, v1, v2) {
				offWriter.WriteArrayLine ([3, v0, v1, v2]);
			}
		});

		offFile.SetTextContent (offWriter.GetText ());
		onFinish ();
	}
}

class ExporterPly extends ExporterBase
{
	constructor ()
	{
		super ();
	}

    CanExport (format, extension)
    {
        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'ply';
    }

	ExportContent (exporterModel, format, files, onFinish)
	{
		if (format === FileFormat.Text) {
			this.ExportText (exporterModel, files);
		} else {
			this.ExportBinary (exporterModel, files);
		}
		onFinish ();
	}

	ExportText (exporterModel, files)
	{
		let plyFile = new ExportedFile ('model.ply');
		files.push (plyFile);

		let plyWriter = new TextWriter ();

		let vertexCount = exporterModel.VertexCount ();
		let triangleCount = exporterModel.TriangleCount ();
		let headerText = this.GetHeaderText ('ascii', vertexCount, triangleCount);
		plyWriter.Write (headerText);

		exporterModel.EnumerateVerticesAndTriangles ({
			onVertex : function (x, y, z) {
				plyWriter.WriteArrayLine ([x, y, z]);
			},
			onTriangle : function (v0, v1, v2) {
				plyWriter.WriteArrayLine ([3, v0, v1, v2]);
			}
		});

		plyFile.SetTextContent (plyWriter.GetText ());
	}

	ExportBinary (exporterModel, files)
	{
		let plyFile = new ExportedFile ('model.ply');
		files.push (plyFile);

		let vertexCount = exporterModel.VertexCount ();
		let triangleCount = exporterModel.TriangleCount ();
		let headerText = this.GetHeaderText ('binary_little_endian', vertexCount, triangleCount);

		let fullByteLength = headerText.length + vertexCount * 3 * 4 + triangleCount * (1 + 3 * 4);
		let plyWriter = new BinaryWriter (fullByteLength, true);

		for (let i = 0; i < headerText.length; i++) {
			plyWriter.WriteUnsignedCharacter8 (headerText.charCodeAt (i));
		}

		exporterModel.EnumerateVerticesAndTriangles ({
			onVertex : function (x, y, z) {
				plyWriter.WriteFloat32 (x);
				plyWriter.WriteFloat32 (y);
				plyWriter.WriteFloat32 (z);
			},
			onTriangle : function (v0, v1, v2) {
				plyWriter.WriteUnsignedCharacter8 (3);
				plyWriter.WriteInteger32 (v0);
				plyWriter.WriteInteger32 (v1);
				plyWriter.WriteInteger32 (v2);
			}
		});

		plyFile.SetBufferContent (plyWriter.GetBuffer ());
	}

	GetHeaderText (format, vertexCount, triangleCount)
	{
		let headerWriter = new TextWriter ();
		headerWriter.WriteLine ('ply');
		headerWriter.WriteLine ('format ' + format + ' 1.0');
		headerWriter.WriteLine ('element vertex ' + vertexCount);
		headerWriter.WriteLine ('property float x');
		headerWriter.WriteLine ('property float y');
		headerWriter.WriteLine ('property float z');
		headerWriter.WriteLine ('element face ' + triangleCount);
		headerWriter.WriteLine ('property list uchar int vertex_index');
		headerWriter.WriteLine ('end_header');
		return headerWriter.GetText ();
	}
}

class ExporterStl extends ExporterBase
{
	constructor ()
	{
		super ();
	}

    CanExport (format, extension)
    {
        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'stl';
    }

	ExportContent (exporterModel, format, files, onFinish)
	{
		if (format === FileFormat.Text) {
			this.ExportText (exporterModel, files);
		} else {
			this.ExportBinary (exporterModel, files);
		}
		onFinish ();
	}

	ExportText (exporterModel, files)
	{
		let stlFile = new ExportedFile ('model.stl');
		files.push (stlFile);

		let stlWriter = new TextWriter ();
		stlWriter.WriteLine ('solid Model');
		exporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {
			stlWriter.WriteArrayLine (['facet', 'normal', normal.x, normal.y, normal.z]);
			stlWriter.Indent (1);
			stlWriter.WriteLine ('outer loop');
			stlWriter.Indent (1);
			stlWriter.WriteArrayLine (['vertex', v0.x, v0.y, v0.z]);
			stlWriter.WriteArrayLine (['vertex', v1.x, v1.y, v1.z]);
			stlWriter.WriteArrayLine (['vertex', v2.x, v2.y, v2.z]);
			stlWriter.Indent (-1);
			stlWriter.WriteLine ('endloop');
			stlWriter.Indent (-1);
			stlWriter.WriteLine ('endfacet');
		});
		stlWriter.WriteLine ('endsolid Model');

		stlFile.SetTextContent (stlWriter.GetText ());
	}

	ExportBinary (exporterModel, files)
	{
		let stlFile = new ExportedFile ('model.stl');
		files.push (stlFile);

		let triangleCount = exporterModel.TriangleCount ();
		let headerSize = 80;
		let fullByteLength = headerSize + 4 + triangleCount * 50;
		let stlWriter = new BinaryWriter (fullByteLength, true);

		for (let i = 0; i < headerSize; i++) {
			stlWriter.WriteUnsignedCharacter8 (0);
		}

		stlWriter.WriteUnsignedInteger32 (triangleCount);
		exporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {
			stlWriter.WriteFloat32 (normal.x);
			stlWriter.WriteFloat32 (normal.y);
			stlWriter.WriteFloat32 (normal.z);

			stlWriter.WriteFloat32 (v0.x);
			stlWriter.WriteFloat32 (v0.y);
			stlWriter.WriteFloat32 (v0.z);

			stlWriter.WriteFloat32 (v1.x);
			stlWriter.WriteFloat32 (v1.y);
			stlWriter.WriteFloat32 (v1.z);

			stlWriter.WriteFloat32 (v2.x);
			stlWriter.WriteFloat32 (v2.y);
			stlWriter.WriteFloat32 (v2.z);

			stlWriter.WriteUnsignedInteger16 (0);
		});

		stlFile.SetBufferContent (stlWriter.GetBuffer ());
	}
}

class Exporter
{
    constructor ()
    {
        this.exporters = [
            new ExporterObj (),
            new ExporterStl (),
            new ExporterPly (),
            new ExporterOff (),
            new ExporterGltf (),
            new Exporter3dm (),
            new ExporterBim ()
        ];
    }

    AddExporter (exporter)
    {
        this.exporters.push (exporter);
    }

    Export (model, settings, format, extension, callbacks)
    {
        let exporter = null;
        for (let i = 0; i < this.exporters.length; i++) {
            let currentExporter = this.exporters[i];
            if (currentExporter.CanExport (format, extension)) {
                exporter = currentExporter;
                break;
            }
        }
        if (exporter === null) {
            callbacks.onError ();
            return;
        }

        let exporterModel = new ExporterModel (model, settings);
        exporter.Export (exporterModel, format, (files) => {
            if (files.length === 0) {
                callbacks.onError ();
            } else {
                callbacks.onSuccess (files);
            }
        });
    }
}

class Box3D
{
    constructor (min, max)
    {
        this.min = min;
        this.max = max;
    }

    GetMin ()
    {
        return this.min;
    }

    GetMax ()
    {
        return this.max;
    }

    GetCenter ()
    {
        return new Coord3D (
            (this.min.x + this.max.x) / 2.0,
            (this.min.y + this.max.y) / 2.0,
            (this.min.z + this.max.z) / 2.0
        );
    }
}

class BoundingBoxCalculator3D
{
    constructor ()
    {
        this.box = new Box3D (
            new Coord3D (Infinity, Infinity, Infinity),
            new Coord3D (-Infinity, -Infinity, -Infinity)
        );
        this.isValid = false;
    }

    GetBox ()
    {
        if (!this.isValid) {
            return null;
        }
        return this.box;
    }

    AddPoint (point)
    {
        this.box.min.x = Math.min (this.box.min.x, point.x);
        this.box.min.y = Math.min (this.box.min.y, point.y);
        this.box.min.z = Math.min (this.box.min.z, point.z);
        this.box.max.x = Math.max (this.box.max.x, point.x);
        this.box.max.y = Math.max (this.box.max.y, point.y);
        this.box.max.z = Math.max (this.box.max.z, point.z);
        this.isValid = true;
    }
}

class OctreeNode
{
    constructor (boundingBox, level)
    {
        this.boundingBox = boundingBox;
        this.level = level;
        this.pointItems = [];
        this.childNodes = [];
    }

    AddPoint (point, data, options)
    {
        let node = this.FindNodeForPoint (point);
        if (node === null) {
            return false;
        }

        if (node.FindPointDirectly (point) !== null) {
            return false;
        }

        if (node.pointItems.length < options.maxPointsPerNode || node.level >= options.maxTreeDepth) {
            node.AddPointDirectly (point, data);
            return true;
        } else {
            node.CreateChildNodes ();
            let oldPointItems = node.pointItems;
            node.pointItems = [];
            for (let i = 0; i < oldPointItems.length; i++) {
                let pointItem = oldPointItems[i];
                if (!node.AddPoint (pointItem.point, pointItem.data, options)) {
                    return false;
                }
            }
            return node.AddPoint (point, data, options);
        }
    }

    FindPoint (point)
    {
        let node = this.FindNodeForPoint (point);
        if (node === null) {
            return null;
        }
        return node.FindPointDirectly (point);
    }

    AddPointDirectly (point, data)
    {
        this.pointItems.push ({
            point : point,
            data : data
        });
    }

    FindPointDirectly (point)
    {
        for (let i = 0; i < this.pointItems.length; i++) {
            let pointItem = this.pointItems[i];
            if (CoordIsEqual3D (point, pointItem.point)) {
                return pointItem.data;
            }
        }
        return null;
    }

    FindNodeForPoint (point)
    {
        if (!this.IsPointInBounds (point)) {
            return null;
        }

        if (this.childNodes.length === 0) {
            return this;
        }

        for (let i = 0; i < this.childNodes.length; i++) {
            let childNode = this.childNodes[i];
            let foundNode = childNode.FindNodeForPoint (point);
            if (foundNode !== null) {
                return foundNode;
            }
        }

        return null;
    }

    CreateChildNodes ()
    {
        function AddChildNode (node, minX, minY, minZ, sizeX, sizeY, sizeZ)
        {
            let box = new Box3D (
                new Coord3D (minX, minY, minZ),
                new Coord3D (minX + sizeX, minY + sizeY, minZ + sizeZ)
            );
            node.childNodes.push (new OctreeNode (box, node.level + 1));
        }

        let min = this.boundingBox.min;
        let center = this.boundingBox.GetCenter ();
        let sizeX = (this.boundingBox.max.x - this.boundingBox.min.x) / 2.0;
        let sizeY = (this.boundingBox.max.y - this.boundingBox.min.y) / 2.0;
        let sizeZ = (this.boundingBox.max.z - this.boundingBox.min.z) / 2.0;

        AddChildNode (this, min.x, min.y, min.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, center.x, min.y, min.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, min.x, center.y, min.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, center.x, center.y, min.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, min.x, min.y, center.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, center.x, min.y, center.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, min.x, center.y, center.z, sizeX, sizeY, sizeZ);
        AddChildNode (this, center.x, center.y, center.z, sizeX, sizeY, sizeZ);
    }

    IsPointInBounds (point)
    {
        let isEqual =
            IsGreaterOrEqual (point.x, this.boundingBox.min.x) &&
            IsGreaterOrEqual (point.y, this.boundingBox.min.y) &&
            IsGreaterOrEqual (point.z, this.boundingBox.min.z) &&
            IsLowerOrEqual (point.x, this.boundingBox.max.x) &&
            IsLowerOrEqual (point.y, this.boundingBox.max.y) &&
            IsLowerOrEqual (point.z, this.boundingBox.max.z);
        return isEqual;
    }
}

class Octree
{
    constructor (boundingBox, options)
    {
        this.options = {
            maxPointsPerNode : 10,
            maxTreeDepth : 10
        };
        if (options !== undefined) {
            if (options.maxPointsPerNode !== undefined) {
                this.options.maxPointsPerNode = options.maxPointsPerNode;
            }
            if (options.maxTreeDepth !== undefined) {
                this.options.maxTreeDepth = options.maxTreeDepth;
            }
        }
        this.rootNode = new OctreeNode (boundingBox, 0);
    }

    AddPoint (point, data)
    {
        return this.rootNode.AddPoint (point, data, this.options);
    }

    FindPoint (point)
    {
        return this.rootNode.FindPoint (point);
    }
}

function BezierTweenFunction (distance, index, count)
{
    let t = index / count;
	return distance * (t * t * (3.0 - 2.0 * t));
}

function LinearTweenFunction (distance, index, count)
{
    return index * distance / count;
}

function ParabolicTweenFunction (distance, index, count)
{
    let t = index / count;
    let t2 = t * t;
    return distance * (t2 / (2.0 * (t2 - t) + 1.0));
}

function TweenCoord3D (a, b, count, tweenFunc)
{
	let dir = SubCoord3D (b, a).Normalize ();
	let distance = CoordDistance3D (a, b);
	let result = [];
	for (let i = 0; i < count; i++) {
        let step = tweenFunc (distance, i, count - 1);
		result.push (a.Clone ().Offset (dir, step));
	}
	return result;
}

/**
 * File representation class for importers.
 */
class InputFile
{
    /**
     * @param {string} name Name of the file.
     * @param {FileSource} source Source of the file.
     * @param {string|File} data If the file source is url, this must be the url string. If the file source
     * is file, this must be a {@link File} object.
     */
    constructor (name, source, data)
    {
        this.name = name;
        this.source = source;
        this.data = data;
    }
}

function InputFilesFromUrls (urls)
{
    let inputFiles = [];
    for (let url of urls) {
        let fileName = GetFileName (url);
        inputFiles.push (new InputFile (fileName, FileSource.Url, url));
    }
    return inputFiles;
}

function InputFilesFromFileObjects (fileObjects)
{
    let inputFiles = [];
    for (let fileObject of fileObjects) {
        let fileName = GetFileName (fileObject.name);
        inputFiles.push (new InputFile (fileName, FileSource.File, fileObject));
    }
    return inputFiles;
}

class ImporterFile
{
    constructor (name, source, data)
    {
        this.name = GetFileName (name);
        this.extension = GetFileExtension (name);
        this.source = source;
        this.data = data;
        this.content = null;
    }

    SetContent (content)
    {
        this.content = content;
    }
}

class ImporterFileList
{
    constructor ()
    {
        this.files = [];
    }

    FillFromInputFiles (inputFiles)
    {
        this.files = [];
        for (let inputFile of inputFiles) {
            let file = new ImporterFile (inputFile.name, inputFile.source, inputFile.data);
            this.files.push (file);
        }
    }

    ExtendFromFileList (fileList)
    {
        let files = fileList.GetFiles ();
        for (let i = 0; i < files.length; i++) {
            let file = files[i];
            if (!this.ContainsFileByPath (file.name)) {
                this.files.push (file);
            }
        }
    }

    GetFiles ()
    {
        return this.files;
    }

    GetContent (callbacks)
    {
        RunTasks (this.files.length, {
            runTask : (index, onTaskComplete) => {
                callbacks.onFileListProgress (index, this.files.length);
                this.GetFileContent (this.files[index], {
                    onReady : onTaskComplete,
                    onProgress : callbacks.onFileLoadProgress
                });
            },
            onReady : callbacks.onReady
        });
    }

    ContainsFileByPath (filePath)
    {
        return this.FindFileByPath (filePath) !== null;
    }

    FindFileByPath (filePath)
    {
        let fileName = GetFileName (filePath).toLowerCase ();
        for (let fileIndex = 0; fileIndex < this.files.length; fileIndex++) {
            let file = this.files[fileIndex];
            if (file.name.toLowerCase () === fileName) {
                return file;
            }
        }
        return null;
    }

    IsOnlyUrlSource ()
    {
        if (this.files.length === 0) {
            return false;
        }
        for (let i = 0; i < this.files.length; i++) {
            let file = this.files[i];
            if (file.source !== FileSource.Url && file.source !== FileSource.Decompressed) {
                return false;
            }
        }
        return true;
    }

    AddFile (file)
    {
        this.files.push (file);
    }

    GetFileContent (file, callbacks)
    {
        if (file.content !== null) {
            callbacks.onReady ();
            return;
        }
        let loaderPromise = null;
        file.source = FileSource.File;
        file.path = file.data;
        console.log(
          `ImporterFileList#GetFileContent: Url(${FileSource.Url}) File(${FileSource.File}), this file:`,
          file.source, file);

        if (file.source === FileSource.Url) {
            loaderPromise = RequestUrl (file.data, callbacks.onProgress);
        } else if (file.source === FileSource.File) {
            console.log('ImporterFile#GetFileContent: calling ReadFile');
            loaderPromise = ReadFile(file, () => {
            console.log('ReadFile: progress...');
            callbacks.onProgress ();
          });
        } else {
            callbacks.onReady ();
            return;
        }

        loaderPromise.then(
          (content) => {
            console.log('GOT CONTENT, setting', content);
            file.SetContent (content);
          },
          (reason) => {
            console.error('FAILED TO LOAD: ', reason);
          }
        ).catch ((err) => {
          console.trace(err);
        }).finally (() => {
          console.log('finally');
          callbacks.onReady ();
        });
    }
}

class NodeIdGenerator
{
    constructor ()
    {
        this.nextId = 0;
    }

    GenerateId ()
    {
        const id = this.nextId;
        this.nextId += 1;
        return id;
    }
}

class Node
{
    constructor ()
    {
        this.name = '';
        this.parent = null;
        this.transformation = new Transformation ();

        this.childNodes = [];
        this.meshIndices = [];

        this.idGenerator = new NodeIdGenerator ();
        this.id = this.idGenerator.GenerateId ();
    }

    IsEmpty ()
    {
        return this.childNodes.length === 0 && this.meshIndices.length === 0;
    }

    IsMeshNode ()
    {
        return this.childNodes.length === 0 && this.meshIndices.length === 1;
    }

    GetId ()
    {
        return this.id;
    }

    GetName ()
    {
        return this.name;
    }

    SetName (name)
    {
        this.name = name;
    }

    HasParent ()
    {
        return this.parent !== null;
    }

    GetParent ()
    {
        return this.parent;
    }

    GetTransformation ()
    {
        return this.transformation;
    }

    GetWorldTransformation ()
    {
        let transformation = this.transformation.Clone ();
        let parent = this.parent;
        while (parent !== null) {
            transformation.Append (parent.transformation);
            parent = parent.parent;
        }
        return transformation;
    }

    SetTransformation (transformation)
    {
        this.transformation = transformation;
    }

    AddChildNode (node)
    {
        node.parent = this;
        node.idGenerator = this.idGenerator;
        node.id = node.idGenerator.GenerateId ();
        this.childNodes.push (node);
        return this.childNodes.length - 1;
    }

    RemoveChildNode (node)
    {
        node.parent = null;
        let index = this.childNodes.indexOf (node);
        this.childNodes.splice (index, 1);
    }

    GetChildNodes ()
    {
        return this.childNodes;
    }

    ChildNodeCount ()
    {
        return this.childNodes.length;
    }

    GetChildNode (index)
    {
        return this.childNodes[index];
    }

    AddMeshIndex (index)
    {
        this.meshIndices.push (index);
        return this.meshIndices.length - 1;
    }

    MeshIndexCount ()
    {
        return this.meshIndices.length;
    }

    GetMeshIndex (index)
    {
        return this.meshIndices[index];
    }

    GetMeshIndices ()
    {
        return this.meshIndices;
    }

    Enumerate (processor)
    {
        processor (this);
        for (const childNode of this.childNodes) {
            childNode.Enumerate (processor);
        }
    }

    EnumerateChildren (processor)
    {
        for (const childNode of this.childNodes) {
            processor (childNode);
            childNode.EnumerateChildren (processor);
        }
    }

    EnumerateMeshIndices (processor)
    {
        for (const meshIndex of this.meshIndices) {
            processor (meshIndex);
        }
        for (const childNode of this.childNodes) {
            childNode.EnumerateMeshIndices (processor);
        }
    }
}

class Model extends ModelObject3D
{
    constructor ()
    {
        super ();
        this.root = new Node ();
        this.materials = [];
        this.meshes = [];
    }

    GetRootNode ()
    {
        return this.root;
    }

    NodeCount ()
    {
        let count = 0;
        this.root.Enumerate ((node) => {
            count += 1;
        });
        return count - 1;
    }

    MaterialCount ()
    {
        return this.materials.length;
    }

    MeshCount ()
    {
        return this.meshes.length;
    }

    MeshInstanceCount ()
    {
        let count = 0;
        this.root.Enumerate ((node) => {
            count += node.MeshIndexCount ();
        });
        return count;
    }

    VertexCount ()
    {
        let count = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            count += meshInstance.VertexCount ();
        });
        return count;
    }

    VertexColorCount ()
    {
        let count = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            count += meshInstance.VertexColorCount ();
        });
        return count;
    }

    NormalCount ()
    {
        let count = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            count += meshInstance.NormalCount ();
        });
        return count;
    }

    TextureUVCount ()
    {
        let count = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            count += meshInstance.TextureUVCount ();
        });
        return count;
    }

    TriangleCount ()
    {
        let count = 0;
        this.EnumerateMeshInstances ((meshInstance) => {
            count += meshInstance.TriangleCount ();
        });
        return count;
    }

    AddMaterial (material)
    {
        this.materials.push (material);
        return this.materials.length - 1;
    }

    GetMaterial (index)
    {
        return this.materials[index];
    }

    AddMesh (mesh)
    {
        this.meshes.push (mesh);
        return this.meshes.length - 1;
    }

    AddMeshToRootNode (mesh)
    {
        const meshIndex = this.AddMesh (mesh);
        this.root.AddMeshIndex (meshIndex);
        return meshIndex;
    }

    RemoveMesh (index)
    {
        this.meshes.splice (index, 1);
        this.root.Enumerate ((node) => {
            for (let i = 0; i < node.meshIndices.length; i++) {
                if (node.meshIndices[i] === index) {
                    node.meshIndices.splice (i, 1);
                    i -= 1;
                } else if (node.meshIndices[i] > index) {
                    node.meshIndices[i] -= 1;
                }
            }
        });
    }

    GetMesh (index)
    {
        return this.meshes[index];
    }

    GetMeshInstance (instanceId)
    {
        let foundNode = null;
        this.root.Enumerate ((node) => {
            if (node.GetId () === instanceId.nodeId) {
                foundNode = node;
            }
        });
        if (foundNode === null) {
            return null;
        }
        const nodeMeshIndices = foundNode.GetMeshIndices ();
        if (nodeMeshIndices.indexOf (instanceId.meshIndex) === -1) {
            return null;
        }
        let foundMesh = this.GetMesh (instanceId.meshIndex);
        let id = new MeshInstanceId (foundNode.GetId (), instanceId.meshIndex);
        return new MeshInstance (id, foundNode, foundMesh);
    }

    EnumerateMeshes (onMesh)
    {
        for (const mesh of this.meshes) {
            onMesh (mesh);
        }
    }

    EnumerateMeshInstances (onMeshInstance)
    {
        this.root.Enumerate ((node) => {
            for (let meshIndex of node.GetMeshIndices ()) {
                let id = new MeshInstanceId (node.GetId (), meshIndex);
                let mesh = this.GetMesh (meshIndex);
                let meshInstance = new MeshInstance (id, node, mesh);
                onMeshInstance (meshInstance);
            }
        });
    }

    EnumerateTransformedMeshInstances (onMesh)
    {
        this.EnumerateMeshInstances ((meshInstance) => {
            const transformed = meshInstance.GetTransformedMesh ();
            onMesh (transformed);
        });
    }

    EnumerateVertices (onVertex)
    {
        this.EnumerateMeshInstances ((meshInstance) => {
            meshInstance.EnumerateVertices (onVertex);
        });
    }

    EnumerateTriangleVertexIndices (onTriangleVertexIndices)
    {
        this.EnumerateMeshInstances ((meshInstance) => {
            meshInstance.EnumerateTriangleVertexIndices (onTriangleVertexIndices);
        });
    }

    EnumerateTriangleVertices (onTriangleVertices)
    {
        this.EnumerateMeshInstances ((meshInstance) => {
            meshInstance.EnumerateTriangleVertices (onTriangleVertices);
        });
    }
}

class TopologyVertex
{
    constructor ()
    {
        this.edges = [];
        this.triangles = [];
    }
}

class TopologyEdge
{
    constructor (vertex1, vertex2)
    {
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
        this.triangles = [];
    }
}

class TopologyTriangleEdge
{
    constructor (edge, reversed)
    {
        this.edge = edge;
        this.reversed = reversed;
    }
}

class TopologyTriangle
{
    constructor ()
    {
        this.triEdge1 = null;
        this.triEdge2 = null;
        this.triEdge3 = null;
    }
}

class Topology
{
    constructor ()
    {
        this.vertices = [];
        this.edges = [];
        this.triangleEdges = [];
        this.triangles = [];
        this.edgeStartToEndVertexMap = new Map ();
    }

    AddVertex ()
    {
        this.vertices.push (new TopologyVertex ());
        return this.vertices.length - 1;
    }

    AddTriangle (vertex1, vertex2, vertex3)
    {
        function AddTriangleToVertex (vertices, vertexIndex, triangleIndex)
        {
            let vertex = vertices[vertexIndex];
            vertex.triangles.push (triangleIndex);
        }

        function AddEdgeToVertex (vertices, triangleEdges, vertexIndex, triangleEdgeIndex)
        {
            let vertex = vertices[vertexIndex];
            let triangleEdge = triangleEdges[triangleEdgeIndex];
            vertex.edges.push (triangleEdge.edge);
        }

        function AddTriangleToEdge (edges, triangleEdges, triangleEdgeIndex, triangleIndex)
        {
            let triangleEdge = triangleEdges[triangleEdgeIndex];
            let edge = edges[triangleEdge.edge];
            edge.triangles.push (triangleIndex);
        }

        let triangleIndex = this.triangles.length;

        let triangle = new TopologyTriangle ();
        triangle.triEdge1 = this.AddTriangleEdge (vertex1, vertex2);
        triangle.triEdge2 = this.AddTriangleEdge (vertex2, vertex3);
        triangle.triEdge3 = this.AddTriangleEdge (vertex3, vertex1);

        AddTriangleToVertex (this.vertices, vertex1, triangleIndex);
        AddTriangleToVertex (this.vertices, vertex2, triangleIndex);
        AddTriangleToVertex (this.vertices, vertex3, triangleIndex);

        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex1, triangle.triEdge1);
        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex2, triangle.triEdge2);
        AddEdgeToVertex (this.vertices, this.triangleEdges, vertex3, triangle.triEdge3);

        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge1, triangleIndex);
        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge2, triangleIndex);
        AddTriangleToEdge (this.edges, this.triangleEdges, triangle.triEdge3, triangleIndex);

        this.triangles.push (triangle);
    }

    AddTriangleEdge (vertex1, vertex2)
    {
        let startVertex = vertex1;
        let endVertex = vertex2;
        let reversed = false;
        if (vertex2 < vertex1) {
            startVertex = vertex2;
            endVertex = vertex1;
            reversed = true;
        }

        let edgeIndex = this.AddEdge (startVertex, endVertex);
        this.triangleEdges.push (new TopologyTriangleEdge (edgeIndex, reversed));
        return this.triangleEdges.length - 1;
    }

    AddEdge (startVertex, endVertex)
    {
        if (!this.edgeStartToEndVertexMap.has (startVertex)) {
            this.edgeStartToEndVertexMap.set (startVertex, []);
        }

        let endVertices = this.edgeStartToEndVertexMap.get (startVertex);
        for (let i = 0; i < endVertices.length; i++) {
            let endVertexItem = endVertices[i];
            if (endVertexItem.endVertex === endVertex) {
                return endVertexItem.edgeIndex;
            }
        }

        let edgeIndex = this.edges.length;
        endVertices.push ({
            endVertex : endVertex,
            edgeIndex : edgeIndex
        });

        this.edges.push (new TopologyEdge (startVertex, endVertex));
        return edgeIndex;
    }
}

function IsModelEmpty (model)
{
    let isEmpty = true;
    model.EnumerateMeshInstances ((meshInstance) => {
        if (GetMeshType (meshInstance) !== MeshType.Empty) {
            isEmpty = false;
        }
    });
    return isEmpty;
}

function GetBoundingBox (object3D)
{
    let calculator = new BoundingBoxCalculator3D ();
    object3D.EnumerateVertices ((vertex) => {
        calculator.AddPoint (vertex);
    });
    return calculator.GetBox ();
}

function GetTopology (object3D)
{
    function GetVertexIndex (vertex, octree, topology)
    {
        let index = octree.FindPoint (vertex);
        if (index === null) {
            index = topology.AddVertex ();
            octree.AddPoint (vertex, index);
        }
        return index;
    }

    let boundingBox = GetBoundingBox (object3D);
    let octree = new Octree (boundingBox);
    let topology = new Topology ();

    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {
        let v0Index = GetVertexIndex (v0, octree, topology);
        let v1Index = GetVertexIndex (v1, octree, topology);
        let v2Index = GetVertexIndex (v2, octree, topology);
        topology.AddTriangle (v0Index, v1Index, v2Index);
    });
    return topology;
}

function IsTwoManifold (object3D)
{
    function GetEdgeOrientationInTriangle (topology, triangleIndex, edgeIndex)
    {
        const triangle = topology.triangles[triangleIndex];
        const triEdge1 = topology.triangleEdges[triangle.triEdge1];
        const triEdge2 = topology.triangleEdges[triangle.triEdge2];
        const triEdge3 = topology.triangleEdges[triangle.triEdge3];
        if (triEdge1.edge === edgeIndex) {
            return triEdge1.reversed;
        }
        if (triEdge2.edge === edgeIndex) {
            return triEdge2.reversed;
        }
        if (triEdge3.edge === edgeIndex) {
            return triEdge3.reversed;
        }
        return null;
    }

    if (object3D instanceof Model) {
        let isTwoManifold = true;
        object3D.EnumerateMeshInstances ((meshInstance) => {
            if (isTwoManifold) {
                isTwoManifold = IsTwoManifold (meshInstance);
            }
        });
        return isTwoManifold;
    } else {
        const topology = GetTopology (object3D);
        for (let edgeIndex = 0; edgeIndex < topology.edges.length; edgeIndex++) {
            const edge = topology.edges[edgeIndex];
            if (edge.triangles.length !== 2) {
                return false;
            }

            let edgeOrientation1 = GetEdgeOrientationInTriangle (topology, edge.triangles[0], edgeIndex);
            let edgeOrientation2 = GetEdgeOrientationInTriangle (topology, edge.triangles[1], edgeIndex);
            if (edgeOrientation1 === null || edgeOrientation2 === null || edgeOrientation1 === edgeOrientation2) {
                return false;
            }
        }
        return true;
    }
}

function HasDefaultMaterial (model)
{
    for (let i = 0; i < model.MaterialCount (); i++) {
        let material = model.GetMaterial (i);
        if (material.isDefault && !material.vertexColors) {
            return true;
        }
    }
    return false;
}

function ReplaceDefaultMaterialColor (model, color)
{
    for (let i = 0; i < model.MaterialCount (); i++) {
        let material = model.GetMaterial (i);
        if (material.isDefault) {
            material.color = color;
        }
    }
}

class Mesh extends ModelObject3D
{
    constructor ()
    {
        super ();
        this.vertices = [];
        this.vertexColors = [];
        this.normals = [];
        this.uvs = [];
        this.triangles = [];
    }

    VertexCount ()
    {
        return this.vertices.length;
    }

    VertexColorCount ()
    {
        return this.vertexColors.length;
    }

    NormalCount ()
    {
        return this.normals.length;
    }

    TextureUVCount ()
    {
        return this.uvs.length;
    }

    TriangleCount ()
    {
        return this.triangles.length;
    }

    AddVertex (vertex)
    {
        this.vertices.push (vertex);
        return this.vertices.length - 1;
    }

    SetVertex (index, vertex)
    {
        this.vertices[index] = vertex;
    }

    GetVertex (index)
    {
        return this.vertices[index];
    }

    AddVertexColor (color)
    {
        this.vertexColors.push (color);
        return this.vertexColors.length - 1;
    }

    SetVertexColor (index, color)
    {
        this.vertexColors[index] = color;
    }

    GetVertexColor (index)
    {
        return this.vertexColors[index];
    }

    AddNormal (normal)
    {
        this.normals.push (normal);
        return this.normals.length - 1;
    }

SetNormal (index, normal)
    {
        this.normals[index] = normal;
    }

    GetNormal (index)
    {
        return this.normals[index];
    }

    AddTextureUV (uv)
    {
        this.uvs.push (uv);
        return this.uvs.length - 1;
    }

    SetTextureUV (index, uv)
    {
        this.uvs[index] = uv;
    }

    GetTextureUV (index)
    {
        return this.uvs[index];
    }

    AddTriangle (triangle)
    {
        this.triangles.push (triangle);
        return this.triangles.length - 1;
    }

    GetTriangle (index)
    {
        return this.triangles[index];
    }

    EnumerateVertices (onVertex)
    {
        for (const vertex of this.vertices) {
            onVertex (vertex);
        }
    }

    EnumerateTriangleVertexIndices (onTriangleVertexIndices)
    {
        for (const triangle of this.triangles) {
            onTriangleVertexIndices (triangle.v0, triangle.v1, triangle.v2);
        }
    }

    EnumerateTriangleVertices (onTriangleVertices)
    {
        for (const triangle of this.triangles) {
            let v0 = this.vertices[triangle.v0];
            let v1 = this.vertices[triangle.v1];
            let v2 = this.vertices[triangle.v2];
            onTriangleVertices (v0, v1, v2);
        }
    }

    Clone ()
    {
        let cloned = new Mesh ();

        cloned.SetName (this.GetName ());
        this.CloneProperties (cloned);

        for (let i = 0; i < this.VertexCount (); i++) {
            let vertex = this.GetVertex (i);
            cloned.AddVertex (vertex.Clone ());
        }

        for (let i = 0; i < this.VertexColorCount (); i++) {
            let color = this.GetVertexColor (i);
            cloned.AddVertexColor (color.Clone ());
        }

        for (let i = 0; i < this.NormalCount (); i++) {
            let normal = this.GetNormal (i);
            cloned.AddNormal (normal.Clone ());
        }

        for (let i = 0; i < this.TextureUVCount (); i++) {
            let uv = this.GetTextureUV (i);
            cloned.AddTextureUV (uv.Clone ());
        }

        for (let i = 0; i < this.TriangleCount (); i++) {
            let triangle = this.GetTriangle (i);
            cloned.AddTriangle (triangle.Clone ());
        }

        return cloned;
    }
}

class Triangle
{
    constructor (v0, v1, v2)
    {
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;

        this.c0 = null;
        this.c1 = null;
        this.c2 = null;

        this.n0 = null;
        this.n1 = null;
        this.n2 = null;

        this.u0 = null;
        this.u1 = null;
        this.u2 = null;

        this.mat = null;
        this.curve = null;
    }

    HasVertices ()
    {
        return this.v0 !== null && this.v1 !== null && this.v2 !== null;
    }

    HasVertexColors ()
    {
        return this.c0 !== null && this.c1 !== null && this.c2 !== null;
    }

    HasNormals ()
    {
        return this.n0 !== null && this.n1 !== null && this.n2 !== null;
    }

    HasTextureUVs ()
    {
        return this.u0 !== null && this.u1 !== null && this.u2 !== null;
    }

    SetVertices (v0, v1, v2)
    {
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        return this;
    }

    SetVertexColors (c0, c1, c2)
    {
        this.c0 = c0;
        this.c1 = c1;
        this.c2 = c2;
        return this;
    }

    SetNormals (n0, n1, n2)
    {
        this.n0 = n0;
        this.n1 = n1;
        this.n2 = n2;
        return this;
    }

    SetTextureUVs (u0, u1, u2)
    {
        this.u0 = u0;
        this.u1 = u1;
        this.u2 = u2;
        return this;
    }

    SetMaterial (mat)
    {
        this.mat = mat;
        return this;
    }

    SetCurve (curve)
    {
        this.curve = curve;
        return this;
    }

    Clone ()
    {
        let cloned = new Triangle (this.v0, this.v1, this.v2);
        cloned.SetVertexColors (this.c0, this.c1, this.c2);
        cloned.SetNormals (this.n0, this.n1, this.n2);
        cloned.SetTextureUVs (this.u0, this.u1, this.u2);
        cloned.SetMaterial (this.mat);
        cloned.SetCurve (this.curve);
        return cloned;
    }
}

// Some mobile devices say that they support mediump, but in reality they don't. At the end
// all materials rendered as black. This hack renders a single plane with red material and
// it checks if it's really red. If it's not, then probably there is a driver issue.
// https://github.com/kovacsv/Online3DViewer/issues/69
function HasHighpDriverIssue ()
{
    let canvas = document.createElement ('canvas');
    document.body.appendChild (canvas);
    let parameters = {
        canvas : canvas,
        antialias : true
    };

    let renderer = new THREE.WebGLRenderer (parameters);
    renderer.outputColorSpace = THREE.LinearSRGBColorSpace;
    renderer.setClearColor ('#ffffff', 1);
    renderer.setSize (10, 10);

    let scene = new THREE.Scene ();

    let ambientLight = new THREE.AmbientLight (0x888888);
    scene.add (ambientLight);

    let light = new THREE.DirectionalLight (0x888888);
    light.position.set (0.0, 0.0, 1.0);
    scene.add (light);

    let camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);
    camera.position.set (0.0, 0.0, 1.0);
    camera.up.set (0.0, 1.0, 0.0);
    camera.lookAt (new THREE.Vector3 (0.0, 0.0, 0.0));
    scene.add (camera);

    let plane = new THREE.PlaneGeometry (1.0, 1.0);
    let mesh = new THREE.Mesh (plane, new THREE.MeshPhongMaterial ({
        color : 0xcc0000
    }));
    scene.add (mesh);
    renderer.render (scene, camera);

    let context = renderer.getContext ();
    let pixels = new Uint8Array (4);
    context.readPixels(
        5, 5, 1, 1,
        context.RGBA,
        context.UNSIGNED_BYTE,
        pixels
    );

    document.body.removeChild (canvas);

    let blackThreshold = 50;
    if (pixels[0] < blackThreshold && pixels[1] < blackThreshold && pixels[2] < blackThreshold) {
        return true;
    }
    return false;
}

const ShadingType =
{
    Phong : 1,
    Physical : 2
};

function GetShadingType (model)
{
    let phongCount = 0;
    let physicalCount = 0;
    for (let i = 0; i < model.MaterialCount (); i++) {
        let material = model.GetMaterial (i);
        if (material.type === MaterialType.Phong) {
            phongCount += 1;
        } else if (material.type === MaterialType.Physical) {
            physicalCount += 1;
        }
    }
    if (phongCount >= physicalCount) {
        return ShadingType.Phong;
    } else {
        return ShadingType.Physical;
    }
}

class ThreeColorConverter
{
    Convert (color)
    {
        return null;
    }
}

class ThreeLinearToSRGBColorConverter extends ThreeColorConverter
{
    Convert (color)
    {
        return new THREE.Color ().copyLinearToSRGB (color);
    }
}

class ThreeSRGBToLinearColorConverter extends ThreeColorConverter
{
    Convert (color)
    {
        return new THREE.Color ().copySRGBToLinear (color);
    }
}

function ConvertThreeColorToColor (threeColor)
{
    return RGBColorFromFloatComponents (threeColor.r, threeColor.g, threeColor.b);
}

function ConvertColorToThreeColor (color)
{
    return new THREE.Color (
        color.r / 255.0,
        color.g / 255.0,
        color.b / 255.0
    );
}

function ConvertThreeGeometryToMesh (threeGeometry, materialIndex, colorConverter)
{
    let mesh = new Mesh ();

    let vertices = threeGeometry.attributes.position.array;
    let vertexItemSize = threeGeometry.attributes.position.itemSize || 3;
    for (let i = 0; i < vertices.length; i += vertexItemSize) {
        let x = vertices[i];
        let y = vertices[i + 1];
        let z = vertices[i + 2];
        mesh.AddVertex (new Coord3D (x, y, z));
    }

    let hasVertexColors = (threeGeometry.attributes.color !== undefined);
    if (hasVertexColors) {
        let colors = threeGeometry.attributes.color.array;
        let colorItemSize = threeGeometry.attributes.color.itemSize || 3;
        for (let i = 0; i < colors.length; i += colorItemSize) {
            let threeColor = new THREE.Color (colors[i], colors[i + 1], colors[i + 2]);
            if (colorConverter !== null) {
                threeColor = colorConverter.Convert (threeColor);
            }
            mesh.AddVertexColor (ConvertThreeColorToColor (threeColor));
        }
    }

    let hasNormals = (threeGeometry.attributes.normal !== undefined);
    if (hasNormals) {
        let normals = threeGeometry.attributes.normal.array;
        let normalItemSize = threeGeometry.attributes.normal.itemSize || 3;
        for (let i = 0; i < normals.length; i += normalItemSize) {
            let x = normals[i];
            let y = normals[i + 1];
            let z = normals[i + 2];
            mesh.AddNormal (new Coord3D (x, y, z));
        }
    }

    let hasUVs = (threeGeometry.attributes.uv !== undefined);
    if (hasUVs) {
        let uvs = threeGeometry.attributes.uv.array;
        let uvItemSize = threeGeometry.attributes.uv.itemSize || 2;
        for (let i = 0; i < uvs.length; i += uvItemSize) {
            let x = uvs[i];
            let y = uvs[i + 1];
            mesh.AddTextureUV (new Coord2D (x, y));
        }
    }

    let indices = null;
    if (threeGeometry.index !== null) {
        indices = threeGeometry.index.array;
    } else {
        indices = [];
        for (let i = 0; i < vertices.length / 3; i++) {
            indices.push (i);
        }
    }

    for (let i = 0; i < indices.length; i += 3) {
        let v0 = indices[i];
        let v1 = indices[i + 1];
        let v2 = indices[i + 2];
        let triangle = new Triangle (v0, v1, v2);
        if (hasVertexColors) {
            triangle.SetVertexColors (v0, v1, v2);
        }
        if (hasNormals) {
            triangle.SetNormals (v0, v1, v2);
        }
        if (hasUVs) {
            triangle.SetTextureUVs (v0, v1, v2);
        }
        if (materialIndex !== null) {
            triangle.SetMaterial (materialIndex);
        }
        mesh.AddTriangle (triangle);
    }

    return mesh;
}

function DisposeThreeObjects (mainObject)
{
    if (mainObject === null) {
        return;
    }

    mainObject.traverse ((obj) => {
        if (obj.isMesh || obj.isLineSegments) {
            if (Array.isArray (obj.material)) {
                for (let material of obj.material) {
                    material.dispose ();
                }
            } else {
                obj.material.dispose ();
            }
            obj.userData = null;
            obj.geometry.dispose ();
        }
    });
}

class ModelFinalizer
{
    constructor (params)
    {
        this.params = {
            getDefaultMaterialColor : () => {
                return new RGBColor (0, 0, 0);
            }
        };
        CopyObjectAttributes (params, this.params);
        this.defaultMaterialIndex = null;
    }

    Finalize (model)
    {
        this.Reset ();

        this.FinalizeMeshes (model);
        this.FinalizeMaterials (model);
        this.FinalizeNodes (model);
    }

    FinalizeMaterials (model)
    {
        if (model.VertexColorCount () === 0) {
            return;
        }

        let materialHasVertexColors = new Map ();
        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {
            let mesh = model.GetMesh (meshIndex);
            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {
                let triangle = mesh.GetTriangle (triangleIndex);
                let hasVertexColors = triangle.HasVertexColors ();
                if (!materialHasVertexColors.has (triangle.mat)) {
                    materialHasVertexColors.set (triangle.mat, hasVertexColors);
                } else if (!hasVertexColors) {
                    materialHasVertexColors.set (triangle.mat, false);
                }
            }
        }

        for (let [materialIndex, hasVertexColors] of materialHasVertexColors) {
            let material = model.GetMaterial (materialIndex);
            material.vertexColors = hasVertexColors;
        }
    }

    FinalizeMeshes (model)
    {
        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {
            let mesh = model.GetMesh (meshIndex);
            let type = GetMeshType (mesh);
            if (type === MeshType.Empty) {
                model.RemoveMesh (meshIndex);
                meshIndex = meshIndex - 1;
                continue;
            }
            this.FinalizeMesh (model, mesh);
        }
    }

    FinalizeMesh (model, mesh)
    {
        function CalculateCurveNormals (mesh)
        {
            function AddAverageNormal (mesh, triangle, vertexIndex, triangleNormals, vertexToTriangles)
            {
                function IsNormalInArray (array, normal)
                {
                    for (let i = 0; i < array.length; i++) {
                        let current = array[i];
                        if (CoordIsEqual3D (current, normal)) {
                            return true;
                        }
                    }
                    return false;
                }

                let averageNormals = [];
                let neigTriangles = vertexToTriangles.get (vertexIndex);
                for (let i = 0; i < neigTriangles.length; i++) {
                    let neigIndex = neigTriangles[i];
                    let neigTriangle = mesh.GetTriangle (neigIndex);
                    if (triangle.curve === neigTriangle.curve) {
                        let triangleNormal = triangleNormals[neigIndex];
                        if (!IsNormalInArray (averageNormals, triangleNormal)) {
                            averageNormals.push (triangleNormal);
                        }
                    }
                }

                let averageNormal = new Coord3D (0.0, 0.0, 0.0);
                for (let i = 0; i < averageNormals.length; i++) {
                    averageNormal = AddCoord3D (averageNormal, averageNormals[i]);
                }
                averageNormal.MultiplyScalar (1.0 / averageNormals.length);
                averageNormal.Normalize ();
                return mesh.AddNormal (averageNormal);
            }

            let triangleNormals = [];
            let vertexToTriangles = new Map ();

            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {
                vertexToTriangles.set (vertexIndex, []);
            }

            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {
                let triangle = mesh.GetTriangle (triangleIndex);
                let v0 = mesh.GetVertex (triangle.v0);
                let v1 = mesh.GetVertex (triangle.v1);
                let v2 = mesh.GetVertex (triangle.v2);
                let normal = CalculateTriangleNormal (v0, v1, v2);
                triangleNormals.push (normal);
                vertexToTriangles.get (triangle.v0).push (triangleIndex);
                vertexToTriangles.get (triangle.v1).push (triangleIndex);
                vertexToTriangles.get (triangle.v2).push (triangleIndex);
            }

            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {
                let triangle = mesh.GetTriangle (triangleIndex);
                if (!triangle.HasNormals ()) {
                    let n0 = AddAverageNormal (mesh, triangle, triangle.v0, triangleNormals, vertexToTriangles);
                    let n1 = AddAverageNormal (mesh, triangle, triangle.v1, triangleNormals, vertexToTriangles);
                    let n2 = AddAverageNormal (mesh, triangle, triangle.v2, triangleNormals, vertexToTriangles);
                    triangle.SetNormals (n0, n1, n2);
                }
            }
        }

        let meshStatus = {
            calculateCurveNormals : false
        };

        for (let i = 0; i < mesh.TriangleCount (); i++) {
            let triangle = mesh.GetTriangle (i);
            this.FinalizeTriangle (mesh, triangle, meshStatus);

            if (triangle.mat === null) {
                triangle.mat = this.GetDefaultMaterialIndex (model);
            }
        }

        if (meshStatus.calculateCurveNormals) {
            CalculateCurveNormals (mesh);
        }
    }

    FinalizeTriangle (mesh, triangle, meshStatus)
    {
        if (!triangle.HasNormals ()) {
            if (triangle.curve === null || triangle.curve === 0) {
                let v0 = mesh.GetVertex (triangle.v0);
                let v1 = mesh.GetVertex (triangle.v1);
                let v2 = mesh.GetVertex (triangle.v2);
                let normal = CalculateTriangleNormal (v0, v1, v2);
                let normalIndex = mesh.AddNormal (normal);
                triangle.SetNormals (normalIndex, normalIndex, normalIndex);
            } else {
                meshStatus.calculateCurveNormals = true;
            }
        }

        if (triangle.curve === null) {
            triangle.curve = 0;
        }
    }

    FinalizeNodes (model)
    {
        let rootNode = model.GetRootNode ();

        let emptyNodes = [];
        rootNode.EnumerateChildren ((node) => {
            if (node.IsEmpty ()) {
                emptyNodes.push (node);
            }
        });

        for (let nodeIndex = 0; nodeIndex < emptyNodes.length; nodeIndex++) {
            let node = emptyNodes[nodeIndex];
            let parentNode = node.GetParent ();
            if (parentNode === null) {
                continue;
            }
            parentNode.RemoveChildNode (node);
            if (parentNode.IsEmpty ()) {
                emptyNodes.push (parentNode);
            }
        }
    }

    GetDefaultMaterialIndex (model)
    {
        if (this.defaultMaterialIndex === null) {
            let defaultMaterialColor = this.params.getDefaultMaterialColor ();
            let defaultMaterial = new PhongMaterial ();
            defaultMaterial.color = defaultMaterialColor;
            defaultMaterial.isDefault = true;
            this.defaultMaterialIndex = model.AddMaterial (defaultMaterial);
        }
        return this.defaultMaterialIndex;
    }

    Reset ()
    {
        this.defaultMaterialIndex = null;
    }
}

function FinalizeModel (model, params)
{
    let finalizer = new ModelFinalizer (params);
    finalizer.Finalize (model);
}

function CheckModel (model)
{
    function IsCorrectValue (val)
    {
        if (val === undefined || val === null) {
            return false;
        }
        return true;
    }

    function IsCorrectNumber (val)
    {
        if (!IsCorrectValue (val)) {
            return false;
        }
        if (isNaN (val)) {
            return false;
        }
        return true;
    }

    function IsCorrectIndex (val, count)
    {
        if (!IsCorrectNumber (val)) {
            return false;
        }
        if (val < 0 || val >= count) {
            return false;
        }
        return true;
    }

    function CheckMesh (model, mesh)
    {
        function CheckTriangle (model, mesh, triangle)
        {
            if (!IsCorrectIndex (triangle.v0, mesh.VertexCount ())) {
                return false;
            }
            if (!IsCorrectIndex (triangle.v1, mesh.VertexCount ())) {
                return false;
            }
            if (!IsCorrectIndex (triangle.v2, mesh.VertexCount ())) {
                return false;
            }
            if (triangle.HasVertexColors ()) {
                if (!IsCorrectIndex (triangle.c0, mesh.VertexColorCount ())) {
                    return false;
                }
                if (!IsCorrectIndex (triangle.c1, mesh.VertexColorCount ())) {
                    return false;
                }
                if (!IsCorrectIndex (triangle.c2, mesh.VertexColorCount ())) {
                    return false;
                }
            }
            if (!IsCorrectIndex (triangle.n0, mesh.NormalCount ())) {
                return false;
            }
            if (!IsCorrectIndex (triangle.n1, mesh.NormalCount ())) {
                return false;
            }
            if (!IsCorrectIndex (triangle.n2, mesh.NormalCount ())) {
                return false;
            }
            if (triangle.HasTextureUVs ()) {
                if (!IsCorrectIndex (triangle.u0, mesh.TextureUVCount ())) {
                    return false;
                }
                    if (!IsCorrectIndex (triangle.u1, mesh.TextureUVCount ())) {
                    return false;
                }
                if (!IsCorrectIndex (triangle.u2, mesh.TextureUVCount ())) {
                    return false;
                }
            }
            if (!IsCorrectIndex (triangle.mat, model.MaterialCount ())) {
                return false;
            }
            if (!IsCorrectNumber (triangle.curve)) {
                return false;
            }

            return true;
        }

        for (let i = 0; i < mesh.VertexCount (); i++) {
            let vertex = mesh.GetVertex (i);
            if (!IsCorrectNumber (vertex.x)) {
                return false;
            }
            if (!IsCorrectNumber (vertex.y)) {
                return false;
            }
            if (!IsCorrectNumber (vertex.z)) {
                return false;
            }
        }

        for (let i = 0; i < mesh.VertexColorCount (); i++) {
            let color = mesh.GetVertexColor (i);
            if (!IsCorrectNumber (color.r)) {
                return false;
            }
            if (!IsCorrectNumber (color.g)) {
                return false;
            }
            if (!IsCorrectNumber (color.b)) {
                return false;
            }
        }

        for (let i = 0; i < mesh.NormalCount (); i++) {
            let normal = mesh.GetNormal (i);
            if (!IsCorrectNumber (normal.x)) {
                return false;
            }
            if (!IsCorrectNumber (normal.y)) {
                return false;
            }
            if (!IsCorrectNumber (normal.z)) {
                return false;
            }
        }

        for (let i = 0; i < mesh.TextureUVCount (); i++) {
            let uv = mesh.GetTextureUV (i);
            if (!IsCorrectNumber (uv.x)) {
                return false;
            }
            if (!IsCorrectNumber (uv.y)) {
                return false;
            }
        }

        for (let i = 0; i < mesh.TriangleCount (); i++) {
            let triangle = mesh.GetTriangle (i);
            if (!CheckTriangle (model, mesh, triangle)) {
                return false;
            }
        }

        return true;
    }

    for (let i = 0; i < model.MeshCount (); i++) {
        let mesh = model.GetMesh (i);
        if (!CheckMesh (model, mesh)) {
            return false;
        }
    }

    return true;
}

class ImporterBase
{
    constructor ()
    {
        this.name = null;
        this.extension = null;
        this.callbacks = null;
        this.model = null;
        this.error = null;
        this.message = null;
    }

    Import (name, extension, content, callbacks)
    {
        this.Clear ();

        this.name = name;
        this.extension = extension;
        this.callbacks = callbacks;
        this.model = new Model ();
        this.error = false;
        this.message = null;
        this.ResetContent ();
        this.ImportContent (content, () => {
            this.CreateResult (callbacks);
        });
    }

    Clear ()
    {
        this.name = null;
        this.extension = null;
        this.callbacks = null;
        this.model = null;
        this.error = null;
        this.message = null;
        this.ClearContent ();
    }

    CreateResult (callbacks)
    {
        if (this.error) {
            callbacks.onError ();
            callbacks.onComplete ();
            return;
        }

        if (IsModelEmpty (this.model)) {
            this.SetError ('The model doesn\'t contain any meshes.');
            callbacks.onError ();
            callbacks.onComplete ();
            return;
        }

        FinalizeModel (this.model, {
            getDefaultMaterialColor : this.callbacks.getDefaultMaterialColor
        });

        callbacks.onSuccess ();
        callbacks.onComplete ();
    }

    CanImportExtension (extension)
    {
        return false;
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    ClearContent ()
    {

    }

    ResetContent ()
    {

    }

    ImportContent (fileContent, onFinish)
    {

    }

    GetModel ()
    {
        return this.model;
    }

    SetError (message)
    {
        this.error = true;
        if (message !== undefined && message !== null) {
            this.message = message;
        }
    }

    WasError ()
    {
        return this.error;
    }

    GetErrorMessage ()
    {
        return this.message;
    }
}

function NameFromLine (line, startIndex, commentChar)
{
	let name = line.substring (startIndex);
	let commentStart = name.indexOf (commentChar);
	if (commentStart !== -1) {
		name = name.substring (0, commentStart);
	}
	return name.trim ();
}

function ParametersFromLine (line, commentChar)
{
	if (commentChar !== null) {
		let commentStart = line.indexOf (commentChar);
		if (commentStart !== -1) {
			line = line.substring (0, commentStart).trim ();
		}
	}
	return line.split (/\s+/u);
}

function ReadLines (str, onLine)
{
	function LineFound (line, onLine)
	{
		let trimmed = line.trim ();
		if (trimmed.length > 0) {
			onLine (trimmed);
		}
	}

	let cursor = 0;
	let next = str.indexOf ('\n', cursor);
	while (next !== -1) {
		LineFound (str.substring (cursor, next), onLine);
		cursor = next + 1;
		next = str.indexOf ('\n', cursor);
	}
	LineFound (str.substring (cursor), onLine);
}

function IsPowerOfTwo (x)
{
	return (x & (x - 1)) === 0;
}

function NextPowerOfTwo (x)
{
	if (IsPowerOfTwo (x)) {
		return x;
	}
	let npot = Math.pow (2, Math.ceil (Math.log (x) / Math.log (2)));
	return parseInt (npot, 10);
}

function UpdateMaterialTransparency (material)
{
	material.transparent = false;
	if (IsLower (material.opacity, 1.0)) {
		material.transparent = true;
	}
}

class ColorToMaterialConverter
{
	constructor (model)
	{
		this.model = model;
		this.colorToMaterialIndex = new Map ();
	}

	GetMaterialIndex (r, g, b, a)
	{
		let colorKey =
			IntegerToHexString (r) +
			IntegerToHexString (g) +
			IntegerToHexString (b);
		let hasAlpha = (a !== undefined && a !== null);
		if (hasAlpha) {
			colorKey += IntegerToHexString (a);
		}

		if (this.colorToMaterialIndex.has (colorKey)) {
			return this.colorToMaterialIndex.get (colorKey);
		} else {
            let material = new PhongMaterial ();
            material.name = colorKey.toUpperCase ();
            material.color = new RGBColor (r, g, b);
            if (hasAlpha && a < 255) {
                material.opacity = a / 255.0;
                UpdateMaterialTransparency (material);
            }
            let materialIndex = this.model.AddMaterial (material);
            this.colorToMaterialIndex.set (colorKey, materialIndex);
            return materialIndex;
		}
	}
}

class Importer3dm extends ImporterBase
{
    constructor ()
    {
        super ();
        this.rhino = null;
    }

    CanImportExtension (extension)
    {
        return extension === '3dm';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    ClearContent ()
    {
        this.instanceIdToObject = null;
        this.instanceIdToDefinition = null;
    }

    ResetContent ()
    {
        this.instanceIdToObject = new Map ();
        this.instanceIdToDefinition = new Map ();
    }

    ImportContent (fileContent, onFinish)
    {
        if (this.rhino === null) {
            LoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {
                rhino3dm ().then ((rhino) => {
                    this.rhino = rhino;
                    this.ImportRhinoContent (fileContent);
                    onFinish ();
                });
            }).catch (() => {
                this.SetError ('Failed to load rhino3dm.');
                onFinish ();
            });
        } else {
            this.ImportRhinoContent (fileContent);
            onFinish ();
        }
    }

    ImportRhinoContent (fileContent)
    {
        let rhinoDoc = this.rhino.File3dm.fromByteArray (fileContent);
        if (rhinoDoc === null) {
            this.SetError ('Failed to read Rhino file.');
            return;
        }
        this.ImportRhinoDocument (rhinoDoc);
        if (IsModelEmpty (this.model)) {
            this.SetError ('The model doesn\'t contain any 3D meshes. Try to save the model while you are in shaded view in Rhino.');
        }
    }

    ImportRhinoDocument (rhinoDoc)
    {
        this.InitRhinoInstances (rhinoDoc);
        this.ImportRhinoUserStrings (rhinoDoc);
        this.ImportRhinoGeometry (rhinoDoc);
    }

    InitRhinoInstances (rhinoDoc)
    {
        let rhinoObjects = rhinoDoc.objects ();
        for (let i = 0; i < rhinoObjects.count; i++) {
            let rhinoObject = rhinoObjects.get (i);
            let rhinoAttributes = rhinoObject.attributes ();
            if (rhinoAttributes.isInstanceDefinitionObject) {
                this.instanceIdToObject.set (rhinoAttributes.id, rhinoObject);
            }
        }
        let rhinoInstanceDefinitions = rhinoDoc.instanceDefinitions ();
        for (let i = 0; i < rhinoInstanceDefinitions.count (); i++) {
            let rhinoInstanceDefinition = rhinoInstanceDefinitions.get (i);
            this.instanceIdToDefinition.set (rhinoInstanceDefinition.id, rhinoInstanceDefinition);
        }
    }

    ImportRhinoUserStrings (rhinoDoc)
    {
        let docStrings = rhinoDoc.strings ();
        if (docStrings.count () > 0) {
            let propertyGroup = new PropertyGroup ('Document user texts');
            for (let i = 0; i < docStrings.count (); i++) {
                let docString = docStrings.get (i);
                propertyGroup.AddProperty (new Property (PropertyType.Text, docString[0], docString[1]));
            }
            this.model.AddPropertyGroup (propertyGroup);
        }
    }

    ImportRhinoGeometry (rhinoDoc)
    {
        let rhinoObjects = rhinoDoc.objects ();
        for (let i = 0; i < rhinoObjects.count; i++) {
            let rhinoObject = rhinoObjects.get (i);
            this.ImportRhinoGeometryObject (rhinoDoc, rhinoObject, []);
        }
    }

    ImportRhinoGeometryObject (rhinoDoc, rhinoObject, rhinoInstanceReferences)
    {
        let rhinoGeometry = rhinoObject.geometry ();
        let rhinoAttributes = rhinoObject.attributes ();

        let objectType = rhinoGeometry.objectType;
        if (rhinoAttributes.isInstanceDefinitionObject && rhinoInstanceReferences.length === 0) {
            return;
        }

        let rhinoMesh = null;
        let deleteMesh = false;

        if (objectType === this.rhino.ObjectType.Mesh) {
            rhinoMesh = rhinoGeometry;
            deleteMesh = false;
        } else if (objectType === this.rhino.ObjectType.Extrusion) {
            rhinoMesh = rhinoGeometry.getMesh (this.rhino.MeshType.Any);
            deleteMesh = true;
        } else if (objectType === this.rhino.ObjectType.Brep) {
            rhinoMesh = new this.rhino.Mesh ();
            let faces = rhinoGeometry.faces ();
            for (let i = 0; i < faces.count; i++) {
                let face = faces.get (i);
                let mesh = face.getMesh (this.rhino.MeshType.Any);
                if (mesh) {
                    rhinoMesh.append (mesh);
                    mesh.delete ();
                }
                face.delete ();
            }
            faces.delete ();
            rhinoMesh.compact ();
            deleteMesh = true;
        } else if (objectType === this.rhino.ObjectType.SubD) {
            rhinoGeometry.subdivide (3);
            rhinoMesh = this.rhino.Mesh.createFromSubDControlNet (rhinoGeometry);
            deleteMesh = true;
        } else if (objectType === this.rhino.ObjectType.InstanceReference) {
            let parentDefinitionId = rhinoGeometry.parentIdefId;
            if (this.instanceIdToDefinition.has (parentDefinitionId)) {
                let instanceDefinition = this.instanceIdToDefinition.get (parentDefinitionId);
                let instanceObjectIds = instanceDefinition.getObjectIds ();
                for (let i = 0; i < instanceObjectIds.length; i++) {
                    let instanceObjectId = instanceObjectIds[i];
                    if (this.instanceIdToObject.has (instanceObjectId)) {
                        let instanceObject = this.instanceIdToObject.get (instanceObjectId);
                        rhinoInstanceReferences.push (rhinoObject);
                        this.ImportRhinoGeometryObject (rhinoDoc, instanceObject, rhinoInstanceReferences);
                        rhinoInstanceReferences.pop ();
                    }
                }
            }
        }

        if (rhinoMesh !== null) {
            this.ImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences);
            if (deleteMesh) {
                rhinoMesh.delete ();
            }
        }
    }

    ImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences)
    {
        let rhinoAttributes = rhinoObject.attributes ();

        let materialIndex = this.GetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences);
        let threeJson = rhinoMesh.toThreejsJSON ();
        let mesh = ConvertThreeGeometryToMesh (threeJson.data, materialIndex, null);
        mesh.SetName (rhinoAttributes.name);

        let userStrings = rhinoAttributes.getUserStrings ();
        if (userStrings.length > 0) {
            let propertyGroup = new PropertyGroup ('User texts');
            for (let i = 0; i < userStrings.length; i++) {
                let userString = userStrings[i];
                propertyGroup.AddProperty (new Property (PropertyType.Text, userString[0], userString[1]));
            }
            mesh.AddPropertyGroup (propertyGroup);
        }

        if (rhinoInstanceReferences.length !== 0) {
            let matrix = new Matrix ().CreateIdentity ();
            for (let i = rhinoInstanceReferences.length - 1; i >= 0; i--) {
                let rhinoInstanceReference = rhinoInstanceReferences[i];
                let rhinoInstanceReferenceGeometry = rhinoInstanceReference.geometry ();
                let rhinoInstanceReferenceMatrix = rhinoInstanceReferenceGeometry.xform.toFloatArray (false);
                let transformationMatrix = new Matrix (rhinoInstanceReferenceMatrix);
                matrix = matrix.MultiplyMatrix (transformationMatrix);
            }
            let transformation = new Transformation (matrix);
            TransformMesh (mesh, transformation);
        }
        this.model.AddMeshToRootNode (mesh);
    }

    GetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences)
    {
        function GetRhinoMaterial (rhino, rhinoObject, rhinoInstanceReferences)
        {
            let rhinoAttributes = rhinoObject.attributes ();
            if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromObject) {
                let materialIndex = rhinoAttributes.materialIndex;
                if (materialIndex > -1) {
                    return rhinoDoc.materials ().get (materialIndex);
                }
            } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromLayer) {
                let layerIndex = rhinoAttributes.layerIndex;
                if (layerIndex > -1) {
                    let layer = rhinoDoc.layers ().get (layerIndex);
                    let layerMaterialIndex = layer.renderMaterialIndex;
                    if (layerMaterialIndex > -1) {
                        return rhinoDoc.materials ().get (layerMaterialIndex);
                    }
                }
            } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromParent) {
                if (rhinoInstanceReferences.length !== 0) {
                    return GetRhinoMaterial (rhino, rhinoInstanceReferences[0], []);
                }
            }
            return null;
        }

        function ConvertRhinoMaterial (rhinoMaterial, callbacks)
        {
            function SetColor (color, rhinoColor)
            {
                color.Set (rhinoColor.r, rhinoColor.g, rhinoColor.b);
            }

            function IsBlack (rhinoColor)
            {
                return rhinoColor.r === 0 && rhinoColor.g === 0 && rhinoColor.b === 0;
            }

            function IsWhite (rhinoColor)
            {
                return rhinoColor.r === 255 && rhinoColor.g === 255 && rhinoColor.b === 255;
            }

            let material = null;
            let physicallyBased = rhinoMaterial.physicallyBased ();
            if (physicallyBased.supported) {
                material = new PhysicalMaterial ();
                material.metalness = physicallyBased.metallic ? 1.0 : 0.0;
                material.roughness = physicallyBased.roughness;
            } else {
                material = new PhongMaterial ();
                SetColor (material.ambient, rhinoMaterial.ambientColor);
                SetColor (material.specular, rhinoMaterial.specularColor);
            }

            material.name = rhinoMaterial.name;

            SetColor (material.color, rhinoMaterial.diffuseColor);
            material.opacity = 1.0 - rhinoMaterial.transparency;
            UpdateMaterialTransparency (material);

            if (IsBlack (material.color) && !IsWhite (rhinoMaterial.reflectionColor)) {
                SetColor (material.color, rhinoMaterial.reflectionColor);
            }
            if (IsBlack (material.color) && !IsWhite (rhinoMaterial.transparentColor)) {
                SetColor (material.color, rhinoMaterial.transparentColor);
            }

            let rhinoTexture = rhinoMaterial.getBitmapTexture ();
            if (rhinoTexture) {
                let texture = new TextureMap ();
                let textureName = GetFileName (rhinoTexture.fileName);
                let textureBuffer = callbacks.getFileBuffer (textureName);
                texture.name = textureName;
                texture.buffer = textureBuffer;
                material.diffuseMap = texture;
            }

            return material;
        }

        function FindMatchingMaterial (model, rhinoMaterial, callbacks)
        {
            let material = ConvertRhinoMaterial (rhinoMaterial, callbacks);
            for (let i = 0; i < model.MaterialCount (); i++) {
                let current = model.GetMaterial (i);
                if (current.IsEqual (material)) {
                    return i;
                }
            }
            return model.AddMaterial (material);
        }

        let rhinoMaterial = GetRhinoMaterial (this.rhino, rhinoObject, rhinoInstanceReferences);
        if (rhinoMaterial === null) {
            return null;
        }
        return FindMatchingMaterial (this.model, rhinoMaterial, this.callbacks);
    }
}

class BinaryReader
{
    constructor (arrayBuffer, isLittleEndian)
    {
        this.arrayBuffer = arrayBuffer;
        this.dataView = new DataView (arrayBuffer);
        this.isLittleEndian = isLittleEndian;
        this.position = 0;
    }

    GetPosition ()
    {
        return this.position;
    }

    SetPosition (position)
    {
        this.position = position;
    }

    GetByteLength ()
    {
        return this.arrayBuffer.byteLength;
    }

    Skip (bytes)
    {
        this.position = this.position + bytes;
    }

    End ()
    {
        return this.position >= this.arrayBuffer.byteLength;
    }

    ReadArrayBuffer (byteLength)
    {
        let originalBufferView = new Uint8Array (this.arrayBuffer);
        let arrayBuffer = new ArrayBuffer (byteLength);
        let bufferView = new Uint8Array (arrayBuffer);
        let subArray = originalBufferView.subarray (this.position, this.position + byteLength);
        bufferView.set (subArray, 0);
        this.position += byteLength;
        return arrayBuffer;
    }

    ReadBoolean8 ()
    {
        let result = this.dataView.getInt8 (this.position);
        this.position = this.position + 1;
        return result ? true : false;
    }

    ReadCharacter8 ()
    {
        let result = this.dataView.getInt8 (this.position);
        this.position = this.position + 1;
        return result;
    }

    ReadUnsignedCharacter8 ()
    {
        let result = this.dataView.getUint8 (this.position);
        this.position = this.position + 1;
        return result;
    }

    ReadInteger16 ()
    {
        let result = this.dataView.getInt16 (this.position, this.isLittleEndian);
        this.position = this.position + 2;
        return result;
    }

    ReadUnsignedInteger16 ()
    {
        let result = this.dataView.getUint16 (this.position, this.isLittleEndian);
        this.position = this.position + 2;
        return result;
    }

    ReadInteger32 ()
    {
        let result = this.dataView.getInt32 (this.position, this.isLittleEndian);
        this.position = this.position + 4;
        return result;
    }

    ReadUnsignedInteger32 ()
    {
        let result = this.dataView.getUint32 (this.position, this.isLittleEndian);
        this.position = this.position + 4;
        return result;
    }

    ReadFloat32 ()
    {
        let result = this.dataView.getFloat32 (this.position, this.isLittleEndian);
        this.position = this.position + 4;
        return result;
    }

    ReadDouble64 ()
    {
        let result = this.dataView.getFloat64 (this.position, this.isLittleEndian);
        this.position = this.position + 8;
        return result;
    }
}

const CHUNK3DS =
{
    MAIN3DS : 0x4D4D,
    EDIT3DS : 0x3D3D,
    EDIT_MATERIAL : 0xAFFF,
    MAT_NAME : 0xA000,
    MAT_AMBIENT : 0xA010,
    MAT_DIFFUSE : 0xA020,
    MAT_SPECULAR : 0xA030,
    MAT_SHININESS : 0xA040,
    MAT_SHININESS_STRENGTH : 0xA041,
    MAT_TRANSPARENCY : 0xA050,
    MAT_COLOR_F : 0x0010,
    MAT_COLOR : 0x0011,
    MAT_LIN_COLOR : 0x0012,
    MAT_LIN_COLOR_F : 0x0013,
    MAT_TEXMAP : 0xA200,
    MAT_TEXMAP_NAME : 0xA300,
    MAT_TEXMAP_UOFFSET : 0xA358,
    MAT_TEXMAP_VOFFSET : 0xA35A,
    MAT_TEXMAP_USCALE : 0xA354,
    MAT_TEXMAP_VSCALE : 0xA356,
    MAT_TEXMAP_ROTATION : 0xA35C,
    PERCENTAGE : 0x0030,
    PERCENTAGE_F : 0x0031,
    EDIT_OBJECT : 0x4000,
    OBJ_TRIMESH : 0x4100,
    OBJ_LIGHT : 0x4600,
    OBJ_CAMERA : 0x4700,
    TRI_VERTEX : 0x4110,
    TRI_TEXVERTEX : 0x4140,
    TRI_FACE : 0x4120,
    TRI_TRANSFORMATION : 0x4160,
    TRI_MATERIAL : 0x4130,
    TRI_SMOOTH : 0x4150,
    KF3DS : 0xB000,
    OBJECT_NODE : 0xB002,
    OBJECT_HIERARCHY : 0xB010,
    OBJECT_INSTANCE_NAME : 0xB011,
    OBJECT_PIVOT : 0xB013,
    OBJECT_POSITION : 0xB020,
    OBJECT_ROTATION : 0xB021,
    OBJECT_SCALE : 0xB022,
    OBJECT_ID : 0xB030
};

class Importer3dsNode
{
    constructor ()
    {
        this.id = -1;
        this.name = '';
        this.flags = -1;
        this.parentId = -1;
        this.instanceName = '';
        this.pivot = [0.0, 0.0, 0.0];
        this.positions = [];
        this.rotations = [];
        this.scales = [];
    }
}

class Importer3dsNodeList
{
    constructor ()
    {
        this.nodes = [];
        this.nodeIdToNode = new Map ();
    }

    IsEmpty ()
    {
        return this.nodes.length === 0;
    }

    AddNode (node)
    {
        this.nodes.push (node);
        this.nodeIdToNode.set (node.nodeId, node);
    }

    GetNodes ()
    {
        return this.nodes;
    }
}

class Importer3ds extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === '3ds';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    ClearContent ()
    {
        this.materialNameToIndex = null;
        this.meshNameToIndex = null;
        this.nodeList = null;
    }

    ResetContent ()
    {
        this.materialNameToIndex = new Map ();
        this.meshNameToIndex = new Map ();
        this.nodeList = new Importer3dsNodeList ();
    }

    ImportContent (fileContent, onFinish)
    {
        this.ProcessBinary (fileContent);
        onFinish ();
    }

    ProcessBinary (fileContent)
    {
        let reader = new BinaryReader (fileContent, true);
        let endByte = reader.GetByteLength ();
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.MAIN3DS) {
                this.ReadMainChunk (reader, chunkLength);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
    }

    ReadMainChunk (reader, length)
    {
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.EDIT3DS) {
                this.ReadEditorChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.KF3DS) {
                this.ReadKeyFrameChunk (reader, chunkLength);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
        this.BuildNodeHierarchy ();
    }

    ReadEditorChunk (reader, length)
    {
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.EDIT_MATERIAL) {
                this.ReadMaterialChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.EDIT_OBJECT) {
                this.ReadObjectChunk (reader, chunkLength);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
    }

    ReadMaterialChunk (reader, length)
    {
        let material = new PhongMaterial ();
        let endByte = this.GetChunkEnd (reader, length);
        let shininess = null;
        let shininessStrength = null;
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.MAT_NAME) {
                material.name = this.ReadName (reader);
            } else if (chunkId === CHUNK3DS.MAT_AMBIENT) {
                material.ambient = this.ReadColorChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.MAT_DIFFUSE) {
                material.color = this.ReadColorChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.MAT_SPECULAR) {
                material.specular = this.ReadColorChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.MAT_SHININESS) {
                shininess = this.ReadPercentageChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.MAT_SHININESS_STRENGTH) {
                shininessStrength = this.ReadPercentageChunk (reader, chunkLength);
            } else if (chunkId === CHUNK3DS.MAT_TRANSPARENCY) {
                material.opacity = 1.0 - this.ReadPercentageChunk (reader, chunkLength);
                UpdateMaterialTransparency (material);
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP) {
                material.diffuseMap = this.ReadTextureMapChunk (reader, chunkLength);
                UpdateMaterialTransparency (material);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });

        if (shininess !== null && shininessStrength !== null) {
            material.shininess = shininess * shininessStrength / 10.0;
        }
        let materialIndex = this.model.AddMaterial (material);
        this.materialNameToIndex.set (material.name, materialIndex);
    }

    ReadTextureMapChunk (reader, length)
    {
        let texture = new TextureMap ();
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.MAT_TEXMAP_NAME) {
                let textureName = this.ReadName (reader);
                let textureBuffer = this.callbacks.getFileBuffer (textureName);
                texture.name = textureName;
                texture.buffer = textureBuffer;
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_UOFFSET) {
                texture.offset.x = reader.ReadFloat32 ();
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_VOFFSET) {
                texture.offset.y = reader.ReadFloat32 ();
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_USCALE) {
                texture.scale.x = reader.ReadFloat32 ();
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_VSCALE) {
                texture.scale.y = reader.ReadFloat32 ();
            } else if (chunkId === CHUNK3DS.MAT_TEXMAP_ROTATION) {
                texture.rotation = reader.ReadFloat32 () * DegRad;
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
        return texture;
    }

    ReadColorChunk (reader, length)
    {
        let color = new RGBColor (0, 0, 0);
        let endByte = this.GetChunkEnd (reader, length);
        let hasLinColor = false;
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.MAT_COLOR) {
                if (!hasLinColor) {
                    color.r = reader.ReadUnsignedCharacter8 ();
                    color.g = reader.ReadUnsignedCharacter8 ();
                    color.b = reader.ReadUnsignedCharacter8 ();
                }
            } else if (chunkId === CHUNK3DS.MAT_LIN_COLOR) {
                color.r = reader.ReadUnsignedCharacter8 ();
                color.g = reader.ReadUnsignedCharacter8 ();
                color.b = reader.ReadUnsignedCharacter8 ();
                hasLinColor = true;
            } else if (chunkId === CHUNK3DS.MAT_COLOR_F) {
                if (!hasLinColor) {
                    color.r = ColorComponentFromFloat (reader.ReadFloat32 ());
                    color.g = ColorComponentFromFloat (reader.ReadFloat32 ());
                    color.b = ColorComponentFromFloat (reader.ReadFloat32 ());
                }
            } else if (chunkId === CHUNK3DS.MAT_LIN_COLOR_F) {
                color.r = ColorComponentFromFloat (reader.ReadFloat32 ());
                color.g = ColorComponentFromFloat (reader.ReadFloat32 ());
                color.b = ColorComponentFromFloat (reader.ReadFloat32 ());
                hasLinColor = true;
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
        return color;
    }

    ReadPercentageChunk (reader, length)
    {
        let percentage = 0.0;
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.PERCENTAGE) {
                percentage = reader.ReadUnsignedInteger16 () / 100.0;
            } else if (chunkId === CHUNK3DS.PERCENTAGE_F) {
                percentage = reader.ReadFloat32 ();
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
        return percentage;
    }

    ReadObjectChunk (reader, length)
    {
        let endByte = this.GetChunkEnd (reader, length);
        let objectName = this.ReadName (reader);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.OBJ_TRIMESH) {
                this.ReadMeshChunk (reader, chunkLength, objectName);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
    }

    ReadMeshChunk (reader, length, objectName)
    {
        function ApplyMeshTransformation (mesh, meshMatrix)
        {
            if (!meshMatrix.IsValid ()) {
                return;
            }

            let determinant = meshMatrix.Determinant ();
            let mirrorByX = IsNegative (determinant);
            if (mirrorByX) {
                let scaleMatrix = new Matrix ().CreateScale (-1.0, 1.0, 1.0);
                meshMatrix = scaleMatrix.MultiplyMatrix (meshMatrix);
            }

            let invMeshMatrix = meshMatrix.Invert ();
            if (invMeshMatrix === null) {
                return;
            }

            let transformation = new Transformation (invMeshMatrix);
            TransformMesh (mesh, transformation);
            if (mirrorByX) {
                FlipMeshTrianglesOrientation (mesh);
            }
        }

        let mesh = new Mesh ();
        mesh.SetName (objectName);

        let endByte = this.GetChunkEnd (reader, length);
        let matrixElements = null;
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.TRI_VERTEX) {
                this.ReadVerticesChunk (mesh, reader);
            } else if (chunkId === CHUNK3DS.TRI_TEXVERTEX) {
                this.ReadTextureVerticesChunk (mesh, reader);
            } else if (chunkId === CHUNK3DS.TRI_FACE) {
                this.ReadFacesChunk (mesh, reader, chunkLength);
            } else if (chunkId === CHUNK3DS.TRI_TRANSFORMATION) {
                matrixElements = this.ReadTransformationChunk (reader);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });

        if (mesh.VertexCount () === mesh.TextureUVCount ()) {
            for (let i = 0; i < mesh.TriangleCount (); i++) {
                let triangle = mesh.GetTriangle (i);
                triangle.SetTextureUVs (
                    triangle.v0,
                    triangle.v1,
                    triangle.v2
                );
            }
        }

        let meshMatrix = new Matrix (matrixElements);
        ApplyMeshTransformation (mesh, meshMatrix);

        let meshIndex = this.model.AddMesh (mesh);
        this.meshNameToIndex.set (mesh.GetName (), meshIndex);
    }

    ReadVerticesChunk (mesh, reader)
    {
        let vertexCount = reader.ReadUnsignedInteger16 ();
        for (let i = 0; i < vertexCount; i++) {
            let x = reader.ReadFloat32 ();
            let y = reader.ReadFloat32 ();
            let z = reader.ReadFloat32 ();
            mesh.AddVertex (new Coord3D (x, y, z));
        }
    }

    ReadTextureVerticesChunk (mesh, reader)
    {
        let texVertexCount = reader.ReadUnsignedInteger16 ();
        for (let i = 0; i < texVertexCount; i++) {
            let x = reader.ReadFloat32 ();
            let y = reader.ReadFloat32 ();
            mesh.AddTextureUV (new Coord2D (x, y));
        }
    }

    ReadFacesChunk (mesh, reader, length)
    {
        let endByte = this.GetChunkEnd (reader, length);
        let faceCount = reader.ReadUnsignedInteger16 ();
        for (let i = 0; i < faceCount; i++) {
            let v0 = reader.ReadUnsignedInteger16 ();
            let v1 = reader.ReadUnsignedInteger16 ();
            let v2 = reader.ReadUnsignedInteger16 ();
            reader.ReadUnsignedInteger16 (); // flags
            mesh.AddTriangle (new Triangle (v0, v1, v2));
        }

        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.TRI_MATERIAL) {
                this.ReadFaceMaterialsChunk (mesh, reader);
            } else if (chunkId === CHUNK3DS.TRI_SMOOTH) {
                this.ReadFaceSmoothingGroupsChunk (mesh, faceCount, reader);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
    }

    ReadFaceMaterialsChunk (mesh, reader)
    {
        let materialName = this.ReadName (reader);
        let materialIndex = this.materialNameToIndex.get (materialName);
        let faceCount = reader.ReadUnsignedInteger16 ();
        for (let i = 0; i < faceCount; i++) {
            let faceIndex = reader.ReadUnsignedInteger16 ();
            let triangle = mesh.GetTriangle (faceIndex);
            if (materialIndex !== undefined) {
                triangle.mat = materialIndex;
            }
        }
    }

    ReadFaceSmoothingGroupsChunk (mesh, faceCount, reader)
    {
        for (let i = 0; i < faceCount; i++) {
            let smoothingGroup = reader.ReadUnsignedInteger32 ();
            let triangle = mesh.GetTriangle (i);
            triangle.curve = smoothingGroup;
        }
    }

    ReadTransformationChunk (reader)
    {
        let matrix = [];
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 3; j++) {
                matrix.push (reader.ReadFloat32 ());
            }
            if (i < 3) {
                matrix.push (0);
            } else {
                matrix.push (1);
            }
        }
        return matrix;
    }

    ReadKeyFrameChunk (reader, length)
    {
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.OBJECT_NODE) {
                this.ReadObjectNodeChunk (reader, chunkLength);
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });
    }

    BuildNodeHierarchy ()
    {
        function GetNodeTransformation (node3ds, isMeshNode)
        {
            function GetNodePosition (node3ds)
            {
                if (node3ds.positions.length === 0) {
                    return [0.0, 0.0, 0.0];
                }
                return node3ds.positions[0];
            }

            function GetNodeRotation (node3ds)
            {
                function GetQuaternionFromAxisAndAngle (axisAngle)
                {
                    let result = [0.0, 0.0, 0.0, 1.0];
                    let length = Math.sqrt (axisAngle[0] * axisAngle[0] + axisAngle[1] * axisAngle[1] + axisAngle[2] * axisAngle[2]);
                    if (length > 0.0) {
                        let omega = axisAngle[3] * -0.5;
                        let si = Math.sin (omega) / length;
                        result = [si * axisAngle[0], si * axisAngle[1], si * axisAngle[2], Math.cos (omega)];
                    }
                    return result;
                }

                if (node3ds.rotations.length === 0) {
                    return [0.0, 0.0, 0.0, 1.0];
                }

                let rotation = node3ds.rotations[0];
                return GetQuaternionFromAxisAndAngle (rotation);
            }

            function GetNodeScale (node3ds)
            {
                if (node3ds.scales.length === 0) {
                    return [1.0, 1.0, 1.0];
                }
                return node3ds.scales[0];
            }

            let matrix = new Matrix ();
            matrix.ComposeTRS (
                ArrayToCoord3D (GetNodePosition (node3ds)),
                ArrayToQuaternion (GetNodeRotation (node3ds)),
                ArrayToCoord3D (GetNodeScale (node3ds))
            );

            if (isMeshNode) {
                let pivotPoint = node3ds.pivot;
                let pivotMatrix = new Matrix ().CreateTranslation (-pivotPoint[0], -pivotPoint[1], -pivotPoint[2]);
                matrix = pivotMatrix.MultiplyMatrix (matrix);
            }

            return new Transformation (matrix);
        }

        let rootNode = this.model.GetRootNode ();
        if (this.nodeList.IsEmpty ()) {
            for (let meshIndex = 0; meshIndex < this.model.MeshCount (); meshIndex++) {
                rootNode.AddMeshIndex (meshIndex);
            }
        } else {
            let nodeIdToModelNode = new Map ();
            for (let node3ds of this.nodeList.GetNodes ()) {
                let node = new Node ();
                if (node3ds.name.length > 0 && node3ds.name !== '$$$DUMMY') {
                    node.SetName (node3ds.name);
                    if (node3ds.instanceName.length > 0) {
                        node.SetName (node.GetName () + ' ' + node3ds.instanceName);
                    }
                }
                if (node3ds.parentId === 65535 || !nodeIdToModelNode.has (node3ds.parentId)) {
                    rootNode.AddChildNode (node);
                } else {
                    let parentNode = nodeIdToModelNode.get (node3ds.parentId);
                    parentNode.AddChildNode (node);
                }
                nodeIdToModelNode.set (node3ds.id, node);
                let isMeshNode = this.meshNameToIndex.has (node3ds.name);
                node.SetTransformation (GetNodeTransformation (node3ds, isMeshNode));
                if (isMeshNode) {
                    node.AddMeshIndex (this.meshNameToIndex.get (node3ds.name));
                }
            }
        }
    }

    ReadObjectNodeChunk (reader, length)
    {
        function ReadTrackVector (obj, reader, type)
        {
            let result = [];
            reader.Skip (10);

            let keyNum = reader.ReadInteger32 ();
            for (let i = 0; i < keyNum; i++) {
                reader.ReadInteger32 ();
                let flags = reader.ReadUnsignedInteger16 ();
                if (flags !== 0) {
                    reader.ReadFloat32 ();
                }

                let current = null;
                if (type === CHUNK3DS.OBJECT_ROTATION) {
                    let tmp = reader.ReadFloat32 ();
                    current = obj.ReadVector (reader);
                    current[3] = tmp;
                } else {
                    current = obj.ReadVector (reader);
                }
                result.push (current);
            }

            return result;
        }

        let node3ds = new Importer3dsNode ();
        let endByte = this.GetChunkEnd (reader, length);
        this.ReadChunks (reader, endByte, (chunkId, chunkLength) => {
            if (chunkId === CHUNK3DS.OBJECT_HIERARCHY) {
                node3ds.name = this.ReadName (reader);
                node3ds.flags = reader.ReadUnsignedInteger32 ();
                node3ds.parentId = reader.ReadUnsignedInteger16 ();
            } else if (chunkId === CHUNK3DS.OBJECT_INSTANCE_NAME) {
                node3ds.instanceName = this.ReadName (reader);
            } else if (chunkId === CHUNK3DS.OBJECT_PIVOT) {
                node3ds.pivot = this.ReadVector (reader);
            } else if (chunkId === CHUNK3DS.OBJECT_POSITION) {
                node3ds.positions = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_POSITION);
            } else if (chunkId === CHUNK3DS.OBJECT_ROTATION) {
                node3ds.rotations = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_ROTATION);
            } else if (chunkId === CHUNK3DS.OBJECT_SCALE) {
                node3ds.scales = ReadTrackVector (this, reader, CHUNK3DS.OBJECT_SCALE);
            } else if (chunkId === CHUNK3DS.OBJECT_ID) {
                node3ds.id = reader.ReadUnsignedInteger16 ();
            } else {
                this.SkipChunk (reader, chunkLength);
            }
        });

        this.nodeList.AddNode (node3ds);
    }

    ReadName (reader)
    {
        let name = '';
        let char = 0;
        let count = 0;
        while (count < 64) {
            char = reader.ReadCharacter8 ();
            if (char === 0) {
                break;
            }
            name = name + String.fromCharCode (char);
            count = count + 1;
        }
        return name;
    }

    ReadVector (reader)
    {
        let result = [
            reader.ReadFloat32 (),
            reader.ReadFloat32 (),
            reader.ReadFloat32 ()
        ];
        return result;
    }

    ReadChunks (reader, endByte, onChunk)
    {
        while (reader.GetPosition () <= endByte - 6) {
        let chunkId = reader.ReadUnsignedInteger16 ();
            let chunkLength = reader.ReadUnsignedInteger32 ();
            onChunk (chunkId, chunkLength);
        }
    }

    GetChunkEnd (reader, length)
    {
        return reader.GetPosition () + length - 6;
    }

    SkipChunk (reader, length)
    {
        reader.Skip (length - 6);
    }
}

const GltfComponentType =
{
    BYTE : 5120,
    UNSIGNED_BYTE : 5121,
    SHORT : 5122,
    UNSIGNED_SHORT : 5123,
    UNSIGNED_INT : 5125,
    FLOAT : 5126
};

const GltfDataType =
{
    SCALAR : 0,
    VEC2 : 1,
    VEC3 : 2,
    VEC4 : 3,
    MAT2 : 4,
    MAT3  : 5,
    MAT4  : 6
};

const GltfRenderMode =
{
    POINTS : 0,
    LINES : 1,
    LINE_LOOP : 2,
    LINE_STRIP : 3,
    TRIANGLES : 4,
    TRIANGLE_STRIP  : 5,
    TRIANGLE_FAN : 6
};

const GltfConstants =
{
    GLTF_STRING : 0x46546C67,
    JSON_CHUNK_TYPE : 0x4E4F534A,
    BINARY_CHUNK_TYPE : 0x004E4942
};

function GetGltfColor (color)
{
    return RGBColorFromFloatComponents (
        LinearToSRGB (color[0]),
        LinearToSRGB (color[1]),
        LinearToSRGB (color[2])
    );
}

function GetGltfVertexColor (color, componentType)
{
    function GetColorComponent (component, componentType)
    {
        let normalized = component;
        if (componentType === GltfComponentType.UNSIGNED_BYTE) {
            normalized /= 255.0;
        } else if (componentType === GltfComponentType.UNSIGNED_SHORT) {
            normalized /= 65535.0;
        }
        return ColorComponentFromFloat (LinearToSRGB (normalized));
    }

    return new RGBColor (
        GetColorComponent (color[0], componentType),
        GetColorComponent (color[1], componentType),
        GetColorComponent (color[2], componentType)
    );
}

class GltfBufferReader
{
    constructor (buffer)
    {
        this.reader = new BinaryReader (buffer, true);
        this.componentType = null;
        this.dataType = null;
        this.byteStride = null;
        this.dataCount = null;
        this.sparseReader = null;
    }

    SetComponentType (componentType)
    {
        this.componentType = componentType;
    }

    SetDataType (dataType)
    {
        if (dataType === 'SCALAR') {
            this.dataType = GltfDataType.SCALAR;
        } else if (dataType === 'VEC2') {
            this.dataType = GltfDataType.VEC2;
        } else if (dataType === 'VEC3') {
            this.dataType = GltfDataType.VEC3;
        } else if (dataType === 'VEC4') {
            this.dataType = GltfDataType.VEC4;
        } else if (dataType === 'MAT2') {
            this.dataType = GltfDataType.MAT2;
        } else if (dataType === 'MAT3') {
            this.dataType = GltfDataType.MAT3;
        } else if (dataType === 'MAT4') {
            this.dataType = GltfDataType.MAT4;
        }
    }

    SetByteStride (byteStride)
    {
        this.byteStride = byteStride;
    }

    SetDataCount (dataCount)
    {
        this.dataCount = dataCount;
    }

    SetSparseReader (indexReader, valueReader)
    {
        this.sparseReader = {
            indexReader : indexReader,
            valueReader : valueReader
        };
    }

    ReadArrayBuffer (byteLength)
    {
        return this.reader.ReadArrayBuffer (byteLength);
    }

    GetDataCount ()
    {
        return this.dataCount;
    }

    ReadData ()
    {
        if (this.dataType === null) {
            return null;
        }
        if (this.dataType === GltfDataType.SCALAR) {
            let data = this.ReadComponent ();
            this.SkipBytesByStride (1);
            return data;
        } else if (this.dataType === GltfDataType.VEC2) {
            let x = this.ReadComponent ();
            let y = this.ReadComponent ();
            this.SkipBytesByStride (2);
            return new Coord2D (x, y);
        } else if (this.dataType === GltfDataType.VEC3) {
            let x = this.ReadComponent ();
            let y = this.ReadComponent ();
            let z = this.ReadComponent ();
            this.SkipBytesByStride (3);
            return new Coord3D (x, y, z);
        } else if (this.dataType === GltfDataType.VEC4) {
            let x = this.ReadComponent ();
            let y = this.ReadComponent ();
            let z = this.ReadComponent ();
            let w = this.ReadComponent ();
            this.SkipBytesByStride (4);
            return new Coord4D (x, y, z, w);
        }
        return null;
    }

    EnumerateData (onData)
    {
        if (this.sparseReader === null) {
            for (let i = 0; i < this.dataCount; i++) {
                onData (this.ReadData ());
            }
        } else {
            let sparseData = [];
            for (let i = 0; i < this.sparseReader.indexReader.GetDataCount (); i++) {
                let index = this.sparseReader.indexReader.ReadData ();
                let value = this.sparseReader.valueReader.ReadData ();
                sparseData.push ({
                    index : index,
                    value : value
                });
            }
            let sparseIndex = 0;
            for (let i = 0; i < this.dataCount; i++) {
                let data = this.ReadData ();
                if (sparseIndex < sparseData.length && sparseData[sparseIndex].index === i) {
                    onData (sparseData[sparseIndex].value);
                    sparseIndex += 1;
                } else {
                    onData (data);
                }
            }
        }
    }

    SkipBytes (bytes)
    {
        this.reader.Skip (bytes);
    }

    ReadComponent ()
    {
        if (this.componentType === null) {
            return null;
        }
        if (this.componentType === GltfComponentType.BYTE) {
            return this.reader.ReadCharacter8 ();
        } else if (this.componentType === GltfComponentType.UNSIGNED_BYTE) {
            return this.reader.ReadUnsignedCharacter8 ();
        } else if (this.componentType === GltfComponentType.SHORT) {
            return this.reader.ReadInteger16 ();
        } else if (this.componentType === GltfComponentType.UNSIGNED_SHORT) {
            return this.reader.ReadUnsignedInteger16 ();
        } else if (this.componentType === GltfComponentType.UNSIGNED_INT) {
            return this.reader.ReadInteger32 ();
        } else if (this.componentType === GltfComponentType.FLOAT) {
            return this.reader.ReadFloat32 ();
        }
        return null;
    }

    SkipBytesByStride (componentCount)
    {
        if (this.byteStride === null) {
            return;
        }
        let readBytes = componentCount * this.GetComponentSize ();
        this.reader.Skip (this.byteStride - readBytes);
    }

    GetComponentSize ()
    {
        if (this.componentType === GltfComponentType.BYTE) {
            return 1;
        } else if (this.componentType === GltfComponentType.UNSIGNED_BYTE) {
            return 1;
        } else if (this.componentType === GltfComponentType.SHORT) {
            return 2;
        } else if (this.componentType === GltfComponentType.UNSIGNED_SHORT) {
            return 2;
        } else if (this.componentType === GltfComponentType.UNSIGNED_INT) {
            return 4;
        } else if (this.componentType === GltfComponentType.FLOAT) {
            return 4;
        }
        return 0;
    }
}

class GltfExtensions
{
    constructor ()
    {
        this.supportedExtensions = [
            'KHR_draco_mesh_compression',
            'KHR_materials_pbrSpecularGlossiness',
            'KHR_texture_transform',
        ];
        this.draco = null;
    }

    LoadLibraries (extensionsRequired, callbacks)
    {
        if (extensionsRequired === undefined) {
            callbacks.onSuccess ();
            return;
        }
        if (this.draco === null && extensionsRequired.indexOf ('KHR_draco_mesh_compression') !== -1) {
			LoadExternalLibrary ('loaders/draco_decoder.js').then (() => {
                DracoDecoderModule ().then ((draco) => {
                    this.draco = draco;
                    callbacks.onSuccess ();
                });
            }).catch (() => {
                callbacks.onError ('Failed to load draco decoder.');
            });
        } else {
            callbacks.onSuccess ();
        }
    }

    GetUnsupportedExtensions (extensionsRequired)
    {
        let unsupportedExtensions = [];
        if (extensionsRequired === undefined) {
            return unsupportedExtensions;
        }
        for (let i = 0; i < extensionsRequired.length; i++) {
            let requiredExtension = extensionsRequired[i];
            if (this.supportedExtensions.indexOf (requiredExtension) === -1) {
                unsupportedExtensions.push (requiredExtension);
            }
        }
        return unsupportedExtensions;
    }

    ProcessMaterial (gltfMaterial, material, imporTextureFn)
    {
        if (gltfMaterial.extensions === undefined) {
            return null;
        }

        let khrSpecularGlossiness = gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness;
        if (khrSpecularGlossiness === undefined) {
            return null;
        }

        let phongMaterial = new PhongMaterial ();
        let diffuseColor = khrSpecularGlossiness.diffuseFactor;
        if (diffuseColor !== undefined) {
            phongMaterial.color = GetGltfColor (diffuseColor);
            phongMaterial.opacity = diffuseColor[3];
        }
        let diffuseTexture = khrSpecularGlossiness.diffuseTexture;
        if (diffuseTexture !== undefined) {
            phongMaterial.diffuseMap = imporTextureFn (diffuseTexture);
        }
        let specularColor = khrSpecularGlossiness.specularFactor;
        if (specularColor !== undefined) {
            phongMaterial.specular = GetGltfColor (specularColor);
        }
        let specularTexture = khrSpecularGlossiness.specularGlossinessTexture;
        if (specularTexture !== undefined) {
            phongMaterial.specularMap = imporTextureFn (specularTexture);
        }
        let glossiness = khrSpecularGlossiness.glossinessFactor;
        if (glossiness !== undefined) {
            phongMaterial.shininess = glossiness;
        }

        return phongMaterial;
    }

    ProcessTexture (gltfTexture, texture)
    {
        if (gltfTexture.extensions === undefined) {
            return;
        }
        let khrTextureTransform = gltfTexture.extensions.KHR_texture_transform;
        if (khrTextureTransform !== undefined) {
            if (khrTextureTransform.offset !== undefined) {
                texture.offset.x = khrTextureTransform.offset[0];
                texture.offset.y = -khrTextureTransform.offset[1];
            }
            if (khrTextureTransform.scale !== undefined) {
                texture.scale.x = khrTextureTransform.scale[0];
                texture.scale.y = khrTextureTransform.scale[1];
            }
            if (khrTextureTransform.rotation !== undefined) {
                texture.rotation = -khrTextureTransform.rotation;
            }
        }
    }

    ProcessPrimitive (importer, gltf, primitive, mesh)
    {
        function EnumerateComponents (draco, decoder, dracoMesh, attributeId, processor)
        {
            let attribute = decoder.GetAttributeByUniqueId (dracoMesh, attributeId);
            let numComponents = attribute.num_components ();
            let numPoints = dracoMesh.num_points ();
            let numValues = numPoints * numComponents;
            let dataSize = numValues * 4;
            let attributePtr = draco._malloc (dataSize);
            decoder.GetAttributeDataArrayForAllPoints (dracoMesh, attribute, draco.DT_FLOAT32, dataSize, attributePtr);
            let attributeArray = new Float32Array (draco.HEAPF32.buffer, attributePtr, numValues).slice ();
            if (numComponents === 2) {
                for (let i = 0; i < attributeArray.length; i += 2) {
                    processor (new Coord2D (
                        attributeArray[i + 0],
                        attributeArray[i + 1]
                    ));
                }
            } else if (numComponents === 3) {
                for (let i = 0; i < attributeArray.length; i += 3) {
                    processor (new Coord3D (
                        attributeArray[i + 0],
                        attributeArray[i + 1],
                        attributeArray[i + 2]
                    ));
                }
            } else if (numComponents === 4) {
                for (let i = 0; i < attributeArray.length; i += 4) {
                    processor (new Coord4D (
                        attributeArray[i + 0],
                        attributeArray[i + 1],
                        attributeArray[i + 2],
                        attributeArray[i + 3]
                    ));
                }
            }
            draco._free (attributePtr);
        }

        if (this.draco === null) {
            return false;
        }

        if (primitive.extensions === undefined || primitive.extensions.KHR_draco_mesh_compression === undefined) {
            return false;
        }

        let decoder = new this.draco.Decoder ();
        let decoderBuffer = new this.draco.DecoderBuffer ();

        let extensionParams = primitive.extensions.KHR_draco_mesh_compression;
        let compressedBufferView = gltf.bufferViews[extensionParams.bufferView];
        let compressedReader = importer.GetReaderFromBufferView (compressedBufferView);
        let compressedArrayBuffer = compressedReader.ReadArrayBuffer (compressedBufferView.byteLength);
        decoderBuffer.Init (new Int8Array (compressedArrayBuffer), compressedArrayBuffer.byteLength);
        let geometryType = decoder.GetEncodedGeometryType (decoderBuffer);
        if (geometryType !== this.draco.TRIANGULAR_MESH) {
            return true;
        }

        let dracoMesh = new this.draco.Mesh ();
        let decodingStatus = decoder.DecodeBufferToMesh (decoderBuffer, dracoMesh);
        if (!decodingStatus.ok ()) {
            return true;
        }

        let hasVertices = (extensionParams.attributes.POSITION !== undefined);
        let hasVertexColors = false;
        let hasNormals = (extensionParams.attributes.NORMAL !== undefined);
        let hasUVs = (extensionParams.attributes.TEXCOORD_0 !== undefined);

        if (!hasVertices) {
            return true;
        }

        let vertexOffset = mesh.VertexCount ();
        let vertexColorOffset = mesh.VertexColorCount ();
        let normalOffset = mesh.NormalCount ();
        let uvOffset = mesh.TextureUVCount ();

        EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.POSITION, (vertex) => {
            mesh.AddVertex (vertex);
        });

        if (hasNormals) {
            EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.NORMAL, (normal) => {
                mesh.AddNormal (normal);
            });
        }

        if (hasUVs) {
            EnumerateComponents (this.draco, decoder, dracoMesh, extensionParams.attributes.TEXCOORD_0, (uv) => {
                uv.y = -uv.y;
                mesh.AddTextureUV (uv);
            });
        }

        let faceCount = dracoMesh.num_faces ();
        let indexCount = faceCount * 3;
        let indexDataSize = indexCount * 4;
        let indexDataPtr = this.draco._malloc (indexDataSize);
        decoder.GetTrianglesUInt32Array (dracoMesh, indexDataSize, indexDataPtr);
        let indexArray = new Uint32Array (this.draco.HEAPU32.buffer, indexDataPtr, indexCount).slice ();
        for (let i = 0; i < indexArray.length; i += 3) {
            let v0 = indexArray[i];
            let v1 = indexArray[i + 1];
            let v2 = indexArray[i + 2];
            importer.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);
        }
        this.draco._free (indexDataPtr);

        return true;
    }
}

class ImporterGltf extends ImporterBase
{
    constructor ()
    {
        super ();
        this.gltfExtensions = new GltfExtensions ();
    }

    CanImportExtension (extension)
    {
        return extension === 'gltf' || extension === 'glb';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    ClearContent ()
    {
        this.bufferContents = null;
        this.imageIndexToTextureParams = null;
    }

    ResetContent ()
    {
        this.bufferContents = [];
        this.imageIndexToTextureParams = new Map ();
    }

    ImportContent (fileContent, onFinish)
    {
        if (this.extension === 'gltf') {
            this.ProcessGltf (fileContent, onFinish);
        } else if (this.extension === 'glb') {
            this.ProcessBinaryGltf (fileContent, onFinish);
        }
    }

    ProcessGltf (fileContent, onFinish)
    {
        let textContent = ArrayBufferToUtf8String (fileContent);
        let gltf = JSON.parse (textContent);
        if (gltf.asset.version !== '2.0') {
            this.SetError ('Invalid glTF version.');
            onFinish ();
            return;
        }

        for (let i = 0; i < gltf.buffers.length; i++) {
            let buffer = null;
            let gltfBuffer = gltf.buffers[i];
            let base64Buffer = Base64DataURIToArrayBuffer (gltfBuffer.uri);
            if (base64Buffer !== null) {
                buffer = base64Buffer.buffer;
            } else {
                let fileBuffer = this.callbacks.getFileBuffer (gltfBuffer.uri);
                if (fileBuffer !== null) {
                    buffer = fileBuffer;
                }
            }
            if (buffer === null) {
                this.SetError ('One of the requested buffers is missing.');
                onFinish ();
                return;
            }
            this.bufferContents.push (buffer);
        }

        this.ProcessMainFile (gltf, onFinish);
    }

    ProcessBinaryGltf (fileContent, onFinish)
    {
        function ReadChunk (reader)
        {
            let length = reader.ReadUnsignedInteger32 ();
            let type = reader.ReadUnsignedInteger32 ();
            let buffer = reader.ReadArrayBuffer (length);
            return {
                type : type,
                buffer : buffer
            };
        }

        let reader = new BinaryReader (fileContent, true);
        let magic = reader.ReadUnsignedInteger32 ();
        if (magic !== GltfConstants.GLTF_STRING) {
            this.SetError ('Invalid glTF file.');
            onFinish ();
            return;
        }
        let version = reader.ReadUnsignedInteger32 ();
        if (version !== 2) {
            this.SetError ('Invalid glTF version.');
            onFinish ();
            return;
        }
        let length = reader.ReadUnsignedInteger32 ();
        if (length !== reader.GetByteLength ()) {
            this.SetError ('Invalid glTF file.');
            onFinish ();
            return;
        }

        let gltfTextContent = null;
        while (!reader.End ()) {
            let chunk = ReadChunk (reader);
            if (chunk.type === GltfConstants.JSON_CHUNK_TYPE) {
                gltfTextContent = ArrayBufferToUtf8String (chunk.buffer);
            } else if (chunk.type === GltfConstants.BINARY_CHUNK_TYPE) {
                this.bufferContents.push (chunk.buffer);
            }
        }

        if (gltfTextContent !== null) {
            let gltf = JSON.parse (gltfTextContent);
            this.ProcessMainFile (gltf, onFinish);
        }
    }

    ProcessMainFile (gltf, onFinish)
    {
        let unsupportedExtensions = this.gltfExtensions.GetUnsupportedExtensions (gltf.extensionsRequired);
        if (unsupportedExtensions.length > 0) {
            this.SetError ('Unsupported extension: ' + unsupportedExtensions.join (', ') + '.');
            onFinish ();
            return;
        }

        this.gltfExtensions.LoadLibraries (gltf.extensionsRequired, {
            onSuccess : () => {
                this.ImportModel (gltf);
                onFinish ();
            },
            onError : (message) => {
                this.SetError (message);
                onFinish ();
            }
        });
    }

    ImportModel (gltf)
    {
        let materials = gltf.materials;
        if (materials !== undefined) {
            for (let material of materials) {
                this.ImportMaterial (gltf, material);
            }
        }

        let meshes = gltf.meshes;
        if (meshes !== undefined) {
            for (let mesh of meshes) {
                this.ImportMesh (gltf, mesh);
            }
        }

        this.ImportProperties (this.model, gltf.asset, 'Asset properties');
        this.ImportScene (gltf);
    }

    ImportProperties (modelObject, gltfObject, propertyGroupName)
    {
        if (gltfObject === undefined || gltfObject === null) {
            return;
        }

        let propertyGroup = new PropertyGroup (propertyGroupName);
        for (let propertyName in gltfObject) {
            if (Object.prototype.hasOwnProperty.call (gltfObject, propertyName)) {
                let property = null;
                let propertyValue = gltfObject[propertyName];
                if (typeof propertyValue === 'string') {
                    property = new Property (PropertyType.Text, propertyName, propertyValue);
                } else if (typeof propertyValue === 'number') {
                    if (Number.isInteger (propertyValue)) {
                        property = new Property (PropertyType.Integer, propertyName, propertyValue);
                    } else {
                        property = new Property (PropertyType.Number, propertyName, propertyValue);
                    }
                }
                if (property !== null) {
                    propertyGroup.AddProperty (property);
                }
            }
        }

        if (propertyGroup.PropertyCount () === 0) {
            return;
        }

        modelObject.AddPropertyGroup (propertyGroup);
    }

    GetDefaultScene (gltf)
    {
        let defaultSceneIndex = gltf.scene || 0;
        if (defaultSceneIndex >= gltf.scenes.length) {
            return null;
        }
        return gltf.scenes[defaultSceneIndex];
    }

    ImportMaterial (gltf, gltfMaterial)
    {
        let material = new PhysicalMaterial ();
        if (gltfMaterial.name !== undefined) {
            material.name = gltfMaterial.name;
        }

        material.color = GetGltfColor ([1.0, 1.0, 1.0]);
        if (gltfMaterial.pbrMetallicRoughness !== undefined) {
            let baseColor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;
            if (baseColor !== undefined) {
                material.color = GetGltfColor (baseColor);
                material.opacity = baseColor[3];
            }
            let metallicFactor = gltfMaterial.pbrMetallicRoughness.metallicFactor;
            if (metallicFactor !== undefined) {
                material.metalness = metallicFactor;
            }
            let roughnessFactor = gltfMaterial.pbrMetallicRoughness.roughnessFactor;
            if (roughnessFactor !== undefined) {
                material.roughness = roughnessFactor;
            }
            let emissiveColor = gltfMaterial.emissiveFactor;
            if (emissiveColor !== undefined) {
                material.emissive = GetGltfColor (emissiveColor);
            }

            material.diffuseMap = this.ImportTexture (gltf, gltfMaterial.pbrMetallicRoughness.baseColorTexture);
            material.metalnessMap = this.ImportTexture (gltf, gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture);
            material.normalMap = this.ImportTexture (gltf, gltfMaterial.normalTexture);
            material.emissiveMap = this.ImportTexture (gltf, gltfMaterial.emissiveTexture);
            if (material.diffuseMap !== null) {
                material.multiplyDiffuseMap = true;
            }

            let alphaMode = gltfMaterial.alphaMode;
            if (alphaMode !== undefined) {
                if (alphaMode === 'BLEND') {
                    material.transparent = true;
                } else if (alphaMode === 'MASK') {
                    material.transparent = true;
                    material.alphaTest = gltfMaterial.alphaCutoff || 0.5;
                }
            }
        }

        let newMaterial = this.gltfExtensions.ProcessMaterial (gltfMaterial, material, (textureRef) => {
            return this.ImportTexture (gltf, textureRef);
        });
        if (newMaterial !== null) {
            material = newMaterial;
        }
        this.model.AddMaterial (material);
    }

    ImportTexture (gltf, gltfTextureRef)
    {
        if (gltfTextureRef === undefined || gltfTextureRef === null) {
            return null;
        }

        let texture = new TextureMap ();
        let gltfTexture = gltf.textures[gltfTextureRef.index];
        let gltfImageIndex = gltfTexture.source;
        let gltfImage = gltf.images[gltfImageIndex];

        let textureParams = null;
        if (this.imageIndexToTextureParams.has (gltfImageIndex)) {
            textureParams = this.imageIndexToTextureParams.get (gltfImageIndex);
        } else {
            textureParams = {
                name : null,
                mimeType : null,
                buffer : null
            };
            let textureIndexString = gltfImageIndex.toString ();
            if (gltfImage.uri !== undefined) {
                let base64Buffer = Base64DataURIToArrayBuffer (gltfImage.uri);
                if (base64Buffer !== null) {
                    textureParams.name = 'Embedded_' + textureIndexString + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);
                    textureParams.mimeType = base64Buffer.mimeType;
                    textureParams.buffer = base64Buffer.buffer;
                } else {
                    let textureBuffer = this.callbacks.getFileBuffer (gltfImage.uri);
                    textureParams.name = gltfImage.uri;
                    textureParams.buffer = textureBuffer;
                }
            } else if (gltfImage.bufferView !== undefined) {
                let bufferView = gltf.bufferViews[gltfImage.bufferView];
                let reader = this.GetReaderFromBufferView (bufferView);
                if (reader !== null) {
                    let buffer = reader.ReadArrayBuffer (bufferView.byteLength);
                    textureParams.name = 'Binary_' + textureIndexString + '.' + GetFileExtensionFromMimeType (gltfImage.mimeType);
                    textureParams.mimeType = gltfImage.mimeType;
                    textureParams.buffer = buffer;
                }
            }
            this.imageIndexToTextureParams.set (gltfImageIndex, textureParams);
        }

        texture.name = textureParams.name;
        texture.mimeType = textureParams.mimeType;
        texture.buffer = textureParams.buffer;

        this.gltfExtensions.ProcessTexture (gltfTextureRef, texture);
        return texture;
    }

    ImportMesh (gltf, gltfMesh)
    {
        let mesh = new Mesh ();

        this.model.AddMesh (mesh);
        if (gltfMesh.name !== undefined) {
            mesh.SetName (gltfMesh.name);
        }

        for (let i = 0; i < gltfMesh.primitives.length; i++) {
            let primitive = gltfMesh.primitives[i];
            this.ImportPrimitive (gltf, primitive, mesh);
        }

        this.ImportProperties (mesh, gltfMesh.extras, 'Mesh properties');
    }

    ImportPrimitive (gltf, primitive, mesh)
    {
        function HasAttribute (gltf, primitive, attributeName)
        {
            let accessorIndex = primitive.attributes[attributeName];
            if (accessorIndex === undefined) {
                return false;
            }
            let accessor = gltf.accessors[accessorIndex];
            if (accessor === undefined || accessor.count === 0) {
                return false;
            }
            return true;
        }

        if (this.gltfExtensions.ProcessPrimitive (this, gltf, primitive, mesh)) {
            return;
        }

        if (primitive.attributes === undefined) {
            return;
        }

        let hasVertices = HasAttribute (gltf, primitive, 'POSITION');
        let hasVertexColors = HasAttribute (gltf, primitive, 'COLOR_0');
        let hasNormals = HasAttribute (gltf, primitive, 'NORMAL');
        let hasUVs = HasAttribute (gltf, primitive, 'TEXCOORD_0');
        let hasIndices = (primitive.indices !== undefined);

        let mode = GltfRenderMode.TRIANGLES;
        if (primitive.mode !== undefined) {
            mode = primitive.mode;
        }
        if (mode !== GltfRenderMode.TRIANGLES && mode !== GltfRenderMode.TRIANGLE_STRIP && mode !== GltfRenderMode.TRIANGLE_FAN) {
            return;
        }

        let vertexOffset = mesh.VertexCount ();
        let vertexColorOffset = mesh.VertexColorCount ();
        let normalOffset = mesh.NormalCount ();
        let uvOffset = mesh.TextureUVCount ();

        if (hasVertices) {
            let accessor = gltf.accessors[primitive.attributes.POSITION];
            let reader = this.GetReaderFromAccessor (gltf, accessor);
            if (reader === null) {
                return;
            }
            reader.EnumerateData ((data) => {
                mesh.AddVertex (data);
            });
        } else {
            return;
        }

        let vertexCount = mesh.VertexCount () - vertexOffset;

        if (hasVertexColors) {
            let accessor = gltf.accessors[primitive.attributes.COLOR_0];
            let reader = this.GetReaderFromAccessor (gltf, accessor);
            if (reader === null) {
                return;
            }
            reader.EnumerateData ((data) => {
                let color = GetGltfVertexColor ([data.x, data.y, data.z], reader.componentType);
                mesh.AddVertexColor (color);
            });
            if (mesh.VertexColorCount () - vertexColorOffset !== vertexCount) {
                hasVertexColors = false;
            }
        }

        if (hasNormals) {
            let accessor = gltf.accessors[primitive.attributes.NORMAL];
            let reader = this.GetReaderFromAccessor (gltf, accessor);
            if (reader === null) {
                return;
            }
            reader.EnumerateData ((data) => {
                mesh.AddNormal (data);
            });
            if (mesh.NormalCount () - normalOffset !== vertexCount) {
                hasNormals = false;
            }
        }

        if (hasUVs) {
            let accessor = gltf.accessors[primitive.attributes.TEXCOORD_0];
            let reader = this.GetReaderFromAccessor (gltf, accessor);
            if (reader === null) {
                return;
            }
            reader.EnumerateData ((data) => {
                data.y = -data.y;
                mesh.AddTextureUV (data);
            });
            if (mesh.TextureUVCount () - uvOffset !== vertexCount) {
                hasUVs = false;
            }
        }

        let vertexIndices = [];
        if (hasIndices) {
            let accessor = gltf.accessors[primitive.indices];
            let reader = this.GetReaderFromAccessor (gltf, accessor);
            if (reader === null) {
                return;
            }
            reader.EnumerateData ((data) => {
                vertexIndices.push (data);
            });
        } else {
            let primitiveVertexCount = mesh.VertexCount () - vertexOffset;
            for (let i = 0; i < primitiveVertexCount; i++) {
                vertexIndices.push (i);
            }
        }

        if (mode === GltfRenderMode.TRIANGLES) {
            for (let i = 0; i < vertexIndices.length; i += 3) {
                let v0 = vertexIndices[i];
                let v1 = vertexIndices[i + 1];
                let v2 = vertexIndices[i + 2];
                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);
            }
        } else if (mode === GltfRenderMode.TRIANGLE_STRIP) {
            for (let i = 0; i < vertexIndices.length - 2; i++) {
                let v0 = vertexIndices[i];
                let v1 = vertexIndices[i + 1];
                let v2 = vertexIndices[i + 2];
                if (i % 2 === 1) {
                    let tmp = v1;
                    v1 = v2;
                    v2 = tmp;
                }
                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);
            }
        } else if (mode === GltfRenderMode.TRIANGLE_FAN) {
            for (let i = 1; i < vertexIndices.length - 1; i++) {
                let v0 = vertexIndices[0];
                let v1 = vertexIndices[i];
                let v2 = vertexIndices[i + 1];
                this.AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset);
            }
        }
    }

    AddTriangle (primitive, mesh, v0, v1, v2, hasVertexColors, hasNormals, hasUVs, vertexOffset, vertexColorOffset, normalOffset, uvOffset)
    {
        let triangle = new Triangle (
            vertexOffset + v0,
            vertexOffset + v1,
            vertexOffset + v2
        );
        if (hasVertexColors) {
            triangle.SetVertexColors (
                vertexColorOffset + v0,
                vertexColorOffset + v1,
                vertexColorOffset + v2
            );
        }
        if (hasNormals) {
            triangle.SetNormals (
                normalOffset + v0,
                normalOffset + v1,
                normalOffset + v2
            );
        }
        if (hasUVs) {
            triangle.SetTextureUVs (
                uvOffset + v0,
                uvOffset + v1,
                uvOffset + v2
            );
        }
        if (primitive.material !== undefined) {
            triangle.mat = primitive.material;
        }
        mesh.AddTriangle (triangle);
    }

    ImportScene (gltf)
    {
        let scene = this.GetDefaultScene (gltf);
        if (scene === null) {
            return;
        }

        let rootNode = this.model.GetRootNode ();
        for (let nodeIndex of scene.nodes) {
            let gltfNode = gltf.nodes[nodeIndex];
            this.ImportNode (gltf, gltfNode, rootNode);
        }

        this.ImportProperties (this.model, scene.extras, 'Scene properties');
    }

    ImportNode (gltf, gltfNode, parentNode)
    {
        function GetNodeTransformation (gltfNode)
        {
            let matrix = new Matrix ().CreateIdentity ();
            if (gltfNode.matrix !== undefined) {
                matrix.Set (gltfNode.matrix);
            } else {
                let translation = [0.0, 0.0, 0.0];
                let rotation = [0.0, 0.0, 0.0, 1.0];
                let scale = [1.0, 1.0, 1.0];
                if (gltfNode.translation !== undefined) {
                    translation = gltfNode.translation;
                }
                if (gltfNode.rotation !== undefined) {
                    rotation = gltfNode.rotation;
                }
                if (gltfNode.scale !== undefined) {
                    scale = gltfNode.scale;
                }
                matrix.ComposeTRS (
                    ArrayToCoord3D (translation),
                    ArrayToQuaternion (rotation),
                    ArrayToCoord3D (scale)
                );
            }
            return new Transformation (matrix);
        }

        if (gltfNode.children === undefined && gltfNode.mesh === undefined) {
            return;
        }

        let node = new Node ();
        if (gltfNode.name !== undefined) {
            node.SetName (gltfNode.name);
        }
        node.SetTransformation (GetNodeTransformation (gltfNode));
        parentNode.AddChildNode (node);

        if (gltfNode.children !== undefined) {
            for (let childIndex of gltfNode.children) {
                let childGltfNode = gltf.nodes[childIndex];
                this.ImportNode (gltf, childGltfNode, node);
            }
        }

        if (gltfNode.mesh !== undefined) {
            let mesh = this.model.GetMesh (gltfNode.mesh);
            this.ImportProperties (mesh, gltfNode.extras, 'Node properties');
            node.AddMeshIndex (gltfNode.mesh);
        }
    }

    GetReaderFromBufferView (bufferView)
    {
        let bufferIndex = bufferView.buffer || 0;
        let buffer = this.bufferContents[bufferIndex];
        if (buffer === undefined || buffer === null) {
            return null;
        }

        let reader = new GltfBufferReader (buffer);
        reader.SkipBytes (bufferView.byteOffset || 0);
        let byteStride = bufferView.byteStride;
        if (byteStride !== undefined && byteStride !== 0) {
            reader.SetByteStride (byteStride);
        }

        return reader;
    }

    GetReaderFromAccessor (gltf, accessor)
    {
        let bufferViewIndex = accessor.bufferView || 0;
        let bufferView = gltf.bufferViews[bufferViewIndex];
        let reader = this.GetReaderFromBufferView (bufferView);
        if (reader === null) {
            return null;
        }

        reader.SetComponentType (accessor.componentType);
        reader.SetDataType (accessor.type);
        reader.SetDataCount (accessor.count);
        reader.SkipBytes (accessor.byteOffset || 0);

        if (accessor.sparse !== undefined) {
            let indexReader = this.GetReaderFromSparseAccessor (gltf, accessor.sparse.indices, accessor.sparse.indices.componentType, 'SCALAR', accessor.sparse.count);
            let valueReader = this.GetReaderFromSparseAccessor (gltf, accessor.sparse.values, accessor.componentType, accessor.type, accessor.sparse.count);
            if (indexReader !== null && valueReader !== null) {
                reader.SetSparseReader (indexReader, valueReader);
            }
        }
        return reader;
    }

    GetReaderFromSparseAccessor (gltf, sparseAccessor, componentType, type, count)
    {
        if (sparseAccessor.bufferView === undefined) {
            return null;
        }

        let bufferView = gltf.bufferViews[sparseAccessor.bufferView];
        let reader = this.GetReaderFromBufferView (bufferView);
        if (reader === null) {
            return null;
        }

        reader.SetComponentType (componentType);
        reader.SetDataType (type);
        reader.SetDataCount (count);
        reader.SkipBytes (sparseAccessor.byteOffset || 0);
        return reader;
    }
}

class ImporterIfc extends ImporterBase
{
    constructor ()
    {
        super ();
        this.ifc = null;
    }

    CanImportExtension (extension)
    {
        return extension === 'ifc';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    ClearContent ()
    {
        this.expressIDToMesh = null;
        this.colorToMaterial = null;
    }

    ResetContent ()
    {
        this.expressIDToMesh = new Map ();
        this.colorToMaterial = new ColorToMaterialConverter (this.model);
    }

    ImportContent (fileContent, onFinish)
    {
        if (this.ifc === null) {
            LoadExternalLibrary ('loaders/web-ifc-api-browser.js').then (() => {
                this.ifc = new WebIFC.IfcAPI ();
                this.ifc.Init ().then (() => {
                    this.ImportIfcContent (fileContent);
                    onFinish ();
                });
            }).catch (() => {
                this.SetError ('Failed to load web-ifc.');
                onFinish ();
            });
        } else {
            this.ImportIfcContent (fileContent);
            onFinish ();
        }
    }

    ImportIfcContent (fileContent)
    {
        const fileBuffer = new Uint8Array (fileContent);
        const modelID = this.ifc.OpenModel (fileBuffer, {
            COORDINATE_TO_ORIGIN : true
        });
        const ifcMeshes = this.ifc.LoadAllGeometry (modelID);
        for (let meshIndex = 0; meshIndex < ifcMeshes.size (); meshIndex++) {
            const ifcMesh = ifcMeshes.get (meshIndex);
            if (ifcMesh.geometries.size () > 0) {
                this.ImportIfcMesh (modelID, ifcMesh);
            }
        }
        this.ImportProperties (modelID);
        this.ifc.CloseModel (modelID);
    }

    ImportIfcMesh (modelID, ifcMesh)
    {
        let mesh = new Mesh ();
        mesh.SetName ('Mesh ' + ifcMesh.expressID.toString ());

        let vertexOffset = 0;
        const ifcGeometries = ifcMesh.geometries;
        for (let geometryIndex = 0; geometryIndex < ifcGeometries.size (); geometryIndex++) {
            const ifcGeometry = ifcGeometries.get (geometryIndex);
            const ifcGeometryData = this.ifc.GetGeometry (modelID, ifcGeometry.geometryExpressID);
            const ifcVertices = this.ifc.GetVertexArray (ifcGeometryData.GetVertexData (), ifcGeometryData.GetVertexDataSize ());
            const ifcIndices = this.ifc.GetIndexArray (ifcGeometryData.GetIndexData (), ifcGeometryData.GetIndexDataSize ());
            const materialIndex = this.GetMaterialIndexByColor (ifcGeometry.color);
            const matrix = new Matrix (ifcGeometry.flatTransformation);
            const transformation = new Transformation (matrix);

            for (let i = 0; i < ifcVertices.length; i += 6) {
                const x = ifcVertices[i];
                const y = ifcVertices[i + 1];
                const z = ifcVertices[i + 2];
                const coord = new Coord3D (x, y, z);
                const transformed = transformation.TransformCoord3D (coord);
                mesh.AddVertex (transformed);
            }
            // TODO: normals
            for (let i = 0; i < ifcIndices.length; i += 3) {
                const v0 = ifcIndices[i];
                const v1 = ifcIndices[i + 1];
                const v2 = ifcIndices[i + 2];
                const triangle = new Triangle (
                    vertexOffset + v0,
                    vertexOffset + v1,
                    vertexOffset + v2
                );
                triangle.SetMaterial (materialIndex);
                mesh.AddTriangle (triangle);
            }
            vertexOffset += ifcVertices.length / 6;
        }

        this.expressIDToMesh.set (ifcMesh.expressID, mesh);
        this.model.AddMeshToRootNode (mesh);
    }

    ImportProperties (modelID)
    {
        const lines = this.ifc.GetLineIDsWithType (modelID, WebIFC.IFCRELDEFINESBYPROPERTIES);
        for (let i = 0; i < lines.size (); i++) {
            const relID = lines.get (i);
            const rel = this.ifc.GetLine (modelID, relID);
            if (Array.isArray (rel.RelatingPropertyDefinition)) {
                continue;
            }
            rel.RelatedObjects.forEach ((objectRelID) => {
                let element = null;
                if (this.expressIDToMesh.has (objectRelID.value)) {
                    element = this.expressIDToMesh.get (objectRelID.value);
                } else {
                    let propSetOwner = this.ifc.GetLine (modelID, objectRelID.value, true);
                    if (propSetOwner.type === WebIFC.IFCBUILDING) {
                        element = this.model;
                    }
                }
                if (element === null) {
                    return;
                }
                let propSetDef = rel.RelatingPropertyDefinition;
                let propSet = this.ifc.GetLine (modelID, propSetDef.value, true);
                if (!propSet || !propSet.HasProperties) {
                    return;
                }
                let propertyGroup = new PropertyGroup (propSet.Name.value);
                propSet.HasProperties.forEach ((property) => {
                    if (!property || !property.Name) {
                        return;
                    }
                    if (!property.NominalValue || !property.NominalValue.constructor) {
                        return;
                    }
                    if (property.type !== WebIFC.IFCPROPERTYSINGLEVALUE) {
                        return;
                    }
                    let propertyName = this.GetIFCString (property.Name.value);
                    let elemProperty = null;
                    let strValue = null;
                    switch (property.NominalValue.constructor.name) {
                        case 'IfcText':
                        case 'IfcLabel':
                        case 'IfcIdentifier':
                        case WebIFC.IFCLABEL:
                            elemProperty = new Property (PropertyType.Text, propertyName, this.GetIFCString (property.NominalValue.value));
                            break;
                        case 'IfcBoolean':
                        case 'IfcLogical':
                            strValue = 'Unknown';
                            if (property.NominalValue.value === 'T') {
                                strValue = 'True';
                            } else if (property.NominalValue.value === 'F') {
                                strValue = 'False';
                            }
                            elemProperty = new Property (PropertyType.Text, propertyName, strValue);
                            break;
                        case 'IfcInteger':
                        case 'IfcCountMeasure':
                            elemProperty = new Property (PropertyType.Integer, propertyName, property.NominalValue.value);
                            break;
                        case 'IfcReal':
                        case 'IfcLengthMeasure':
                        case 'IfcPositiveLengthMeasure':
                        case 'IfcAreaMeasure':
                        case 'IfcVolumeMeasure':
                        case 'IfcRatioMeasure':
                        case 'IfcPositiveRATIOMeasure':
                        case 'IfcMassMeasure':
                        case 'IfcMassPerLengthMeasure':
                        case 'IfcPlaneAngleMeasure':
                        case 'IfcThermalTransmittanceMeasure':
                            elemProperty = new Property (PropertyType.Number, propertyName, property.NominalValue.value);
                            break;
                        default:
                            // TODO
                            console.log (property);
                            break;
                    }
                    if (elemProperty !== null) {
                        propertyGroup.AddProperty (elemProperty);
                    }
                });
                if (propertyGroup.PropertyCount () > 0) {
                    element.AddPropertyGroup (propertyGroup);
                }
            });
        }
    }

    GetMaterialIndexByColor (ifcColor)
    {
        const color = RGBColorFromFloatComponents (ifcColor.x, ifcColor.y, ifcColor.z);
        const alpha = parseInt (ifcColor.w * 255.0, 10);
        return this.colorToMaterial.GetMaterialIndex (color.r, color.g, color.b, alpha);
    }

    GetIFCString (ifcString)
    {
        let decoded = this.DecodeIFCString (ifcString);
        if (decoded.length === 0) {
            decoded = '-';
        }
        return decoded;
    }

    DecodeIFCString (ifcString)
    {
        // TODO: https://github.com/tomvandig/web-ifc/issues/58
        const ifcUnicodeRegEx = /\\X2\\(.*?)\\X0\\/uig;
        let resultString = ifcString;
        let match = ifcUnicodeRegEx.exec (ifcString);
        while (match) {
            const unicodeChar = String.fromCharCode (parseInt (match[1], 16));
            resultString = resultString.replace (match[0], unicodeChar);
            match = ifcUnicodeRegEx.exec (ifcString);
        }
        return resultString;
    }
}

class ObjMeshConverter
{
    constructor (mesh)
    {
        this.mesh = mesh;
        this.globalToMeshVertices = new Map ();
        this.globalToMeshVertexColors = new Map ();
        this.globalToMeshNormals = new Map ();
        this.globalToMeshUvs = new Map ();
    }

    AddVertex (globalIndex, globalVertices)
    {
        return this.GetLocalIndex (globalIndex, globalVertices, this.globalToMeshVertices, (val) => {
            return this.mesh.AddVertex (new Coord3D (val.x, val.y, val.z));
        });
    }

    AddVertexColor (globalIndex, globalVertexColors)
    {
        return this.GetLocalIndex (globalIndex, globalVertexColors, this.globalToMeshVertexColors, (val) => {
            return this.mesh.AddVertexColor (new RGBColor (val.r, val.g, val.b));
        });
    }

    AddNormal (globalIndex, globalNormals)
    {
        return this.GetLocalIndex (globalIndex, globalNormals, this.globalToMeshNormals, (val) => {
            return this.mesh.AddNormal (new Coord3D (val.x, val.y, val.z));
        });
    }

    AddUV (globalIndex, globalUvs)
    {
        return this.GetLocalIndex (globalIndex, globalUvs, this.globalToMeshUvs, (val) => {
            return this.mesh.AddTextureUV (new Coord2D (val.x, val.y));
        });
    }

    AddTriangle (triangle)
    {
        this.mesh.AddTriangle (triangle);
    }

    GetLocalIndex (globalIndex, globalValueArray, globalToMeshIndices, valueAdderFunc)
    {
        if (isNaN (globalIndex) || globalIndex < 0 || globalIndex >= globalValueArray.length) {
            return null;
        }
        if (globalToMeshIndices.has (globalIndex)) {
            return globalToMeshIndices.get (globalIndex);
        } else {
            let globalValue = globalValueArray[globalIndex];
            let localIndex = valueAdderFunc (globalValue);
            globalToMeshIndices.set (globalIndex, localIndex);
            return localIndex;
        }
    }
}

function CreateColor (r, g, b)
{
    return RGBColorFromFloatComponents (
        parseFloat (r),
        parseFloat (g),
        parseFloat (b)
    );
}

class ImporterObj extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'obj';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    ClearContent ()
    {
        this.globalVertices = null;
        this.globalVertexColors = null;
        this.globalNormals = null;
        this.globalUvs = null;

        this.currentMeshConverter = null;
        this.currentMaterial = null;
        this.currentMaterialIndex = null;

        this.meshNameToConverter = null;
        this.materialNameToIndex = null;
    }

    ResetContent ()
    {
        this.globalVertices = [];
        this.globalVertexColors = [];
        this.globalNormals = [];
        this.globalUvs = [];

        this.currentMeshConverter = null;
        this.currentMaterial = null;
        this.currentMaterialIndex = null;

        this.meshNameToConverter = new Map ();
        this.materialNameToIndex = new Map ();
    }

    ImportContent (fileContent, onFinish)
    {
        let textContent = ArrayBufferToUtf8String (fileContent);
        ReadLines (textContent, (line) => {
            if (!this.WasError ()) {
                this.ProcessLine (line);
            }
        });
        onFinish ();
    }

    ProcessLine (line)
    {
        if (line[0] === '#') {
            return;
        }

        let parameters = ParametersFromLine (line, '#');
        if (parameters.length === 0) {
            return;
        }

        let keyword = parameters[0].toLowerCase ();
        parameters.shift ();

        if (this.ProcessMeshParameter (keyword, parameters, line)) {
            return;
        }

        if (this.ProcessMaterialParameter (keyword, parameters, line)) {
            return;
        }
    }

    AddNewMesh (name)
    {
        if (this.meshNameToConverter.has (name)) {
            this.currentMeshConverter = this.meshNameToConverter.get (name);
        } else {
            let mesh = new Mesh ();
            mesh.SetName (name);
            this.model.AddMeshToRootNode (mesh);
            this.currentMeshConverter = new ObjMeshConverter (mesh);
            this.meshNameToConverter.set (name, this.currentMeshConverter);
        }
    }

    ProcessMeshParameter (keyword, parameters, line)
    {
        if (keyword === 'g' || keyword === 'o') {
            if (parameters.length === 0) {
                return true;
            }
            let name = NameFromLine (line, keyword.length, '#');
            this.AddNewMesh (name);
            return true;
        } else if (keyword === 'v') {
            if (parameters.length < 3) {
                return true;
            }
            this.globalVertices.push (new Coord3D (
                parseFloat (parameters[0]),
                parseFloat (parameters[1]),
                parseFloat (parameters[2])
            ));
            if (parameters.length >= 6) {
                this.globalVertexColors.push (CreateColor (parameters[3], parameters[4], parameters[5]));
            }
            return true;
        } else if (keyword === 'vn') {
            if (parameters.length < 3) {
                return true;
            }
            this.globalNormals.push (new Coord3D (
                parseFloat (parameters[0]),
                parseFloat (parameters[1]),
                parseFloat (parameters[2])
            ));
            return true;
        } else if (keyword === 'vt') {
            if (parameters.length < 2) {
                return true;
            }
            this.globalUvs.push (new Coord2D (
                parseFloat (parameters[0]),
                parseFloat (parameters[1])
            ));
            return true;
        } else if (keyword === 'f') {
            if (parameters.length < 3) {
                return true;
            }
            this.ProcessFace (parameters);
            return true;
        }

        return false;
    }

    ProcessMaterialParameter (keyword, parameters, line)
    {
        function ExtractTextureParameters (parameters)
        {
            let textureParameters = new Map ();
            let lastParameter = null;
            for (let i = 0; i < parameters.length - 1; i++) {
                let parameter = parameters[i];
                if (parameter.startsWith ('-')) {
                    lastParameter = parameter;
                    textureParameters.set (lastParameter, []);
                    continue;
                }
                if (lastParameter !== null) {
                    textureParameters.get (lastParameter).push (parameter);
                }
            }
            return textureParameters;
        }

        function CreateTexture (parameters, callbacks)
        {
            let texture = new TextureMap ();
            let textureName = parameters[parameters.length - 1];
            let textureBuffer = callbacks.getFileBuffer (textureName);
            texture.name = textureName;
            texture.buffer = textureBuffer;

            let textureParameters = ExtractTextureParameters (parameters);
            if (textureParameters.has ('-o')) {
                let offsetParameters = textureParameters.get ('-o');
                if (offsetParameters.length > 0) {
                    texture.offset.x = parseFloat (offsetParameters[0]);
                }
                if (offsetParameters.length > 1) {
                    texture.offset.y = parseFloat (offsetParameters[1]);
                }
            }

            if (textureParameters.has ('-s')) {
                let scaleParameters = textureParameters.get ('-s');
                if (scaleParameters.length > 0) {
                    texture.scale.x = parseFloat (scaleParameters[0]);
                }
                if (scaleParameters.length > 1) {
                    texture.scale.y = parseFloat (scaleParameters[1]);
                }
            }

            return texture;
        }

        if (keyword === 'newmtl') {
            if (parameters.length === 0) {
                return true;
            }

            let material = new PhongMaterial ();
            let materialName = NameFromLine (line, keyword.length, '#');
            let materialIndex = this.model.AddMaterial (material);
            material.name = materialName;
            this.currentMaterial = material;
            this.materialNameToIndex.set (materialName, materialIndex);
            return true;
        } else if (keyword === 'usemtl') {
            if (parameters.length === 0) {
                return true;
            }

            let materialName = NameFromLine (line, keyword.length, '#');
            if (this.materialNameToIndex.has (materialName)) {
                this.currentMaterialIndex = this.materialNameToIndex.get (materialName);
            }
            return true;
        } else if (keyword === 'mtllib') {
            if (parameters.length === 0) {
                return true;
            }
            let fileName = NameFromLine (line, keyword.length, '#');
            let fileBuffer = this.callbacks.getFileBuffer (fileName);
            if (fileBuffer !== null) {
                let textContent = ArrayBufferToUtf8String (fileBuffer);
                ReadLines (textContent, (line) => {
                    if (!this.WasError ()) {
                        this.ProcessLine (line);
                    }
                });
            }
            return true;
        } else if (keyword === 'map_kd') {
            if (this.currentMaterial === null || parameters.length === 0) {
                return true;
            }
            this.currentMaterial.diffuseMap = CreateTexture (parameters, this.callbacks);
            UpdateMaterialTransparency (this.currentMaterial);
            return true;
        } else if (keyword === 'map_ks') {
            if (this.currentMaterial === null || parameters.length === 0) {
                return true;
            }
            this.currentMaterial.specularMap = CreateTexture (parameters, this.callbacks);
            return true;
        } else if (keyword === 'map_bump' || keyword === 'bump') {
            if (this.currentMaterial === null || parameters.length === 0) {
                return true;
            }
            this.currentMaterial.bumpMap = CreateTexture (parameters, this.callbacks);
            return true;
        } else if (keyword === 'ka') {
            if (this.currentMaterial === null || parameters.length < 3) {
                return true;
            }
            this.currentMaterial.ambient = CreateColor (parameters[0], parameters[1], parameters[2]);
            return true;
        } else if (keyword === 'kd') {
            if (this.currentMaterial === null || parameters.length < 3) {
                return true;
            }
            this.currentMaterial.color = CreateColor (parameters[0], parameters[1], parameters[2]);
            return true;
        } else if (keyword === 'ks') {
            if (this.currentMaterial === null || parameters.length < 3) {
                return true;
            }
            this.currentMaterial.specular = CreateColor (parameters[0], parameters[1], parameters[2]);
            return true;
        } else if (keyword === 'ns') {
            if (this.currentMaterial === null || parameters.length < 1) {
                return true;
            }
            this.currentMaterial.shininess = parseFloat (parameters[0]) / 1000.0;
            return true;
        } else if (keyword === 'tr') {
            if (this.currentMaterial === null || parameters.length < 1) {
                return true;
            }
            this.currentMaterial.opacity = 1.0 - parseFloat (parameters[0]);
            UpdateMaterialTransparency (this.currentMaterial);
            return true;
        } else if (keyword === 'd') {
            if (this.currentMaterial === null || parameters.length < 1) {
                return true;
            }
            this.currentMaterial.opacity = parseFloat (parameters[0]);
            UpdateMaterialTransparency (this.currentMaterial);
            return true;
        }

        return false;
    }

    ProcessFace (parameters)
    {
        function GetRelativeIndex (index, count)
        {
            if (index > 0) {
                return index - 1;
            } else {
                return count + index;
            }
        }

        let vertices = [];
        let colors = [];
        let normals = [];
        let uvs = [];

        for (let i = 0; i < parameters.length; i++) {
            let vertexParams = parameters[i].split ('/');
            vertices.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));
            if (this.globalVertices.length === this.globalVertexColors.length) {
                colors.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));
            }
            if (vertexParams.length > 1 && vertexParams[1].length > 0) {
                uvs.push (GetRelativeIndex (parseInt (vertexParams[1], 10), this.globalUvs.length));
            }
            if (vertexParams.length > 2 && vertexParams[2].length > 0) {
                normals.push (GetRelativeIndex (parseInt (vertexParams[2], 10), this.globalNormals.length));
            }
        }

        if (this.currentMeshConverter === null) {
            this.AddNewMesh ('');
        }

        for (let i = 0; i < vertices.length - 2; i++) {
            let v0 = this.currentMeshConverter.AddVertex (vertices[0], this.globalVertices);
            let v1 = this.currentMeshConverter.AddVertex (vertices[i + 1], this.globalVertices);
            let v2 = this.currentMeshConverter.AddVertex (vertices[i + 2], this.globalVertices);
            if (v0 === null || v1 === null || v2 === null) {
                this.SetError ('Invalid vertex index.');
                break;
            }

            let triangle = new Triangle (v0, v1, v2);

            if (colors.length === vertices.length) {
                let c0 = this.currentMeshConverter.AddVertexColor (colors[0], this.globalVertexColors);
                let c1 = this.currentMeshConverter.AddVertexColor (colors[i + 1], this.globalVertexColors);
                let c2 = this.currentMeshConverter.AddVertexColor (colors[i + 2], this.globalVertexColors);
                if (c0 === null || c1 === null || c2 === null) {
                    this.SetError ('Invalid vertex color index.');
                    break;
                }
                triangle.SetVertexColors (c0, c1, c2);
            }

            if (normals.length === vertices.length) {
                let n0 = this.currentMeshConverter.AddNormal (normals[0], this.globalNormals);
                let n1 = this.currentMeshConverter.AddNormal (normals[i + 1], this.globalNormals);
                let n2 = this.currentMeshConverter.AddNormal (normals[i + 2], this.globalNormals);
                if (n0 === null || n1 === null || n2 === null) {
                    this.SetError ('Invalid normal index.');
                    break;
                }
                triangle.SetNormals (n0, n1, n2);
            }

            if (uvs.length === vertices.length) {
                let u0 = this.currentMeshConverter.AddUV (uvs[0], this.globalUvs);
                let u1 = this.currentMeshConverter.AddUV (uvs[i + 1], this.globalUvs);
                let u2 = this.currentMeshConverter.AddUV (uvs[i + 2], this.globalUvs);
                if (u0 === null || u1 === null || u2 === null) {
                    this.SetError ('Invalid uv index.');
                    break;
                }
                triangle.SetTextureUVs (u0, u1, u2);
            }

            if (this.currentMaterialIndex !== null) {
                triangle.mat = this.currentMaterialIndex;
            }

            this.currentMeshConverter.AddTriangle (triangle);
        }
    }
}

class ImporterOff extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'off';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    ClearContent ()
    {
        this.mesh = null;
        this.status = null;
        this.colorToMaterial = null;
    }

    ResetContent ()
    {
        this.mesh = new Mesh ();
        this.model.AddMeshToRootNode (this.mesh);
        this.status = {
            vertexCount : 0,
            faceCount : 0,
            foundVertex : 0,
            foundFace : 0
        };
        this.colorToMaterial = new ColorToMaterialConverter (this.model);
    }

    ImportContent (fileContent, onFinish)
    {
        let textContent = ArrayBufferToUtf8String (fileContent);
        ReadLines (textContent, (line) => {
            if (!this.WasError ()) {
                this.ProcessLine (line);
            }
        });
        onFinish ();
    }

    ProcessLine (line)
    {
        function CreateColorComponent (str)
        {
            if (str.indexOf ('.') !== -1) {
                return ColorComponentFromFloat (parseFloat (str));
            } else {
                return parseInt (str, 10);
            }
        }

        if (line[0] === '#') {
            return;
        }

        let parameters = ParametersFromLine (line, '#');
        if (parameters.length === 0) {
            return;
        }

        if (parameters[0] === 'OFF') {
            return;
        }

        if (this.status.vertexCount === 0 && this.status.faceCount === 0) {
            if (parameters.length > 1) {
                this.status.vertexCount = parseInt (parameters[0], 10);
                this.status.faceCount = parseInt (parameters[1], 10);
            }
            return;
        }

        if (this.status.foundVertex < this.status.vertexCount) {
            if (parameters.length >= 3) {
                this.mesh.AddVertex (new Coord3D (
                    parseFloat (parameters[0]),
                    parseFloat (parameters[1]),
                    parseFloat (parameters[2])
                ));
                this.status.foundVertex += 1;
            }
            if (parameters.length >= 6) {
                this.mesh.AddVertexColor (new RGBColor (
                    CreateColorComponent (parameters[3]),
                    CreateColorComponent (parameters[4]),
                    CreateColorComponent (parameters[5])
                ));
            }
            return;
        }

        let hasVertexColors = (this.mesh.VertexCount () ===this.mesh.VertexColorCount ());
        if (this.status.foundFace < this.status.faceCount) {
            if (parameters.length >= 4) {
                let vertexCount = parseInt (parameters[0], 10);
                if (parameters.length < vertexCount + 1) {
                    return;
                }
                let materialIndex = null;
                if (!hasVertexColors && parameters.length >= vertexCount + 4) {
                    let color = new RGBColor (
                        CreateColorComponent (parameters[vertexCount + 1]),
                        CreateColorComponent (parameters[vertexCount + 2]),
                        CreateColorComponent (parameters[vertexCount + 3])
                    );
                    materialIndex = this.colorToMaterial.GetMaterialIndex (color.r, color.g, color.b);
                }
                for (let i = 0; i < vertexCount - 2; i++) {
                    let v0 = parseInt (parameters[1]);
                    let v1 = parseInt (parameters[i + 2]);
                    let v2 = parseInt (parameters[i + 3]);
                    let triangle = new Triangle (v0, v1, v2);
                    if (hasVertexColors) {
                        triangle.SetVertexColors (v0, v1, v2);
                    } else {
                        triangle.SetMaterial (materialIndex);
                    }
                    this.mesh.AddTriangle (triangle);
                }
                this.status.foundFace += 1;
            }
            return;
        }
    }
}

const PlyHeaderCheckResult =
{
    Ok : 1,
    NoVertices : 2,
    NoFaces : 3,
    UnknownError : 4
};

class PlyHeader
{
    constructor ()
    {
        this.format = null;
        this.elements = [];
    }

    SetFormat (format)
    {
        this.format = format;
    }

    AddElement (name, count)
    {
        this.elements.push ({
            name : name,
            count : count,
            format : []
        });
    }

    GetElements ()
    {
        return this.elements;
    }

    AddSingleFormat (elemType, name)
    {
        let lastElement = this.elements[this.elements.length - 1];
        lastElement.format.push ({
            name : name,
            isSingle : true,
            elemType : elemType
        });
    }

    AddListFormat (countType, elemType, name)
    {
        let lastElement = this.elements[this.elements.length - 1];
        lastElement.format.push ({
            name : name,
            isSingle : false,
            countType : countType,
            elemType : elemType
        });
    }

    GetElement (name)
    {
        for (let i = 0; i < this.elements.length; i++) {
            let element = this.elements[i];
            if (element.name === name) {
                return element;
            }
        }
        return null;
    }

    Check ()
    {
        let vertex = this.GetElement ('vertex');
        if (vertex === null || vertex.length === 0 || vertex.format.length < 3) {
            return PlyHeaderCheckResult.NoVertices;
        }

        let face = this.GetElement ('face');
        if (this.format === 'ascii') {
            if (face === null || face.count === 0 || face.format.length < 0) {
                return PlyHeaderCheckResult.NoFaces;
            }
        } else if (this.format === 'binary_little_endian' || this.format === 'binary_big_endian') {
            let triStrips = this.GetElement ('tristrips');
            let hasFaces = (face !== null && face.count > 0 && face.format.length > 0);
            let hasTriStrips = (triStrips !== null && triStrips.count > 0 && triStrips.format.length > 0);
            if (!hasFaces && !hasTriStrips) {
                return PlyHeaderCheckResult.NoFaces;
            }
        } else {
            return PlyHeaderCheckResult.UnknownError;
        }

        return PlyHeaderCheckResult.Ok;
    }
}

class PlyMaterialHandler
{
    constructor (model)
    {
        this.model = model;
        this.colorToMaterial = new Map ();
    }

    GetMaterialIndexByColor (color)
    {
        let materialName = 'Color ' +
            IntegerToHexString (color[0]) +
            IntegerToHexString (color[1]) +
            IntegerToHexString (color[2]) +
            IntegerToHexString (color[3]);

        if (this.colorToMaterial.has (materialName)) {
            return this.colorToMaterial.get (materialName);
        } else {
            let material = new PhongMaterial ();
            material.name = materialName;
            material.color = new RGBColor (color[0], color[1], color[2]);
            material.opacity = color[3] / 255.0;
            UpdateMaterialTransparency (material);
            let materialIndex = this.model.AddMaterial (material);
            this.colorToMaterial.set (materialName, materialIndex);
            return materialIndex;
        }
    }
}

class ImporterPly extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'ply';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    ClearContent ()
    {
        this.mesh = null;
    }

    ResetContent ()
    {
        this.mesh = new Mesh ();
        this.model.AddMeshToRootNode (this.mesh);
    }

    ImportContent (fileContent, onFinish)
    {
        let headerString = this.GetHeaderContent (fileContent);
        let header = this.ReadHeader (headerString);
        let checkResult = header.Check ();
        if (checkResult === PlyHeaderCheckResult.Ok) {
            if (header.format === 'ascii') {
                let contentString = ArrayBufferToUtf8String (fileContent);
                contentString = contentString.substring (headerString.length);
                this.ReadAsciiContent (header, contentString);
            } else if (header.format === 'binary_little_endian' || header.format === 'binary_big_endian') {
                this.ReadBinaryContent (header, fileContent, headerString.length);
            }
        } else {
            if (checkResult === PlyHeaderCheckResult.NoVertices) {
                this.SetError ('The model contains no vertices.');
            } else if (checkResult === PlyHeaderCheckResult.NoFaces) {
                this.SetError ('The model contains no faces.');
            } else {
                this.SetError ('Invalid header information.');
            }
        }
        onFinish ();
    }

    GetHeaderContent (fileContent)
    {
        let headerContent = '';
        let bufferView = new Uint8Array (fileContent);
        let bufferIndex = 0;
        for (bufferIndex = 0; bufferIndex < fileContent.byteLength; bufferIndex++) {
            headerContent += String.fromCharCode (bufferView[bufferIndex]);
            if (headerContent.endsWith ('end_header')) {
                break;
            }
        }
        bufferIndex += 1;
        while (bufferIndex < fileContent.byteLength) {
            let char = String.fromCharCode (bufferView[bufferIndex]);
            headerContent += char;
            bufferIndex += 1;
            if (char === '\n') {
                break;
            }
        }
        return headerContent;
    }

    ReadHeader (headerContent)
    {
        let header = new PlyHeader ();
        ReadLines (headerContent, (line) => {
            let parameters = ParametersFromLine (line, null);
            if (parameters.length === 0 || parameters[0] === 'comment') {
                return;
            }

            if (parameters[0] === 'ply') {
                return;
            } else if (parameters[0] === 'format' && parameters.length >= 2) {
                header.SetFormat (parameters[1]);
            } else if (parameters[0] === 'element' && parameters.length >= 3) {
                header.AddElement (parameters[1], parseInt (parameters[2], 10));
            } else if (parameters[0] === 'property' && parameters.length >= 3) {
                if (parameters[1] === 'list' && parameters.length >= 5) {
                    header.AddListFormat (parameters[2], parameters[3], parameters[4]);
                } else {
                    header.AddSingleFormat (parameters[1], parameters[2]);
                }
            }
        });

        return header;
    }

    ReadAsciiContent (header, fileContent)
    {
        let vertex = header.GetElement ('vertex');
        let face = header.GetElement ('face');
        let foundVertex = 0;
        let foundFace = 0;
        ReadLines (fileContent, (line) => {
            if (this.WasError ()) {
                return;
            }

            let parameters = ParametersFromLine (line, null);
            if (parameters.length === 0 || parameters[0] === 'comment') {
                return;
            }

            if (foundVertex < vertex.count) {
                if (parameters.length >= 3) {
                    this.mesh.AddVertex (new Coord3D (
                        parseFloat (parameters[0]),
                        parseFloat (parameters[1]),
                        parseFloat (parameters[2])
                    ));
                    foundVertex += 1;
                }
                return;
            }

            if (face !== null && foundFace < face.count) {
                if (parameters.length >= 4) {
                    let vertexCount = parseInt (parameters[0], 10);
                    if (parameters.length < vertexCount + 1) {
                        return;
                    }
                    for (let i = 0; i < vertexCount - 2; i++) {
                        let v0 = parseInt (parameters[1]);
                        let v1 = parseInt (parameters[i + 2]);
                        let v2 = parseInt (parameters[i + 3]);
                        let triangle = new Triangle (v0, v1, v2);
                        this.mesh.AddTriangle (triangle);
                    }
                    foundFace += 1;
                }
                return;
            }
        });
    }

    ReadBinaryContent (header, fileContent, headerLength)
    {
        function ReadByFormat (reader, format)
        {
            function ReadType (reader, type)
            {
                if (type === 'char' || type === 'int8') {
                    return reader.ReadCharacter8 ();
                } else if (type === 'uchar' || type === 'uint8') {
                    return reader.ReadUnsignedCharacter8 ();
                } else if (type === 'short' || type === 'int16') {
                    return reader.ReadInteger16 ();
                } else if (type === 'ushort' || type === 'uint16') {
                    return reader.ReadUnsignedInteger16 ();
                } else if (type === 'int' || type === 'int32') {
                    return reader.ReadInteger32 ();
                } else if (type === 'uint' || type === 'uint32') {
                    return reader.ReadUnsignedInteger32 ();
                } else if (type === 'float' || type === 'float32') {
                    return reader.ReadFloat32 ();
                } else if (type === 'double' || type === 'double64') {
                    return reader.ReadDouble64 ();
                }
                return null;
            }

            if (format.isSingle) {
                return ReadType (reader, format.elemType);
            } else {
                let list = [];
                let count = ReadType (reader, format.countType);
                for (let i = 0; i < count; i++) {
                    list.push (ReadType (reader, format.elemType));
                }
                return list;
            }
        }

        function SkipFormat (reader, format, startIndex)
        {
            for (let i = startIndex; i < format.length; i++) {
                ReadByFormat (reader, format[i]);
            }
        }

        function SkipAndGetColor (reader, format, startIndex)
        {
            let r = null;
            let g = null;
            let b = null;
            let a = 255;

            for (let i = startIndex; i < format.length; i++) {
                let currFormat = format[i];
                let val = ReadByFormat (reader, currFormat);
                if (currFormat.name === 'red') {
                    r = val;
                } else if (currFormat.name === 'green') {
                    g = val;
                } else if (currFormat.name === 'blue') {
                    b = val;
                } else if (currFormat.name === 'alpha') {
                    a = val;
                }
            }

            if (r !== null && g !== null && b !== null) {
                return [r, g, b, a];
            }

            return null;
        }

        let reader = null;
        if (header.format === 'binary_little_endian') {
            reader = new BinaryReader (fileContent, true);
        } else if (header.format === 'binary_big_endian') {
            reader = new BinaryReader (fileContent, false);
        } else {
            return;
        }
        reader.Skip (headerLength);

        let materialHandler = new PlyMaterialHandler (this.model);
        let elements = header.GetElements ();
        for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {
            let element = elements[elementIndex];
            if (element.name === 'vertex') {
                for (let vertexIndex = 0; vertexIndex < element.count; vertexIndex++) {
                    let x = ReadByFormat (reader, element.format[0]);
                    let y = ReadByFormat (reader, element.format[1]);
                    let z = ReadByFormat (reader, element.format[2]);
                    let color = SkipAndGetColor (reader, element.format, 3);
                    if (color !== null) {
                        this.mesh.AddVertexColor (new RGBColor (color[0], color[1], color[2]));
                    }
                    this.mesh.AddVertex (new Coord3D (x, y, z));
                }
            } else if (element.name === 'face') {
                for (let faceIndex = 0; faceIndex < element.count; faceIndex++) {
                    let vertices = ReadByFormat (reader, element.format[0]);
                    let faceColor = SkipAndGetColor (reader, element.format, 1);
                    for (let i = 0; i < vertices.length - 2; i++) {
                        let v0 = vertices[0];
                        let v1 = vertices[i + 1];
                        let v2 = vertices[i + 2];
                        let triangle = new Triangle (v0, v1, v2);
                        if (faceColor !== null) {
                            triangle.mat = materialHandler.GetMaterialIndexByColor (faceColor);
                        } else if (this.mesh.VertexColorCount () > 0) {
                            triangle.SetVertexColors (v0, v1, v2);
                        }
                        this.mesh.AddTriangle (triangle);
                    }
                }
            } else if (element.name === 'tristrips') {
                for (let triStripIndex = 0; triStripIndex < element.count; triStripIndex++) {
                    let vertices = ReadByFormat (reader, element.format[0]);
                    SkipFormat (reader, element.format, 1);
                    let ccw = true;
                    for (let i = 0; i < vertices.length - 2; i++) {
                        let v0 = vertices[i];
                        let v1 = vertices[i + 1];
                        let v2 = vertices[i + 2];
                        if (v2 === -1) {
                            i += 2;
                            ccw = true;
                            continue;
                        }
                        if (!ccw) {
                            let tmp = v1;
                            v1 = v2;
                            v2 = tmp;
                        }
                        ccw = !ccw;
                        let triangle = new Triangle (v0, v1, v2);
                        this.mesh.AddTriangle (triangle);
                    }
                }
            } else {
                SkipFormat (reader, element.format, 0);
            }
        }
    }
}

class ImporterOcct extends ImporterBase
{
    constructor ()
    {
        super ();
		this.worker = null;
    }

    CanImportExtension (extension)
    {
        return extension === 'stp' || extension === 'step' || extension === 'igs' || extension === 'iges' || extension === 'brp' || extension === 'brep';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

	ClearContent ()
	{
        if (this.worker !== null) {
            this.worker.terminate ();
            this.worker = null;
        }
	}

    ResetContent ()
    {
        this.worker = null;
    }

    ImportContent (fileContent, onFinish)
    {
        let workerPath = GetExternalLibPath ('loaders/occt-import-js-worker.js');
        this.worker = new Worker (workerPath);
        this.worker.addEventListener ('message', (ev) => {
            this.ImportResultJson (ev.data, onFinish);
        });
        this.worker.addEventListener ('error', (ev) => {
            this.SetError ('Failed to load occt-import-js.');
            onFinish ();
        });

        let format = null;
        if (this.extension === 'stp' || this.extension === 'step') {
            format = 'step';
        } else if (this.extension === 'igs' || this.extension === 'iges') {
            format = 'iges';
        } else if (this.extension === 'brp' || this.extension === 'brep') {
            format = 'brep';
        } else {
            onFinish ();
            return;
        }

        let fileBuffer = new Uint8Array (fileContent);
        this.worker.postMessage ({
            format : format,
            buffer : fileBuffer,
            params : null
        });
    }

	ImportResultJson (resultContent, onFinish)
	{
        if (!resultContent.success) {
            onFinish ();
            return;
        }
        let colorToMaterial = new ColorToMaterialConverter (this.model);
        let rootNode = this.model.GetRootNode ();
        this.ImportNode (resultContent, resultContent.root, rootNode, colorToMaterial);
        onFinish ();
	}

    ImportNode (resultContent, occtNode, parentNode, colorToMaterial)
    {
        for (let nodeMeshIndex of occtNode.meshes) {
            let occtMesh = resultContent.meshes[nodeMeshIndex];
            let mesh = this.ImportMesh (occtMesh, colorToMaterial);
            let meshIndex = this.model.AddMesh (mesh);
            parentNode.AddMeshIndex (meshIndex);
        }
        for (let childOcctNode of occtNode.children) {
            let childNode = new Node ();
            childNode.SetName (childOcctNode.name);
            parentNode.AddChildNode (childNode);
            this.ImportNode (resultContent, childOcctNode, childNode, colorToMaterial);
        }
    }

    ImportMesh (occtMesh, colorToMaterial)
    {
        let materialIndex = null;
        if (occtMesh.color) {
            let color = RGBColorFromFloatComponents (occtMesh.color[0], occtMesh.color[1], occtMesh.color[2]);
            materialIndex = colorToMaterial.GetMaterialIndex (color.r, color.g, color.b, null);
        }
        let mesh = ConvertThreeGeometryToMesh (occtMesh, materialIndex, null);
        if (occtMesh.name) {
            mesh.SetName (occtMesh.name);
        }
        for (let brepFace of occtMesh.brep_faces) {
            if (brepFace.color === null) {
                continue;
            }
            let faceColor = RGBColorFromFloatComponents (brepFace.color[0], brepFace.color[1], brepFace.color[2]);
            let faceMaterialIndex = colorToMaterial.GetMaterialIndex (faceColor.r, faceColor.g, faceColor.b, null);
            for (let i = brepFace.first; i <= brepFace.last; i++) {
                let triangle = mesh.GetTriangle (i);
                triangle.SetMaterial (faceMaterialIndex);
            }
        }
        return mesh;
    }
}

class ImporterStl extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'stl';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    ClearContent ()
    {
        this.mesh = null;
        this.triangle = null;
    }

    ResetContent ()
    {
        this.mesh = new Mesh ();
        this.model.AddMeshToRootNode (this.mesh);
        this.triangle = null;
    }

    ImportContent (fileContent, onFinish)
    {
        if (this.IsBinaryStlFile (fileContent)) {
            this.ProcessBinary (fileContent);
        } else {
            let textContent = ArrayBufferToUtf8String (fileContent);
            ReadLines (textContent, (line) => {
                if (!this.WasError ()) {
                    this.ProcessLine (line);
                }
            });
        }
        onFinish ();
    }

    IsBinaryStlFile (fileContent)
    {
        let byteLength = fileContent.byteLength;
        if (byteLength < 84) {
            return false;
        }

        let reader = new BinaryReader (fileContent, true);
        reader.Skip (80);

        let triangleCount = reader.ReadUnsignedInteger32 ();
        if (byteLength !== triangleCount * 50 + 84) {
            return false;
        }

        return true;
    }

    ProcessLine (line)
    {
        if (line[0] === '#') {
            return;
        }

        let parameters = ParametersFromLine (line, '#');
        if (parameters.length === 0) {
            return;
        }

        let keyword = parameters[0];
        if (keyword === 'solid') {
            if (parameters.length > 1) {
                let name = NameFromLine (line, keyword.length, '#');
                this.mesh.SetName (name);
            }
            return;
        }

        if (keyword === 'facet') {
            this.triangle = new Triangle (-1, -1, -1);
            if (parameters.length >= 5 && parameters[1] === 'normal') {
                let normalVector = new Coord3D (
                    parseFloat (parameters[2]),
                    parseFloat (parameters[3]),
                    parseFloat (parameters[4])
                );
                if (IsPositive (normalVector.Length ())) {
                    let normalIndex = this.mesh.AddNormal (normalVector);
                    this.triangle.SetNormals (
                        normalIndex,
                        normalIndex,
                        normalIndex
                    );
                }
            }
            return;
        }

        if (keyword === 'vertex' && this.triangle !== null) {
            if (parameters.length >= 4) {
                let vertexIndex = this.mesh.AddVertex (new Coord3D (
                    parseFloat (parameters[1]),
                    parseFloat (parameters[2]),
                    parseFloat (parameters[3])
                ));
                if (this.triangle.v0 === -1) {
                    this.triangle.v0 = vertexIndex;
                } else if (this.triangle.v1 === -1) {
                    this.triangle.v1 = vertexIndex;
                } else if (this.triangle.v2 === -1) {
                    this.triangle.v2 = vertexIndex;
                }
            }
            return;
        }

        if (keyword === 'endfacet' && this.triangle !== null) {
            if (this.triangle.v0 !== -1 && this.triangle.v1 !== -1 && this.triangle.v2 !== null) {
                this.mesh.AddTriangle (this.triangle);
            }
            this.triangle = null;
            return;
        }
    }

    ProcessBinary (fileContent)
    {
        function ReadVector (reader)
        {
            let coord = new Coord3D ();
            coord.x = reader.ReadFloat32 ();
            coord.y = reader.ReadFloat32 ();
            coord.z = reader.ReadFloat32 ();
            return coord;
        }

        function AddVertex (mesh, reader)
        {
            let coord = ReadVector (reader);
            return mesh.AddVertex (coord);
        }

        let reader = new BinaryReader (fileContent, true);
        reader.Skip (80);
        let triangleCount = reader.ReadUnsignedInteger32 ();
        for (let i = 0; i < triangleCount; i++) {
            let normalVector = ReadVector (reader);
            let v0 = AddVertex (this.mesh, reader);
            let v1 = AddVertex (this.mesh, reader);
            let v2 = AddVertex (this.mesh, reader);
            reader.Skip (2);
            let triangle = new Triangle (v0, v1, v2);
            if (IsPositive (normalVector.Length ())) {
                let normal = this.mesh.AddNormal (normalVector);
                triangle.SetNormals (normal, normal, normal);
            }
            this.mesh.AddTriangle (triangle);
        }
    }
}

class ImporterBim extends ImporterBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'bim';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    ClearContent ()
    {
        this.meshIdToMesh = null;
        this.colorToMaterial = null;
    }

    ResetContent ()
    {
        this.meshIdToMesh = new Map ();
        this.colorToMaterial = new ColorToMaterialConverter (this.model);
    }

    ImportContent (fileContent, onFinish)
    {
        let textContent = ArrayBufferToUtf8String (fileContent);
        let bimJson = null;
        try {
            bimJson = JSON.parse (textContent);
        } catch (err) {
            this.SetError ('Failed to parse bim file.');
            onFinish ();
            return;
        }

        for (let bimMesh of bimJson.meshes) {
            this.meshIdToMesh.set (bimMesh.mesh_id, bimMesh);
        }

        this.ImportProperties (bimJson, this.model);
        for (let bimElement of bimJson.elements) {
            let mesh = this.ImportElement (bimElement);
            mesh.SetName (bimElement.type);
            this.ImportProperties (bimElement, mesh);
        }

        onFinish ();
    }

    ImportElement (bimElement)
    {
        let defaultMaterialIndex = this.colorToMaterial.GetMaterialIndex (
            bimElement.color.r,
            bimElement.color.g,
            bimElement.color.b,
            bimElement.color.a
        );

        let rootNode = this.model.GetRootNode ();

        let bimMesh = this.meshIdToMesh.get (bimElement.mesh_id);
        let mesh = this.ImportMesh (bimMesh, (triangleIndex) => {
            if (bimElement.face_colors) {
                let faceMaterialIndex = this.colorToMaterial.GetMaterialIndex (
                    bimElement.face_colors[triangleIndex * 4 + 0],
                    bimElement.face_colors[triangleIndex * 4 + 1],
                    bimElement.face_colors[triangleIndex * 4 + 2],
                    bimElement.face_colors[triangleIndex * 4 + 3]
                );
                return faceMaterialIndex;
            } else {
                return defaultMaterialIndex;
            }
        });
        let meshIndex = this.model.AddMesh (mesh);

        let elementNode = new Node ();
        elementNode.AddMeshIndex (meshIndex);

        let translation = new Coord3D (0.0, 0.0, 0.0);
        if (bimElement.vector) {
            translation = new Coord3D (
                bimElement.vector.x,
                bimElement.vector.y,
                bimElement.vector.z
            );
        }
        let rotation = new Quaternion (0.0, 0.0, 0.0, 1.0);
        if (bimElement.rotation) {
            rotation = new Quaternion (
                bimElement.rotation.qx,
                bimElement.rotation.qy,
                bimElement.rotation.qz,
                bimElement.rotation.qw
            );
        }
        let scale = new Coord3D (1.0, 1.0, 1.0);
        let matrix = new Matrix ().ComposeTRS (translation, rotation, scale);
        elementNode.SetTransformation (new Transformation (matrix));

        rootNode.AddChildNode (elementNode);
        return mesh;
    }

    ImportMesh (bimMesh, getMaterialIndex)
    {
        let mesh = new Mesh ();

        for (let i = 0; i < bimMesh.coordinates.length; i += 3) {
            mesh.AddVertex (new Coord3D (
                bimMesh.coordinates[i + 0],
                bimMesh.coordinates[i + 1],
                bimMesh.coordinates[i + 2]
            ));
        }

        for (let i = 0; i < bimMesh.indices.length; i += 3) {
            let triangle = new Triangle (
                bimMesh.indices[i + 0],
                bimMesh.indices[i + 1],
                bimMesh.indices[i + 2]
            );
            triangle.SetMaterial (getMaterialIndex (i / 3));
            mesh.AddTriangle (triangle);
        }

        return mesh;
    }

    ImportProperties (source, target)
    {
        function AddProperty (group, name, value)
        {
            if (value === undefined || value === null) {
                return;
            }
            let property = new Property (PropertyType.Text, name, value);
            group.AddProperty (property);
        }

        if (!source.info || IsObjectEmpty (source.info)) {
            return;
        }

        let info = source.info;
        let propertyGroup = new PropertyGroup ('Info');
        AddProperty (propertyGroup, 'Guid', source.guid);
        AddProperty (propertyGroup, 'Type', source.type);
        for (let propertyName in info) {
            if (Object.prototype.hasOwnProperty.call (info, propertyName)) {
                if (typeof info[propertyName] === 'string') {
                    AddProperty (propertyGroup, propertyName, info[propertyName]);
                }
            }
        }
        target.AddPropertyGroup (propertyGroup);
    }
}

class ImporterThreeBase extends ImporterBase
{
    constructor ()
    {
        super ();

        this.colorConverter = null;
    }

    CreateLoader (manager)
    {
        return null;
    }

    GetMainObject (loadedObject)
    {
        return loadedObject;
    }

    IsMeshVisible (mesh)
    {
        return true;
    }

    ClearContent ()
    {
        this.loader = null;
        this.materialIdToIndex = null;
        this.objectUrlToFileName = null;
    }

    ResetContent ()
    {
        this.loader = null;
        this.materialIdToIndex = new Map ();
        this.objectUrlToFileName = new Map ();
    }

    ImportContent (fileContent, onFinish)
    {
        this.LoadModel (fileContent, onFinish);
    }

    LoadModel (fileContent, onFinish)
    {
        let isAllLoadersDone = false;
        let loadingManager = new THREE.LoadingManager (() => {
            isAllLoadersDone = true;
        });

        const mainFileUrl = CreateObjectUrl (fileContent);
        loadingManager.setURLModifier ((url) => {
            if (url === mainFileUrl) {
                return url;
            }
            const name = GetFileName (url);
            const extension = GetFileExtension (url);
            if (extension.length > 0) {
                const buffer = this.callbacks.getFileBuffer (url);
                if (buffer !== null) {
                    let objectUrl = CreateObjectUrl (buffer);
                    this.objectUrlToFileName.set (objectUrl, name);
                    return objectUrl;
                }
            }
            return url;
        });

        const threeLoader = this.CreateLoader (loadingManager);
        if (threeLoader === null) {
            onFinish ();
            return;
        }

        threeLoader.load (mainFileUrl,
            (object) => {
                WaitWhile (() => {
                    if (isAllLoadersDone) {
                        this.OnThreeObjectsLoaded (object, onFinish);
                        return false;
                    }
                    return true;
                });
            },
            () => {
            },
            (err) => {
                this.SetError (err);
                onFinish ();
            }
        );
    }

    OnThreeObjectsLoaded (loadedObject, onFinish)
    {
        function GetObjectTransformation (threeObject)
        {
            let matrix = new Matrix ().CreateIdentity ();
            threeObject.updateMatrix ();
            if (threeObject.matrix !== undefined && threeObject.matrix !== null) {
                matrix.Set (threeObject.matrix.elements);
            }
            return new Transformation (matrix);
        }

        function AddObject (importer, model, threeObject, parentNode)
        {
            let node = new Node ();
            if (threeObject.name !== undefined) {
                node.SetName (threeObject.name);
            }
            node.SetTransformation (GetObjectTransformation (threeObject));
            parentNode.AddChildNode (node);

            for (let childObject of threeObject.children) {
                AddObject (importer, model, childObject, node);
            }
            if (threeObject.isMesh && importer.IsMeshVisible (threeObject)) {
                let mesh = importer.ConvertThreeMesh (threeObject);
                let meshIndex = model.AddMesh (mesh);
                node.AddMeshIndex (meshIndex);
            }
        }

        let mainObject = this.GetMainObject (loadedObject);
        let rootNode = this.model.GetRootNode ();
        rootNode.SetTransformation (GetObjectTransformation (mainObject));
        for (let childObject of mainObject.children) {
            AddObject (this, this.model, childObject, rootNode);
        }

        onFinish ();
    }

    ConvertThreeMesh (threeMesh)
    {
        let mesh = null;
        if (Array.isArray (threeMesh.material)) {
            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, null, this.colorConverter);
            if (threeMesh.geometry.attributes.color === undefined || threeMesh.geometry.attributes.color === null) {
                let materialIndices = [];
                for (let i = 0; i < threeMesh.material.length; i++) {
                    const material = threeMesh.material[i];
                    const materialIndex = this.FindOrCreateMaterial (material);
                    materialIndices.push (materialIndex);
                }
                for (let i = 0; i < threeMesh.geometry.groups.length; i++) {
                    let group = threeMesh.geometry.groups[i];
                    let groupEnd = null;
                    if (group.count === Infinity) {
                        groupEnd = mesh.TriangleCount ();
                    } else {
                        groupEnd = group.start / 3 + group.count / 3;
                    }
                    for (let j = group.start / 3; j < groupEnd; j++) {
                        let triangle = mesh.GetTriangle (j);
                        triangle.SetMaterial (materialIndices[group.materialIndex]);
                    }
                }
            }
        } else {
            const materialIndex = this.FindOrCreateMaterial (threeMesh.material);
            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, materialIndex, this.colorConverter);
        }
        if (threeMesh.name !== undefined && threeMesh.name !== null) {
            mesh.SetName (threeMesh.name);
        }
        return mesh;
    }

    FindOrCreateMaterial (threeMaterial)
    {
        if (this.materialIdToIndex.has (threeMaterial.id)) {
            return this.materialIdToIndex.get (threeMaterial.id);
        }
        let material = this.ConvertThreeMaterial (threeMaterial);
        let materialIndex = null;
        if (material !== null) {
            materialIndex = this.model.AddMaterial (material);
        }
        this.materialIdToIndex.set (threeMaterial.id, materialIndex);
        return materialIndex;
    }

    ConvertThreeMaterial (threeMaterial)
    {
        function CreateTexture (threeMap, objectUrlToFileName)
        {
            function GetDataUrl (img)
            {
                if (img.data !== undefined && img.data !== null) {
                    let imageData = new ImageData (img.width, img.height);
                    let imageSize = img.width * img.height * 4;
                    for (let i = 0; i < imageSize; i++) {
                        imageData.data[i] = img.data[i];
                    }
                    return THREE.ImageUtils.getDataURL (imageData);
                } else {
                    return THREE.ImageUtils.getDataURL (img);
                }
            }

            if (threeMap === undefined || threeMap === null) {
                return null;
            }

            if (threeMap.image === undefined || threeMap.image === null) {
                return null;
            }

            try {
                const dataUrl = GetDataUrl (threeMap.image);
                const base64Buffer = Base64DataURIToArrayBuffer (dataUrl);
                let texture = new TextureMap ();
                let textureName = null;
                if (objectUrlToFileName.has (threeMap.image.src)) {
                    textureName = objectUrlToFileName.get (threeMap.image.src);
                } else if (threeMap.name !== undefined && threeMap.name !== null) {
                    textureName = threeMap.name + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);
                } else {
                    textureName = 'Embedded_' + threeMap.id.toString () + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);
                }
                texture.name = textureName;
                texture.mimeType = base64Buffer.mimeType;
                texture.buffer = base64Buffer.buffer;
                texture.rotation = threeMap.rotation;
                texture.offset.x = threeMap.offset.x;
                texture.offset.y = threeMap.offset.y;
                texture.scale.x = threeMap.repeat.x;
                texture.scale.y = threeMap.repeat.y;
                return texture;
            } catch (err) {
                return null;
            }
        }

        if (threeMaterial.name === THREE.Loader.DEFAULT_MATERIAL_NAME) {
            return null;
        }

        let material = new PhongMaterial ();
        material.name = threeMaterial.name;
        material.color = this.ConvertThreeColor (threeMaterial.color);
        material.opacity = threeMaterial.opacity;
        material.transparent = threeMaterial.transparent;
        material.alphaTest = threeMaterial.alphaTest;
        if (threeMaterial.type === 'MeshPhongMaterial') {
            material.specular = this.ConvertThreeColor (threeMaterial.specular);
            material.shininess = threeMaterial.shininess / 100.0;
        }
        material.diffuseMap = CreateTexture (threeMaterial.map, this.objectUrlToFileName);
        material.normalMap = CreateTexture (threeMaterial.normalMap, this.objectUrlToFileName);
        material.bumpMap = CreateTexture (threeMaterial.bumpMap, this.objectUrlToFileName);

        return material;
    }

    ConvertThreeColor (threeColor)
    {
        if (this.colorConverter !== null) {
            threeColor = this.colorConverter.Convert (threeColor);
        }
        return ConvertThreeColorToColor (threeColor);
    }
}

class ImporterThreeFbx extends ImporterThreeBase
{
    constructor ()
    {
        super ();
        this.colorConverter = new ThreeLinearToSRGBColorConverter ();
    }

    CanImportExtension (extension)
    {
        return extension === 'fbx';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    CreateLoader (manager)
    {
        manager.addHandler (/\.tga$/i, new TGALoader (manager));
        return new FBXLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        return loadedObject;
    }
}

class ImporterThreeDae extends ImporterThreeBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'dae';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    CreateLoader (manager)
    {
        manager.addHandler (/\.tga$/i, new TGALoader (manager));
        return new ColladaLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        return loadedObject.scene;
    }
}

class ImporterThreeWrl extends ImporterThreeBase
{
    constructor ()
    {
        super ();
        this.colorConverter = new ThreeLinearToSRGBColorConverter ();
    }

    CanImportExtension (extension)
    {
        return extension === 'wrl';
    }

    GetUpDirection ()
    {
        return Direction.Y;
    }

    CreateLoader (manager)
    {
        return new VRMLLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        return loadedObject;
    }

    IsMeshVisible (mesh)
    {
        let isVisible = true;
        if (Array.isArray (mesh.material)) {
            for (let i = 0; i < mesh.material.length; i++) {
                if (mesh.material[i].side === THREE.BackSide) {
                    isVisible = false;
                    break;
                }
            }
        } else {
            isVisible = (mesh.material.side !== THREE.BackSide);
        }
        return isVisible;
    }
}

class ImporterThree3mf extends ImporterThreeBase
{
    constructor ()
    {
        super ();
        this.colorConverter = new ThreeSRGBToLinearColorConverter ();
    }

    CanImportExtension (extension)
    {
        return extension === '3mf';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    CreateLoader (manager)
    {
        return new ThreeMFLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        return loadedObject;
    }
}

class ImporterThreeAmf extends ImporterThreeBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'amf';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    CreateLoader (manager)
    {
        return new AMFLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        return loadedObject;
    }
}

const DocumentInitResult =
{
    Success : 0,
    NoDocumentXml : 1
};

class FreeCadObject
{
    constructor (name, type)
    {
        this.name = name;
        this.type = type;
        this.shapeName = null;
        this.isVisible = false;
        this.color = null;
        this.fileName = null;
        this.fileContent = null;
        this.inLinkCount = 0;
        this.properties = null;
    }

    IsConvertible ()
    {
        if (this.fileName === null || this.fileContent === null) {
            return false;
        }
        if (!this.isVisible) {
            return false;
        }
        if (this.inLinkCount > 0) {
            return false;
        }
        return true;
    }
}

class FreeCadDocument
{
    constructor ()
    {
        this.files = null;
        this.properties = null;
        this.objectNames = [];
        this.objectData = new Map ();
    }

    Init (fileContent)
    {
        let fileContentBuffer = new Uint8Array (fileContent);
        this.files = fflate.unzipSync (fileContentBuffer);
        if (!this.LoadDocumentXml ()) {
            return DocumentInitResult.NoDocumentXml;
        }

        this.LoadGuiDocumentXml ();
        return DocumentInitResult.Success;
    }

    GetObjectListToConvert ()
    {
        let objectList = [];
        for (let objectName of this.objectNames) {
            let object = this.objectData.get (objectName);
            if (!object.IsConvertible ()) {
                continue;
            }
            objectList.push (object);
        }
        return objectList;
    }

    IsSupportedType (type)
    {
        if (!type.startsWith ('Part::') && !type.startsWith ('PartDesign::')) {
            return false;
        }
        if (type.indexOf ('Part2D') !== -1) {
            return false;
        }
        return true;
    }

    HasFile (fileName)
    {
        return (fileName in this.files);
    }

    LoadDocumentXml ()
    {
        let documentXml = this.GetXMLContent ('Document.xml');
        if (documentXml === null) {
            return false;
        }

        this.properties = new PropertyGroup ('Properties');
        let documentElements = documentXml.getElementsByTagName ('Document');
        for (let documentElement of documentElements) {
            for (let childNode of documentElement.childNodes) {
                if (childNode.tagName === 'Properties') {
                    this.GetPropertiesFromElement (childNode, this.properties);
                }
            }
        }

        let objectsElements = documentXml.getElementsByTagName ('Objects');
        for (let objectsElement of objectsElements) {
            let objectElements = objectsElement.getElementsByTagName ('Object');
            for (let objectElement of objectElements) {
                let name = objectElement.getAttribute ('name');
                let type = objectElement.getAttribute ('type');
                if (!this.IsSupportedType (type)) {
                    continue;
                }
                let object = new FreeCadObject (name, type);
                this.objectNames.push (name);
                this.objectData.set (name, object);
            }
        }

        let objectDataElements = documentXml.getElementsByTagName ('ObjectData');
        for (let objectDataElement of objectDataElements) {
            let objectElements = objectDataElement.getElementsByTagName ('Object');
            for (let objectElement of objectElements) {
                let name = objectElement.getAttribute ('name');
                if (!this.objectData.has (name)) {
                    continue;
                }

                let object = this.objectData.get (name);
                object.properties = new PropertyGroup ('Properties');
                for (let childNode of objectElement.childNodes) {
                    if (childNode.tagName === 'Properties') {
                        this.GetPropertiesFromElement (childNode, object.properties);
                    }
                }

                let propertyElements = objectElement.getElementsByTagName ('Property');
                for (let propertyElement of propertyElements) {
                    let propertyName = propertyElement.getAttribute ('name');
                    if (propertyName === 'Label') {
                        object.shapeName = this.GetFirstChildValue (propertyElement, 'String', 'value');
                    } else if (propertyName === 'Visibility') {
                        let isVisibleString = this.GetFirstChildValue (propertyElement, 'Bool', 'value');
                        object.isVisible = (isVisibleString === 'true');
                    } else if (propertyName === 'Visible') {
                        let isVisibleString = this.GetFirstChildValue (propertyElement, 'Bool', 'value');
                        object.isVisible = (isVisibleString === 'true');
                    } else if (propertyName === 'Shape') {
                        let fileName = this.GetFirstChildValue (propertyElement, 'Part', 'file');
                        if (!this.HasFile (fileName)) {
                            continue;
                        }
                        let extension = GetFileExtension (fileName);
                        if (extension !== 'brp' && extension !== 'brep') {
                            continue;
                        }
                        object.fileName = fileName;
                        object.fileContent = this.files[fileName];
                    }
                }

                let linkElements = objectElement.getElementsByTagName ('Link');
                for (let linkElement of linkElements) {
                    let linkedName = linkElement.getAttribute ('value');
                    if (this.objectData.has (linkedName)) {
                        let linkedObject = this.objectData.get (linkedName);
                        linkedObject.inLinkCount += 1;
                    }
                }
            }
        }

        return true;
    }

    LoadGuiDocumentXml ()
    {
        let documentXml = this.GetXMLContent ('GuiDocument.xml');
        if (documentXml === null) {
            return false;
        }

        let viewProviderElements = documentXml.getElementsByTagName ('ViewProvider');
        for (let viewProviderElement of viewProviderElements) {
            let name = viewProviderElement.getAttribute ('name');
            if (!this.objectData.has (name)) {
                continue;
            }

            let object = this.objectData.get (name);
            let propertyElements = viewProviderElement.getElementsByTagName ('Property');
            for (let propertyElement of propertyElements) {
                let propertyName = propertyElement.getAttribute ('name');
                if (propertyName === 'Visibility') {
                    let isVisibleString = this.GetFirstChildValue (propertyElement, 'Bool', 'value');
                    object.isVisible = (isVisibleString === 'true');
                } else if (propertyName === 'ShapeColor') {
                    let colorString = this.GetFirstChildValue (propertyElement, 'PropertyColor', 'value');
                    let rgba = parseInt (colorString, 10);
                    object.color = new RGBAColor (
                        rgba >> 24 & 0xff,
                        rgba >> 16 & 0xff,
                        rgba >> 8 & 0xff,
                        255
                    );
                }
            }
        }

        return true;
    }

    GetPropertiesFromElement (propertiesElement, propertyGroup)
    {
        let propertyElements = propertiesElement.getElementsByTagName ('Property');
        for (let propertyElement of propertyElements) {
            let propertyName = propertyElement.getAttribute ('name');
            let propertyType = propertyElement.getAttribute ('type');

            let property = null;
            if (propertyType === 'App::PropertyBool') {
                let propertyValue = this.GetFirstChildValue (propertyElement, 'String', 'bool');
                if (propertyValue !== null && propertyValue.length > 0) {
                    property = new Property (PropertyType.Boolean, propertyName, propertyValue === 'true');
                }
            } else if (propertyType === 'App::PropertyInteger') {
                let propertyValue = this.GetFirstChildValue (propertyElement, 'Integer', 'value');
                if (propertyValue !== null && propertyValue.length > 0) {
                    property = new Property (PropertyType.Integer, propertyName, parseInt (propertyValue));
                }
            } else if (propertyType === 'App::PropertyString') {
                let propertyValue = this.GetFirstChildValue (propertyElement, 'String', 'value');
                if (propertyValue !== null && propertyValue.length > 0) {
                    property = new Property (PropertyType.Text, propertyName, propertyValue);
                }
            } else if (propertyType === 'App::PropertyUUID') {
                let propertyValue = this.GetFirstChildValue (propertyElement, 'Uuid', 'value');
                if (propertyValue !== null && propertyValue.length > 0) {
                    property = new Property (PropertyType.Text, propertyName, propertyValue);
                }
            } else if (propertyType === 'App::PropertyFloat' || propertyType === 'App::PropertyLength' || propertyType === 'App::PropertyDistance' || propertyType === 'App::PropertyArea' || propertyType === 'App::PropertyVolume') {
                let propertyValue = this.GetFirstChildValue (propertyElement, 'Float', 'value');
                if (propertyValue !== null && propertyValue.length > 0) {
                    property = new Property (PropertyType.Number, propertyName, parseFloat (propertyValue));
                }
            }
            if (property !== null) {
                propertyGroup.AddProperty (property);
            }
        }
    }

    GetXMLContent (xmlFileName)
    {
        if (!this.HasFile (xmlFileName)) {
            return null;
        }

        let xmlParser = new DOMParser ();
        let xmlString = ArrayBufferToUtf8String (this.files[xmlFileName]);
        return xmlParser.parseFromString (xmlString, 'text/xml');
    }

    GetFirstChildValue (element, childTagName, childAttribute)
    {
        let childObjects = element.getElementsByTagName (childTagName);
        if (childObjects.length === 0) {
            return null;
        }
        return childObjects[0].getAttribute (childAttribute);
    }
}

class ImporterFcstd extends ImporterBase
{
    constructor ()
    {
        super ();
        this.worker = null;
        this.document = null;
    }

    CanImportExtension (extension)
    {
        return extension === 'fcstd';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

	ClearContent ()
	{
        if (this.worker !== null) {
            this.worker.terminate ();
            this.worker = null;
        }
        this.document = null;
	}

    ResetContent ()
    {
        this.worker = null;
        this.document = new FreeCadDocument ();
    }

    ImportContent (fileContent, onFinish)
    {
        let result = this.document.Init (fileContent);
        if (result === DocumentInitResult.NoDocumentXml) {
            this.SetError ('No Document.xml found.');
            onFinish ();
            return;
        }

        if (this.document.properties !== null && this.document.properties.PropertyCount () > 0) {
            this.model.AddPropertyGroup (this.document.properties);
        }

        let objectsToConvert = this.document.GetObjectListToConvert ();
        if (objectsToConvert.length === 0) {
            this.SetError ('No importable object found.');
            onFinish ();
            return;
        }

        this.ConvertObjects (objectsToConvert, onFinish);
    }

    ConvertObjects (objects, onFinish)
    {
        let workerPath = GetExternalLibPath ('loaders/occt-import-js-worker.js');
        this.worker = new Worker (workerPath);

        let convertedObjectCount = 0;
        let colorToMaterial = new ColorToMaterialConverter (this.model);
        let onFileConverted = (resultContent) => {
            if (resultContent !== null) {
                let currentObject = objects[convertedObjectCount];
                this.OnFileConverted (currentObject, resultContent, colorToMaterial);
            }
            convertedObjectCount += 1;
            if (convertedObjectCount === objects.length) {
                onFinish ();
            } else {
                let currentObject = objects[convertedObjectCount];
                this.worker.postMessage ({
                    format : 'brep',
                    buffer : currentObject.fileContent
                });
            }
        };

        this.worker.addEventListener ('message', (ev) => {
            onFileConverted (ev.data);
        });

        this.worker.addEventListener ('error', (ev) => {
            onFileConverted (null);
        });

        let currentObject = objects[convertedObjectCount];
        this.worker.postMessage ({
            format : 'brep',
            buffer : currentObject.fileContent
        });
    }

    OnFileConverted (object, resultContent, colorToMaterial)
    {
        if (!resultContent.success || resultContent.meshes.length === 0) {
            return;
        }

        let objectNode = new Node ();
        if (object.shapeName !== null) {
            objectNode.SetName (object.shapeName);
        }

        let objectMeshIndex = 1;
        for (let resultMesh of resultContent.meshes) {
            let materialIndex = null;
            if (object.color !== null) {
                materialIndex = colorToMaterial.GetMaterialIndex (
                    object.color.r,
                    object.color.g,
                    object.color.b,
                    object.color.a
                );
            }
            let mesh = ConvertThreeGeometryToMesh (resultMesh, materialIndex, null);
            if (object.shapeName !== null) {
                let indexString = objectMeshIndex.toString ().padStart (3, '0');
                mesh.SetName (object.shapeName + ' ' + indexString);
            }

            if (object.properties !== null && object.properties.PropertyCount () > 0) {
                mesh.AddPropertyGroup (object.properties);
            }

            let meshIndex = this.model.AddMesh (mesh);
            objectNode.AddMeshIndex (meshIndex);
            objectMeshIndex += 1;
        }

        let rootNode = this.model.GetRootNode ();
        rootNode.AddChildNode (objectNode);
    }
}

class ImportSettings
{
    constructor ()
    {
        this.defaultColor = new RGBColor (200, 200, 200);
    }
}

const ImportErrorCode =
{
    NoImportableFile : 1,
    FailedToLoadFile : 2,
    ImportFailed : 3,
    UnknownError : 4
};

class ImportError
{
    constructor (code)
    {
        this.code = code;
        this.mainFile = null;
        this.message = null;
    }
}

class ImportResult
{
    constructor ()
    {
        this.model = null;
        this.mainFile = null;
        this.upVector = null;
        this.usedFiles = null;
        this.missingFiles = null;
    }
}

class ImporterFileAccessor
{
    constructor (getBufferCallback)
    {
        this.getBufferCallback = getBufferCallback;
        this.fileBuffers = new Map ();
    }

    GetFileBuffer (filePath)
    {
        let fileName = GetFileName (filePath);
        if (this.fileBuffers.has (fileName)) {
            return this.fileBuffers.get (fileName);
        }
        let buffer = this.getBufferCallback (fileName);
        this.fileBuffers.set (fileName, buffer);
        return buffer;
    }
}

class Importer
{
    constructor ()
    {
        this.importers = [
            new ImporterObj (),
            new ImporterStl (),
            new ImporterOff (),
            new ImporterPly (),
            new Importer3ds (),
            new ImporterGltf (),
            new ImporterBim (),
            new Importer3dm (),
            new ImporterIfc (),
            new ImporterOcct (),
            new ImporterFcstd (),
            new ImporterThreeFbx (),
            new ImporterThreeDae (),
            new ImporterThreeWrl (),
            new ImporterThree3mf (),
            new ImporterThreeAmf ()
        ];
        this.fileList = new ImporterFileList ();
        this.model = null;
        this.usedFiles = [];
        this.missingFiles = [];
    }

	AddImporter (importer)
	{
		this.importers.push (importer);
	}

    ImportFiles (inputFiles, settings, callbacks)
    {
        callbacks.onLoadStart ();
        this.LoadFiles (inputFiles, {
            onReady : () => {
                callbacks.onImportStart ();
                RunTaskAsync (() => {
                    this.DecompressArchives (this.fileList, () => {
                        this.ImportLoadedFiles (settings, callbacks);
                    });
                });
            },
            onFileListProgress : callbacks.onFileListProgress,
            onFileLoadProgress : callbacks.onFileLoadProgress
        });
    }

    LoadFiles (inputFiles, callbacks)
    {
        let newFileList = new ImporterFileList ();
        newFileList.FillFromInputFiles (inputFiles);

        let reset = false;
        if (this.HasImportableFile (newFileList)) {
            reset = true;
        } else {
            let foundMissingFile = false;
            for (let i = 0; i < this.missingFiles.length; i++) {
                let missingFile = this.missingFiles[i];
                if (newFileList.ContainsFileByPath (missingFile)) {
                    foundMissingFile = true;
                }
            }
            if (!foundMissingFile) {
                reset = true;
            } else {
                this.fileList.ExtendFromFileList (newFileList);
                reset = false;
            }
        }
        if (reset) {
            this.fileList = newFileList;
        }
        this.fileList.GetContent ({
            onReady : callbacks.onReady,
            onFileListProgress : callbacks.onFileListProgress,
            onFileLoadProgress : callbacks.onFileLoadProgress
        });
    }

    ImportLoadedFiles (settings, callbacks)
    {
        console.log('ImportLoadedFiles#mainFile', this.fileList);
        let importableFiles = this.GetImportableFiles (this.fileList);
        if (importableFiles.length === 0) {
            callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile));
            return;
        }

        if (importableFiles.length === 1 || !callbacks.onSelectMainFile) {
            let mainFile = importableFiles[0];
            this.ImportLoadedMainFile (mainFile, settings, callbacks);
        } else {
            let fileNames = importableFiles.map (importableFile => importableFile.file.name);
            callbacks.onSelectMainFile (fileNames, (mainFileIndex) => {
                if (mainFileIndex === null) {
                    callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile));
                    return;
                }
                RunTaskAsync (() => {
                    let mainFile = importableFiles[mainFileIndex];
                    this.ImportLoadedMainFile (mainFile, settings, callbacks);
                });
            });
        }
    }

    ImportLoadedMainFile (mainFile, settings, callbacks)
    {
      console.log('ImportLoadedMainFile#mainFile', mainFile);
      if (mainFile === null || mainFile.file === null || mainFile.file.content === null) {
            let error = new ImportError (ImportErrorCode.FailedToLoadFile);
            if (mainFile !== null && mainFile.file !== null) {
                error.mainFile = mainFile.file.name;
            }
            callbacks.onImportError (error);
            return;
        }

        this.model = null;
        this.usedFiles = [];
        this.missingFiles = [];
        this.usedFiles.push (mainFile.file.name);

        let importer = mainFile.importer;
        let fileAccessor = new ImporterFileAccessor ((fileName) => {
            let fileBuffer = null;
            let file = this.fileList.FindFileByPath (fileName);
            if (file === null || file.content === null) {
                this.missingFiles.push (fileName);
                fileBuffer = null;
            } else {
                this.usedFiles.push (fileName);
                fileBuffer = file.content;
            }
            return fileBuffer;
        });

        importer.Import (mainFile.file.name, mainFile.file.extension, mainFile.file.content, {
            getDefaultMaterialColor : () => {
                return settings.defaultColor;
            },
            getFileBuffer : (filePath) => {
                return fileAccessor.GetFileBuffer (filePath);
            },
            onSuccess : () => {
                this.model = importer.GetModel ();
                let result = new ImportResult ();
                result.mainFile = mainFile.file.name;
                result.model = this.model;
                result.usedFiles = this.usedFiles;
                result.missingFiles = this.missingFiles;
                result.upVector = importer.GetUpDirection ();
                callbacks.onImportSuccess (result);
            },
            onError : () => {
                let error = new ImportError (ImportErrorCode.ImportFailed);
                error.mainFile = mainFile.file.name;
                error.message = importer.GetErrorMessage ();
                callbacks.onImportError (error);
            },
            onComplete : () => {
                importer.Clear ();
            }
        });
    }

    DecompressArchives (fileList, onReady)
    {
        let files = fileList.GetFiles ();
        let archives = [];
        for (let file of files) {
            if (file.extension === 'zip') {
                archives.push (file);
            }
        }
        if (archives.length === 0) {
            onReady ();
            return;
        }
        for (let i = 0; i < archives.length; i++) {
            const archiveFile = archives[i];
            const archiveBuffer = new Uint8Array (archiveFile.content);
            const decompressed = fflate.unzipSync (archiveBuffer);
            for (const fileName in decompressed) {
                if (Object.prototype.hasOwnProperty.call (decompressed, fileName)) {
                    let file = new ImporterFile (fileName, FileSource.Decompressed, null);
                    file.SetContent (decompressed[fileName].buffer);
                    fileList.AddFile (file);
                }
            }
        }
        onReady ();
    }

    GetFileList ()
    {
        return this.fileList;
    }

    HasImportableFile (fileList)
    {
        let importableFiles = this.GetImportableFiles (fileList);
        return importableFiles.length > 0;
    }

    GetImportableFiles (fileList)
    {
        function FindImporter (file, importers)
        {
            for (let importerIndex = 0; importerIndex < importers.length; importerIndex++) {
                let importer = importers[importerIndex];
                if (importer.CanImportExtension (file.extension)) {
                    return importer;
                }
            }
            return null;
        }

        let importableFiles = [];
        let files = fileList.GetFiles ();
        for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {
            let file = files[fileIndex];
            let importer = FindImporter (file, this.importers);
            if (importer !== null) {
                importableFiles.push ({
                    file : file,
                    importer : importer
                });
            }
        }
        return importableFiles;
    }
}

class ImporterThreeSvg extends ImporterThreeBase
{
    constructor ()
    {
        super ();
    }

    CanImportExtension (extension)
    {
        return extension === 'svg';
    }

    GetUpDirection ()
    {
        return Direction.Z;
    }

    CreateLoader (manager)
    {
        return new SVGLoader (manager);
    }

    GetMainObject (loadedObject)
    {
        function ShowFill (path)
        {
            const style = path.userData.style;
            if (style.fill === undefined || style.fill === 'none') {
                return false;
            }
            return true;
        }

        function GetOrCreateMaterial (materials, style, opacity)
        {
            let material = null;
            for (let existingMaterial of materials) {
                if (existingMaterial.style === style && existingMaterial.opacity === opacity) {
                    material = existingMaterial.material;
                    break;
                }
            }
            if (material === null) {
                material = new THREE.MeshPhongMaterial ({
                    color: new THREE.Color ().setStyle (style),
                    opacity: opacity,
                    transparent: opacity < 1.0
                });
                materials.push ({
                    style : style,
                    opacity : opacity,
                    material : material
                });
            }
            return material;
        }

        let materials = [];

        let object = new THREE.Object3D ();
        object.rotation.x = Math.PI;

        for (let path of loadedObject.paths) {
            const shapes = SVGLoader.createShapes (path);
            if (ShowFill (path)) {
                let pathStyle = path.userData.style;
                let pathMaterial = GetOrCreateMaterial (materials, pathStyle.fill, pathStyle.opacity);
                for (const shape of shapes) {
                    const geometry = new THREE.ExtrudeGeometry (shape, {
                        depth: 10,
                        bevelEnabled: false
                    });
                    const mesh = new THREE.Mesh (geometry, pathMaterial);
                    mesh.name = path.userData.node.id;
                    object.add (mesh);
                }
            }
        }
        return object;
    }
}

class GeneratorParams
{
    constructor ()
    {
        this.name = null;
        this.material = null;
    }

    SetName (name)
    {
        this.name = name;
        return this;
    }

    SetMaterial (material)
    {
        this.material = material;
        return this;
    }
}

class Generator
{
    constructor (params)
    {
        this.params = params || new GeneratorParams ();
        this.mesh = new Mesh ();
        if (this.params.name !== null) {
            this.mesh.SetName (this.params.name);
        }
        this.curve = null;
    }

    GetMesh ()
    {
        return this.mesh;
    }

    AddVertex (x, y, z)
    {
        let coord = new Coord3D (x, y, z);
        return this.mesh.AddVertex (coord);
    }

    AddVertices (vertices)
    {
        let indices = [];
        for (let i = 0; i < vertices.length; i++) {
            let vertex = vertices[i];
            indices.push (this.AddVertex (vertex.x, vertex.y, vertex.z));
        }
        return indices;
    }

    SetCurve (curve)
    {
        this.curve = curve;
    }

    ResetCurve ()
    {
        this.curve = null;
    }

    AddTriangle (v0, v1, v2)
    {
        let triangle = new Triangle (v0, v1, v2);
        if (this.params.material !== null) {
            triangle.mat = this.params.material;
        }
        if (this.curve !== null) {
            triangle.SetCurve (this.curve);
        }
        return this.mesh.AddTriangle (triangle);
    }

    AddTriangleInverted (v0, v1, v2)
    {
        this.AddTriangle (v0, v2, v1);
    }

    AddConvexPolygon (vertices)
    {
        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {
            this.AddTriangle (
                vertices[0],
                vertices[vertexIndex + 1],
                vertices[vertexIndex + 2]
            );
        }
    }

    AddConvexPolygonInverted (vertices)
    {
        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {
            this.AddTriangleInverted (
                vertices[0],
                vertices[vertexIndex + 1],
                vertices[vertexIndex + 2]
            );
        }
    }
}

class GeneratorHelper
{
    constructor (generator)
    {
        this.generator = generator;
    }

    GenerateSurfaceBetweenPolygons (startIndices, endIndices)
    {
        if (startIndices.length !== endIndices.length) {
            return;
        }
        const vertexCount = startIndices.length;
        for (let i = 0; i < vertexCount; i++) {
            const index = i;
            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;
            this.generator.AddConvexPolygon ([
                startIndices[index],
                startIndices[nextIndex],
                endIndices[nextIndex],
                endIndices[index]
            ]);
        }
    }

    GenerateTriangleFan (startIndices, endIndex)
    {
        const vertexCount = startIndices.length;
        for (let i = 0; i < vertexCount; i++) {
            const index = i;
            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;
            this.generator.AddTriangle (
                endIndex,
                startIndices[index],
                startIndices[nextIndex]
            );
        }
    }
}

function GetCylindricalCoord (radius, angle)
{
    return new Coord2D (
        radius * Math.cos (angle),
        radius * Math.sin (angle)
    );
}

function GenerateCuboid (genParams, xSize, ySize, zSize)
{
    if (!IsPositive (xSize) || !IsPositive (ySize) || !IsPositive (zSize)) {
        return null;
    }

    let generator = new Generator (genParams);

    generator.AddVertex (0.0, 0.0, 0.0);
    generator.AddVertex (xSize, 0.0, 0.0);
    generator.AddVertex (xSize, ySize, 0.0);
    generator.AddVertex (0.0, ySize, 0.0);
    generator.AddVertex (0.0, 0.0, zSize);
    generator.AddVertex (xSize, 0.0, zSize);
    generator.AddVertex (xSize, ySize, zSize);
    generator.AddVertex (0.0, ySize, zSize);

    generator.AddConvexPolygon ([0, 3, 2, 1]);
    generator.AddConvexPolygon ([0, 1, 5, 4]);
    generator.AddConvexPolygon ([1, 2, 6, 5]);
    generator.AddConvexPolygon ([2, 3, 7, 6]);
    generator.AddConvexPolygon ([3, 0, 4, 7]);
    generator.AddConvexPolygon ([4, 5, 6, 7]);

    return generator.GetMesh ();
}

function GenerateCone (genParams, topRadius, bottomRadius, height, segments, smooth)
{
    if (IsNegative (topRadius) || IsNegative (bottomRadius)) {
        return null;
    }

    if (!IsPositive (height) || segments < 3) {
        return null;
    }

    let isZeroTop = IsZero (topRadius);
    let isZeroBottom = IsZero (bottomRadius);
    if (isZeroTop && isZeroBottom) {
        return null;
    }

    let generator = new Generator (genParams);
    let helper = new GeneratorHelper (generator);
    const step = 2.0 * Math.PI / segments;
    const curve = (smooth ? 1 : null);

    let topPolygon = [];
    if (isZeroTop) {
        topPolygon.push (generator.AddVertex (0.0, 0.0, height));
    } else {
        for (let i = 0; i < segments; i++) {
            let topVertex = GetCylindricalCoord (topRadius, i * step);
            topPolygon.push (generator.AddVertex (topVertex.x, topVertex.y, height));
        }
    }

    let bottomPolygon = [];
    if (isZeroBottom) {
        bottomPolygon.push (generator.AddVertex (0.0, 0.0, 0.0));
    } else {
        for (let i = 0; i < segments; i++) {
            let bottomVertex = GetCylindricalCoord (bottomRadius, i * step);
            bottomPolygon.push (generator.AddVertex (bottomVertex.x, bottomVertex.y, 0.0));
        }
    }

    if (isZeroTop) {
        generator.SetCurve (curve);
        helper.GenerateTriangleFan (bottomPolygon, topPolygon[0]);
        generator.ResetCurve ();
        generator.AddConvexPolygonInverted (bottomPolygon);
    } else if (isZeroBottom) {
        generator.SetCurve (curve);
        helper.GenerateTriangleFan (topPolygon.slice ().reverse (), bottomPolygon[0]);
        generator.ResetCurve ();
        generator.AddConvexPolygon (topPolygon);
    } else {
        generator.SetCurve (curve);
        helper.GenerateSurfaceBetweenPolygons (bottomPolygon, topPolygon);
        generator.ResetCurve ();
        generator.AddConvexPolygonInverted (bottomPolygon);
        generator.AddConvexPolygon (topPolygon);
    }

    return generator.GetMesh ();
}

function GenerateCylinder (genParams, radius, height, segments, smooth)
{
    return GenerateCone (genParams, radius, radius, height, segments, smooth);
}

function GenerateSphere (genParams, radius, segments, smooth)
{
    function GetSphericalCoord (radius, theta, phi)
    {
        return new Coord3D (
            radius * Math.sin (theta) * Math.cos (phi),
            radius * Math.sin (theta) * Math.sin (phi),
            radius * Math.cos (theta)
        );
    }

    if (!IsPositive (radius) || segments < 3) {
        return null;
    }

    let generator = new Generator (genParams);
    let helper = new GeneratorHelper (generator);

    generator.SetCurve (smooth ? 1 : null);

    let allLevelVertices = [];
    let levels = segments + 1;
    const levelStep = Math.PI / segments;
	const cylindricalStep = 2.0 * Math.PI / segments;
    for (let levelIndex = 1; levelIndex < levels - 1; levelIndex++) {
        let levelVertices = [];
        let theta = levelIndex * levelStep;
        for (let cylindricalIndex = 0; cylindricalIndex < segments; cylindricalIndex++) {
            let phi = cylindricalIndex * cylindricalStep;
            let vertex = GetSphericalCoord (radius, theta, -phi);
            levelVertices.push (generator.AddVertex (vertex.x, vertex.y, vertex.z));
        }
        if (levelIndex > 1) {
            helper.GenerateSurfaceBetweenPolygons (allLevelVertices[allLevelVertices.length - 1], levelVertices);
        }
        allLevelVertices.push (levelVertices);
    }

    let topVertex = generator.AddVertex (0.0, 0.0, radius);
    let bottomVertex = generator.AddVertex (0.0, 0.0, -radius);
    helper.GenerateTriangleFan (allLevelVertices[0].slice ().reverse (), topVertex);
    helper.GenerateTriangleFan (allLevelVertices[allLevelVertices.length - 1], bottomVertex);

    generator.ResetCurve ();

    return generator.GetMesh ();
}

function GeneratePlatonicSolid (genParams, type, radius)
{
    function AddVertex (generator, radius, x, y, z)
    {
        let vertex = new Coord3D (x, y, z);
        vertex.MultiplyScalar (radius / vertex.Length ());
        generator.AddVertex (vertex.x, vertex.y, vertex.z);
    }

    if (!IsPositive (radius)) {
        return null;
    }

    let generator = new Generator (genParams);
    if (type === 'tetrahedron') {
        let a = 1.0;
        AddVertex (generator, radius, +a, +a, +a);
        AddVertex (generator, radius, -a, -a, +a);
        AddVertex (generator, radius, -a, +a, -a);
        AddVertex (generator, radius, +a, -a, -a);
        generator.AddTriangle (0, 1, 3);
        generator.AddTriangle (0, 2, 1);
        generator.AddTriangle (0, 3, 2);
        generator.AddTriangle (1, 2, 3);
    } else if (type === 'hexahedron') {
        let a = 1.0;
        AddVertex (generator, radius, +a, +a, +a);
        AddVertex (generator, radius, +a, +a, -a);
        AddVertex (generator, radius, +a, -a, +a);
        AddVertex (generator, radius, +a, -a, -a);
        AddVertex (generator, radius, -a, +a, +a);
        AddVertex (generator, radius, -a, +a, -a);
        AddVertex (generator, radius, -a, -a, +a);
        AddVertex (generator, radius, -a, -a, -a);
        generator.AddConvexPolygon ([0, 1, 5, 4]);
        generator.AddConvexPolygon ([0, 2, 3, 1]);
        generator.AddConvexPolygon ([0, 4, 6, 2]);
        generator.AddConvexPolygon ([1, 3, 7, 5]);
        generator.AddConvexPolygon ([2, 6, 7, 3]);
        generator.AddConvexPolygon ([4, 5, 7, 6]);
    } else if (type === 'octahedron') {
        let a = 1.0;
        let b = 0.0;
        AddVertex (generator, radius, +a, +b, +b);
        AddVertex (generator, radius, -a, +b, +b);
        AddVertex (generator, radius, +b, +a, +b);
        AddVertex (generator, radius, +b, -a, +b);
        AddVertex (generator, radius, +b, +b, +a);
        AddVertex (generator, radius, +b, +b, -a);
        generator.AddTriangle (0, 2, 4);
        generator.AddTriangle (0, 3, 5);
        generator.AddTriangle (0, 4, 3);
        generator.AddTriangle (0, 5, 2);
        generator.AddTriangle (1, 2, 5);
        generator.AddTriangle (1, 3, 4);
        generator.AddTriangle (1, 4, 2);
        generator.AddTriangle (1, 5, 3);
    } else if (type === 'dodecahedron') {
        let a = 1.0;
        let b = 0.0;
        let c = (1.0 + Math.sqrt (5.0)) / 2.0;
        let d = 1.0 / c;
        AddVertex (generator, radius, +a, +a, +a);
        AddVertex (generator, radius, +a, +a, -a);
        AddVertex (generator, radius, +a, -a, +a);
        AddVertex (generator, radius, -a, +a, +a);
        AddVertex (generator, radius, +a, -a, -a);
        AddVertex (generator, radius, -a, +a, -a);
        AddVertex (generator, radius, -a, -a, +a);
        AddVertex (generator, radius, -a, -a, -a);
        AddVertex (generator, radius, +b, +d, +c);
        AddVertex (generator, radius, +b, +d, -c);
        AddVertex (generator, radius, +b, -d, +c);
        AddVertex (generator, radius, +b, -d, -c);
        AddVertex (generator, radius, +d, +c, +b);
        AddVertex (generator, radius, +d, -c, +b);
        AddVertex (generator, radius, -d, +c, +b);
        AddVertex (generator, radius, -d, -c, +b);
        AddVertex (generator, radius, +c, +b, +d);
        AddVertex (generator, radius, -c, +b, +d);
        AddVertex (generator, radius, +c, +b, -d);
        AddVertex (generator, radius, -c, +b, -d);
        generator.AddConvexPolygon ([0, 8, 10, 2, 16]);
        generator.AddConvexPolygon ([0, 16, 18, 1, 12]);
        generator.AddConvexPolygon ([0, 12, 14, 3, 8]);
        generator.AddConvexPolygon ([1, 9, 5, 14, 12]);
        generator.AddConvexPolygon ([1, 18, 4, 11, 9]);
        generator.AddConvexPolygon ([2, 10, 6, 15, 13]);
        generator.AddConvexPolygon ([2, 13, 4, 18, 16]);
        generator.AddConvexPolygon ([3, 14, 5, 19, 17]);
        generator.AddConvexPolygon ([3, 17, 6, 10, 8]);
        generator.AddConvexPolygon ([4, 13, 15, 7, 11]);
        generator.AddConvexPolygon ([5, 9, 11, 7, 19]);
        generator.AddConvexPolygon ([6, 17, 19, 7, 15]);
    } else if (type === 'icosahedron') {
        let a = 1.0;
        let b = 0.0;
        let c = (1.0 + Math.sqrt (5.0)) / 2.0;
        AddVertex (generator, radius, +b, +a, +c);
        AddVertex (generator, radius, +b, +a, -c);
        AddVertex (generator, radius, +b, -a, +c);
        AddVertex (generator, radius, +b, -a, -c);
        AddVertex (generator, radius, +a, +c, +b);
        AddVertex (generator, radius, +a, -c, +b);
        AddVertex (generator, radius, -a, +c, +b);
        AddVertex (generator, radius, -a, -c, +b);
        AddVertex (generator, radius, +c, +b, +a);
        AddVertex (generator, radius, +c, +b, -a);
        AddVertex (generator, radius, -c, +b, +a);
        AddVertex (generator, radius, -c, +b, -a);
        generator.AddTriangle (0, 2, 8);
        generator.AddTriangle (0, 4, 6);
        generator.AddTriangle (0, 6, 10);
        generator.AddTriangle (0, 8, 4);
        generator.AddTriangle (0, 10, 2);
        generator.AddTriangle (1, 3, 11);
        generator.AddTriangle (1, 4, 9);
        generator.AddTriangle (1, 6, 4);
        generator.AddTriangle (1, 9, 3);
        generator.AddTriangle (1, 11, 6);
        generator.AddTriangle (2, 5, 8);
        generator.AddTriangle (2, 7, 5);
        generator.AddTriangle (2, 10, 7);
        generator.AddTriangle (3, 5, 7);
        generator.AddTriangle (3, 7, 11);
        generator.AddTriangle (3, 9, 5);
        generator.AddTriangle (4, 8, 9);
        generator.AddTriangle (5, 9, 8);
        generator.AddTriangle (6, 11, 10);
        generator.AddTriangle (7, 10, 11);
    }
    return generator.GetMesh ();
}

function GetTriangleArea (v0, v1, v2)
{
    const a = CoordDistance3D (v0, v1);
    const b = CoordDistance3D (v1, v2);
    const c = CoordDistance3D (v0, v2);
    const s = (a + b + c) / 2.0;
    const areaSquare = s * (s - a) * (s - b) * (s - c);
    if (areaSquare < 0.0) {
        return 0.0;
    }
    return Math.sqrt (areaSquare);
}

function GetTetrahedronSignedVolume (v0, v1, v2)
{
    return DotVector3D (v0, CrossVector3D (v1, v2)) / 6.0;
}

function CalculateVolume (object3D)
{
    if (object3D instanceof Model) {
        let volume = 0.0;
        object3D.EnumerateMeshInstances ((meshInstance) => {
            volume += CalculateVolume (meshInstance);
        });
        return volume;
    } else {
        let volume = 0.0;
        object3D.EnumerateTriangleVertices ((v0, v1, v2) => {
            volume += GetTetrahedronSignedVolume (v0, v1, v2);
        });
        return volume;
    }
}

function CalculateSurfaceArea (object3D)
{
    let surface = 0.0;
    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {
        surface += GetTriangleArea (v0, v1, v2);
    });
    return surface;
}

/**
 * Camera projection mode.
 * @enum
 */
const CameraMode =
{
    /** Perspective projection. */
	Perspective : 1,
    /** Orthographic projection. */
	Orthographic : 2
};

/**
 * Camera object.
 */
class Camera
{
    /**
     * @param {Coord3D} eye Eye position.
     * @param {Coord3D} center Center position. Sometimes it's called target or look at position.
     * @param {Coord3D} up Up vector.
     * @param {number} fov Field of view in degrees.
     */
    constructor (eye, center, up, fov)
    {
        this.eye = eye;
        this.center = center;
        this.up = up;
        this.fov = fov;
    }

    /**
     * Creates a clone of the object.
     * @returns {Camera}
     */
    Clone ()
    {
        return new Camera (
            this.eye.Clone (),
            this.center.Clone (),
            this.up.Clone (),
            this.fov
        );
    }
}

function CameraIsEqual3D (a, b)
{
	return CoordIsEqual3D (a.eye, b.eye) && CoordIsEqual3D (a.center, b.center) && CoordIsEqual3D (a.up, b.up) && IsEqual (a.fov, b.fov);
}

function SetThreeMeshPolygonOffset (mesh, offset)
{
    function SetMaterialsPolygonOffset (materials, offset)
    {
        for (let material of materials) {
            material.polygonOffset = offset;
            material.polygonOffsetUnit = 1;
            material.polygonOffsetFactor = 1;
        }
    }

    SetMaterialsPolygonOffset (mesh.material, offset);
    if (mesh.userData.threeMaterials) {
        SetMaterialsPolygonOffset (mesh.userData.threeMaterials, offset);
    }
}

class ViewerModel
{
    constructor (scene)
    {
        this.scene = scene;
        this.rootObject = null;
    }

    IsEmpty ()
    {
        return this.rootObject === null;
    }

    SetRootObject (rootObject)
    {
        if (this.rootObject !== null) {
            this.Clear ();
        }
        this.rootObject = rootObject;
        this.scene.add (this.rootObject);
    }

    GetRootObject ()
    {
        return this.rootObject;
    }

    AddObject (object)
    {
        if (this.rootObject === null) {
            let newRootObject = new THREE.Object3D ();
            this.SetRootObject (newRootObject);
        }
        this.rootObject.add (object);
    }

    Traverse (enumerator)
    {
        if (this.rootObject === null) {
            return;
        }
        this.rootObject.traverse ((obj) => {
            enumerator (obj);
        });
    }

    UpdateWorldMatrix ()
    {
        if (this.rootObject !== null) {
            this.rootObject.updateWorldMatrix (true, true);
        }
    }

    Clear ()
    {
        DisposeThreeObjects (this.rootObject);
        this.scene.remove (this.rootObject);
        this.rootObject = null;
    }
}

/**
 * Edge settings object.
 */
class EdgeSettings
{
    /**
     * @param {boolean} showEdges Show edges.
     * @param {RGBColor} edgeColor Color of the edges.
     * @param {number} edgeThreshold Minimum angle between faces to show edges between them in.
     * The value must be in degrees.
     */
    constructor (showEdges, edgeColor, edgeThreshold)
    {
        this.showEdges = showEdges;
        this.edgeColor = edgeColor;
        this.edgeThreshold = edgeThreshold;
    }

    /**
     * Creates a clone of the object.
     * @returns {EdgeSettings}
     */
    Clone ()
    {
        return new EdgeSettings (this.showEdges, this.edgeColor.Clone (), this.edgeThreshold);
    }
}

class ViewerMainModel
{
    constructor (scene)
    {
        this.scene = scene;

        this.mainModel = new ViewerModel (this.scene);
        this.edgeModel = new ViewerModel (this.scene);

        this.edgeSettings = new EdgeSettings (false, new RGBColor (0, 0, 0), 1);
    }

    SetMainObject (mainObject)
    {
        this.mainModel.SetRootObject (mainObject);
        if (this.edgeSettings.showEdges) {
            this.GenerateEdgeModel ();
        }
    }

    UpdateWorldMatrix ()
    {
        this.mainModel.UpdateWorldMatrix ();
        this.edgeModel.UpdateWorldMatrix ();
    }

    SetEdgeSettings (edgeSettings)
    {
        let needToGenerate = false;
        if (edgeSettings.showEdges && (!this.edgeSettings.showEdges || this.edgeSettings.edgeThreshold !== edgeSettings.edgeThreshold)) {
            needToGenerate = true;
        }

        this.edgeSettings = edgeSettings;

        if (this.mainModel.IsEmpty ()) {
            return;
        }

        if (this.edgeSettings.showEdges) {
            if (needToGenerate) {
                this.ClearEdgeModel ();
                this.GenerateEdgeModel ();
            } else {
                let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);
                this.EnumerateEdges ((edge) => {
                    edge.material.color = edgeColor;
                });
            }
        } else {
            this.ClearEdgeModel ();
        }
    }

    GenerateEdgeModel ()
    {
        let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);

        this.UpdateWorldMatrix ();
        this.EnumerateMeshes ((mesh) => {
            SetThreeMeshPolygonOffset (mesh, true);
            let edges = new THREE.EdgesGeometry (mesh.geometry, this.edgeSettings.edgeThreshold);
            let line = new THREE.LineSegments (edges, new THREE.LineBasicMaterial ({
                color: edgeColor
            }));
            line.applyMatrix4 (mesh.matrixWorld);
            line.userData = mesh.userData;
            line.visible = mesh.visible;
            this.edgeModel.AddObject (line);
        });
    }

    GetBoundingBox (needToProcess)
    {
        let hasMesh = false;
        let boundingBox = new THREE.Box3 ();
        this.EnumerateMeshes ((mesh) => {
            if (needToProcess (mesh.userData)) {
                boundingBox.union (new THREE.Box3 ().setFromObject (mesh));
                hasMesh = true;
            }
        });
        if (!hasMesh) {
            return null;
        }
        return boundingBox;
    }

    GetBoundingSphere (needToProcess)
    {
        let boundingBox = this.GetBoundingBox (needToProcess);
        if (boundingBox === null) {
            return null;
        }

        let boundingSphere = new THREE.Sphere ();
        boundingBox.getBoundingSphere (boundingSphere);
        return boundingSphere;
    }

    Clear ()
    {
        this.mainModel.Clear ();
        this.ClearEdgeModel ();
    }

    ClearEdgeModel ()
    {
        if (this.edgeModel.IsEmpty ()) {
            return;
        }

        this.EnumerateMeshes ((mesh) => {
            SetThreeMeshPolygonOffset (mesh, false);
        });
        this.edgeModel.Clear ();
    }

    EnumerateMeshes (enumerator)
    {
        this.mainModel.Traverse ((obj) => {
            if (obj.isMesh) {
                enumerator (obj);
            }
        });
    }

    EnumerateEdges (enumerator)
    {
        this.edgeModel.Traverse ((obj) => {
            if (obj.isLineSegments) {
                enumerator (obj);
            }
        });
    }

    GetMeshIntersectionUnderMouse (mouseCoords, camera, width, height)
    {
        if (this.mainModel.IsEmpty ()) {
            return null;
        }

        if (mouseCoords.x < 0.0 || mouseCoords.x > width || mouseCoords.y < 0.0 || mouseCoords.y > height) {
            return null;
        }

        let raycaster = new THREE.Raycaster ();
        let mousePos = new THREE.Vector2 ();
        mousePos.x = (mouseCoords.x / width) * 2 - 1;
        mousePos.y = -(mouseCoords.y / height) * 2 + 1;
        raycaster.setFromCamera (mousePos, camera);
        let iSectObjects = raycaster.intersectObject (this.mainModel.GetRootObject (), true);
        for (let i = 0; i < iSectObjects.length; i++) {
            let iSectObject = iSectObjects[i];
            if (iSectObject.object.isMesh && iSectObject.object.visible) {
                return iSectObject;
            }
        }

        return null;
    }
}

let ParameterConverter =
{
    IntegerToString (integer)
    {
        return integer.toString ();
    },

    StringToInteger (str)
    {
        return parseInt (str, 10);
    },

    NumberToString (number)
    {
        let precision = 5;
        return number.toFixed (precision);
    },

    StringToNumber (str)
    {
        return parseFloat (str);
    },

    ModelUrlsToString : function (urls)
    {
        if (urls === null) {
            return null;
        }
        return urls.join (',');
    },

    StringToModelUrls : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        return str.split (',');
    },

    CameraToString : function (camera)
    {
        if (camera === null) {
            return null;
        }
        let cameraParameters = [
            this.NumberToString (camera.eye.x), this.NumberToString (camera.eye.y), this.NumberToString (camera.eye.z),
            this.NumberToString (camera.center.x), this.NumberToString (camera.center.y), this.NumberToString (camera.center.z),
            this.NumberToString (camera.up.x), this.NumberToString (camera.up.y), this.NumberToString (camera.up.z),
            this.NumberToString (camera.fov)
        ].join (',');
        return cameraParameters;
    },

    CameraModeToString : function (cameraMode)
    {
        if (cameraMode === CameraMode.Perspective) {
            return 'perspective';
        } else if (cameraMode === CameraMode.Orthographic) {
            return 'orthographic';
        }
        return null;
    },

    StringToCamera : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        let paramParts = str.split (',');
        if (paramParts.length !== 9 && paramParts.length !== 10) {
            return null;
        }

        let fieldOfView = 45.0;
        if (paramParts.length >= 10) {
            fieldOfView = this.StringToNumber (paramParts[9]);
        }

        let camera = new Camera (
            new Coord3D (this.StringToNumber (paramParts[0]), this.StringToNumber (paramParts[1]), this.StringToNumber (paramParts[2])),
            new Coord3D (this.StringToNumber (paramParts[3]), this.StringToNumber (paramParts[4]), this.StringToNumber (paramParts[5])),
            new Coord3D (this.StringToNumber (paramParts[6]), this.StringToNumber (paramParts[7]), this.StringToNumber (paramParts[8])),
            fieldOfView
        );
        return camera;
    },

    StringToCameraMode : function (str)
    {
        if (str === 'perspective') {
            return CameraMode.Perspective;
        } else if (str === 'orthographic') {
            return CameraMode.Orthographic;
        }
        return null;
    },

    RGBColorToString : function (color)
    {
        if (color === null) {
            return null;
        }
        return [
            this.IntegerToString (color.r),
            this.IntegerToString (color.g),
            this.IntegerToString (color.b)
        ].join (',');
    },

    RGBAColorToString : function (color)
    {
        if (color === null) {
            return null;
        }
        return [
            this.IntegerToString (color.r),
            this.IntegerToString (color.g),
            this.IntegerToString (color.b),
            this.IntegerToString (color.a)
        ].join (',');
    },

    StringToRGBColor : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        let paramParts = str.split (',');
        if (paramParts.length !== 3) {
            return null;
        }
        return new RGBColor (
            this.StringToInteger (paramParts[0]),
            this.StringToInteger (paramParts[1]),
            this.StringToInteger (paramParts[2])
        );
    },

    StringToRGBAColor : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        let paramParts = str.split (',');
        if (paramParts.length !== 3 && paramParts.length !== 4) {
            return null;
        }
        let color = new RGBAColor (
            this.StringToInteger (paramParts[0]),
            this.StringToInteger (paramParts[1]),
            this.StringToInteger (paramParts[2]),
            255
        );
        if (paramParts.length === 4) {
            color.a = this.StringToInteger (paramParts[3]);
        }
        return color;
    },

    EnvironmentSettingsToString (environmentSettings)
    {
        if (environmentSettings === null) {
            return null;
        }
        let environmentSettingsParameters = [
            environmentSettings.environmentMapName,
            environmentSettings.backgroundIsEnvMap ? 'on' : 'off'
        ].join (',');
        return environmentSettingsParameters;
    },

    StringToEnvironmentSettings : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        let paramParts = str.split (',');
        if (paramParts.length !== 2) {
            return null;
        }
        let environmentSettings = {
            environmentMapName : paramParts[0],
            backgroundIsEnvMap : paramParts[1] === 'on' ? true : false
        };
        return environmentSettings;
    },

    EdgeSettingsToString : function (edgeSettings)
    {
        if (edgeSettings === null) {
            return null;
        }
        let edgeSettingsParameters = [
            edgeSettings.showEdges ? 'on' : 'off',
            this.RGBColorToString (edgeSettings.edgeColor),
            this.IntegerToString (edgeSettings.edgeThreshold),
        ].join (',');
        return edgeSettingsParameters;
    },

    StringToEdgeSettings : function (str)
    {
        if (str === null || str.length === 0) {
            return null;
        }
        let paramParts = str.split (',');
        if (paramParts.length !== 5) {
            return null;
        }
        let edgeSettings = new EdgeSettings (
            paramParts[0] === 'on' ? true : false,
            new RGBColor (
                this.StringToInteger (paramParts[1]),
                this.StringToInteger (paramParts[2]),
                this.StringToInteger (paramParts[3])
            ),
            this.StringToInteger (paramParts[4])
        );
        return edgeSettings;
    }
};

class ParameterListBuilder
{
    constructor (separator)
    {
        this.separator = separator;
        this.paramList = '';
    }

    AddModelUrls (urls)
    {
        this.AddUrlPart ('model', ParameterConverter.ModelUrlsToString (urls));
        return this;
    }

    AddCamera (camera)
    {
        this.AddUrlPart ('camera', ParameterConverter.CameraToString (camera));
        return this;
    }

    AddCameraMode (cameraMode)
    {
        this.AddUrlPart ('cameramode', ParameterConverter.CameraModeToString (cameraMode));
        return this;
    }

    AddEnvironmentSettings (envSettings)
    {
        this.AddUrlPart ('envsettings', ParameterConverter.EnvironmentSettingsToString (envSettings));
        return this;
    }

    AddBackgroundColor (background)
    {
        this.AddUrlPart ('backgroundcolor', ParameterConverter.RGBAColorToString (background));
        return this;
    }

    AddDefaultColor (color)
    {
        this.AddUrlPart ('defaultcolor', ParameterConverter.RGBColorToString (color));
        return this;
    }

    AddEdgeSettings (edgeSettings)
    {
        this.AddUrlPart ('edgesettings', ParameterConverter.EdgeSettingsToString (edgeSettings));
        return this;
    }

    AddUrlPart (keyword, urlPart)
    {
        if (keyword === null || urlPart === null) {
            return;
        }
        if (this.paramList.length > 0) {
            this.paramList += this.separator;
        }
        this.paramList += keyword + '=' + urlPart;
    }

    GetParameterList ()
    {
        return this.paramList;
    }
}

class ParameterListParser
{
    constructor (paramList, separator)
    {
        this.separator = separator;
        this.paramList = paramList;
    }

    GetModelUrls ()
    {
        // detect legacy links
        if (this.paramList.indexOf ('=') === -1) {
            return this.paramList.split (',');
        }

        let keywordParams = this.GetKeywordParams ('model');
        return ParameterConverter.StringToModelUrls (keywordParams);
    }

    GetCamera ()
    {
        let keywordParams = this.GetKeywordParams ('camera');
        return ParameterConverter.StringToCamera (keywordParams);
    }

    GetCameraMode ()
    {
        let keywordParams = this.GetKeywordParams ('cameramode');
        return ParameterConverter.StringToCameraMode (keywordParams);
    }

    GetEnvironmentSettings ()
    {
        let environmentSettingsParams = this.GetKeywordParams ('envsettings');
        return ParameterConverter.StringToEnvironmentSettings (environmentSettingsParams);
    }

    GetBackgroundColor ()
    {
        let backgroundParams = this.GetKeywordParams ('backgroundcolor');
        return ParameterConverter.StringToRGBAColor (backgroundParams);
    }

    GetDefaultColor ()
    {
        let colorParams = this.GetKeywordParams ('defaultcolor');
        return ParameterConverter.StringToRGBColor (colorParams);
    }

    GetEdgeSettings ()
    {
        let edgeSettingsParams = this.GetKeywordParams ('edgesettings');
        return ParameterConverter.StringToEdgeSettings (edgeSettingsParams);
    }

    GetKeywordParams (keyword)
    {
        if (this.paramList === null || this.paramList.length === 0) {
            return null;
        }
        let keywordToken = keyword + '=';
        let urlParts = this.paramList.split (this.separator);
        for (let i = 0; i < urlParts.length; i++) {
            let urlPart = urlParts[i];
            if (urlPart.startsWith (keywordToken)) {
                return urlPart.substring (keywordToken.length);
            }
        }
        return null;
    }
}

function CreateUrlBuilder ()
{
    return new ParameterListBuilder ('$');
}

function CreateUrlParser (urlParams)
{
    return new ParameterListParser (urlParams, '$');
}

function CreateModelUrlParameters (urls)
{
    let builder = CreateUrlBuilder ();
    builder.AddModelUrls (urls);
    return builder.GetParameterList ();
}

class ModelToThreeConversionParams
{
	constructor ()
	{
		this.forceMediumpForMaterials = false;
	}
}

class ModelToThreeConversionOutput
{
	constructor ()
	{
		this.defaultMaterial = null;
		this.objectUrls = [];
	}
}

class ThreeConversionStateHandler
{
	constructor (callbacks)
	{
		this.callbacks = callbacks;
		this.texturesNeeded = 0;
		this.texturesLoaded = 0;
		this.threeObject = null;
	}

	OnTextureNeeded ()
	{
		this.texturesNeeded += 1;
	}

	OnTextureLoaded ()
	{
		this.texturesLoaded += 1;
		this.callbacks.onTextureLoaded ();
		this.Finish ();
	}

	OnModelLoaded (threeObject)
	{
		this.threeObject = threeObject;
		this.Finish ();
	}

	Finish ()
	{
		if (this.threeObject !== null && this.texturesNeeded === this.texturesLoaded) {
			this.callbacks.onModelLoaded (this.threeObject);
		}
	}
}

class ThreeNodeTree
{
	constructor (model, threeRootNode)
	{
		this.model = model;
		this.threeNodeItems = [];
		this.AddNode (model.GetRootNode (), threeRootNode);
	}

	AddNode (node, threeNode)
	{
		let matrix = node.GetTransformation ().GetMatrix ();
		let threeMatrix = new THREE.Matrix4 ().fromArray (matrix.Get ());
		threeNode.applyMatrix4 (threeMatrix);

		for (let childNode of node.GetChildNodes ()) {
			let threeChildNode = new THREE.Object3D ();
			threeNode.add (threeChildNode);
			this.AddNode (childNode, threeChildNode);
		}
		for (let meshIndex of node.GetMeshIndices ()) {
			let id = new MeshInstanceId (node.GetId (), meshIndex);
			let mesh = this.model.GetMesh (meshIndex);
			this.threeNodeItems.push ({
				meshInstance : new MeshInstance (id, node, mesh),
				threeNode : threeNode
			});
		}
	}

	GetNodeItems ()
	{
		return this.threeNodeItems;
	}
}

function ConvertModelToThreeObject (model, params, output, callbacks)
{
	function CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output)
	{
		function SetTextureParameters (texture, threeTexture)
		{
			threeTexture.wrapS = THREE.RepeatWrapping;
			threeTexture.wrapT = THREE.RepeatWrapping;
			threeTexture.rotation = texture.rotation;
			threeTexture.offset.x = texture.offset.x;
			threeTexture.offset.y = texture.offset.y;
			threeTexture.repeat.x = texture.scale.x;
			threeTexture.repeat.y = texture.scale.y;
		}

		function LoadTexture (stateHandler, threeMaterial, texture, output, onTextureLoaded)
		{
			if (texture === null || !texture.IsValid ()) {
				return;
			}
			let loader = new THREE.TextureLoader ();
			stateHandler.OnTextureNeeded ();
			let textureObjectUrl = null;
			if (texture.mimeType !== null) {
				textureObjectUrl = CreateObjectUrlWithMimeType (texture.buffer, texture.mimeType);
			} else {
				textureObjectUrl = CreateObjectUrl (texture.buffer);
			}
			output.objectUrls.push (textureObjectUrl);
			loader.load (textureObjectUrl,
				(threeTexture) => {
					SetTextureParameters (texture, threeTexture);
					threeMaterial.needsUpdate = true;
					onTextureLoaded (threeTexture);
					stateHandler.OnTextureLoaded ();
				},
				null,
				(err) => {
					stateHandler.OnTextureLoaded ();
				}
			);
		}

		let material = model.GetMaterial (materialIndex);
		let baseColor = ConvertColorToThreeColor (material.color);
		if (material.vertexColors) {
			baseColor.setRGB (1.0, 1.0, 1.0);
		}

		let materialParams = {
			color : baseColor,
			vertexColors : material.vertexColors,
			opacity : material.opacity,
			transparent : material.transparent,
			alphaTest : material.alphaTest,
			side : THREE.DoubleSide
		};

		if (params.forceMediumpForMaterials) {
			materialParams.precision = 'mediump';
		}

		let threeMaterial = null;
		if (shadingType === ShadingType.Phong) {
			threeMaterial = new THREE.MeshPhongMaterial (materialParams);
			if (material.type === MaterialType.Phong) {
				let specularColor = ConvertColorToThreeColor (material.specular);
				if (IsEqual (material.shininess, 0.0)) {
					specularColor.setRGB (0.0, 0.0, 0.0);
				}
				threeMaterial.specular = specularColor;
				threeMaterial.shininess = material.shininess * 100.0;
				LoadTexture (stateHandler, threeMaterial, material.specularMap, output, (threeTexture) => {
					threeMaterial.specularMap = threeTexture;
				});
			}
		} else if (shadingType === ShadingType.Physical) {
			threeMaterial = new THREE.MeshStandardMaterial (materialParams);
			if (material.type === MaterialType.Physical) {
				threeMaterial.metalness = material.metalness;
				threeMaterial.roughness = material.roughness;
				LoadTexture (stateHandler, threeMaterial, material.metalnessMap, output, (threeTexture) => {
					threeMaterial.metalness = 1.0;
					threeMaterial.roughness = 1.0;
					threeMaterial.metalnessMap = threeTexture;
					threeMaterial.roughnessMap = threeTexture;
				});
			}
		}

		let emissiveColor = ConvertColorToThreeColor (material.emissive);
		threeMaterial.emissive = emissiveColor;

		LoadTexture (stateHandler, threeMaterial, material.diffuseMap, output, (threeTexture) => {
			if (!material.multiplyDiffuseMap) {
				threeMaterial.color.setRGB (1.0, 1.0, 1.0);
			}
			threeMaterial.map = threeTexture;
		});
		LoadTexture (stateHandler, threeMaterial, material.bumpMap, output, (threeTexture) => {
			threeMaterial.bumpMap = threeTexture;
		});
		LoadTexture (stateHandler, threeMaterial, material.normalMap, output, (threeTexture) => {
			threeMaterial.normalMap = threeTexture;
		});
		LoadTexture (stateHandler, threeMaterial, material.emissiveMap, output, (threeTexture) => {
			threeMaterial.emissiveMap = threeTexture;
		});

		if (material.isDefault) {
			output.defaultMaterial = threeMaterial;
		}

		return threeMaterial;
	}

	function CreateThreeMesh (meshInstance, modelThreeMaterials)
	{
		let mesh = meshInstance.mesh;
		let triangleCount = mesh.TriangleCount ();

		let triangleIndices = [];
		for (let i = 0; i < triangleCount; i++) {
			triangleIndices.push (i);
		}
		triangleIndices.sort ((a, b) => {
			let aTriangle = mesh.GetTriangle (a);
			let bTriangle = mesh.GetTriangle (b);
			return aTriangle.mat - bTriangle.mat;
		});

		let threeGeometry = new THREE.BufferGeometry ();
		let meshThreeMaterials = [];
		let meshOriginalMaterials = [];
		let modelToThreeMaterials = new Map ();

		let vertices = [];
		let vertexColors = [];
		let normals = [];
		let uvs = [];

		let groups = [];
		groups.push ({
			start : 0,
			end : -1
		});

		let meshHasVertexColors = (mesh.VertexColorCount () > 0);
		let meshHasUVs = (mesh.TextureUVCount () > 0);
		for (let i = 0; i < triangleIndices.length; i++) {
			let triangleIndex = triangleIndices[i];
			let triangle = mesh.GetTriangle (triangleIndex);

			let v0 = mesh.GetVertex (triangle.v0);
			let v1 = mesh.GetVertex (triangle.v1);
			let v2 = mesh.GetVertex (triangle.v2);
			vertices.push (v0.x, v0.y, v0.z, v1.x, v1.y, v1.z, v2.x, v2.y, v2.z);

			if (triangle.HasVertexColors ()) {
				let vc0 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c0));
				let vc1 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c1));
				let vc2 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c2));
				vertexColors.push (
					vc0.r, vc0.g, vc0.b,
					vc1.r, vc1.g, vc1.b,
					vc2.r, vc2.g, vc2.b
				);
			} else if (meshHasVertexColors) {
				vertexColors.push (
					0.0, 0.0, 0.0,
					0.0, 0.0, 0.0,
					0.0, 0.0, 0.0
				);
			}

			let n0 = mesh.GetNormal (triangle.n0);
			let n1 = mesh.GetNormal (triangle.n1);
			let n2 = mesh.GetNormal (triangle.n2);
			normals.push (n0.x, n0.y, n0.z, n1.x, n1.y, n1.z, n2.x, n2.y, n2.z);

			if (triangle.HasTextureUVs ()) {
				let u0 = mesh.GetTextureUV (triangle.u0);
				let u1 = mesh.GetTextureUV (triangle.u1);
				let u2 = mesh.GetTextureUV (triangle.u2);
				uvs.push (u0.x, u0.y, u1.x, u1.y, u2.x, u2.y);
			} else if (meshHasUVs) {
				uvs.push (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			}

			let modelMaterialIndex = triangle.mat;
			if (!modelToThreeMaterials.has (modelMaterialIndex)) {
				modelToThreeMaterials.set (modelMaterialIndex, meshThreeMaterials.length);
				meshThreeMaterials.push (modelThreeMaterials[modelMaterialIndex]);
				meshOriginalMaterials.push (modelMaterialIndex);
				if (i > 0) {
					groups[groups.length - 1].end = i - 1;
					groups.push ({
						start : groups[groups.length - 1].end + 1,
						end : -1
					});
				}
			}
		}

		groups[groups.length - 1].end = triangleCount - 1;

		threeGeometry.setAttribute ('position', new THREE.Float32BufferAttribute (vertices, 3));
		if (vertexColors.length !== 0) {
			threeGeometry.setAttribute ('color', new THREE.Float32BufferAttribute (vertexColors, 3));
		}
		threeGeometry.setAttribute ('normal', new THREE.Float32BufferAttribute (normals, 3));
		if (uvs.length !== 0) {
			threeGeometry.setAttribute ('uv', new THREE.Float32BufferAttribute (uvs, 2));
		}
		for (let i = 0; i < groups.length; i++) {
			let group = groups[i];
			threeGeometry.addGroup (group.start * 3, (group.end - group.start + 1) * 3, i);
		}

		let threeMesh = new THREE.Mesh (threeGeometry, meshThreeMaterials);
		threeMesh.name = mesh.GetName ();
		threeMesh.userData = {
			originalMeshInstance : meshInstance,
			originalMaterials : meshOriginalMaterials,
			threeMaterials : null
		};

		return threeMesh;
	}

	function ConvertMesh (threeObject, meshInstance, modelThreeMaterials)
	{
		let type = GetMeshType (meshInstance.mesh);
		if (type === MeshType.TriangleMesh) {
			let threeMesh = CreateThreeMesh (meshInstance, modelThreeMaterials);
			threeObject.add (threeMesh);
		}
	}

	function ConvertNodeHierarchy (threeRootNode, model, modelThreeMaterials, stateHandler)
	{
		let nodeTree = new ThreeNodeTree (model, threeRootNode);
		let threeNodeItems = nodeTree.GetNodeItems ();

		RunTasksBatch (threeNodeItems.length, 100, {
			runTask : (firstMeshInstanceIndex, lastMeshInstanceIndex, onReady) => {
				for (let meshInstanceIndex = firstMeshInstanceIndex; meshInstanceIndex <= lastMeshInstanceIndex; meshInstanceIndex++) {
					let nodeItem = threeNodeItems[meshInstanceIndex];
					ConvertMesh (nodeItem.threeNode, nodeItem.meshInstance, modelThreeMaterials);
				}
				onReady ();
			},
			onReady : () => {
				stateHandler.OnModelLoaded (threeRootNode);
			}
		});
	}

	let stateHandler = new ThreeConversionStateHandler (callbacks);
	let shadingType = GetShadingType (model);

	let modelThreeMaterials = [];
	for (let materialIndex = 0; materialIndex < model.MaterialCount (); materialIndex++) {
		let threeMaterial = CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output);
		modelThreeMaterials.push (threeMaterial);
	}

	let threeObject = new THREE.Object3D ();
	ConvertNodeHierarchy (threeObject, model, modelThreeMaterials, stateHandler);
}

class ThreeModelLoader
{
    constructor ()
    {
        this.importer = new Importer ();
        this.inProgress = false;
        this.defaultMaterial = null;
        this.objectUrls = null;
      this.hasHighpDriverIssue = false; // HasHighpDriverIssue ();
    }

    InProgress ()
    {
        return this.inProgress;
    }

    LoadModel (inputFiles, settings, callbacks)
    {
        if (this.inProgress) {
            return;
        }

        this.inProgress = true;
        this.RevokeObjectUrls ();
        this.importer.ImportFiles (inputFiles, settings, {
            onLoadStart : () => {
                callbacks.onLoadStart ();
            },
            onFileListProgress : (current, total) => {
                callbacks.onFileListProgress (current, total);
            },
            onFileLoadProgress : (current, total) => {
                callbacks.onFileLoadProgress (current, total);
            },
            onImportStart : () => {
                callbacks.onImportStart ();
            },
            onSelectMainFile : (fileNames, selectFile) => {
                if (!callbacks.onSelectMainFile) {
                    selectFile (0);
                } else {
                    callbacks.onSelectMainFile (fileNames, selectFile);
                }
            },
            onImportSuccess : (importResult) => {
                console.log('ThreeModelLoader#onImportSuccess');
                callbacks.onVisualizationStart ();
                let params = new ModelToThreeConversionParams ();
                params.forceMediumpForMaterials = this.hasHighpDriverIssue;
                let output = new ModelToThreeConversionOutput ();
                ConvertModelToThreeObject (importResult.model, params, output, {
                    onTextureLoaded : () => {
                        callbacks.onTextureLoaded ();
                    },
                    onModelLoaded : (threeObject) => {
                        this.defaultMaterial = output.defaultMaterial;
                        this.objectUrls = output.objectUrls;
                        if (importResult.upVector === Direction.X) {
                            let rotation = new THREE.Quaternion ().setFromAxisAngle (new THREE.Vector3 (0.0, 0.0, 1.0), Math.PI / 2.0);
                            threeObject.quaternion.multiply (rotation);
                        } else if (importResult.upVector === Direction.Z) {
                            let rotation = new THREE.Quaternion ().setFromAxisAngle (new THREE.Vector3 (1.0, 0.0, 0.0), -Math.PI / 2.0);
                            threeObject.quaternion.multiply (rotation);
                        }
                        callbacks.onModelFinished (importResult, threeObject);
                        this.inProgress = false;
                    }
                });
            },
            onImportError : (importError) => {
                console.trace('ThreeModelLoader#onImportError', importError);
                callbacks.onLoadError (importError);
                this.inProgress = false;
            }
        });
    }

    GetImporter ()
    {
        return this.importer;
    }

    GetDefaultMaterial ()
    {
        return this.defaultMaterial;
    }

    ReplaceDefaultMaterialColor (defaultColor)
    {
        if (this.defaultMaterial !== null && !this.defaultMaterial.vertexColors) {
            this.defaultMaterial.color = ConvertColorToThreeColor (defaultColor);
        }
    }

    RevokeObjectUrls ()
    {
        if (this.objectUrls === null) {
            return;
        }
        for (let objectUrl of this.objectUrls) {
            RevokeObjectUrl (objectUrl);
        }
        this.objectUrls = null;
    }

    Destroy ()
    {
        this.RevokeObjectUrls ();
        this.importer = null;
    }
}

function GetIntegerFromStyle (parameter)
{
    return Math.round (parseFloat (parameter));
}

function GetDomElementExternalWidth (style)
{
    let padding = GetIntegerFromStyle (style.paddingLeft) + GetIntegerFromStyle (style.paddingRight);
    let border = GetIntegerFromStyle (style.borderLeftWidth) + GetIntegerFromStyle (style.borderRightWidth);
    let margin = GetIntegerFromStyle (style.marginLeft) + GetIntegerFromStyle (style.marginRight);
    return padding + border + margin;
}

function GetDomElementExternalHeight (style)
{
    let padding = GetIntegerFromStyle (style.paddingTop) + GetIntegerFromStyle (style.paddingBottom);
    let border = GetIntegerFromStyle (style.borderTopWidth) + GetIntegerFromStyle (style.borderBottomWidth);
    let margin = GetIntegerFromStyle (style.marginTop) + GetIntegerFromStyle (style.marginBottom);
    return padding + border + margin;
}

function GetDomElementInnerDimensions (element, outerWidth, outerHeight)
{
    let style = getComputedStyle (element);
    let width = outerWidth - GetDomElementExternalWidth (style);
    let height = outerHeight - GetDomElementExternalHeight (style);
    return {
        width : width,
        height : height
    };
}

function GetDomElementClientCoordinates (element, clientX, clientY)
{
    if (element.getBoundingClientRect) {
        let clientRect = element.getBoundingClientRect ();
        clientX -= clientRect.left;
        clientY -= clientRect.top;
    }
    if (window.pageXOffset && window.pageYOffset) {
        clientX += window.pageXOffset;
        clientY += window.pageYOffset;
    }
    return (new Coord2D (clientX, clientY));
}

function CreateDomElement (elementType, className, innerHTML)
{
    let element = document.createElement (elementType);
    if (className) {
        element.className = className;
    }
    if (innerHTML) {
        element.innerHTML = innerHTML;
    }
    return element;
}

function AddDomElement (parentElement, elementType, className, innerHTML)
{
    let element = CreateDomElement (elementType, className, innerHTML);
    parentElement.appendChild (element);
    return element;
}

function AddDiv (parentElement, className, innerHTML)
{
    return AddDomElement (parentElement, 'div', className, innerHTML);
}

function ClearDomElement (element)
{
    while (element.firstChild) {
        element.removeChild (element.firstChild);
    }
}

function InsertDomElementBefore (newElement, existingElement)
{
    existingElement.parentNode.insertBefore (newElement, existingElement);
}

function InsertDomElementAfter (newElement, existingElement)
{
    existingElement.parentNode.insertBefore (newElement, existingElement.nextSibling);
}

function ShowDomElement (element, show)
{
    if (show) {
        element.style.display = 'block';
    } else {
        element.style.display = 'none';
    }
}

function IsDomElementVisible (element)
{
    return element.offsetParent !== null;
}

function SetDomElementWidth (element, width)
{
    element.style.width = width.toString () + 'px';
}

function SetDomElementHeight (element, height)
{
    element.style.height = height.toString () + 'px';
}

function GetDomElementOuterWidth (element)
{
    let style = getComputedStyle (element);
    return element.offsetWidth + GetIntegerFromStyle (style.marginLeft) + GetIntegerFromStyle (style.marginRight);
}

function GetDomElementOuterHeight (element)
{
    let style = getComputedStyle (element);
    return element.offsetHeight + GetIntegerFromStyle (style.marginTop) + GetIntegerFromStyle (style.marginBottom);
}

function SetDomElementOuterWidth (element, width)
{
    let style = getComputedStyle (element);
    SetDomElementWidth (element, width - GetDomElementExternalWidth (style));
}

function SetDomElementOuterHeight (element, height)
{
    let style = getComputedStyle (element);
    SetDomElementHeight (element, height - GetDomElementExternalHeight (style));
}

function CreateDiv (className, innerHTML)
{
    return CreateDomElement ('div', className, innerHTML);
}

class MouseInteraction
{
    constructor ()
    {
        this.prev = new Coord2D (0.0, 0.0);
        this.curr = new Coord2D (0.0, 0.0);
        this.diff = new Coord2D (0.0, 0.0);
        this.buttons = [];
    }

    Down (canvas, ev)
    {
        this.buttons.push (ev.which);
        this.curr = this.GetPositionFromEvent (canvas, ev);
        this.prev = this.curr.Clone ();
    }

    Move (canvas, ev)
    {
        this.curr = this.GetPositionFromEvent (canvas, ev);
		this.diff = SubCoord2D (this.curr, this.prev);
		this.prev = this.curr.Clone ();
	}

	Up (canvas, ev)
	{
		let buttonIndex = this.buttons.indexOf (ev.which);
		if (buttonIndex !== -1) {
			this.buttons.splice (buttonIndex, 1);
		}
		this.curr = this.GetPositionFromEvent (canvas, ev);
	}

	Leave (canvas, ev)
	{
		this.buttons = [];
		this.curr = this.GetPositionFromEvent (canvas, ev);
	}

	IsButtonDown ()
	{
		return this.buttons.length > 0;
	}

	GetButton ()
	{
		let length = this.buttons.length;
		if (length === 0) {
			return 0;
		}
		return this.buttons[length - 1];
	}

	GetPosition ()
	{
		return this.curr;
	}

	GetMoveDiff ()
	{
		return this.diff;
	}

	GetPositionFromEvent (canvas, ev)
	{
		return GetDomElementClientCoordinates (canvas, ev.clientX, ev.clientY);
	}
}

class TouchInteraction
{
	constructor ()
	{
		this.prevPos = new Coord2D (0.0, 0.0);
		this.currPos = new Coord2D (0.0, 0.0);
		this.diffPos = new Coord2D (0.0, 0.0);
		this.prevDist = 0.0;
		this.currDist = 0.0;
		this.diffDist = 0.0;
		this.fingers = 0;
	}

	Start (canvas, ev)
	{
		if (ev.touches.length === 0) {
			return;
		}

		this.fingers = ev.touches.length;

		this.currPos = this.GetPositionFromEvent (canvas, ev);
		this.prevPos = this.currPos.Clone ();

		this.currDist = this.GetTouchDistanceFromEvent (canvas, ev);
		this.prevDist = this.currDist;
	}

	Move (canvas, ev)
	{
		if (ev.touches.length === 0) {
			return;
		}

		this.currPos = this.GetPositionFromEvent (canvas, ev);
		this.diffPos = SubCoord2D (this.currPos, this.prevPos);
		this.prevPos = this.currPos.Clone ();

		this.currDist = this.GetTouchDistanceFromEvent (canvas, ev);
		this.diffDist = this.currDist - this.prevDist;
		this.prevDist = this.currDist;
	}

	End (canvas, ev)
	{
		if (ev.touches.length === 0) {
			return;
		}

		this.fingers = 0;
		this.currPos = this.GetPositionFromEvent (canvas, ev);
		this.currDist = this.GetTouchDistanceFromEvent (canvas, ev);
	}

	IsFingerDown ()
	{
		return this.fingers !== 0;
	}

	GetFingerCount ()
	{
		return this.fingers;
	}

	GetPosition ()
	{
		return this.currPos;
	}

	GetMoveDiff ()
	{
		return this.diffPos;
	}

	GetDistanceDiff ()
	{
		return this.diffDist;
	}

	GetPositionFromEvent (canvas, ev)
	{
		let coord = null;
		if (ev.touches.length !== 0) {
			let touchEv = ev.touches[0];
			coord = GetDomElementClientCoordinates (canvas, touchEv.pageX, touchEv.pageY);
		}
		return coord;
	}

	GetTouchDistanceFromEvent (canvas, ev)
	{
		if (ev.touches.length !== 2) {
			return 0.0;
		}
		let touchEv1 = ev.touches[0];
		let touchEv2 = ev.touches[1];
		let distance = CoordDistance2D (
			GetDomElementClientCoordinates (canvas, touchEv1.pageX, touchEv1.pageY),
			GetDomElementClientCoordinates (canvas, touchEv2.pageX, touchEv2.pageY)
		);
		return distance;
	}
}

class ClickDetector
{
	constructor ()
	{
		this.isClick = false;
		this.startPosition = null;
	}

	Start (startPosition)
	{
		this.isClick = true;
		this.startPosition = startPosition;
	}

	Move (currentPosition)
	{
		if (!this.isClick) {
			return;
		}

		if (this.startPosition !== null) {
			const maxClickDistance = 3.0;
			const currentDistance = CoordDistance2D (this.startPosition, currentPosition);
			if (currentDistance > maxClickDistance) {
				this.Cancel ();
			}
		} else {
			this.Cancel ();
		}
	}

	End ()
	{
		this.startPosition = null;
	}

	Cancel ()
	{
		this.isClick = false;
		this.startPosition = null;
	}

	IsClick ()
	{
		return this.isClick;
	}
}

const NavigationType =
{
	None : 0,
	Orbit : 1,
	Pan : 2,
	Zoom : 3
};

class Navigation
{
	constructor (canvas, camera, callbacks)
	{
		this.canvas = canvas;
		this.camera = camera;
		this.callbacks = callbacks;
		this.fixUpVector = true;

		this.mouse = new MouseInteraction ();
		this.touch = new TouchInteraction ();
		this.clickDetector = new ClickDetector ();

		this.onMouseClick = null;
		this.onMouseMove = null;
		this.onContext = null;

		if (this.canvas.addEventListener) {
			this.canvas.addEventListener ('mousedown', this.OnMouseDown.bind (this));
			this.canvas.addEventListener ('wheel', this.OnMouseWheel.bind (this));
			this.canvas.addEventListener ('touchstart', this.OnTouchStart.bind (this));
			this.canvas.addEventListener ('touchmove', this.OnTouchMove.bind (this));
			this.canvas.addEventListener ('touchcancel', this.OnTouchEnd.bind (this));
			this.canvas.addEventListener ('touchend', this.OnTouchEnd.bind (this));
			this.canvas.addEventListener ('contextmenu', this.OnContextMenu.bind (this));
		}
		if (document.addEventListener) {
			document.addEventListener ('mousemove', this.OnMouseMove.bind (this));
			document.addEventListener ('mouseup', this.OnMouseUp.bind (this));
			document.addEventListener ('mouseleave', this.OnMouseLeave.bind (this));
		}
	}

	SetMouseClickHandler (onMouseClick)
	{
		this.onMouseClick = onMouseClick;
	}

	SetMouseMoveHandler (onMouseMove)
	{
		this.onMouseMove = onMouseMove;
	}

	SetContextMenuHandler (onContext)
	{
		this.onContext = onContext;
	}

	IsFixUpVector ()
	{
		return this.fixUpVector;
	}

	SetFixUpVector (isFixUpVector)
	{
		this.fixUpVector = isFixUpVector;
	}

	GetCamera ()
	{
		return this.camera;
	}

	SetCamera (camera)
	{
		this.camera = camera;
	}

	MoveCamera (newCamera, stepCount)
	{
		function Step (obj, steps, count, index)
		{
			obj.camera.eye = steps.eye[index];
			obj.camera.center = steps.center[index];
			obj.camera.up = steps.up[index];
			obj.Update ();

			if (index < count - 1) {
				requestAnimationFrame (() => {
					Step (obj, steps, count, index + 1);
				});
			}
		}

		if (newCamera === null) {
			return;
		}

		if (stepCount === 0 || CameraIsEqual3D (this.camera, newCamera)) {
			this.camera = newCamera;
		} else {
			let tweenFunc = ParabolicTweenFunction;
			let steps = {
				eye : TweenCoord3D (this.camera.eye, newCamera.eye, stepCount, tweenFunc),
				center : TweenCoord3D (this.camera.center, newCamera.center, stepCount, tweenFunc),
				up : TweenCoord3D (this.camera.up, newCamera.up, stepCount, tweenFunc)
			};
			requestAnimationFrame (() => {
				Step (this, steps, stepCount, 0);
			});
		}

		this.Update ();
	}

	GetFitToSphereCamera (center, radius)
	{
		if (IsZero (radius)) {
			return null;
		}

		let fitCamera = this.camera.Clone ();

		let offsetToOrigo = SubCoord3D (fitCamera.center, center);
		fitCamera.eye = SubCoord3D (fitCamera.eye, offsetToOrigo);
		fitCamera.center = center.Clone ();

		let centerEyeDirection = SubCoord3D (fitCamera.eye, fitCamera.center).Normalize ();
		let fieldOfView = this.camera.fov / 2.0;
		if (this.canvas.width < this.canvas.height) {
			fieldOfView = fieldOfView * this.canvas.width / this.canvas.height;
		}
		let distance = radius / Math.sin (fieldOfView * DegRad);

		fitCamera.eye = fitCamera.center.Clone ().Offset (centerEyeDirection, distance);

		return fitCamera;
	}

	OnMouseDown (ev)
	{
		ev.preventDefault ();

		this.mouse.Down (this.canvas, ev);
		this.clickDetector.Start (this.mouse.GetPosition ());
	}

	OnMouseMove (ev)
	{
		this.mouse.Move (this.canvas, ev);
		this.clickDetector.Move (this.mouse.GetPosition ());
		if (this.onMouseMove) {
			let mouseCoords = GetDomElementClientCoordinates (this.canvas, ev.clientX, ev.clientY);
			this.onMouseMove (mouseCoords);
		}

		if (!this.mouse.IsButtonDown ()) {
			return;
		}

		let moveDiff = this.mouse.GetMoveDiff ();
		let mouseButton = this.mouse.GetButton ();

		let navigationType = NavigationType.None;
		if (mouseButton === 1) {
			if (ev.ctrlKey) {
				navigationType = NavigationType.Zoom;
			} else if (ev.shiftKey) {
				navigationType = NavigationType.Pan;
			} else {
				navigationType = NavigationType.Orbit;
			}
		} else if (mouseButton === 2 || mouseButton === 3) {
			navigationType = NavigationType.Pan;
		}

		if (navigationType === NavigationType.Orbit) {
			let orbitRatio = 0.5;
			this.Orbit (moveDiff.x * orbitRatio, moveDiff.y * orbitRatio);
		} else if (navigationType === NavigationType.Pan) {
			let eyeCenterDistance = CoordDistance3D (this.camera.eye, this.camera.center);
			let panRatio = 0.001 * eyeCenterDistance;
			this.Pan (moveDiff.x * panRatio, moveDiff.y * panRatio);
		} else if (navigationType === NavigationType.Zoom) {
			let zoomRatio = 0.005;
			this.Zoom (-moveDiff.y * zoomRatio);
		}

		this.Update ();
	}

	OnMouseUp (ev)
	{
		this.mouse.Up (this.canvas, ev);
		this.clickDetector.End ();

		if (this.clickDetector.IsClick ()) {
			let mouseCoords = this.mouse.GetPosition ();
			this.Click (ev.which, mouseCoords);
		}
	}

	OnMouseLeave (ev)
	{
		this.mouse.Leave (this.canvas, ev);
		this.clickDetector.Cancel ();
	}

	OnTouchStart (ev)
	{
		ev.preventDefault ();

		this.touch.Start (this.canvas, ev);
		this.clickDetector.Start (this.touch.GetPosition ());
	}

	OnTouchMove (ev)
	{
		ev.preventDefault ();

		this.touch.Move (this.canvas, ev);
		this.clickDetector.Move (this.touch.GetPosition ());
		if (!this.touch.IsFingerDown ()) {
			return;
		}

		let moveDiff = this.touch.GetMoveDiff ();
		let distanceDiff = this.touch.GetDistanceDiff ();
		let fingerCount = this.touch.GetFingerCount ();

		let navigationType = NavigationType.None;
		if (fingerCount === 1) {
			navigationType = NavigationType.Orbit;
		} else if (fingerCount === 2) {
			navigationType = NavigationType.Pan;
		}

		if (navigationType === NavigationType.Orbit) {
			let orbitRatio = 0.5;
			this.Orbit (moveDiff.x * orbitRatio, moveDiff.y * orbitRatio);
		} else if (navigationType === NavigationType.Pan) {
			let zoomRatio = 0.005;
			this.Zoom (distanceDiff * zoomRatio);
			let panRatio = 0.001 * CoordDistance3D (this.camera.eye, this.camera.center);
			this.Pan (moveDiff.x * panRatio, moveDiff.y * panRatio);
		}

		this.Update ();
	}

	OnTouchEnd (ev)
	{
		ev.preventDefault ();

		this.touch.End (this.canvas, ev);
		this.clickDetector.End ();

		if (this.clickDetector.IsClick ()) {
			let touchCoords = this.touch.GetPosition ();
			if (this.touch.GetFingerCount () === 1) {
				this.Click (1, touchCoords);
			}
		}
	}

	OnMouseWheel (ev)
	{
		let params = ev || window.event;
		params.preventDefault ();

		let delta = -params.deltaY / 40;
		let ratio = 0.1;
		if (delta < 0) {
			ratio = ratio * -1.0;
		}

		this.Zoom (ratio);
		this.Update ();
	}

	OnContextMenu (ev)
	{
		ev.preventDefault ();

		if (this.clickDetector.IsClick ()) {
			this.Context (ev.clientX, ev.clientY);
			this.clickDetector.Cancel ();
		}
	}

	Orbit (angleX, angleY)
	{
		let radAngleX = angleX * DegRad;
		let radAngleY = angleY * DegRad;

		let viewDirection = SubCoord3D (this.camera.center, this.camera.eye).Normalize ();
		let horizontalDirection = CrossVector3D (viewDirection, this.camera.up).Normalize ();

		if (this.fixUpVector) {
			let originalAngle = VectorAngle3D (viewDirection, this.camera.up);
			let newAngle = originalAngle + radAngleY;
			if (IsGreater (newAngle, 0.0) && IsLower (newAngle, Math.PI)) {
				this.camera.eye.Rotate (horizontalDirection, -radAngleY, this.camera.center);
			}
			this.camera.eye.Rotate (this.camera.up, -radAngleX, this.camera.center);
		} else {
			let verticalDirection = CrossVector3D (horizontalDirection, viewDirection).Normalize ();
			this.camera.eye.Rotate (horizontalDirection, -radAngleY, this.camera.center);
			this.camera.eye.Rotate (verticalDirection, -radAngleX, this.camera.center);
			this.camera.up = verticalDirection;
		}
	}

	Pan (moveX, moveY)
	{
		let viewDirection = SubCoord3D (this.camera.center, this.camera.eye).Normalize ();
		let horizontalDirection = CrossVector3D (viewDirection, this.camera.up).Normalize ();
		let verticalDirection = CrossVector3D (horizontalDirection, viewDirection).Normalize ();

		this.camera.eye.Offset (horizontalDirection, -moveX);
		this.camera.center.Offset (horizontalDirection, -moveX);

		this.camera.eye.Offset (verticalDirection, moveY);
		this.camera.center.Offset (verticalDirection, moveY);
	}

	Zoom (ratio)
	{
		let direction = SubCoord3D (this.camera.center, this.camera.eye);
		let distance = direction.Length ();
		let move = distance * ratio;
		this.camera.eye.Offset (direction, move);
	}

	Update ()
	{
		this.callbacks.onUpdate ();
	}

	Click (button, mouseCoords)
	{
		if (this.onMouseClick) {
			this.onMouseClick (button, mouseCoords);
		}
	}

	Context (clientX, clientY)
	{
		if (this.onContext) {
			let globalCoords = {
				x : clientX,
				y : clientY
			};
			let localCoords = GetDomElementClientCoordinates (this.canvas, clientX, clientY);
			this.onContext (globalCoords, localCoords);
		}
	}
}

/**
 * Environment settings object.
 */
class EnvironmentSettings
{
    /**
     * @param {string[]} textureNames Urls of the environment map images in this order:
     * posx, negx, posy, negy, posz, negz.
     * @param {boolean} backgroundIsEnvMap Use the environment map as background.
     */
    constructor (textureNames, backgroundIsEnvMap)
    {
        this.textureNames = textureNames;
        this.backgroundIsEnvMap = backgroundIsEnvMap;
    }

    /**
     * Creates a clone of the object.
     * @returns {EnvironmentSettings}
     */
    Clone ()
    {
        let textureNames = null;
        if (this.textureNames !== null) {
            textureNames = [];
            for (let textureName of this.textureNames) {
                textureNames.push (textureName);
            }
        }
        return new EnvironmentSettings (textureNames, this.backgroundIsEnvMap);
    }
}

class ShadingModel
{
    constructor (scene)
    {
        this.scene = scene;

        this.type = ShadingType.Phong;
        this.cameraMode = CameraMode.Perspective;
        this.ambientLight = new THREE.AmbientLight (0x888888);
        this.directionalLight = new THREE.DirectionalLight (0x888888);
        this.environmentSettings = new EnvironmentSettings (null, false);
        this.environment = null;

        this.scene.add (this.ambientLight);
        this.scene.add (this.directionalLight);
    }

    SetShadingType (type)
    {
        this.type = type;
        this.UpdateShading ();
    }

    SetCameraMode (cameraMode)
    {
        this.cameraMode = cameraMode;
        this.UpdateShading ();
    }

    UpdateShading ()
    {
        if (this.type === ShadingType.Phong) {
            this.ambientLight.color.set (0x888888);
            this.directionalLight.color.set (0x888888);
            this.scene.environment = null;
        } else if (this.type === ShadingType.Physical) {
            this.ambientLight.color.set (0x000000);
            this.directionalLight.color.set (0x555555);
            this.scene.environment = this.environment;
        }
        if (this.environmentSettings.backgroundIsEnvMap && this.cameraMode === CameraMode.Perspective) {
            this.scene.background = this.environment;
        } else {
            this.scene.background = null;
        }
    }

    SetEnvironmentMapSettings (environmentSettings, onLoaded)
    {
        let loader = new THREE.CubeTextureLoader ();
        this.environment = loader.load (environmentSettings.textureNames, (texture) => {
            texture.colorSpace = THREE.LinearSRGBColorSpace;
            onLoaded ();
        });
        this.environmentSettings = environmentSettings;
    }

    UpdateByCamera (camera)
    {
        const lightDir = SubCoord3D (camera.eye, camera.center);
        this.directionalLight.position.set (lightDir.x, lightDir.y, lightDir.z);
    }

    CreateHighlightMaterial (highlightColor, withOffset)
    {
        let material = null;
        if (this.type === ShadingType.Phong) {
            material = new THREE.MeshPhongMaterial ({
                color : ConvertColorToThreeColor (highlightColor),
                side : THREE.DoubleSide
            });
        } else if (this.type === ShadingType.Physical) {
            material = new THREE.MeshStandardMaterial ({
                color : ConvertColorToThreeColor (highlightColor),
                side : THREE.DoubleSide
            });
        }
        if (material !== null && withOffset) {
            material.polygonOffset = true;
            material.polygonOffsetUnit = 1;
            material.polygonOffsetFactor = 1;
        }
        return material;
    }
}

function GetDefaultCamera (direction)
{
    let fieldOfView = 45.0;
    if (direction === Direction.X) {
        return new Camera (
            new Coord3D (2.0, -3.0, 1.5),
            new Coord3D (0.0, 0.0, 0.0),
            new Coord3D (1.0, 0.0, 0.0),
            fieldOfView
        );
    } else if (direction === Direction.Y) {
        return new Camera (
            new Coord3D (-1.5, 2.0, 3.0),
            new Coord3D (0.0, 0.0, 0.0),
            new Coord3D (0.0, 1.0, 0.0),
            fieldOfView
        );
    } else if (direction === Direction.Z) {
        return new Camera (
            new Coord3D (-1.5, -3.0, 2.0),
            new Coord3D (0.0, 0.0, 0.0),
            new Coord3D (0.0, 0.0, 1.0),
            fieldOfView
        );
    }
    return null;
}

function TraverseThreeObject (object, processor)
{
    if (!processor (object)) {
        return false;
    }
    for (let child of object.children) {
        if (!TraverseThreeObject (child, processor)) {
            return false;
        }
    }
    return true;
}

function GetShadingTypeOfObject (mainObject)
{
    let shadingType = null;
    TraverseThreeObject (mainObject, (obj) => {
        if (obj.isMesh) {
            for (const material of obj.material) {
                if (material.type === 'MeshPhongMaterial') {
                    shadingType = ShadingType.Phong;
                } else if (material.type === 'MeshStandardMaterial') {
                    shadingType = ShadingType.Physical;
                }
                return false;
            }
        }
        return true;
    });
    return shadingType;
}

class CameraValidator
{
    constructor ()
    {
        this.eyeCenterDistance = 0.0;
        this.forceUpdate = true;
    }

    ForceUpdate ()
    {
        this.forceUpdate = true;
    }

    ValidatePerspective ()
    {
        if (this.forceUpdate) {
            this.forceUpdate = false;
            return false;
        }
        return true;
    }

    ValidateOrthographic (eyeCenterDistance)
    {
        if (this.forceUpdate || !IsEqual (this.eyeCenterDistance, eyeCenterDistance)) {
            this.eyeCenterDistance = eyeCenterDistance;
            this.forceUpdate = false;
            return false;
        }
        return true;
    }
}

class UpVector
{
    constructor ()
    {
        this.direction = Direction.Y;
        this.isFixed = true;
        this.isFlipped = false;
    }

    SetDirection (newDirection, oldCamera)
    {
        this.direction = newDirection;
        this.isFlipped = false;

        let defaultCamera = GetDefaultCamera (this.direction);
        let defaultDir = SubCoord3D (defaultCamera.eye, defaultCamera.center);

        let distance = CoordDistance3D (oldCamera.center, oldCamera.eye);
        let newEye = oldCamera.center.Clone ().Offset (defaultDir, distance);

        let newCamera = oldCamera.Clone ();
        if (this.direction === Direction.X) {
            newCamera.up = new Coord3D (1.0, 0.0, 0.0);
            newCamera.eye = newEye;
        } else if (this.direction === Direction.Y) {
            newCamera.up = new Coord3D (0.0, 1.0, 0.0);
            newCamera.eye = newEye;
        } else if (this.direction === Direction.Z) {
            newCamera.up = new Coord3D (0.0, 0.0, 1.0);
            newCamera.eye = newEye;
        }
        return newCamera;
    }

    SetFixed (isFixed, oldCamera)
    {
        this.isFixed = isFixed;
        if (this.isFixed) {
            return this.SetDirection (this.direction, oldCamera);
        }
        return null;
    }

    Flip (oldCamera)
    {
        this.isFlipped = !this.isFlipped;
        let newCamera = oldCamera.Clone ();
        newCamera.up.MultiplyScalar (-1.0);
        return newCamera;
    }
}

class Viewer
{
    constructor ()
    {
        THREE.ColorManagement.enabled = false;

        this.canvas = null;
        this.renderer = null;
        this.scene = null;
        this.mainModel = null;
        this.extraModel = null;
        this.camera = null;
        this.cameraMode = null;
        this.cameraValidator = null;
        this.shadingModel = null;
        this.navigation = null;
        this.upVector = null;
        this.settings = {
            animationSteps : 40
        };
    }

    Init(canvas) {
      this.canvas = canvas;
      this.canvas.id = 'viewer';
      let parameters = {
        canvas : this.canvas,
        antialias : true
      };
      this.InitPrivate(parameters);
    }


  InitWithCtx(glCtx) {
      const canvas = {
        width: 1024,
        height: 768,
        style: {
          width: 1024,
          height: 768,
        },
        addEventListener: () => {},
      };
      let parameters = {
        context: glCtx,
        canvas: canvas,
        antialias: true
      };
      this.canvas = canvas;
      this.InitPrivate(parameters);
    }


    InitPrivate (parameters)
  {
        this.renderer = new THREE.WebGLRenderer (parameters);
        this.renderer.outputColorSpace = THREE.LinearSRGBColorSpace;

        if (window.devicePixelRatio) {
            this.renderer.setPixelRatio (window.devicePixelRatio);
        }
        this.renderer.setClearColor ('#ffffff', 1.0);
        this.renderer.setSize (this.canvas.width, this.canvas.height);

        this.scene = new THREE.Scene ();
        this.mainModel = new ViewerMainModel (this.scene);
        this.extraModel = new ViewerModel (this.scene);

        this.InitNavigation ();
        this.InitShading ();

        this.Render ();
    }

    SetMouseClickHandler (onMouseClick)
    {
        this.navigation.SetMouseClickHandler (onMouseClick);
    }

    SetMouseMoveHandler (onMouseMove)
    {
        this.navigation.SetMouseMoveHandler (onMouseMove);
    }

    SetContextMenuHandler (onContext)
    {
        this.navigation.SetContextMenuHandler (onContext);
    }

    SetEdgeSettings (edgeSettings)
    {
        let newEdgeSettings = edgeSettings.Clone ();
        this.mainModel.SetEdgeSettings (newEdgeSettings);
        this.Render ();
    }

    SetEnvironmentMapSettings (environmentSettings)
    {
        let newEnvironmentSettings = environmentSettings.Clone ();
        this.shadingModel.SetEnvironmentMapSettings (newEnvironmentSettings, () => {
            this.Render ();
        });
        this.shadingModel.UpdateShading ();
        this.Render ();
    }

    SetBackgroundColor (color)
    {
        let bgColor = new THREE.Color (
            ColorComponentToFloat (color.r),
            ColorComponentToFloat (color.g),
            ColorComponentToFloat (color.b)
        );
        let alpha = ColorComponentToFloat (color.a);
        this.renderer.setClearColor (bgColor, alpha);
        this.Render ();
    }

    GetCanvas ()
    {
        return this.canvas;
    }

    GetCamera ()
    {
        return this.navigation.GetCamera ();
    }

    GetCameraMode ()
    {
        return this.cameraMode;
    }

    SetCamera (camera)
    {
        this.navigation.SetCamera (camera);
        this.cameraValidator.ForceUpdate ();
        this.Render ();
    }

    SetCameraMode (cameraMode)
    {
        if (this.cameraMode === cameraMode) {
            return;
        }

        this.scene.remove (this.camera);
        if (cameraMode === CameraMode.Perspective) {
            this.camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);
        } else if (cameraMode === CameraMode.Orthographic) {
			this.camera = new THREE.OrthographicCamera (-1.0, 1.0, 1.0, -1.0, 0.1, 1000.0);
        }
        this.scene.add (this.camera);

        this.cameraMode = cameraMode;
        this.shadingModel.SetCameraMode (cameraMode);
        this.cameraValidator.ForceUpdate ();

        this.AdjustClippingPlanes ();
        this.Render ();
    }

    Resize (width, height)
    {
        let innerSize = GetDomElementInnerDimensions (this.canvas, width, height);
        this.ResizeRenderer (innerSize.width, innerSize.height);
    }

    ResizeRenderer (width, height)
    {
        if (window.devicePixelRatio) {
            this.renderer.setPixelRatio (window.devicePixelRatio);
        }
        this.renderer.setSize (width, height);
        this.cameraValidator.ForceUpdate ();
        this.Render ();
    }

    FitSphereToWindow (boundingSphere, animation)
    {
        if (boundingSphere === null) {
            return;
        }
        let center = new Coord3D (boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z);
        let radius = boundingSphere.radius;

        let newCamera = this.navigation.GetFitToSphereCamera (center, radius);
        this.navigation.MoveCamera (newCamera, animation ? this.settings.animationSteps : 0);
    }

    AdjustClippingPlanes ()
    {
        let boundingSphere = this.GetBoundingSphere ((meshUserData) => {
            return true;
        });
        this.AdjustClippingPlanesToSphere (boundingSphere);
    }

    AdjustClippingPlanesToSphere (boundingSphere)
    {
        if (boundingSphere === null) {
            return;
        }
        if (boundingSphere.radius < 10.0) {
            this.camera.near = 0.01;
            this.camera.far = 100.0;
        } else if (boundingSphere.radius < 100.0) {
            this.camera.near = 0.1;
            this.camera.far = 1000.0;
        } else if (boundingSphere.radius < 1000.0) {
            this.camera.near = 10.0;
            this.camera.far = 10000.0;
        } else {
            this.camera.near = 100.0;
            this.camera.far = 1000000.0;
        }

        this.cameraValidator.ForceUpdate ();
        this.Render ();
    }

    IsFixUpVector ()
    {
        return this.navigation.IsFixUpVector ();
    }

    SetFixUpVector (isFixUpVector)
    {
        let oldCamera = this.navigation.GetCamera ();
        let newCamera = this.upVector.SetFixed (isFixUpVector, oldCamera);
        this.navigation.SetFixUpVector (isFixUpVector);
        if (newCamera !== null) {
            this.navigation.MoveCamera (newCamera, this.settings.animationSteps);
        }
        this.Render ();
    }

    SetUpVector (upDirection, animate)
    {
        let oldCamera = this.navigation.GetCamera ();
        let newCamera = this.upVector.SetDirection (upDirection, oldCamera);
        let animationSteps = animate ? this.settings.animationSteps : 0;
        this.navigation.MoveCamera (newCamera, animationSteps);
        this.Render ();
    }

    FlipUpVector ()
    {
        let oldCamera = this.navigation.GetCamera ();
        let newCamera = this.upVector.Flip (oldCamera);
        this.navigation.MoveCamera (newCamera, 0);
        this.Render ();
    }

    Render ()
    {
        let navigationCamera = this.navigation.GetCamera ();

        this.camera.position.set (navigationCamera.eye.x, navigationCamera.eye.y, navigationCamera.eye.z);
        this.camera.up.set (navigationCamera.up.x, navigationCamera.up.y, navigationCamera.up.z);
        this.camera.lookAt (new THREE.Vector3 (navigationCamera.center.x, navigationCamera.center.y, navigationCamera.center.z));

        if (this.cameraMode === CameraMode.Perspective) {
            if (!this.cameraValidator.ValidatePerspective ()) {
                this.camera.aspect = this.canvas.width / this.canvas.height;
                this.camera.fov = navigationCamera.fov;
                this.camera.updateProjectionMatrix ();
            }
        } else if (this.cameraMode === CameraMode.Orthographic) {
            let eyeCenterDistance = CoordDistance3D (navigationCamera.eye, navigationCamera.center);
            if (!this.cameraValidator.ValidateOrthographic (eyeCenterDistance)) {
                let aspect = this.canvas.width / this.canvas.height;
                let eyeCenterDistance = CoordDistance3D (navigationCamera.eye, navigationCamera.center);
                let frustumHalfHeight = eyeCenterDistance * Math.tan (0.5 * navigationCamera.fov * DegRad);
                this.camera.left = -frustumHalfHeight * aspect;
                this.camera.right = frustumHalfHeight * aspect;
                this.camera.top = frustumHalfHeight;
                this.camera.bottom = -frustumHalfHeight;
                this.camera.updateProjectionMatrix ();
            }
        }

        this.shadingModel.UpdateByCamera (navigationCamera);
        this.renderer.render (this.scene, this.camera);
    }

    SetMainObject (object)
    {
        const shadingType = GetShadingTypeOfObject (object);
        this.mainModel.SetMainObject (object);
        this.shadingModel.SetShadingType (shadingType);

        this.Render ();
    }

    AddExtraObject (object)
    {
        this.extraModel.AddObject (object);
        this.Render ();
    }

    Clear ()
    {
        this.mainModel.Clear ();
        this.extraModel.Clear ();
        this.Render ();
    }

    ClearExtra ()
    {
        this.extraModel.Clear ();
        this.Render ();
    }

    SetMeshesVisibility (isVisible)
    {
        this.mainModel.EnumerateMeshes ((mesh) => {
            let visible = isVisible (mesh.userData);
            if (mesh.visible !== visible) {
                mesh.visible = visible;
            }
        });
        this.mainModel.EnumerateEdges ((edge) => {
            let visible = isVisible (edge.userData);
            if (edge.visible !== visible) {
                edge.visible = visible;
            }
        });
        this.Render ();
    }

    SetMeshesHighlight (highlightColor, isHighlighted)
    {
        function CreateHighlightMaterials (originalMaterials, highlightMaterial)
        {
            let highlightMaterials = [];
            for (let i = 0; i < originalMaterials.length; i++) {
                highlightMaterials.push (highlightMaterial);
            }
            return highlightMaterials;
        }

        const highlightMaterial = this.CreateHighlightMaterial (highlightColor);
        this.mainModel.EnumerateMeshes ((mesh) => {
            let highlighted = isHighlighted (mesh.userData);
            if (highlighted) {
                if (mesh.userData.threeMaterials === null) {
                    mesh.userData.threeMaterials = mesh.material;
                    mesh.material = CreateHighlightMaterials (mesh.material, highlightMaterial);
                }
            } else {
                if (mesh.userData.threeMaterials !== null) {
                    mesh.material = mesh.userData.threeMaterials;
                    mesh.userData.threeMaterials = null;
                }
            }
        });

        this.Render ();
    }

    CreateHighlightMaterial (highlightColor)
    {
        const showEdges = this.mainModel.edgeSettings.showEdges;
        return this.shadingModel.CreateHighlightMaterial (highlightColor, showEdges);
    }

    GetMeshUserDataUnderMouse (mouseCoords)
    {
        let intersection = this.GetMeshIntersectionUnderMouse (mouseCoords);
        if (intersection === null) {
            return null;
        }
        return intersection.object.userData;
    }

    GetMeshIntersectionUnderMouse (mouseCoords)
    {
        let canvasSize = this.GetCanvasSize ();
        let intersection = this.mainModel.GetMeshIntersectionUnderMouse (mouseCoords, this.camera, canvasSize.width, canvasSize.height);
        if (intersection === null) {
            return null;
        }
        return intersection;
    }

    GetBoundingBox (needToProcess)
    {
        return this.mainModel.GetBoundingBox (needToProcess);
    }

    GetBoundingSphere (needToProcess)
    {
        return this.mainModel.GetBoundingSphere (needToProcess);
    }

    EnumerateMeshesUserData (enumerator)
    {
        this.mainModel.EnumerateMeshes ((mesh) => {
            enumerator (mesh.userData);
        });
    }

    InitNavigation ()
    {
        let camera = GetDefaultCamera (Direction.Y);
        this.camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);
        this.cameraMode = CameraMode.Perspective;
        this.cameraValidator = new CameraValidator ();
        this.scene.add (this.camera);

        let canvasElem = this.renderer.domElement;
        this.navigation = new Navigation (canvasElem, camera, {
            onUpdate : () => {
                this.Render ();
            }
        });

        this.upVector = new UpVector ();
    }

    InitShading  ()
    {
        this.shadingModel = new ShadingModel (this.scene);
    }

    GetShadingType ()
    {
        return this.shadingModel.type;
    }

    GetImageSize ()
    {
        let originalSize = new THREE.Vector2 ();
        this.renderer.getSize (originalSize);
        return {
            width : parseInt (originalSize.x, 10),
            height : parseInt (originalSize.y, 10)
        };
    }

    GetCanvasSize ()
    {
        let width = this.canvas.width;
        let height = this.canvas.height;
        if (window.devicePixelRatio) {
            width /= window.devicePixelRatio;
            height /= window.devicePixelRatio;
        }
        return {
            width : width,
            height : height
        };
    }

    GetImageAsDataUrl (width, height, isTransparent)
    {
        let originalSize = this.GetImageSize ();
        let renderWidth = width;
        let renderHeight = height;
        if (window.devicePixelRatio) {
            renderWidth /= window.devicePixelRatio;
            renderHeight /= window.devicePixelRatio;
        }
        let clearAlpha = this.renderer.getClearAlpha ();
        if (isTransparent) {
            this.renderer.setClearAlpha (0.0);
        }
        this.ResizeRenderer (renderWidth, renderHeight);
        this.Render ();
        let url = this.renderer.domElement.toDataURL ();
        this.ResizeRenderer (originalSize.width, originalSize.height);
        this.renderer.setClearAlpha (clearAlpha);
        return url;
    }

    Destroy ()
    {
        this.Clear ();
        this.renderer.dispose ();
    }
}

/**
 * This is the main object for embedding the viewer on a website.
 */
class EmbeddedViewer
{
    /**
     * @param {HTMLElement} parentElement The parent element for the viewer canvas. It must be an
     * existing DOM element and it will be the container for the canvas. The size of the viewer will
     * be automatically adjusted to the size of the parent element.
     * @param {object} parameters Parameters for embedding.
     * @param {Camera} [parameters.camera] Camera to use. If not specified, the default camera will
     * be used and the model will be fitted to the window.
     * @param {CameraMode} [parameters.cameraMode] Camera projection mode.
     * @param {RGBAColor} [parameters.backgroundColor] Background color of the canvas.
     * @param {RGBColor} [parameters.defaultColor] Default color of the model. It has effect only
     * if the imported model doesn't specify any color.
     * @param {EdgeSettings} [parameters.edgeSettings] Edge settings.
     * @param {EnvironmentSettings} [parameters.environmentSettings] Environment settings.
     * @param {function} [parameters.onModelLoaded] Callback that is called when the model with all
     * of the textures is fully loaded.
    */
    constructor (parentElement, parameters)
    {
        this.parentElement = parentElement;
        this.parameters = {};
        if (IsDefined (parameters)) {
            this.parameters = parameters;
        }

      this.viewer = new Viewer ();

      if (IsDefined(parameters.context)) {
        this.canvas = {
          width: 1024,
          height: 768,
          style: {
            width: 1024,
            height: 768,
          }
        };
        this.viewer.InitWithCtx(parameters.context);
      } else {
        this.canvas = document.createElement ('canvas');
        this.parentElement.appendChild (this.canvas);
        this.viewer.Init (this.canvas);
      }
        let width = this.parentElement.clientWidth;
        let height = this.parentElement.clientHeight;
        this.viewer.Resize (width, height);

        if (this.parameters.cameraMode) {
            this.viewer.SetCameraMode (this.parameters.cameraMode);
        }

        if (this.parameters.backgroundColor) {
            this.viewer.SetBackgroundColor (this.parameters.backgroundColor);
        }

        if (this.parameters.edgeSettings) {
            this.viewer.SetEdgeSettings (this.parameters.edgeSettings);
        }

        if (this.parameters.environmentSettings) {
            this.viewer.SetEnvironmentMapSettings (this.parameters.environmentSettings);
        }

        this.model = null;
        this.modelLoader = new ThreeModelLoader ();

        window.addEventListener ('resize', () => {
            this.Resize ();
        });
    }

    /**
     * Loads the model based on a list of urls. The list must contain the main model file and all
     * of the referenced files. For example in case of an obj file the list must contain the
     * corresponding mtl and texture files, too.
     * @param {string[]} modelUrls Url list of model files.
     */
    LoadModelFromUrlList (modelUrls)
    {
        TransformFileHostUrls (modelUrls);
      let inputFiles = InputFilesFromUrls (modelUrls);
      console.log('inputFiles', inputFiles);
        this.LoadModelFromInputFiles (inputFiles);
    }

    /**
     * Loads the model based on a list of {@link File} objects. The list must contain the main model
     * file and all of the referenced files. You must use this method when you are using a file picker
     * or drag and drop to select files from a computer.
     * @param {File[]} fileList File object list of model files.
     */
    LoadModelFromFileList (fileList)
    {
        let inputFiles = InputFilesFromFileObjects (fileList);
        this.LoadModelFromInputFiles (inputFiles);
    }

    /**
     * Loads the model based on a list of {@link InputFile} objects. This method is used
     * internally, you should use LoadModelFromUrlList or LoadModelFromFileList instead.
     * @param {InputFile[]} inputFiles List of model files.
     */
    LoadModelFromInputFiles (inputFiles)
    {
        if (inputFiles === null || inputFiles.length === 0) {
            return;
        }

        this.viewer.Clear ();
        let settings = new ImportSettings ();
        if (this.parameters.defaultColor) {
            settings.defaultColor = this.parameters.defaultColor;
        }

        this.model = null;
      // let progressDiv = null;
        this.modelLoader.LoadModel (inputFiles, settings, {
            onLoadStart : () => {
              this.canvas.style.display = 'none';
              // progressDiv = document.createElement ('div');
              // progressDiv.innerHTML = 'Loading model...';
              console.log('Loading model...');
              // this.parentElement.appendChild (progressDiv);
            },
            onFileListProgress : (current, total) => {
            },
            onFileLoadProgress : (current, total) => {
            },
            onImportStart : () => {
              // progressDiv.innerHTML = 'Importing model...';
              console.log('Importing model...');
            },
            onVisualizationStart : () => {
              // progressDiv.innerHTML = 'Visualizing model...';
              console.log('Visualizing model...');
            },
            onModelFinished : (importResult, threeObject) => {
              // this.parentElement.removeChild (progressDiv);
              this.canvas.style.display = 'inherit';
              this.viewer.SetMainObject (threeObject);
              let boundingSphere = this.viewer.GetBoundingSphere ((meshUserData) => {
                return true;
              });
              this.viewer.AdjustClippingPlanesToSphere (boundingSphere);
              if (this.parameters.camera) {
                this.viewer.SetCamera (this.parameters.camera);
              } else {
                this.viewer.SetUpVector (Direction.Y, false);
                this.viewer.FitSphereToWindow (boundingSphere, false);
              }

              this.model = importResult.model;
              if (this.parameters.onModelLoaded) {
                this.parameters.onModelLoaded ();
              }
            },
            onTextureLoaded : () => {
                this.viewer.Render ();
            },
            onLoadError : (importError) => {
                let message = 'Unknown error.';
                if (importError.code === ImportErrorCode.NoImportableFile) {
                    message = 'No importable file found.';
                } else if (importError.code === ImportErrorCode.FailedToLoadFile) {
                    message = 'Failed to load file for import.';
                } else if (importError.code === ImportErrorCode.ImportFailed) {
                    message = 'Failed to import model.';
                }
                if (importError.message !== null) {
                    message += ' (' + importError.message + ')';
                }
              // progressDiv.innerHTML = message;
              console.trace(message);
            }
        });
    }

    /**
     * Returns the underlying Viewer object.
     * @returns {Viewer}
     */
    GetViewer ()
    {
        return this.viewer;
    }

    /**
     * Returns the underlying Model object.
     * @returns {Model}
     */
    GetModel ()
    {
        return this.model;
    }

    /**
     * This method must be called when the size of the parent element changes to make sure that the
     * context has the same dimensions as the parent element.
     */
    Resize ()
    {
        let width = this.parentElement.clientWidth;
        let height = this.parentElement.clientHeight;
        this.viewer.Resize (width, height);
    }

    /**
     * Frees up all the memory that is allocated by the viewer. You should call this function if
     * yo don't need the viewer anymore.
     */
    Destroy ()
    {
        this.modelLoader.Destroy ();
        this.viewer.Destroy ();
        this.model = null;
    }
}

/**
 * Loads the model specified by urls.
 * @param {HTMLElement} parentElement The parent element for the viewer canvas.
 * @param {string[]} modelUrls Url list of model files.
 * @param {object} parameters See {@link EmbeddedViewer} constructor for details.
 * @returns {EmbeddedViewer}
 */
function Init3DViewerFromUrlList (parentElement, modelUrls, parameters)
{
    let viewer = new EmbeddedViewer (parentElement, parameters);
    viewer.LoadModelFromUrlList (modelUrls);
    return viewer;
}

/**
 * Loads the model specified by File objects.
 * @param {HTMLElement} parentElement The parent element for the viewer canvas.
 * @param {File[]} models File object list of model files.
 * @param {object} parameters See {@link EmbeddedViewer} constructor for details.
 * @returns {EmbeddedViewer}
 */
function Init3DViewerFromFileList (parentElement, models, parameters)
{
    let viewer = new EmbeddedViewer (parentElement, parameters);
    viewer.LoadModelFromFileList (models);
    return viewer;
}

/**
 * Loads all the models on the page. This function looks for all the elements with online_3d_viewer
 * class name, and loads the model according to the tag's parameters. It must be called after the
 * document is loaded.
 * @returns {EmbeddedViewer[]} Array of the created {@link EmbeddedViewer} objects.
 */
function Init3DViewerElements (onReady)
{
    function LoadElement (element)
    {
        let camera = null;
        let cameraParams = element.getAttribute ('camera');
        if (cameraParams) {
            camera = ParameterConverter.StringToCamera (cameraParams);
        }

        let cameraMode = null;
        let cameraModeParams = element.getAttribute ('cameramode');
        if (cameraModeParams) {
            cameraMode = ParameterConverter.StringToCameraMode (cameraModeParams);
        }

        let backgroundColor = null;
        let backgroundColorParams = element.getAttribute ('backgroundcolor');
        if (backgroundColorParams) {
            backgroundColor = ParameterConverter.StringToRGBAColor (backgroundColorParams);
        }

        let defaultColor = null;
        let defaultColorParams = element.getAttribute ('defaultcolor');
        if (defaultColorParams) {
            defaultColor = ParameterConverter.StringToRGBColor (defaultColorParams);
        }

        let edgeSettings = null;
        let edgeSettingsParams = element.getAttribute ('edgesettings');
        if (edgeSettingsParams) {
            edgeSettings = ParameterConverter.StringToEdgeSettings (edgeSettingsParams);
        }

        let environmentSettings = null;
        let environmentMapParams = element.getAttribute ('environmentmap');
        if (environmentMapParams) {
            let environmentMapParts = environmentMapParams.split (',');
            if (environmentMapParts.length === 6) {
                let backgroundIsEnvMap = false;
                let backgroundIsEnvMapParam = element.getAttribute ('environmentmapbg');
                if (backgroundIsEnvMapParam && backgroundIsEnvMapParam === 'true') {
                    backgroundIsEnvMap = true;
                }
                environmentSettings = new EnvironmentSettings (environmentMapParts, backgroundIsEnvMap);
            }
        }

        let modelUrls = null;
        let modelParams = element.getAttribute ('model');
        if (modelParams) {
            modelUrls = ParameterConverter.StringToModelUrls (modelParams);
        }

        return Init3DViewerFromUrlList (element, modelUrls, {
            camera : camera,
            cameraMode : cameraMode,
            backgroundColor : backgroundColor,
            defaultColor : defaultColor,
            edgeSettings : edgeSettings,
            environmentSettings : environmentSettings
        });
    }

    let viewerElements = [];
    let elements = document.getElementsByClassName ('online_3d_viewer');
    for (let i = 0; i < elements.length; i++) {
        let element = elements[i];
        let viewerElement = LoadElement (element);
        viewerElements.push (viewerElement);
    }
    return viewerElements;
}

export { AddCoord2D, AddCoord3D, AddDiv, AddDomElement, ArrayBufferToAsciiString, ArrayBufferToUtf8String, ArrayToCoord3D, ArrayToQuaternion, ArrayToRGBColor, AsciiStringToArrayBuffer, Base64DataURIToArrayBuffer, BezierTweenFunction, BigEps, BinaryReader, BinaryWriter, BoundingBoxCalculator3D, Box3D, CalculateSurfaceArea, CalculateTriangleNormal, CalculateVolume, Camera, CameraIsEqual3D, CameraMode, CameraValidator, CheckModel, ClearDomElement, ClickDetector, ColorComponentFromFloat, ColorComponentToFloat, ColorToMaterialConverter, ConvertColorToThreeColor, ConvertMeshToMeshBuffer, ConvertModelToThreeObject, ConvertThreeColorToColor, ConvertThreeGeometryToMesh, Coord2D, Coord3D, Coord4D, CoordDistance2D, CoordDistance3D, CoordIsEqual2D, CoordIsEqual3D, CopyObjectAttributes, CreateDiv, CreateDomElement, CreateModelUrlParameters, CreateObjectUrl, CreateObjectUrlWithMimeType, CreateUrlBuilder, CreateUrlParser, CrossVector3D, DegRad, Direction, DisposeThreeObjects, DotVector3D, EdgeSettings, EmbeddedViewer, EnvironmentSettings, Eps, EscapeHtmlChars, EventNotifier, ExportedFile, Exporter, Exporter3dm, ExporterBase, ExporterBim, ExporterGltf, ExporterModel, ExporterObj, ExporterOff, ExporterPly, ExporterSettings, ExporterStl, FaceMaterial, FileFormat, FileSource, FinalizeModel, FlipMeshTrianglesOrientation, GenerateCone, GenerateCuboid, GenerateCylinder, GeneratePlatonicSolid, GenerateSphere, Generator, GeneratorHelper, GeneratorParams, GetBoundingBox, GetDefaultCamera, GetDomElementClientCoordinates, GetDomElementExternalHeight, GetDomElementExternalWidth, GetDomElementInnerDimensions, GetDomElementOuterHeight, GetDomElementOuterWidth, GetExternalLibPath, GetFileExtension, GetFileExtensionFromMimeType, GetFileName, GetIntegerFromStyle, GetMeshType, GetShadingType, GetShadingTypeOfObject, GetTetrahedronSignedVolume, GetTopology, GetTriangleArea, HasDefaultMaterial, HasHighpDriverIssue, HexStringToRGBAColor, HexStringToRGBColor, ImportError, ImportErrorCode, ImportResult, ImportSettings, Importer, Importer3dm, Importer3ds, ImporterBase, ImporterBim, ImporterFcstd, ImporterFile, ImporterFileAccessor, ImporterFileList, ImporterGltf, ImporterIfc, ImporterObj, ImporterOcct, ImporterOff, ImporterPly, ImporterStl, ImporterThree3mf, ImporterThreeAmf, ImporterThreeBase, ImporterThreeDae, ImporterThreeFbx, ImporterThreeSvg, ImporterThreeWrl, Init3DViewerElements, Init3DViewerFromFileList, Init3DViewerFromUrlList, InputFile, InputFilesFromFileObjects, InputFilesFromUrls, InsertDomElementAfter, InsertDomElementBefore, IntegerToHexString, IsDefined, IsDomElementVisible, IsEqual, IsEqualEps, IsGreater, IsGreaterOrEqual, IsLower, IsLowerOrEqual, IsModelEmpty, IsNegative, IsObjectEmpty, IsPositive, IsPowerOfTwo, IsTwoManifold, IsUrl, IsZero, LinearToSRGB, LinearTweenFunction, LoadExternalLibrary, MaterialBase, MaterialType, Matrix, MatrixIsEqual, Mesh, MeshBuffer, MeshInstance, MeshInstanceId, MeshPrimitiveBuffer, MeshType, Model, ModelObject3D, ModelToThreeConversionOutput, ModelToThreeConversionParams, MouseInteraction, NameFromLine, Navigation, NavigationType, NextPowerOfTwo, Node, Object3D, Octree, OctreeNode, ParabolicTweenFunction, ParameterConverter, ParameterListBuilder, ParameterListParser, ParametersFromLine, PhongMaterial, PhysicalMaterial, Property, PropertyGroup, PropertyToString, PropertyType, Quaternion, QuaternionFromAxisAngle, QuaternionFromXYZ, QuaternionIsEqual, RGBAColor, RGBAColorToHexString, RGBColor, RGBColorFromFloatComponents, RGBColorIsEqual, RGBColorToHexString, RadDeg, ReadFile, ReadLines, ReplaceDefaultMaterialColor, RequestUrl, RevokeObjectUrl, RunTaskAsync, RunTasks, RunTasksBatch, SRGBToLinear, SetDomElementHeight, SetDomElementOuterHeight, SetDomElementOuterWidth, SetDomElementWidth, SetExternalLibLocation, SetThreeMeshPolygonOffset, ShadingModel, ShadingType, ShowDomElement, SubCoord2D, SubCoord3D, TaskRunner, TextWriter, TextureIsEqual, TextureMap, TextureMapIsEqual, ThreeColorConverter, ThreeConversionStateHandler, ThreeLinearToSRGBColorConverter, ThreeModelLoader, ThreeNodeTree, ThreeSRGBToLinearColorConverter, Topology, TopologyEdge, TopologyTriangle, TopologyTriangleEdge, TopologyVertex, TouchInteraction, TransformFileHostUrls, TransformMesh, Transformation, TransformationIsEqual, TraverseThreeObject, Triangle, TweenCoord3D, UpVector, UpdateMaterialTransparency, Utf8StringToArrayBuffer, ValueOrDefault, VectorAngle3D, VectorLength3D, Viewer, ViewerMainModel, ViewerModel, WaitWhile };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibzNkdi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9lbmdpbmUvY29yZS9jb3JlLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9jb3JlL2V2ZW50bm90aWZpZXIuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2NvcmUvdGFza3J1bm5lci5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW8vZXh0ZXJuYWxsaWJzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2ZpbGVyZWFkZXIvRmlsZVJlYWRlci5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW8vZmlsZXV0aWxzLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9nZW9tZXRyeS9nZW9tZXRyeS5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZ2VvbWV0cnkvY29vcmQyZC5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvbW9kZWwvY29sb3IuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL21hdGVyaWFsLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9nZW9tZXRyeS9jb29yZDNkLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9tZXNoYnVmZmVyLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pby9idWZmZXJ1dGlscy5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZXhwb3J0L2V4cG9ydGVyYmFzZS5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZXhwb3J0L2V4cG9ydGVyM2RtLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9wcm9wZXJ0eS5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZXhwb3J0L2V4cG9ydGVyYmltLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pby9iaW5hcnl3cml0ZXIuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2dlb21ldHJ5L2Nvb3JkNGQuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2dlb21ldHJ5L3F1YXRlcm5pb24uanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2dlb21ldHJ5L21hdHJpeC5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZ2VvbWV0cnkvdHJhbnNmb3JtYXRpb24uanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL21lc2h1dGlscy5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvbW9kZWwvb2JqZWN0LmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9tZXNoaW5zdGFuY2UuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2V4cG9ydC9leHBvcnRlcmdsdGYuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2V4cG9ydC9leHBvcnRlcm1vZGVsLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pby90ZXh0d3JpdGVyLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9leHBvcnQvZXhwb3J0ZXJvYmouanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2V4cG9ydC9leHBvcnRlcm9mZi5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZXhwb3J0L2V4cG9ydGVycGx5LmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9leHBvcnQvZXhwb3J0ZXJzdGwuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2V4cG9ydC9leHBvcnRlci5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZ2VvbWV0cnkvYm94M2QuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2dlb21ldHJ5L29jdHJlZS5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvZ2VvbWV0cnkvdHdlZW4uanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcmZpbGVzLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9ub2RlLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9tb2RlbC5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvbW9kZWwvdG9wb2xvZ3kuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL21vZGVsdXRpbHMuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL21lc2guanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL3RyaWFuZ2xlLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS90aHJlZWpzL3RocmVldXRpbHMuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL21vZGVsL21vZGVsZmluYWxpemF0aW9uLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXJiYXNlLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXJ1dGlscy5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW1wb3J0L2ltcG9ydGVyM2RtLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pby9iaW5hcnlyZWFkZXIuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcjNkcy5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW1wb3J0L2ltcG9ydGVyZ2x0Zi5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW1wb3J0L2ltcG9ydGVyaWZjLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXJvYmouanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcm9mZi5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW1wb3J0L2ltcG9ydGVycGx5LmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXJvY2N0LmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXJzdGwuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcmJpbS5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvaW1wb3J0L2ltcG9ydGVydGhyZWUuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcmZjc3RkLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9pbXBvcnQvaW1wb3J0ZXIuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL2ltcG9ydC9pbXBvcnRlcnN2Zy5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvbW9kZWwvZ2VuZXJhdG9yLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS9tb2RlbC9xdWFudGl0aWVzLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvY2FtZXJhLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvdmlld2VybW9kZWwuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL3BhcmFtZXRlcnMvcGFyYW1ldGVybGlzdC5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvdGhyZWVqcy90aHJlZWNvbnZlcnRlci5qcyIsIi4uLy4uL3NvdXJjZS9lbmdpbmUvdGhyZWVqcy90aHJlZW1vZGVsbG9hZGVyLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvZG9tdXRpbHMuanMiLCIuLi8uLi9zb3VyY2UvZW5naW5lL3ZpZXdlci9uYXZpZ2F0aW9uLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvc2hhZGluZ21vZGVsLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvdmlld2VyLmpzIiwiLi4vLi4vc291cmNlL2VuZ2luZS92aWV3ZXIvZW1iZWRkZWR2aWV3ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIElzRGVmaW5lZCAodmFsKVxue1xuICAgIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBWYWx1ZU9yRGVmYXVsdCAodmFsLCBkZWYpXG57XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29weU9iamVjdEF0dHJpYnV0ZXMgKHNyYywgZGVzdClcbntcbiAgICBpZiAoIUlzRGVmaW5lZCAoc3JjKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiBPYmplY3Qua2V5cyAoc3JjKSkge1xuICAgICAgICBpZiAoSXNEZWZpbmVkIChzcmNbYXR0cmlidXRlXSkpIHtcbiAgICAgICAgICAgIGRlc3RbYXR0cmlidXRlXSA9IHNyY1thdHRyaWJ1dGVdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNPYmplY3RFbXB0eSAob2JqKVxue1xuICAgIHJldHVybiBPYmplY3Qua2V5cyAob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFc2NhcGVIdG1sQ2hhcnMgKHN0cilcbntcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UgKC88L2csICcmbHQ7JykucmVwbGFjZSAoLz4vZywgJyZndDsnKTtcbn1cbiIsImV4cG9ydCBjbGFzcyBFdmVudE5vdGlmaWVyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwICgpO1xuICAgIH1cblxuICAgIEFkZEV2ZW50TGlzdGVuZXIgKGV2ZW50SWQsIGxpc3RlbmVyKVxuICAgIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50TGlzdGVuZXJzLmhhcyAoZXZlbnRJZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0IChldmVudElkLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0IChldmVudElkKTtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2ggKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBIYXNFdmVudExpc3RlbmVyIChldmVudElkKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lcnMuaGFzIChldmVudElkKTtcbiAgICB9XG5cbiAgICBHZXRFdmVudE5vdGlmaWVyIChldmVudElkKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuTm90aWZ5RXZlbnRMaXN0ZW5lcnMgKGV2ZW50SWQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIE5vdGlmeUV2ZW50TGlzdGVuZXJzIChldmVudElkLCAuLi5hcmdzKVxuICAgIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50TGlzdGVuZXJzLmhhcyAoZXZlbnRJZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQgKGV2ZW50SWQpO1xuICAgICAgICBmb3IgKGxldCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyICguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBUYXNrUnVubmVyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuY291bnQgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IG51bGw7XG4gICAgfVxuXG4gICAgUnVuIChjb3VudCwgY2FsbGJhY2tzKVxuICAgIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSAwO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLlRhc2tSZWFkeSAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuUnVuT25jZSAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFJ1bkJhdGNoIChjb3VudCwgYmF0Y2hDb3VudCwgY2FsbGJhY2tzKVxuICAgIHtcbiAgICAgICAgbGV0IHN0ZXBDb3VudCA9IDA7XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgIHN0ZXBDb3VudCA9IHBhcnNlSW50ICgoY291bnQgLSAxKSAvIGJhdGNoQ291bnQsIDEwKSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5SdW4gKHN0ZXBDb3VudCwge1xuICAgICAgICAgICAgcnVuVGFzayA6IChpbmRleCwgcmVhZHkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEluZGV4ID0gaW5kZXggKiBiYXRjaENvdW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IE1hdGgubWluICgoaW5kZXggKyAxKSAqIGJhdGNoQ291bnQsIGNvdW50KSAtIDE7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnJ1blRhc2sgKGZpcnN0SW5kZXgsIGxhc3RJbmRleCwgcmVhZHkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVhZHkgOiBjYWxsYmFja3Mub25SZWFkeVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBSdW5PbmNlICgpXG4gICAge1xuICAgICAgICBzZXRUaW1lb3V0ICgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5ydW5UYXNrICh0aGlzLmN1cnJlbnQsIHRoaXMuVGFza1JlYWR5LmJpbmQgKHRoaXMpKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgVGFza1JlYWR5ICgpXG4gICAge1xuICAgICAgICB0aGlzLmN1cnJlbnQgKz0gMTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCA8IHRoaXMuY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuUnVuT25jZSAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5vblJlYWR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Mub25SZWFkeSAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJ1blRhc2tBc3luYyAodGFzaylcbntcbiAgICBzZXRUaW1lb3V0ICgoKSA9PiB7XG4gICAgICAgIHRhc2sgKCk7XG4gICAgfSwgMTApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUnVuVGFza3MgKGNvdW50LCBjYWxsYmFja3MpXG57XG4gICAgbGV0IHRhc2tSdW5uZXIgPSBuZXcgVGFza1J1bm5lciAoKTtcbiAgICB0YXNrUnVubmVyLlJ1biAoY291bnQsIGNhbGxiYWNrcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSdW5UYXNrc0JhdGNoIChjb3VudCwgYmF0Y2hDb3VudCwgY2FsbGJhY2tzKVxue1xuICAgIGxldCB0YXNrUnVubmVyID0gbmV3IFRhc2tSdW5uZXIgKCk7XG4gICAgdGFza1J1bm5lci5SdW5CYXRjaCAoY291bnQsIGJhdGNoQ291bnQsIGNhbGxiYWNrcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXYWl0V2hpbGUgKGV4cHJlc3Npb24pXG57XG4gICAgZnVuY3Rpb24gV2FpdGVyIChleHByZXNzaW9uKVxuICAgIHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gKCkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQgKCgpID0+IHtcbiAgICAgICAgICAgICAgICBXYWl0ZXIgKGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFdhaXRlciAoZXhwcmVzc2lvbik7XG59XG4iLCJsZXQgZXh0ZXJuYWxMaWJMb2NhdGlvbiA9IG51bGw7XG5sZXQgbG9hZGVkRXh0ZXJuYWxMaWJzID0gbmV3IFNldCAoKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZXh0ZXJuYWwgbGlicmFyaWVzIHVzZWQgYnkgdGhlIGVuZ2luZS4gVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgbGlic1xuICogZm9sZGVyIGluIHRoZSBwYWNrYWdlLiBUaGUgbG9jYXRpb24gbXVzdCBiZSByZWxhdGl2ZSB0byB0aGUgbWFpbiBmaWxlLlxuICogQHBhcmFtIHtzdHJpbmd9IG5ld0V4dGVybmFsTGliTG9jYXRpb24gUmVsYXRpdmUgcGF0aCB0byB0aGUgbGlicyBmb2xkZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTZXRFeHRlcm5hbExpYkxvY2F0aW9uIChuZXdFeHRlcm5hbExpYkxvY2F0aW9uKVxue1xuICAgIGV4dGVybmFsTGliTG9jYXRpb24gPSBuZXdFeHRlcm5hbExpYkxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0RXh0ZXJuYWxMaWJQYXRoIChsaWJOYW1lKVxue1xuICAgIGlmIChleHRlcm5hbExpYkxvY2F0aW9uID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZXJuYWxMaWJMb2NhdGlvbiArICcvJyArIGxpYk5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMb2FkRXh0ZXJuYWxMaWJyYXJ5IChsaWJOYW1lKVxue1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoZXh0ZXJuYWxMaWJMb2NhdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmVqZWN0ICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvYWRlZEV4dGVybmFsTGlicy5oYXMgKGxpYk5hbWUpKSB7XG4gICAgICAgICAgICByZXNvbHZlICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdEVsZW1lbnQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICBzY3JpcHRFbGVtZW50LnNyYyA9IEdldEV4dGVybmFsTGliUGF0aCAobGliTmFtZSk7XG4gICAgICAgIHNjcmlwdEVsZW1lbnQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9hZGVkRXh0ZXJuYWxMaWJzLmFkZCAobGliTmFtZSk7XG4gICAgICAgICAgICByZXNvbHZlICgpO1xuICAgICAgICB9O1xuICAgICAgICBzY3JpcHRFbGVtZW50Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QgKCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQgKHNjcmlwdEVsZW1lbnQpO1xuICAgIH0pO1xufVxuIiwiLy9cbi8vIEZpbGVSZWFkZXJcbi8vXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9GaWxlQVBJLyNkZm4tZmlsZXJlYWRlclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL0ZpbGVSZWFkZXJcbihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKVxuICAgICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKS5FdmVudEVtaXR0ZXJcbiAgICA7XG5cbiAgZnVuY3Rpb24gZG9vcChmbiwgYXJncywgY29udGV4dCkge1xuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm4pIHtcbiAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvRGF0YVVybChkYXRhLCB0eXBlKSB7XG4gICAgLy8gdmFyIGRhdGEgPSBzZWxmLnJlc3VsdDtcbiAgICB2YXIgZGF0YVVybCA9ICdkYXRhOic7XG5cbiAgICBpZiAodHlwZSkge1xuICAgICAgZGF0YVVybCArPSB0eXBlICsgJzsnO1xuICAgIH1cblxuICAgIGlmICgvdGV4dC9pLnRlc3QodHlwZSkpIHtcbiAgICAgIGRhdGFVcmwgKz0gJ2NoYXJzZXQ9dXRmLTgsJztcbiAgICAgIGRhdGFVcmwgKz0gZGF0YS50b1N0cmluZygndXRmOCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhVXJsICs9ICdiYXNlNjQsJztcbiAgICAgIGRhdGFVcmwgKz0gZGF0YS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGFVcmw7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBEYXRhVG9Gb3JtYXQoZmlsZSwgZGF0YSwgZm9ybWF0LCBlbmNvZGluZykge1xuICAgIC8vIHZhciBkYXRhID0gc2VsZi5yZXN1bHQ7XG5cbiAgICBzd2l0Y2goZm9ybWF0KSB7XG4gICAgICBjYXNlICdidWZmZXInOlxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gZGF0YS50b1N0cmluZygnYmluYXJ5Jyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF0YVVybCc6XG4gICAgICAgIHJldHVybiB0b0RhdGFVcmwoZGF0YSwgZmlsZS50eXBlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gRmlsZVJlYWRlcigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcixcbiAgICAgIGZpbGU7XG5cbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAob24sIGNhbGxiYWNrKSB7XG4gICAgICBlbWl0dGVyLm9uKG9uLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoY2FsbGJhY2spO1xuICAgIH1cbiAgICBzZWxmLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAob24pIHtcbiAgICAgIGVtaXR0ZXIuZW1pdChvbik7XG4gICAgfVxuXG4gICAgc2VsZi5FTVBUWSA9IDA7XG4gICAgc2VsZi5MT0FESU5HID0gMTtcbiAgICBzZWxmLkRPTkUgPSAyO1xuXG4gICAgc2VsZi5lcnJvciA9IHVuZGVmaW5lZDsgICAgICAgICAvLyBSZWFkIG9ubHlcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSBzZWxmLkVNUFRZOyAgIC8vIFJlYWQgb25seVxuICAgIHNlbGYucmVzdWx0ID0gdW5kZWZpbmVkOyAgICAgICAgLy8gUm9hZCBvbmx5XG5cbiAgICAvLyBub24tc3RhbmRhcmRcbiAgICBzZWxmLm9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgZW1pdHRlci5vbi5hcHBseShlbWl0dGVyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBzZWxmLm5vZGVDaHVua2VkRW5jb2RpbmcgPSBmYWxzZTtcbiAgICBzZWxmLnNldE5vZGVDaHVua2VkRW5jb2RpbmcgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBzZWxmLm5vZGVDaHVua2VkRW5jb2RpbmcgPSB2YWw7XG4gICAgfTtcbiAgICAvLyBlbmQgbm9uLXN0YW5kYXJkXG5cblxuXG4gICAgLy8gV2hhdGV2ZXIgdGhlIGZpbGUgb2JqZWN0IGlzLCB0dXJuIGl0IGludG8gYSBOb2RlLkpTIEZpbGUuU3RyZWFtXG4gICAgZnVuY3Rpb24gY3JlYXRlRmlsZVN0cmVhbSgpIHtcbiAgICAgIHZhciBzdHJlYW0gPSBuZXcgRXZlbnRFbWl0dGVyKCksXG4gICAgICAgIGNodW5rZWQgPSBzZWxmLm5vZGVDaHVua2VkRW5jb2Rpbmc7XG5cbiAgICAgIC8vIGF0dGVtcHQgdG8gbWFrZSB0aGUgbGVuZ3RoIGNvbXB1dGFibGVcbiAgICAgIGlmICghZmlsZS5zaXplICYmIGNodW5rZWQgJiYgZmlsZS5wYXRoKSB7XG4gICAgICAgIGZzLnN0YXQoZmlsZS5wYXRoLCBmdW5jdGlvbiAoZXJyLCBzdGF0KSB7XG4gICAgICAgICAgZmlsZS5zaXplID0gc3RhdC5zaXplO1xuICAgICAgICAgIGZpbGUubGFzdE1vZGlmaWVkRGF0ZSA9IHN0YXQubXRpbWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG5cbiAgICAgIC8vIFRoZSBzdHJlYW0gZXhpc3RzLCBkbyBub3RoaW5nIG1vcmVcbiAgICAgIGlmIChmaWxlLnN0cmVhbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgLy8gQ3JlYXRlIGEgcmVhZCBzdHJlYW0gZnJvbSBhIGJ1ZmZlclxuICAgICAgaWYgKGZpbGUuYnVmZmVyKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgZmlsZS5idWZmZXIpO1xuICAgICAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbGUuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgLy8gQ3JlYXRlIGEgcmVhZCBzdHJlYW0gZnJvbSBhIGZpbGVcbiAgICAgIGlmIChmaWxlLnBhdGgpIHtcbiAgICAgICAgLy8gVE9ETyB1cmxcbiAgICAgICAgaWYgKCFjaHVua2VkKSB7XG4gICAgICAgICAgZnMucmVhZEZpbGUoZmlsZS5wYXRoLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGRhdGEpO1xuICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmaWxlLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPIGRvbid0IGR1cGxpY2F0ZSB0aGlzIGNvZGUgaGVyZSxcbiAgICAgICAgLy8gZXhwb3NlIGEgbWV0aG9kIGluIEZpbGUgaW5zdGVhZFxuICAgICAgICBmaWxlLnN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZS5wYXRoKTtcbiAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgLy8gYmVmb3JlIGFueSBvdGhlciBsaXN0ZW5lcnMgYXJlIGFkZGVkXG4gICAgZW1pdHRlci5vbignYWJvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLnJlYWR5U3RhdGUgPSBzZWxmLkRPTkU7XG4gICAgfSk7XG5cblxuXG4gICAgLy8gTWFwIGBlcnJvcmAsIGBwcm9ncmVzc2AsIGBsb2FkYCwgYW5kIGBsb2FkZW5kYFxuICAgIGZ1bmN0aW9uIG1hcFN0cmVhbVRvRW1pdHRlcihmb3JtYXQsIGVuY29kaW5nKSB7XG4gICAgICB2YXIgc3RyZWFtID0gZmlsZS5zdHJlYW0sXG4gICAgICAgIGJ1ZmZlcnMgPSBbXSxcbiAgICAgICAgY2h1bmtlZCA9IHNlbGYubm9kZUNodW5rZWRFbmNvZGluZztcblxuICAgICAgYnVmZmVycy5kYXRhTGVuZ3RoID0gMDtcblxuICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHNlbGYuRE9ORSA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWFkeVN0YXRlID0gc2VsZi5ET05FO1xuICAgICAgICBzZWxmLmVycm9yID0gZXJyO1xuICAgICAgICBlbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoc2VsZi5ET05FID09PSBzZWxmLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBidWZmZXJzLmRhdGFMZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcblxuICAgICAgICBlbWl0dGVyLmVtaXQoJ3Byb2dyZXNzJywge1xuICAgICAgICAgIC8vIGZzLnN0YXQgd2lsbCBwcm9iYWJseSBjb21wbGV0ZSBiZWZvcmUgdGhpc1xuICAgICAgICAgIC8vIGJ1dCBwb3NzaWJseSBpdCB3aWxsIG5vdCwgaGVuY2UgdGhlIGNoZWNrXG4gICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogKCFpc05hTihmaWxlLnNpemUpKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICBsb2FkZWQ6IGJ1ZmZlcnMuZGF0YUxlbmd0aCxcbiAgICAgICAgICB0b3RhbDogZmlsZS5zaXplXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZGF0YScsIGRhdGEpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5ET05FID09PSBzZWxmLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YTtcblxuICAgICAgICBpZiAoYnVmZmVycy5sZW5ndGggPiAxICkge1xuICAgICAgICAgIGRhdGEgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBidWZmZXJzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWFkeVN0YXRlID0gc2VsZi5ET05FO1xuICAgICAgICBzZWxmLnJlc3VsdCA9IG1hcERhdGFUb0Zvcm1hdChmaWxlLCBkYXRhLCBmb3JtYXQsIGVuY29kaW5nKTtcbiAgICAgICAgZW1pdHRlci5lbWl0KCdsb2FkJywge1xuICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgLy8gbm9uLXN0YW5kYXJkXG4gICAgICAgICAgICBub2RlQnVmZmVyUmVzdWx0OiBkYXRhLFxuICAgICAgICAgICAgcmVzdWx0OiBzZWxmLnJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW1pdHRlci5lbWl0KCdsb2FkZW5kJyk7XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIEFib3J0IGlzIG92ZXJ3cml0dGVuIGJ5IHJlYWRBc1h5elxuICAgIHNlbGYuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5yZWFkU3RhdGUgPT0gc2VsZi5ET05FKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGYucmVhZHlTdGF0ZSA9IHNlbGYuRE9ORTtcbiAgICAgIGVtaXR0ZXIuZW1pdCgnYWJvcnQnKTtcbiAgICB9O1xuXG5cblxuICAgIC8vIFxuICAgIGZ1bmN0aW9uIG1hcFVzZXJFdmVudHMoKSB7XG4gICAgICBlbWl0dGVyLm9uKCdzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9vcChzZWxmLm9ubG9hZHN0YXJ0LCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgICBlbWl0dGVyLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9vcChzZWxmLm9ucHJvZ3Jlc3MsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIGVtaXR0ZXIub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAvLyBUT0RPIHRyYW5zbGF0ZSB0byBGaWxlRXJyb3JcbiAgICAgICAgaWYgKHNlbGYub25lcnJvcikge1xuICAgICAgICAgIHNlbGYub25lcnJvcihlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghZW1pdHRlci5saXN0ZW5lcnMuZXJyb3IgfHwgIWVtaXR0ZXIubGlzdGVuZXJzLmVycm9yLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBlbWl0dGVyLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkb29wKHNlbGYub25sb2FkLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgICBlbWl0dGVyLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvb3Aoc2VsZi5vbmxvYWRlbmQsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIGVtaXR0ZXIub24oJ2Fib3J0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkb29wKHNlbGYub25hYm9ydCwgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBmdW5jdGlvbiByZWFkRmlsZShfZmlsZSwgZm9ybWF0LCBlbmNvZGluZykge1xuICAgICAgZmlsZSA9IF9maWxlO1xuICAgICAgY29uc29sZS5sb2coX2ZpbGUpXG4gICAgICBpZiAoIWZpbGUgfHwgIWZpbGUubmFtZSB8fCAhKGZpbGUucGF0aCB8fCBmaWxlLnN0cmVhbSB8fCBmaWxlLmJ1ZmZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IHJlYWQgYXMgRmlsZTogXCIgKyBKU09OLnN0cmluZ2lmeShmaWxlKSk7XG4gICAgICB9XG4gICAgICBpZiAoMCAhPT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYWxyZWFkeSBsb2FkaW5nLCByZXF1ZXN0IHRvIGNoYW5nZSBmb3JtYXQgaWdub3JlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyAncHJvY2Vzcy5uZXh0VGljaycgZG9lcyBub3QgZW5zdXJlIG9yZGVyLCAoaS5lLiBhbiBmcy5zdGF0IHF1ZXVlZCBsYXRlciBtYXkgcmV0dXJuIGZhc3RlcilcbiAgICAgIC8vIGJ1dCBgb25sb2Fkc3RhcnRgIG11c3QgY29tZSBiZWZvcmUgdGhlIGZpcnN0IGBkYXRhYCBldmVudCBhbmQgbXVzdCBiZSBhc3luY2hyb25vdXMuXG4gICAgICAvLyBIZW5jZSB3ZSB3YXN0ZSBhIHNpbmdsZSB0aWNrIHdhaXRpbmdcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnJlYWR5U3RhdGUgPSBzZWxmLkxPQURJTkc7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnbG9hZHN0YXJ0Jyk7XG4gICAgICAgIGNyZWF0ZUZpbGVTdHJlYW0oKTtcbiAgICAgICAgbWFwU3RyZWFtVG9FbWl0dGVyKGZvcm1hdCwgZW5jb2RpbmcpO1xuICAgICAgICBtYXBVc2VyRXZlbnRzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWxmLnJlYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHJlYWRGaWxlKGZpbGUsICdidWZmZXInKTtcbiAgICB9O1xuICAgIHNlbGYucmVhZEFzQmluYXJ5U3RyaW5nID0gZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHJlYWRGaWxlKGZpbGUsICdiaW5hcnknKTtcbiAgICB9O1xuICAgIHNlbGYucmVhZEFzRGF0YVVSTCA9IGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICByZWFkRmlsZShmaWxlLCAnZGF0YVVybCcpO1xuICAgIH07XG4gICAgc2VsZi5yZWFkQXNUZXh0ID0gZnVuY3Rpb24gKGZpbGUsIGVuY29kaW5nKSB7XG4gICAgICByZWFkRmlsZShmaWxlLCAndGV4dCcsIGVuY29kaW5nKTtcbiAgICB9O1xuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBGaWxlUmVhZGVyO1xufSgpKTtcbiIsImltcG9ydCBGaWxlUmVhZGVyIGZyb20gJ2ZpbGVyZWFkZXInO1xuXG5pZiAoIWdsb2JhbFRoaXMuRmlsZVJlYWRlcikge1xuICBnbG9iYWxUaGlzLkZpbGVSZWFkZXIgPSBGaWxlUmVhZGVyO1xufVxuXG5cbi8qKlxuICogRmlsZSBzb3VyY2UgaWRlbnRpZmllciBmb3IgaW1wb3J0LlxuICogQGVudW1cbiAqL1xuZXhwb3J0IGNvbnN0IEZpbGVTb3VyY2UgPVxue1xuXHQvKiogVGhlIGZpbGUgaXMgcHJvdmlkZWQgYnkgYSBVUkwuICovXG4gICAgVXJsIDogMSxcblx0LyoqIFRoZSBmaWxlIGlzIHByb3ZpZGVkIGJ5IGEge0BsaW5rIEZpbGV9IG9iamVjdC4gKi9cbiAgICBGaWxlIDogMixcblx0LyoqIFVzZWQgaW50ZXJuYWxseSBpZiBhIGZpbGUgaXMgb3JpZ2luYXRlZCBieSBhIGNvbXByZXNzZWQgYXJjaGl2ZS4gKi9cblx0RGVjb21wcmVzc2VkIDogM1xufTtcblxuZXhwb3J0IGNvbnN0IEZpbGVGb3JtYXQgPVxue1xuICAgIFRleHQgOiAxLFxuICAgIEJpbmFyeSA6IDJcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRGaWxlTmFtZSAoZmlsZVBhdGgpXG57XG5cdGxldCBmaWxlTmFtZSA9IGZpbGVQYXRoO1xuXG5cdGxldCBmaXJzdFBhcmFtSW5kZXggPSBmaWxlTmFtZS5pbmRleE9mICgnPycpO1xuXHRpZiAoZmlyc3RQYXJhbUluZGV4ICE9PSAtMSkge1xuXHRcdGZpbGVOYW1lID0gZmlsZU5hbWUuc3Vic3RyaW5nICgwLCBmaXJzdFBhcmFtSW5kZXgpO1xuXHR9XG5cblx0bGV0IGZpcnN0U2VwYXJhdG9yID0gZmlsZU5hbWUubGFzdEluZGV4T2YgKCcvJyk7XG5cdGlmIChmaXJzdFNlcGFyYXRvciA9PT0gLTEpIHtcblx0XHRmaXJzdFNlcGFyYXRvciA9IGZpbGVOYW1lLmxhc3RJbmRleE9mICgnXFxcXCcpO1xuXHR9XG5cdGlmIChmaXJzdFNlcGFyYXRvciAhPT0gLTEpIHtcblx0XHRmaWxlTmFtZSA9IGZpbGVOYW1lLnN1YnN0cmluZyAoZmlyc3RTZXBhcmF0b3IgKyAxKTtcblx0fVxuXG5cdHJldHVybiBkZWNvZGVVUkkgKGZpbGVOYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldEZpbGVFeHRlbnNpb24gKGZpbGVQYXRoKVxue1xuXHRsZXQgZmlsZU5hbWUgPSBHZXRGaWxlTmFtZSAoZmlsZVBhdGgpO1xuXHRsZXQgZmlyc3RQb2ludCA9IGZpbGVOYW1lLmxhc3RJbmRleE9mICgnLicpO1xuXHRpZiAoZmlyc3RQb2ludCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0bGV0IGV4dGVuc2lvbiA9IGZpbGVOYW1lLnN1YnN0cmluZyAoZmlyc3RQb2ludCArIDEpO1xuXHRyZXR1cm4gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlICgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdFVybCAodXJsLCBvblByb2dyZXNzKVxue1xuXHRyZXR1cm4gbmV3IFByb21pc2UgKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCAoKTtcblx0XHRyZXF1ZXN0Lm9wZW4gKCdHRVQnLCB1cmwsIHRydWUpO1xuXG5cdFx0cmVxdWVzdC5vbnByb2dyZXNzID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRvblByb2dyZXNzIChldmVudC5sb2FkZWQsIGV2ZW50LnRvdGFsKTtcblx0XHR9O1xuXG5cdFx0cmVxdWVzdC5vbmxvYWQgPSAoKSA9PiB7XG5cdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuXHRcdFx0XHRyZXNvbHZlIChyZXF1ZXN0LnJlc3BvbnNlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlamVjdCAoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuXHRcdFx0cmVqZWN0ICgpO1xuXHRcdH07XG5cblx0XHRyZXF1ZXN0LnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cdFx0cmVxdWVzdC5zZW5kIChudWxsKTtcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWFkRmlsZSAoZmlsZSwgb25Qcm9ncmVzcylcbntcblx0cmV0dXJuIG5ldyBQcm9taXNlICgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0bGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyICgpO1xuXG5cdFx0cmVhZGVyLm9ucHJvZ3Jlc3MgPSAoZXZlbnQpID0+IHtcblx0XHRcdG9uUHJvZ3Jlc3MgKGV2ZW50LmxvYWRlZCwgZXZlbnQudG90YWwpO1xuXHRcdH07XG5cblx0XHRyZWFkZXIub25sb2FkZW5kID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVhZEZpbGU6IG9ubG9hZGVuZCwgZ29pbmcgdG8gcmVzb2x2ZS4uLicpO1xuXHRcdFx0aWYgKGV2ZW50LnRhcmdldC5yZWFkeVN0YXRlID09PSBGaWxlUmVhZGVyLkRPTkUpIHtcblx0XHRcdFx0cmVzb2x2ZSAoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignUmVhZEZpbGU6IGVycm9yLi4uJyk7XG5cdFx0XHRyZWplY3QgKCk7XG5cdFx0fTtcblx0XHRyZWFkZXIuYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdSZWFkRmlsZTogYWJvcnQuLi4nKTtcblx0XHRcdHJlamVjdCAoKTtcblx0XHR9O1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWFkRmlsZTogcmVhZGluZyBmaWxlOicsIGZpbGUpO1xuXHRcdHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlciAoZmlsZSk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtRmlsZUhvc3RVcmxzICh1cmxzKVxue1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdXJsID0gdXJsc1tpXTtcbiAgICAgICAgaWYgKHVybC5zZWFyY2ggKC93d3dcXC5kcm9wYm94XFwuY29tL3UpICE9PSAtMSkge1xuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UgKCd3d3cuZHJvcGJveC5jb20nLCAnZGwuZHJvcGJveC5jb20nKTtcbiAgICAgICAgICAgIGxldCBzZXBhcmF0b3JQb3MgPSB1cmwuaW5kZXhPZiAoJz8nKTtcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gdXJsLnN1YnN0cmluZyAoMCwgc2VwYXJhdG9yUG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybHNbaV0gPSB1cmw7XG4gICAgICAgIH0gZWxzZSBpZiAodXJsLnNlYXJjaCAoL2dpdGh1YlxcLmNvbS91KSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlICgnZ2l0aHViLmNvbScsICdyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJyk7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSAoJy9ibG9iJywgJycpO1xuICAgICAgICAgICAgbGV0IHNlcGFyYXRvclBvcyA9IHVybC5pbmRleE9mICgnPycpO1xuICAgICAgICAgICAgaWYgKHNlcGFyYXRvclBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc3Vic3RyaW5nICgwLCBzZXBhcmF0b3JQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsc1tpXSA9IHVybDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzVXJsIChzdHIpXG57XG5cdGNvbnN0IHJlZ2V4ID0gL15odHRwcz86XFwvXFwvXFxTKyQvZztcblx0Y29uc3QgbWF0Y2ggPSBzdHIubWF0Y2ggKHJlZ2V4KTtcblx0cmV0dXJuIG1hdGNoICE9PSBudWxsO1xufVxuIiwiZXhwb3J0IGNvbnN0IEVwcyA9IDAuMDAwMDAwMDE7XG5leHBvcnQgY29uc3QgQmlnRXBzID0gMC4wMDAxO1xuZXhwb3J0IGNvbnN0IFJhZERlZyA9IDU3LjI5NTc3OTUxMzA4MjMyO1xuZXhwb3J0IGNvbnN0IERlZ1JhZCA9IDAuMDE3NDUzMjkyNTE5OTQzO1xuXG5leHBvcnQgZnVuY3Rpb24gSXNaZXJvIChhKVxue1xuXHRyZXR1cm4gTWF0aC5hYnMgKGEpIDwgRXBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNMb3dlciAoYSwgYilcbntcblx0cmV0dXJuIGIgLSBhID4gRXBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNHcmVhdGVyIChhLCBiKVxue1xuXHRyZXR1cm4gYSAtIGIgPiBFcHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJc0xvd2VyT3JFcXVhbCAoYSwgYilcbntcblx0cmV0dXJuIGIgLSBhID4gLUVwcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzR3JlYXRlck9yRXF1YWwgKGEsIGIpXG57XG5cdHJldHVybiBhIC0gYiA+IC1FcHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJc0VxdWFsIChhLCBiKVxue1xuXHRyZXR1cm4gTWF0aC5hYnMgKGIgLSBhKSA8IEVwcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzRXF1YWxFcHMgKGEsIGIsIGVwcylcbntcblx0cmV0dXJuIE1hdGguYWJzIChiIC0gYSkgPCBlcHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJc1Bvc2l0aXZlIChhKVxue1xuXHRyZXR1cm4gYSA+IEVwcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzTmVnYXRpdmUgKGEpXG57XG5cdHJldHVybiBhIDwgLUVwcztcbn1cblxuZXhwb3J0IGNvbnN0IERpcmVjdGlvbiA9XG57XG5cdFggOiAxLFxuXHRZIDogMixcblx0WiA6IDNcbn07XG4iLCJpbXBvcnQgeyBJc0VxdWFsIH0gZnJvbSAnLi9nZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDb29yZDJEXG57XG5cdGNvbnN0cnVjdG9yICh4LCB5KVxuXHR7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHR9XG5cblx0Q2xvbmUgKClcblx0e1xuXHRcdHJldHVybiBuZXcgQ29vcmQyRCAodGhpcy54LCB0aGlzLnkpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb29yZElzRXF1YWwyRCAoYSwgYilcbntcblx0cmV0dXJuIElzRXF1YWwgKGEueCwgYi54KSAmJiBJc0VxdWFsIChhLnksIGIueSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBZGRDb29yZDJEIChhLCBiKVxue1xuXHRyZXR1cm4gbmV3IENvb3JkMkQgKGEueCArIGIueCwgYS55ICsgYi55KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN1YkNvb3JkMkQgKGEsIGIpXG57XG5cdHJldHVybiBuZXcgQ29vcmQyRCAoYS54IC0gYi54LCBhLnkgLSBiLnkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29vcmREaXN0YW5jZTJEIChhLCBiKVxue1xuXHRyZXR1cm4gTWF0aC5zcXJ0ICgoYS54IC0gYi54KSAqIChhLnggLSBiLngpICsgKGEueSAtIGIueSkgKiAoYS55IC0gYi55KSk7XG59XG4iLCIvKipcbiAqIFJHQiBjb2xvciBvYmplY3QuIENvbXBvbmVudHMgYXJlIGludGVnZXJzIGluIHRoZSByYW5nZSBvZiAwLi4yNTUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSR0JDb2xvclxue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gciBSZWQgY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gZyBHcmVlbiBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSBiIEJsdWUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChyLCBnLCBiKVxuICAgIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiBhbGwgY29tcG9uZW50cy5cbiAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IHIgUmVkIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IGcgR3JlZW4gY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gYiBCbHVlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBTZXQgKHIsIGcsIGIpXG4gICAge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtSR0JDb2xvcn1cbiAgICAgKi9cbiAgICBDbG9uZSAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSR0JDb2xvciAodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgfVxufVxuXG4vKipcbiAqIFJHQkEgY29sb3Igb2JqZWN0LiBDb21wb25lbnRzIGFyZSBpbnRlZ2VycyBpbiB0aGUgcmFuZ2Ugb2YgMC4uMjU1LlxuICovXG5leHBvcnQgY2xhc3MgUkdCQUNvbG9yXG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSByIFJlZCBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSBnIEdyZWVuIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IGIgQmx1ZSBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSBhIEFscGhhIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAociwgZywgYiwgYSlcbiAgICB7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgb2YgYWxsIGNvbXBvbmVudHMuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSByIFJlZCBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSBnIEdyZWVuIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IGIgQmx1ZSBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyfSBhIEFscGhhIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBTZXQgKHIsIGcsIGIsIGEpXG4gICAge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtSR0JBQ29sb3J9XG4gICAgICovXG4gICAgQ2xvbmUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUkdCQUNvbG9yICh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yQ29tcG9uZW50RnJvbUZsb2F0IChjb21wb25lbnQpXG57XG4gICAgcmV0dXJuIHBhcnNlSW50IChNYXRoLnJvdW5kIChjb21wb25lbnQgKiAyNTUuMCksIDEwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yQ29tcG9uZW50VG9GbG9hdCAoY29tcG9uZW50KVxue1xuICAgIHJldHVybiBjb21wb25lbnQgLyAyNTUuMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJHQkNvbG9yRnJvbUZsb2F0Q29tcG9uZW50cyAociwgZywgYilcbntcbiAgICByZXR1cm4gbmV3IFJHQkNvbG9yIChcbiAgICAgICAgQ29sb3JDb21wb25lbnRGcm9tRmxvYXQgKHIpLFxuICAgICAgICBDb2xvckNvbXBvbmVudEZyb21GbG9hdCAoZyksXG4gICAgICAgIENvbG9yQ29tcG9uZW50RnJvbUZsb2F0IChiKVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTUkdCVG9MaW5lYXIgKGNvbXBvbmVudClcbntcbiAgICBpZiAoY29tcG9uZW50IDwgMC4wNDA0NSkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50ICogMC4wNzczOTkzODA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyAoY29tcG9uZW50ICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExpbmVhclRvU1JHQiAoY29tcG9uZW50KVxue1xuICAgIGlmIChjb21wb25lbnQgPCAwLjAwMzEzMDgpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudCAqIDEyLjkyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAxLjA1NSAqIChNYXRoLnBvdyAoY29tcG9uZW50LCAwLjQxNjY2KSkgLSAwLjA1NTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJbnRlZ2VyVG9IZXhTdHJpbmcgKGludFZhbClcbntcbiAgICBsZXQgcmVzdWx0ID0gcGFyc2VJbnQgKGludFZhbCwgMTApLnRvU3RyaW5nICgxNik7XG4gICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJHQkNvbG9yVG9IZXhTdHJpbmcgKGNvbG9yKVxue1xuICAgIGxldCByID0gSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvci5yKTtcbiAgICBsZXQgZyA9IEludGVnZXJUb0hleFN0cmluZyAoY29sb3IuZyk7XG4gICAgbGV0IGIgPSBJbnRlZ2VyVG9IZXhTdHJpbmcgKGNvbG9yLmIpO1xuICAgIHJldHVybiByICsgZyArIGI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSR0JBQ29sb3JUb0hleFN0cmluZyAoY29sb3IpXG57XG4gICAgbGV0IHIgPSBJbnRlZ2VyVG9IZXhTdHJpbmcgKGNvbG9yLnIpO1xuICAgIGxldCBnID0gSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvci5nKTtcbiAgICBsZXQgYiA9IEludGVnZXJUb0hleFN0cmluZyAoY29sb3IuYik7XG4gICAgbGV0IGEgPSBJbnRlZ2VyVG9IZXhTdHJpbmcgKGNvbG9yLmEpO1xuICAgIHJldHVybiByICsgZyArIGIgKyBhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGV4U3RyaW5nVG9SR0JDb2xvciAoaGV4U3RyaW5nKVxue1xuICAgIGlmIChoZXhTdHJpbmcubGVuZ3RoICE9PSA2KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCByID0gcGFyc2VJbnQgKGhleFN0cmluZy5zdWJzdHJpbmcgKDAsIDIpLCAxNik7XG4gICAgbGV0IGcgPSBwYXJzZUludCAoaGV4U3RyaW5nLnN1YnN0cmluZyAoMiwgNCksIDE2KTtcbiAgICBsZXQgYiA9IHBhcnNlSW50IChoZXhTdHJpbmcuc3Vic3RyaW5nICg0LCA2KSwgMTYpO1xuICAgIHJldHVybiBuZXcgUkdCQ29sb3IgKHIsIGcsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGV4U3RyaW5nVG9SR0JBQ29sb3IgKGhleFN0cmluZylcbntcbiAgICBpZiAoaGV4U3RyaW5nLmxlbmd0aCAhPT0gNiAmJiBoZXhTdHJpbmcubGVuZ3RoICE9PSA4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCByID0gcGFyc2VJbnQgKGhleFN0cmluZy5zdWJzdHJpbmcgKDAsIDIpLCAxNik7XG4gICAgbGV0IGcgPSBwYXJzZUludCAoaGV4U3RyaW5nLnN1YnN0cmluZyAoMiwgNCksIDE2KTtcbiAgICBsZXQgYiA9IHBhcnNlSW50IChoZXhTdHJpbmcuc3Vic3RyaW5nICg0LCA2KSwgMTYpO1xuICAgIGxldCBhID0gMjU1O1xuICAgIGlmIChoZXhTdHJpbmcubGVuZ3RoID09PSA4KSB7XG4gICAgICAgIGEgPSBwYXJzZUludCAoaGV4U3RyaW5nLnN1YnN0cmluZyAoNiwgOCksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSR0JBQ29sb3IgKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXJyYXlUb1JHQkNvbG9yIChhcnIpXG57XG5cdHJldHVybiBuZXcgUkdCQ29sb3IgKGFyclswXSwgYXJyWzFdLCBhcnJbMl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUkdCQ29sb3JJc0VxdWFsIChhLCBiKVxue1xuXHRyZXR1cm4gYS5yID09PSBiLnIgJiYgYS5nID09PSBiLmcgJiYgYS5iID09PSBiLmI7XG59XG4iLCJpbXBvcnQgeyBDb29yZDJELCBDb29yZElzRXF1YWwyRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkMmQuanMnO1xuaW1wb3J0IHsgSXNFcXVhbCB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IFJHQkNvbG9yLCBSR0JDb2xvcklzRXF1YWwgfSBmcm9tICcuL2NvbG9yLmpzJztcblxuZXhwb3J0IGNsYXNzIFRleHR1cmVNYXBcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5taW1lVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBuZXcgQ29vcmQyRCAoMC4wLCAwLjApO1xuICAgICAgICB0aGlzLnNjYWxlID0gbmV3IENvb3JkMkQgKDEuMCwgMS4wKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IDAuMDsgLy8gcmFkaWFuc1xuICAgIH1cblxuICAgIElzVmFsaWQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgIT09IG51bGwgJiYgdGhpcy5idWZmZXIgIT09IG51bGw7XG4gICAgfVxuXG4gICAgSGFzVHJhbnNmb3JtYXRpb24gKClcbiAgICB7XG4gICAgICAgIGlmICghQ29vcmRJc0VxdWFsMkQgKHRoaXMub2Zmc2V0LCBuZXcgQ29vcmQyRCAoMC4wLCAwLjApKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFDb29yZElzRXF1YWwyRCAodGhpcy5zY2FsZSwgbmV3IENvb3JkMkQgKDEuMCwgMS4wKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghSXNFcXVhbCAodGhpcy5yb3RhdGlvbiwgMC4wKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIElzRXF1YWwgKHJocylcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLm5hbWUgIT09IHJocy5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWltZVR5cGUgIT09IHJocy5taW1lVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQ29vcmRJc0VxdWFsMkQgKHRoaXMub2Zmc2V0LCByaHMub2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQ29vcmRJc0VxdWFsMkQgKHRoaXMuc2NhbGUsIHJocy5zY2FsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUlzRXF1YWwgKHRoaXMucm90YXRpb24sIHJocy5yb3RhdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUZXh0dXJlTWFwSXNFcXVhbCAoYVRleCwgYlRleClcbntcbiAgICBpZiAoYVRleCA9PT0gbnVsbCAmJiBiVGV4ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYVRleCA9PT0gbnVsbCB8fCBiVGV4ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGFUZXguSXNFcXVhbCAoYlRleCk7XG59XG5cbmV4cG9ydCBjb25zdCBNYXRlcmlhbFR5cGUgPVxue1xuICAgIFBob25nIDogMSxcbiAgICBQaHlzaWNhbCA6IDJcbn07XG5cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbEJhc2VcbntcbiAgICBjb25zdHJ1Y3RvciAodHlwZSlcbiAgICB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaXNEZWZhdWx0ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XG4gICAgICAgIHRoaXMuY29sb3IgPSBuZXcgUkdCQ29sb3IgKDAsIDAsIDApO1xuXG4gICAgICAgIHRoaXMudmVydGV4Q29sb3JzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgSXNFcXVhbCAocmhzKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gcmhzLnR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHQgIT09IHJocy5pc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5uYW1lICE9PSByaHMubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghUkdCQ29sb3JJc0VxdWFsICh0aGlzLmNvbG9yLCByaHMuY29sb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmVydGV4Q29sb3JzICE9PSByaHMudmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmFjZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWxCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKHR5cGUpXG4gICAge1xuICAgICAgICBzdXBlciAodHlwZSk7XG5cbiAgICAgICAgdGhpcy5lbWlzc2l2ZSA9IG5ldyBSR0JDb2xvciAoMCwgMCwgMCk7XG5cbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMS4wOyAvLyAwLjAgLi4gMS4wXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmRpZmZ1c2VNYXAgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1bXBNYXAgPSBudWxsO1xuICAgICAgICB0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuYWxwaGFUZXN0ID0gMC4wOyAvLyAwLjAgLi4gMS4wXG4gICAgICAgIHRoaXMubXVsdGlwbHlEaWZmdXNlTWFwID0gZmFsc2U7XG4gICAgfVxuXG4gICAgSXNFcXVhbCAocmhzKVxuICAgIHtcbiAgICAgICAgaWYgKCFzdXBlci5Jc0VxdWFsIChyaHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFSR0JDb2xvcklzRXF1YWwgKHRoaXMuZW1pc3NpdmUsIHJocy5lbWlzc2l2ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUlzRXF1YWwgKHRoaXMub3BhY2l0eSwgcmhzLm9wYWNpdHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJhbnNwYXJlbnQgIT09IHJocy50cmFuc3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghVGV4dHVyZU1hcElzRXF1YWwgKHRoaXMuZGlmZnVzZU1hcCwgcmhzLmRpZmZ1c2VNYXApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFUZXh0dXJlTWFwSXNFcXVhbCAodGhpcy5idW1wTWFwLCByaHMuYnVtcE1hcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRleHR1cmVNYXBJc0VxdWFsICh0aGlzLm5vcm1hbE1hcCwgcmhzLm5vcm1hbE1hcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRleHR1cmVNYXBJc0VxdWFsICh0aGlzLmVtaXNzaXZlTWFwLCByaHMuZW1pc3NpdmVNYXApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFJc0VxdWFsICh0aGlzLmFscGhhVGVzdCwgcmhzLmFscGhhVGVzdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tdWx0aXBseURpZmZ1c2VNYXAgIT09IHJocy5tdWx0aXBseURpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaG9uZ01hdGVyaWFsIGV4dGVuZHMgRmFjZU1hdGVyaWFsXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyIChNYXRlcmlhbFR5cGUuUGhvbmcpO1xuXG4gICAgICAgIHRoaXMuYW1iaWVudCA9IG5ldyBSR0JDb2xvciAoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuc3BlY3VsYXIgPSBuZXcgUkdCQ29sb3IgKDAsIDAsIDApO1xuICAgICAgICB0aGlzLnNoaW5pbmVzcyA9IDAuMDsgLy8gMC4wIC4uIDEuMFxuICAgICAgICB0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcbiAgICB9XG5cbiAgICBJc0VxdWFsIChyaHMpXG4gICAge1xuICAgICAgICBpZiAoIXN1cGVyLklzRXF1YWwgKHJocykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVJHQkNvbG9ySXNFcXVhbCAodGhpcy5hbWJpZW50LCByaHMuYW1iaWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVJHQkNvbG9ySXNFcXVhbCAodGhpcy5zcGVjdWxhciwgcmhzLnNwZWN1bGFyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghSXNFcXVhbCAodGhpcy5zaGluaW5lc3MsIHJocy5zaGluaW5lc3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFUZXh0dXJlTWFwSXNFcXVhbCAodGhpcy5zcGVjdWxhck1hcCwgcmhzLnNwZWN1bGFyTWFwKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBoeXNpY2FsTWF0ZXJpYWwgZXh0ZW5kcyBGYWNlTWF0ZXJpYWxcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKE1hdGVyaWFsVHlwZS5QaHlzaWNhbCk7XG5cbiAgICAgICAgdGhpcy5tZXRhbG5lc3MgPSAwLjA7IC8vIDAuMCAuLiAxLjBcbiAgICAgICAgdGhpcy5yb3VnaG5lc3MgPSAxLjA7IC8vIDAuMCAuLiAxLjBcbiAgICAgICAgdGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xuICAgIH1cblxuICAgIElzRXF1YWwgKHJocylcbiAgICB7XG4gICAgICAgIGlmICghc3VwZXIuSXNFcXVhbCAocmhzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghSXNFcXVhbCAodGhpcy5tZXRhbG5lc3MsIHJocy5tZXRhbG5lc3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFJc0VxdWFsICh0aGlzLnJvdWdobmVzcywgcmhzLnJvdWdobmVzcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRleHR1cmVNYXBJc0VxdWFsICh0aGlzLm1ldGFsbmVzc01hcCwgcmhzLm1ldGFsbmVzc01hcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUZXh0dXJlSXNFcXVhbCAoYSwgYilcbntcbiAgICBpZiAoYS5uYW1lICE9PSBiLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5taW1lVHlwZSAhPT0gYi5taW1lVHlwZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghQ29vcmRJc0VxdWFsMkQgKGEub2Zmc2V0LCBiLm9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIUNvb3JkSXNFcXVhbDJEIChhLnNjYWxlLCBiLnNjYWxlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghSXNFcXVhbCAoYS5yb3RhdGlvbiwgYi5yb3RhdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7IElzRXF1YWwgfSBmcm9tICcuL2dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIENvb3JkM0Rcbntcblx0Y29uc3RydWN0b3IgKHgsIHksIHopXG5cdHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0fVxuXG5cdExlbmd0aCAoKVxuXHR7XG5cdFx0cmV0dXJuIE1hdGguc3FydCAodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcblx0fVxuXG5cdE11bHRpcGx5U2NhbGFyIChzY2FsYXIpXG5cdHtcblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdE5vcm1hbGl6ZSAoKVxuXHR7XG5cdFx0bGV0IGxlbmd0aCA9IHRoaXMuTGVuZ3RoICgpO1xuXHRcdGlmIChsZW5ndGggPiAwLjApIHtcblx0XHRcdHRoaXMuTXVsdGlwbHlTY2FsYXIgKDEuMCAvIGxlbmd0aCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0T2Zmc2V0IChkaXJlY3Rpb24sIGRpc3RhbmNlKVxuXHR7XG5cdFx0bGV0IG5vcm1hbCA9IGRpcmVjdGlvbi5DbG9uZSAoKS5Ob3JtYWxpemUgKCk7XG5cdFx0dGhpcy54ICs9IG5vcm1hbC54ICogZGlzdGFuY2U7XG5cdFx0dGhpcy55ICs9IG5vcm1hbC55ICogZGlzdGFuY2U7XG5cdFx0dGhpcy56ICs9IG5vcm1hbC56ICogZGlzdGFuY2U7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRSb3RhdGUgKGF4aXMsIGFuZ2xlLCBvcmlnbylcblx0e1xuXHRcdGxldCBub3JtYWwgPSBheGlzLkNsb25lICgpLk5vcm1hbGl6ZSAoKTtcblxuXHRcdGxldCB1ID0gbm9ybWFsLng7XG5cdFx0bGV0IHYgPSBub3JtYWwueTtcblx0XHRsZXQgdyA9IG5vcm1hbC56O1xuXG5cdFx0bGV0IHggPSB0aGlzLnggLSBvcmlnby54O1xuXHRcdGxldCB5ID0gdGhpcy55IC0gb3JpZ28ueTtcblx0XHRsZXQgeiA9IHRoaXMueiAtIG9yaWdvLno7XG5cblx0XHRsZXQgc2kgPSBNYXRoLnNpbiAoYW5nbGUpO1xuXHRcdGxldCBjbyA9IE1hdGguY29zIChhbmdsZSk7XG5cdFx0dGhpcy54ID0gLSB1ICogKC0gdSAqIHggLSB2ICogeSAtIHcgKiB6KSAqICgxLjAgLSBjbykgKyB4ICogY28gKyAoLSB3ICogeSArIHYgKiB6KSAqIHNpO1xuXHRcdHRoaXMueSA9IC0gdiAqICgtIHUgKiB4IC0gdiAqIHkgLSB3ICogeikgKiAoMS4wIC0gY28pICsgeSAqIGNvICsgKHcgKiB4IC0gdSAqIHopICogc2k7XG5cdFx0dGhpcy56ID0gLSB3ICogKC0gdSAqIHggLSB2ICogeSAtIHcgKiB6KSAqICgxLjAgLSBjbykgKyB6ICogY28gKyAoLSB2ICogeCArIHUgKiB5KSAqIHNpO1xuXG5cdFx0dGhpcy54ICs9IG9yaWdvLng7XG5cdFx0dGhpcy55ICs9IG9yaWdvLnk7XG5cdFx0dGhpcy56ICs9IG9yaWdvLno7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRDbG9uZSAoKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBDb29yZDNEICh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29vcmRJc0VxdWFsM0QgKGEsIGIpXG57XG5cdHJldHVybiBJc0VxdWFsIChhLngsIGIueCkgJiYgSXNFcXVhbCAoYS55LCBiLnkpICYmIElzRXF1YWwgKGEueiwgYi56KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFkZENvb3JkM0QgKGEsIGIpXG57XG5cdHJldHVybiBuZXcgQ29vcmQzRCAoYS54ICsgYi54LCBhLnkgKyBiLnksIGEueiArIGIueik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTdWJDb29yZDNEIChhLCBiKVxue1xuXHRyZXR1cm4gbmV3IENvb3JkM0QgKGEueCAtIGIueCwgYS55IC0gYi55LCBhLnogLSBiLnopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29vcmREaXN0YW5jZTNEIChhLCBiKVxue1xuXHRyZXR1cm4gTWF0aC5zcXJ0ICgoYS54IC0gYi54KSAqIChhLnggLSBiLngpICsgKGEueSAtIGIueSkgKiAoYS55IC0gYi55KSArIChhLnogLSBiLnopICogKGEueiAtIGIueikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRG90VmVjdG9yM0QgKGEsIGIpXG57XG5cdHJldHVybiBhLnggKiBiLnggKyBhLnkgKiBiLnkgKyBhLnogKiBiLno7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBWZWN0b3JBbmdsZTNEIChhLCBiKVxue1xuXHRsZXQgYURpcmVjdGlvbiA9IGEuQ2xvbmUgKCkuTm9ybWFsaXplICgpO1xuXHRsZXQgYkRpcmVjdGlvbiA9IGIuQ2xvbmUgKCkuTm9ybWFsaXplICgpO1xuXHRpZiAoQ29vcmRJc0VxdWFsM0QgKGFEaXJlY3Rpb24sIGJEaXJlY3Rpb24pKSB7XG5cdFx0cmV0dXJuIDAuMDtcblx0fVxuXHRsZXQgcHJvZHVjdCA9IERvdFZlY3RvcjNEIChhRGlyZWN0aW9uLCBiRGlyZWN0aW9uKTtcblx0cmV0dXJuIE1hdGguYWNvcyAocHJvZHVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcm9zc1ZlY3RvcjNEIChhLCBiKVxue1xuXHRsZXQgcmVzdWx0ID0gbmV3IENvb3JkM0QgKDAuMCwgMC4wLCAwLjApO1xuXHRyZXN1bHQueCA9IGEueSAqIGIueiAtIGEueiAqIGIueTtcblx0cmVzdWx0LnkgPSBhLnogKiBiLnggLSBhLnggKiBiLno7XG5cdHJlc3VsdC56ID0gYS54ICogYi55IC0gYS55ICogYi54O1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVmVjdG9yTGVuZ3RoM0QgKHgsIHksIHopXG57XG5cdHJldHVybiBNYXRoLnNxcnQgKHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBcnJheVRvQ29vcmQzRCAoYXJyKVxue1xuXHRyZXR1cm4gbmV3IENvb3JkM0QgKGFyclswXSwgYXJyWzFdLCBhcnJbMl0pO1xufVxuIiwiaW1wb3J0IHsgQ29vcmQyRCwgQ29vcmRJc0VxdWFsMkQgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDJkLmpzJztcbmltcG9ydCB7IENvb3JkSXNFcXVhbDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvciwgUkdCQ29sb3JJc0VxdWFsIH0gZnJvbSAnLi9jb2xvci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNZXNoUHJpbWl0aXZlQnVmZmVyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IFtdO1xuICAgICAgICB0aGlzLnZlcnRpY2VzID0gW107XG4gICAgICAgIHRoaXMuY29sb3JzID0gW107XG4gICAgICAgIHRoaXMubm9ybWFscyA9IFtdO1xuICAgICAgICB0aGlzLnV2cyA9IFtdO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBHZXRCb3VuZHMgKClcbiAgICB7XG4gICAgICAgIGxldCBtaW4gPSBbSW5maW5pdHksIEluZmluaXR5LCBJbmZpbml0eV07XG4gICAgICAgIGxldCBtYXggPSBbLUluZmluaXR5LCAtSW5maW5pdHksIC1JbmZpbml0eV07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGggLyAzOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgICAgICAgICAgbWluW2pdID0gTWF0aC5taW4gKG1pbltqXSwgdGhpcy52ZXJ0aWNlc1tpICogMyArIGpdKTtcbiAgICAgICAgICAgICAgICBtYXhbal0gPSBNYXRoLm1heCAobWF4W2pdLCB0aGlzLnZlcnRpY2VzW2kgKiAzICsgal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4gOiBtaW4sXG4gICAgICAgICAgICBtYXggOiBtYXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBHZXRCeXRlTGVuZ3RoIChpbmRleFR5cGVTaXplLCBudW1iZXJUeXBlU2l6ZSlcbiAgICB7XG4gICAgICAgIGxldCBpbmRleENvdW50ID0gdGhpcy5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgbGV0IG51bWJlckNvdW50ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggKyB0aGlzLmNvbG9ycy5sZW5ndGggKyB0aGlzLm5vcm1hbHMubGVuZ3RoICsgdGhpcy51dnMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gaW5kZXhDb3VudCAqIGluZGV4VHlwZVNpemUgKyBudW1iZXJDb3VudCAqIG51bWJlclR5cGVTaXplO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lc2hCdWZmZXJcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5wcmltaXRpdmVzID0gW107XG4gICAgfVxuXG4gICAgUHJpbWl0aXZlQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaW1pdGl2ZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIEdldFByaW1pdGl2ZSAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmltaXRpdmVzW2luZGV4XTtcbiAgICB9XG5cbiAgICBHZXRCeXRlTGVuZ3RoIChpbmRleFR5cGVTaXplLCBudW1iZXJUeXBlU2l6ZSlcbiAgICB7XG4gICAgICAgIGxldCBieXRlTGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByaW1pdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmltaXRpdmUgPSB0aGlzLnByaW1pdGl2ZXNbaV07XG4gICAgICAgICAgICBieXRlTGVuZ3RoICs9IHByaW1pdGl2ZS5HZXRCeXRlTGVuZ3RoIChpbmRleFR5cGVTaXplLCBudW1iZXJUeXBlU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVMZW5ndGg7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29udmVydE1lc2hUb01lc2hCdWZmZXIgKG1lc2gpXG57XG4gICAgZnVuY3Rpb24gQWRkVmVydGV4VG9QcmltaXRpdmVCdWZmZXIgKG1lc2gsIGluZGljZXMsIHByaW1pdGl2ZUJ1ZmZlciwgbWVzaFZlcnRleFRvUHJpbWl0aXZlVmVydGljZXMpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBHZXRDb2xvck9yRGVmYXVsdCAobWVzaCwgY29sb3JJbmRleCwgZm9yY2VDb2xvcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChjb2xvckluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc2guR2V0VmVydGV4Q29sb3IgKGNvbG9ySW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JjZUNvbG9ycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUkdCQ29sb3IgKDAsIDAsIDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIEdldFVWT3JEZWZhdWx0IChtZXNoLCB1dkluZGV4LCBmb3JjZVVWcylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHV2SW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzaC5HZXRUZXh0dXJlVVYgKHV2SW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JjZVVWcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29vcmQyRCAoMC4wLCAwLjApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIEFkZFZlcnRleCAobWVzaCwgaW5kaWNlcywgcHJpbWl0aXZlQnVmZmVyKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgZm9yY2VDb2xvcnMgPSBtZXNoLlZlcnRleENvbG9yQ291bnQgKCkgPiAwO1xuICAgICAgICAgICAgbGV0IGZvcmNlVVZzID0gbWVzaC5UZXh0dXJlVVZDb3VudCAoKSA+IDA7XG5cbiAgICAgICAgICAgIGxldCB2ZXJ0ZXggPSBtZXNoLkdldFZlcnRleCAoaW5kaWNlcy52ZXJ0ZXgpO1xuICAgICAgICAgICAgbGV0IG5vcm1hbCA9IG1lc2guR2V0Tm9ybWFsIChpbmRpY2VzLm5vcm1hbCk7XG5cbiAgICAgICAgICAgIGxldCBwcmltaXRpdmVWZXJ0ZXhJbmRleCA9IHByaW1pdGl2ZUJ1ZmZlci52ZXJ0aWNlcy5sZW5ndGggLyAzO1xuICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLmluZGljZXMucHVzaCAocHJpbWl0aXZlVmVydGV4SW5kZXgpO1xuICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLnZlcnRpY2VzLnB1c2ggKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xuXG4gICAgICAgICAgICBsZXQgY29sb3IgPSBHZXRDb2xvck9yRGVmYXVsdCAobWVzaCwgaW5kaWNlcy5jb2xvciwgZm9yY2VDb2xvcnMpO1xuICAgICAgICAgICAgaWYgKGNvbG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLmNvbG9ycy5wdXNoIChjb2xvci5yIC8gMjU1LjAsIGNvbG9yLmcgLyAyNTUuMCwgY29sb3IuYiAvIDI1NS4wKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLm5vcm1hbHMucHVzaCAobm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueik7XG5cbiAgICAgICAgICAgIGxldCB1diA9IEdldFVWT3JEZWZhdWx0IChtZXNoLCBpbmRpY2VzLnV2LCBmb3JjZVVWcyk7XG4gICAgICAgICAgICBpZiAodXYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmVCdWZmZXIudXZzLnB1c2ggKHV2LngsIHV2LnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGluZGV4IDogcHJpbWl0aXZlVmVydGV4SW5kZXgsXG4gICAgICAgICAgICAgICAgY29sb3IgOiBjb2xvcixcbiAgICAgICAgICAgICAgICBub3JtYWwgOiBub3JtYWwsXG4gICAgICAgICAgICAgICAgdXYgOiB1dlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIEZpbmRNYXRjaGluZ1ByaW1pdGl2ZVZlcnRleCAobWVzaCwgcHJpbWl0aXZlVmVydGljZXMsIGluZGljZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIElzRXF1YWxDb2xvciAobWVzaCwgY29sb3JJbmRleCwgZXhpc3RpbmdDb2xvcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdDb2xvciA9PT0gbnVsbCAmJiBjb2xvckluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgY29sb3IgPSBHZXRDb2xvck9yRGVmYXVsdCAobWVzaCwgY29sb3JJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJHQkNvbG9ySXNFcXVhbCAoZXhpc3RpbmdDb2xvciwgY29sb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBJc0VxdWFsTm9ybWFsIChtZXNoLCBub3JtYWxJbmRleCwgZXhpc3RpbmdOb3JtYWwpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbCA9IG1lc2guR2V0Tm9ybWFsIChub3JtYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvb3JkSXNFcXVhbDNEIChleGlzdGluZ05vcm1hbCwgbm9ybWFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gSXNFcXVhbFVWIChtZXNoLCB1dkluZGV4LCBleGlzdGluZ1V2KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1V2ID09PSBudWxsICYmIHV2SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB1diA9IEdldFVWT3JEZWZhdWx0IChtZXNoLCB1dkluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29vcmRJc0VxdWFsMkQgKGV4aXN0aW5nVXYsIHV2KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmltaXRpdmVWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwcmltaXRpdmVWZXJ0ZXggPSBwcmltaXRpdmVWZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgZXF1YWxDb2xvciA9IElzRXF1YWxDb2xvciAobWVzaCwgaW5kaWNlcy5jb2xvciwgcHJpbWl0aXZlVmVydGV4LmNvbG9yKTtcbiAgICAgICAgICAgICAgICBsZXQgZXF1YWxOb3JtYWwgPSBJc0VxdWFsTm9ybWFsIChtZXNoLCBpbmRpY2VzLm5vcm1hbCwgcHJpbWl0aXZlVmVydGV4Lm5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbGV0IGVxdWFsVXYgPSBJc0VxdWFsVVYgKG1lc2gsIGluZGljZXMudXYsIHByaW1pdGl2ZVZlcnRleC51dik7XG4gICAgICAgICAgICAgICAgaWYgKGVxdWFsQ29sb3IgJiYgZXF1YWxOb3JtYWwgJiYgZXF1YWxVdikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlVmVydGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc2hWZXJ0ZXhUb1ByaW1pdGl2ZVZlcnRpY2VzLmhhcyAoaW5kaWNlcy52ZXJ0ZXgpKSB7XG4gICAgICAgICAgICBsZXQgcHJpbWl0aXZlVmVydGljZXMgPSBtZXNoVmVydGV4VG9QcmltaXRpdmVWZXJ0aWNlcy5nZXQgKGluZGljZXMudmVydGV4KTtcbiAgICAgICAgICAgIGxldCBleGlzdGluZ1ByaW1pdGl2ZVZlcnRleCA9IEZpbmRNYXRjaGluZ1ByaW1pdGl2ZVZlcnRleCAobWVzaCwgcHJpbWl0aXZlVmVydGljZXMsIGluZGljZXMpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nUHJpbWl0aXZlVmVydGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLmluZGljZXMucHVzaCAoZXhpc3RpbmdQcmltaXRpdmVWZXJ0ZXguaW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJpbWl0aXZlVmVydGV4ID0gQWRkVmVydGV4IChtZXNoLCBpbmRpY2VzLCBwcmltaXRpdmVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZVZlcnRpY2VzLnB1c2ggKHByaW1pdGl2ZVZlcnRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcHJpbWl0aXZlVmVydGV4ID0gQWRkVmVydGV4IChtZXNoLCBpbmRpY2VzLCBwcmltaXRpdmVCdWZmZXIpO1xuICAgICAgICAgICAgbWVzaFZlcnRleFRvUHJpbWl0aXZlVmVydGljZXMuc2V0IChpbmRpY2VzLnZlcnRleCwgW3ByaW1pdGl2ZVZlcnRleF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IG1lc2hCdWZmZXIgPSBuZXcgTWVzaEJ1ZmZlciAoKTtcblxuICAgIGxldCB0cmlhbmdsZUNvdW50ID0gbWVzaC5UcmlhbmdsZUNvdW50ICgpO1xuICAgIGlmICh0cmlhbmdsZUNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCB0cmlhbmdsZUluZGljZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlQ291bnQ7IGkrKykge1xuICAgICAgICB0cmlhbmdsZUluZGljZXMucHVzaCAoaSk7XG4gICAgfVxuICAgIHRyaWFuZ2xlSW5kaWNlcy5zb3J0ICgoYSwgYikgPT4ge1xuICAgICAgICBsZXQgYVRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAoYSk7XG4gICAgICAgIGxldCBiVHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChiKTtcbiAgICAgICAgcmV0dXJuIGFUcmlhbmdsZS5tYXQgLSBiVHJpYW5nbGUubWF0O1xuICAgIH0pO1xuXG4gICAgbGV0IHByaW1pdGl2ZUJ1ZmZlciA9IG51bGw7XG4gICAgbGV0IG1lc2hWZXJ0ZXhUb1ByaW1pdGl2ZVZlcnRpY2VzID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlSW5kaWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHJpYW5nbGVJbmRleCA9IHRyaWFuZ2xlSW5kaWNlc1tpXTtcbiAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAodHJpYW5nbGVJbmRleCk7XG4gICAgICAgIGlmIChwcmltaXRpdmVCdWZmZXIgPT09IG51bGwgfHwgcHJpbWl0aXZlQnVmZmVyLm1hdGVyaWFsICE9PSB0cmlhbmdsZS5tYXQpIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZUJ1ZmZlciA9IG5ldyBNZXNoUHJpbWl0aXZlQnVmZmVyICgpO1xuICAgICAgICAgICAgcHJpbWl0aXZlQnVmZmVyLm1hdGVyaWFsID0gdHJpYW5nbGUubWF0O1xuICAgICAgICAgICAgbWVzaFZlcnRleFRvUHJpbWl0aXZlVmVydGljZXMgPSBuZXcgTWFwICgpO1xuICAgICAgICAgICAgbWVzaEJ1ZmZlci5wcmltaXRpdmVzLnB1c2ggKHByaW1pdGl2ZUJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHYwSW5kaWNlcyA9IHtcbiAgICAgICAgICAgIHZlcnRleCA6IHRyaWFuZ2xlLnYwLFxuICAgICAgICAgICAgY29sb3IgOiB0cmlhbmdsZS5jMCxcbiAgICAgICAgICAgIG5vcm1hbCA6IHRyaWFuZ2xlLm4wLFxuICAgICAgICAgICAgdXYgOiB0cmlhbmdsZS51MFxuICAgICAgICB9O1xuICAgICAgICBsZXQgdjFJbmRpY2VzID0ge1xuICAgICAgICAgICAgdmVydGV4IDogdHJpYW5nbGUudjEsXG4gICAgICAgICAgICBjb2xvciA6IHRyaWFuZ2xlLmMxLFxuICAgICAgICAgICAgbm9ybWFsIDogdHJpYW5nbGUubjEsXG4gICAgICAgICAgICB1diA6IHRyaWFuZ2xlLnUxXG4gICAgICAgIH07XG4gICAgICAgIGxldCB2MkluZGljZXMgPSB7XG4gICAgICAgICAgICB2ZXJ0ZXggOiB0cmlhbmdsZS52MixcbiAgICAgICAgICAgIGNvbG9yIDogdHJpYW5nbGUuYzIsXG4gICAgICAgICAgICBub3JtYWwgOiB0cmlhbmdsZS5uMixcbiAgICAgICAgICAgIHV2IDogdHJpYW5nbGUudTJcbiAgICAgICAgfTtcblxuICAgICAgICBBZGRWZXJ0ZXhUb1ByaW1pdGl2ZUJ1ZmZlciAobWVzaCwgdjBJbmRpY2VzLCBwcmltaXRpdmVCdWZmZXIsIG1lc2hWZXJ0ZXhUb1ByaW1pdGl2ZVZlcnRpY2VzKTtcbiAgICAgICAgQWRkVmVydGV4VG9QcmltaXRpdmVCdWZmZXIgKG1lc2gsIHYxSW5kaWNlcywgcHJpbWl0aXZlQnVmZmVyLCBtZXNoVmVydGV4VG9QcmltaXRpdmVWZXJ0aWNlcyk7XG4gICAgICAgIEFkZFZlcnRleFRvUHJpbWl0aXZlQnVmZmVyIChtZXNoLCB2MkluZGljZXMsIHByaW1pdGl2ZUJ1ZmZlciwgbWVzaFZlcnRleFRvUHJpbWl0aXZlVmVydGljZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXNoQnVmZmVyO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIChidWZmZXIpXG57XG5cdGxldCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyICgndXRmLTgnKTtcblx0cmV0dXJuIGRlY29kZXIuZGVjb2RlIChidWZmZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXJyYXlCdWZmZXJUb0FzY2lpU3RyaW5nIChidWZmZXIpXG57XG5cdGxldCB0ZXh0ID0gJyc7XG5cdGxldCBidWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkgKGJ1ZmZlcik7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyVmlldy5ieXRlTGVuZ3RoOyBpKyspIHtcblx0XHR0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUgKGJ1ZmZlclZpZXdbaV0pO1xuXHR9XG5cdHJldHVybiB0ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXNjaWlTdHJpbmdUb0FycmF5QnVmZmVyIChzdHIpXG57XG5cdGxldCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIgKHN0ci5sZW5ndGgpO1xuXHRsZXQgYnVmZmVyVmlldyA9IG5ldyBVaW50OEFycmF5IChidWZmZXIpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuXHRcdGJ1ZmZlclZpZXdbaV0gPSBzdHIuY2hhckNvZGVBdCAoaSk7XG5cdH1cblx0cmV0dXJuIGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFV0ZjhTdHJpbmdUb0FycmF5QnVmZmVyIChzdHIpXG57XG5cdGxldCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyICgpO1xuXHRsZXQgdWludDhBcnJheSA9IGVuY29kZXIuZW5jb2RlIChzdHIpO1xuXHRyZXR1cm4gdWludDhBcnJheS5idWZmZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNlNjREYXRhVVJJVG9BcnJheUJ1ZmZlciAodXJpKVxue1xuXHRsZXQgZGF0YVByZWZpeCA9ICdkYXRhOic7XG5cdGlmICghdXJpLnN0YXJ0c1dpdGggKGRhdGFQcmVmaXgpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRsZXQgbWltZVNlcGFyYXRvciA9IHVyaS5pbmRleE9mICgnOycpO1xuXHRpZiAobWltZVNlcGFyYXRvciA9PT0gLTEpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCBidWZmZXJTZXBhcmF0b3IgPSB1cmkuaW5kZXhPZiAoJywnKTtcblx0aWYgKGJ1ZmZlclNlcGFyYXRvciA9PT0gLTEpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCBtaW1lVHlwZSA9IHVyaS5zdWJzdHJpbmcgKGRhdGFQcmVmaXgubGVuZ3RoLCBkYXRhUHJlZml4Lmxlbmd0aCArIG1pbWVTZXBhcmF0b3IgLSA1KTtcblx0bGV0IGJhc2U2NFN0cmluZyA9IGF0b2IgKHVyaS5zdWJzdHJpbmcgKGJ1ZmZlclNlcGFyYXRvciArIDEpKTtcblx0bGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlciAoYmFzZTY0U3RyaW5nLmxlbmd0aCk7XG5cdGxldCBidWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkgKGJ1ZmZlcik7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZTY0U3RyaW5nLmxlbmd0aDsgaSsrKSB7XG5cdFx0YnVmZmVyVmlld1tpXSA9IGJhc2U2NFN0cmluZy5jaGFyQ29kZUF0IChpKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bWltZVR5cGUgOiBtaW1lVHlwZSxcblx0XHRidWZmZXIgOiBidWZmZXJcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldEZpbGVFeHRlbnNpb25Gcm9tTWltZVR5cGUgKG1pbWVUeXBlKVxue1xuXHRpZiAobWltZVR5cGUgPT09IHVuZGVmaW5lZCB8fCBtaW1lVHlwZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHRsZXQgbWltZVBhcnRzID0gbWltZVR5cGUuc3BsaXQgKCcvJyk7XG5cdGlmIChtaW1lUGFydHMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdHJldHVybiBtaW1lUGFydHNbbWltZVBhcnRzLmxlbmd0aCAtIDFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlT2JqZWN0VXJsIChjb250ZW50KVxue1xuXHRsZXQgYmxvYiA9IG5ldyBCbG9iIChbY29udGVudF0pO1xuXHRsZXQgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCAoYmxvYik7XG5cdHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVPYmplY3RVcmxXaXRoTWltZVR5cGUgKGNvbnRlbnQsIG1pbWVUeXBlKVxue1xuXHRsZXQgYmxvYiA9IG5ldyBCbG9iIChbY29udGVudF0sIHsgdHlwZSA6IG1pbWVUeXBlIH0pO1xuXHRsZXQgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCAoYmxvYik7XG5cdHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXZva2VPYmplY3RVcmwgKHVybClcbntcblx0VVJMLnJldm9rZU9iamVjdFVSTCAodXJsKTtcbn1cbiIsImltcG9ydCB7IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nLCBVdGY4U3RyaW5nVG9BcnJheUJ1ZmZlciB9IGZyb20gJy4uL2lvL2J1ZmZlcnV0aWxzLmpzJztcblxuZXhwb3J0IGNsYXNzIEV4cG9ydGVkRmlsZVxue1xuXHRjb25zdHJ1Y3RvciAobmFtZSlcblx0e1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy5jb250ZW50ID0gbnVsbDtcblx0fVxuXG5cdEdldE5hbWUgKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm5hbWU7XG5cdH1cblxuXHRTZXROYW1lIChuYW1lKVxuXHR7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0fVxuXG5cdEdldFRleHRDb250ZW50ICgpXG5cdHtcblx0XHRsZXQgdGV4dCA9IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nICh0aGlzLmNvbnRlbnQpO1xuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0R2V0QnVmZmVyQ29udGVudCAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuY29udGVudDtcblx0fVxuXG5cdFNldFRleHRDb250ZW50IChjb250ZW50KVxuXHR7XG5cdFx0bGV0IGJ1ZmZlciA9IFV0ZjhTdHJpbmdUb0FycmF5QnVmZmVyIChjb250ZW50KTtcblx0XHR0aGlzLmNvbnRlbnQgPSBidWZmZXI7XG5cdH1cblxuXHRTZXRCdWZmZXJDb250ZW50IChjb250ZW50KVxuXHR7XG5cdFx0dGhpcy5jb250ZW50ID0gY29udGVudDtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgRXhwb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG5cbiAgICB9XG5cbiAgICBDYW5FeHBvcnQgKGZvcm1hdCwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXHRFeHBvcnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgb25GaW5pc2gpXG5cdHtcblx0XHRsZXQgZmlsZXMgPSBbXTtcblx0XHR0aGlzLkV4cG9ydENvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgZmlsZXMsICgpID0+IHtcblx0XHRcdG9uRmluaXNoIChmaWxlcyk7XG5cdFx0fSk7XG5cdH1cblxuXHRFeHBvcnRDb250ZW50IChleHBvcnRlck1vZGVsLCBmb3JtYXQsIGZpbGVzLCBvbkZpbmlzaClcblx0e1xuXG5cdH1cblxuXHRHZXRFeHBvcnRlZE1hdGVyaWFsTmFtZSAob3JpZ2luYWxOYW1lKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuR2V0RXhwb3J0ZWROYW1lIChvcmlnaW5hbE5hbWUsICdNYXRlcmlhbCcpO1xuXHR9XG5cblx0R2V0RXhwb3J0ZWRNZXNoTmFtZSAob3JpZ2luYWxOYW1lKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuR2V0RXhwb3J0ZWROYW1lIChvcmlnaW5hbE5hbWUsICdNZXNoJyk7XG5cdH1cblxuXHRHZXRFeHBvcnRlZE5hbWUgKG9yaWdpbmFsTmFtZSwgZGVmYXVsdE5hbWUpXG5cdHtcblx0XHRpZiAob3JpZ2luYWxOYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHROYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gb3JpZ2luYWxOYW1lO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBMb2FkRXh0ZXJuYWxMaWJyYXJ5IH0gZnJvbSAnLi4vaW8vZXh0ZXJuYWxsaWJzLmpzJztcbmltcG9ydCB7IEZpbGVGb3JtYXQgfSBmcm9tICcuLi9pby9maWxldXRpbHMuanMnO1xuaW1wb3J0IHsgTWF0ZXJpYWxUeXBlIH0gZnJvbSAnLi4vbW9kZWwvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ29udmVydE1lc2hUb01lc2hCdWZmZXIgfSBmcm9tICcuLi9tb2RlbC9tZXNoYnVmZmVyLmpzJztcbmltcG9ydCB7IEV4cG9ydGVkRmlsZSwgRXhwb3J0ZXJCYXNlIH0gZnJvbSAnLi9leHBvcnRlcmJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgRXhwb3J0ZXIzZG0gZXh0ZW5kcyBFeHBvcnRlckJhc2Vcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHN1cGVyICgpO1xuICAgICAgICB0aGlzLnJoaW5vID0gbnVsbDtcblx0fVxuXG4gICAgQ2FuRXhwb3J0IChmb3JtYXQsIGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBmb3JtYXQgPT09IEZpbGVGb3JtYXQuQmluYXJ5ICYmIGV4dGVuc2lvbiA9PT0gJzNkbSc7XG4gICAgfVxuXG5cdEV4cG9ydENvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgZmlsZXMsIG9uRmluaXNoKVxuXHR7XG5cdFx0aWYgKHRoaXMucmhpbm8gPT09IG51bGwpIHtcblx0XHRcdExvYWRFeHRlcm5hbExpYnJhcnkgKCdsb2FkZXJzL3JoaW5vM2RtLm1pbi5qcycpLnRoZW4gKCgpID0+IHtcbiAgICAgICAgICAgICAgICByaGlubzNkbSAoKS50aGVuICgocmhpbm8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaGlubyA9IHJoaW5vO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkV4cG9ydFJoaW5vQ29udGVudCAoZXhwb3J0ZXJNb2RlbCwgZmlsZXMsIG9uRmluaXNoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmNhdGNoICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICB9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5FeHBvcnRSaGlub0NvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzLCBvbkZpbmlzaCk7XG5cdFx0fVxuXHR9XG5cbiAgICBFeHBvcnRSaGlub0NvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzLCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIENvbG9yVG9SaGlub0NvbG9yIChjb2xvcilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByIDogY29sb3IucixcbiAgICAgICAgICAgICAgICBnIDogY29sb3IuZyxcbiAgICAgICAgICAgICAgICBiIDogY29sb3IuYixcbiAgICAgICAgICAgICAgICBhIDogMjU1XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cblx0XHRsZXQgcmhpbm9GaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLjNkbScpO1xuXHRcdGZpbGVzLnB1c2ggKHJoaW5vRmlsZSk7XG5cbiAgICAgICAgbGV0IHJoaW5vRG9jID0gbmV3IHRoaXMucmhpbm8uRmlsZTNkbSAoKTtcbiAgICAgICAgZXhwb3J0ZXJNb2RlbC5FbnVtZXJhdGVUcmFuc2Zvcm1lZE1lc2hJbnN0YW5jZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbWVzaEJ1ZmZlciA9IENvbnZlcnRNZXNoVG9NZXNoQnVmZmVyIChtZXNoKTtcbiAgICAgICAgICAgIGZvciAobGV0IHByaW1pdGl2ZUluZGV4ID0gMDsgcHJpbWl0aXZlSW5kZXggPCBtZXNoQnVmZmVyLlByaW1pdGl2ZUNvdW50ICgpOyBwcmltaXRpdmVJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByaW1pdGl2ZSA9IG1lc2hCdWZmZXIuR2V0UHJpbWl0aXZlIChwcmltaXRpdmVJbmRleCk7XG4gICAgICAgICAgICAgICAgbGV0IHRocmVlSnNvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1TaXplIDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdGbG9hdDMyQXJyYXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSA6IHByaW1pdGl2ZS52ZXJ0aWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtU2l6ZSA6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnRmxvYXQzMkFycmF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgOiBwcmltaXRpdmUubm9ybWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1VpbnQxNkFycmF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSA6IHByaW1pdGl2ZS5pbmRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gZXhwb3J0ZXJNb2RlbC5HZXRNYXRlcmlhbCAocHJpbWl0aXZlLm1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICBsZXQgcmhpbm9NYXRlcmlhbCA9IG5ldyB0aGlzLnJoaW5vLk1hdGVyaWFsICgpO1xuICAgICAgICAgICAgICAgIHJoaW5vTWF0ZXJpYWwubmFtZSA9IHRoaXMuR2V0RXhwb3J0ZWRNYXRlcmlhbE5hbWUgKG1hdGVyaWFsLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC50eXBlID09PSBNYXRlcmlhbFR5cGUuUGhvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmhpbm9NYXRlcmlhbC5hbWJpZW50Q29sb3IgPSBDb2xvclRvUmhpbm9Db2xvciAobWF0ZXJpYWwuYW1iaWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJoaW5vTWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IENvbG9yVG9SaGlub0NvbG9yIChtYXRlcmlhbC5zcGVjdWxhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJoaW5vTWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gQ29sb3JUb1JoaW5vQ29sb3IgKG1hdGVyaWFsLmNvbG9yKTtcbiAgICAgICAgICAgICAgICByaGlub01hdGVyaWFsLnRyYW5zcGFyZW5jeSA9IDEuMCAtIG1hdGVyaWFsLm9wYWNpdHk7XG5cbiAgICAgICAgICAgICAgICBsZXQgcmhpbm9NYXRlcmlhbEluZGV4ID0gcmhpbm9Eb2MubWF0ZXJpYWxzICgpLmNvdW50ICgpO1xuICAgICAgICAgICAgICAgIHJoaW5vRG9jLm1hdGVyaWFscyAoKS5hZGQgKHJoaW5vTWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHJoaW5vTWVzaCA9IG5ldyB0aGlzLnJoaW5vLk1lc2guY3JlYXRlRnJvbVRocmVlanNKU09OICh0aHJlZUpzb24pO1xuICAgICAgICAgICAgICAgIGxldCByaGlub0F0dHJpYnV0ZXMgPSBuZXcgdGhpcy5yaGluby5PYmplY3RBdHRyaWJ1dGVzICgpO1xuICAgICAgICAgICAgICAgIHJoaW5vQXR0cmlidXRlcy5uYW1lID0gdGhpcy5HZXRFeHBvcnRlZE1lc2hOYW1lIChtZXNoLkdldE5hbWUgKCkpO1xuICAgICAgICAgICAgICAgIHJoaW5vQXR0cmlidXRlcy5tYXRlcmlhbFNvdXJjZSA9IHRoaXMucmhpbm8uT2JqZWN0TWF0ZXJpYWxTb3VyY2UuTWF0ZXJpYWxGcm9tT2JqZWN0O1xuICAgICAgICAgICAgICAgIHJoaW5vQXR0cmlidXRlcy5tYXRlcmlhbEluZGV4ID0gcmhpbm9NYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgICAgIHJoaW5vRG9jLm9iamVjdHMgKCkuYWRkIChyaGlub01lc2gsIHJoaW5vQXR0cmlidXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB3cml0ZU9wdGlvbnMgPSBuZXcgdGhpcy5yaGluby5GaWxlM2RtV3JpdGVPcHRpb25zICgpO1xuICAgICAgICB3cml0ZU9wdGlvbnMudmVyc2lvbiA9IDY7XG4gICAgICAgIGxldCByaGlub0RvY0J1ZmZlciA9IHJoaW5vRG9jLnRvQnl0ZUFycmF5ICh3cml0ZU9wdGlvbnMpO1xuXG4gICAgICAgIHJoaW5vRmlsZS5TZXRCdWZmZXJDb250ZW50IChyaGlub0RvY0J1ZmZlcik7XG5cdFx0b25GaW5pc2ggKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRXNjYXBlSHRtbENoYXJzIH0gZnJvbSAnLi4vY29yZS9jb3JlLmpzJztcbmltcG9ydCB7IFJHQkNvbG9yVG9IZXhTdHJpbmcgfSBmcm9tICcuL2NvbG9yLmpzJztcblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5VHlwZSA9XG57XG4gICAgVGV4dCA6IDEsXG4gICAgSW50ZWdlciA6IDIsXG4gICAgTnVtYmVyIDogMyxcbiAgICBCb29sZWFuIDogNCxcbiAgICBQZXJjZW50IDogNSxcbiAgICBDb2xvciA6IDZcbn07XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVxue1xuICAgIGNvbnN0cnVjdG9yICh0eXBlLCBuYW1lLCB2YWx1ZSlcbiAgICB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBDbG9uZSAoKVxuICAgIHtcbiAgICAgICAgY29uc3QgY2xvbmFibGUgPSAodGhpcy50eXBlID09PSBQcm9wZXJ0eVR5cGUuQ29sb3IpO1xuICAgICAgICBpZiAoY2xvbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcGVydHkgKHRoaXMudHlwZSwgdGhpcy5uYW1lLCB0aGlzLnZhbHVlLkNsb25lICgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcGVydHkgKHRoaXMudHlwZSwgdGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5R3JvdXBcbntcbiAgICBjb25zdHJ1Y3RvciAobmFtZSlcbiAgICB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IFtdO1xuICAgIH1cblxuICAgIFByb3BlcnR5Q291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIEFkZFByb3BlcnR5IChwcm9wZXJ0eSlcbiAgICB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5wdXNoIChwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgR2V0UHJvcGVydHkgKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tpbmRleF07XG4gICAgfVxuXG4gICAgQ2xvbmUgKClcbiAgICB7XG4gICAgICAgIGxldCBjbG9uZWQgPSBuZXcgUHJvcGVydHlHcm91cCAodGhpcy5uYW1lKTtcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgb2YgdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBjbG9uZWQuQWRkUHJvcGVydHkgKHByb3BlcnR5LkNsb25lICgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByb3BlcnR5VG9TdHJpbmcgKHByb3BlcnR5KVxue1xuICAgIGlmIChwcm9wZXJ0eS50eXBlID09PSBQcm9wZXJ0eVR5cGUuVGV4dCkge1xuICAgICAgICByZXR1cm4gRXNjYXBlSHRtbENoYXJzIChwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eS50eXBlID09PSBQcm9wZXJ0eVR5cGUuSW50ZWdlcikge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkudmFsdWUudG9Mb2NhbGVTdHJpbmcgKCk7XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eS50eXBlID09PSBQcm9wZXJ0eVR5cGUuTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eS52YWx1ZS50b0xvY2FsZVN0cmluZyAodW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDIsXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDJcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eS50eXBlID09PSBQcm9wZXJ0eVR5cGUuQm9vbGVhbikge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkudmFsdWUgPyAnVHJ1ZScgOiAnRmFsc2UnO1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHkudHlwZSA9PT0gUHJvcGVydHlUeXBlLlBlcmNlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50IChwcm9wZXJ0eS52YWx1ZSAqIDEwMCwgMTApLnRvU3RyaW5nICgpICsgJyUnO1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHkudHlwZSA9PT0gUHJvcGVydHlUeXBlLkNvbG9yKSB7XG4gICAgICAgIHJldHVybiAnIycgKyBSR0JDb2xvclRvSGV4U3RyaW5nIChwcm9wZXJ0eS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHsgRmlsZUZvcm1hdCB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBDb2xvckNvbXBvbmVudEZyb21GbG9hdCB9IGZyb20gJy4uL21vZGVsL2NvbG9yLmpzJztcbmltcG9ydCB7IFByb3BlcnR5VG9TdHJpbmcgfSBmcm9tICcuLi9tb2RlbC9wcm9wZXJ0eS5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlZEZpbGUsIEV4cG9ydGVyQmFzZSB9IGZyb20gJy4vZXhwb3J0ZXJiYXNlLmpzJztcblxuZnVuY3Rpb24gR2VuZXJhdGVHdWlkICgpXG57XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWRcbiAgICBsZXQgdGVtcGxhdGUgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4JztcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSAoL1t4eV0vZywgKGMpID0+IHtcbiAgICAgICAgbGV0IHIgPSBNYXRoLnJhbmRvbSAoKSAqIDE2IHwgMDtcbiAgICAgICAgbGV0IHYgPSAoYyA9PT0gJ3gnKSA/IHIgOiAociAmIDB4MyB8IDB4OCk7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nICgxNik7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlckJpbSBleHRlbmRzIEV4cG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5FeHBvcnQgKGZvcm1hdCwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5UZXh0ICYmIGV4dGVuc2lvbiA9PT0gJ2JpbSc7XG4gICAgfVxuXG4gICAgRXhwb3J0Q29udGVudCAoZXhwb3J0ZXJNb2RlbCwgZm9ybWF0LCBmaWxlcywgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBsZXQgYmltQ29udGVudCA9IHtcbiAgICAgICAgICAgIHNjaGVtYV92ZXJzaW9uIDogJzEuMS4wJyxcbiAgICAgICAgICAgIG1lc2hlcyA6IFtdLFxuICAgICAgICAgICAgZWxlbWVudHMgOiBbXSxcbiAgICAgICAgICAgIGluZm8gOiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuRXhwb3J0UHJvcGVydGllcyAoZXhwb3J0ZXJNb2RlbC5HZXRNb2RlbCAoKSwgYmltQ29udGVudC5pbmZvKTtcblxuICAgICAgICBsZXQgbWVzaElkID0gMDtcbiAgICAgICAgZXhwb3J0ZXJNb2RlbC5FbnVtZXJhdGVUcmFuc2Zvcm1lZE1lc2hJbnN0YW5jZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBsZXQgYmltTWVzaCA9IHtcbiAgICAgICAgICAgICAgICBtZXNoX2lkIDogbWVzaElkLFxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzIDogW10sXG4gICAgICAgICAgICAgICAgaW5kaWNlcyA6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtZXNoLkVudW1lcmF0ZVZlcnRpY2VzICgodmVydGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgYmltTWVzaC5jb29yZGluYXRlcy5wdXNoICh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWVzaC5FbnVtZXJhdGVUcmlhbmdsZVZlcnRleEluZGljZXMgKCh2MCwgdjEsIHYyKSA9PiB7XG4gICAgICAgICAgICAgICAgYmltTWVzaC5pbmRpY2VzLnB1c2ggKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBiaW1FbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIG1lc2hfaWQgOiBtZXNoSWQsXG4gICAgICAgICAgICAgICAgdHlwZSA6ICdPdGhlcicsXG4gICAgICAgICAgICAgICAgY29sb3IgOiB7XG4gICAgICAgICAgICAgICAgICAgIHIgOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGcgOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGIgOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGEgOiAyNTVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZlY3RvciA6IHtcbiAgICAgICAgICAgICAgICAgICAgeCA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgeSA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgeiA6IDAuMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcm90YXRpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgIHF4OiAwLjAsXG4gICAgICAgICAgICAgICAgICAgIHF5OiAwLjAsXG4gICAgICAgICAgICAgICAgICAgIHF6OiAwLjAsXG4gICAgICAgICAgICAgICAgICAgIHF3OiAxLjBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGd1aWQgOiBHZW5lcmF0ZUd1aWQgKCksXG4gICAgICAgICAgICAgICAgaW5mbyA6IHt9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgZGVmYXVsdENvbG9yID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBoYXNPbmx5T25lQ29sb3IgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IGZhY2VDb2xvcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5UcmlhbmdsZUNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChpKTtcbiAgICAgICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSBleHBvcnRlck1vZGVsLkdldE1hdGVyaWFsICh0cmlhbmdsZS5tYXQpO1xuICAgICAgICAgICAgICAgIGxldCBmYWNlQ29sb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIHIgOiBtYXRlcmlhbC5jb2xvci5yLFxuICAgICAgICAgICAgICAgICAgICBnIDogbWF0ZXJpYWwuY29sb3IuZyxcbiAgICAgICAgICAgICAgICAgICAgYiA6IG1hdGVyaWFsLmNvbG9yLmIsXG4gICAgICAgICAgICAgICAgICAgIGEgOiBDb2xvckNvbXBvbmVudEZyb21GbG9hdCAobWF0ZXJpYWwub3BhY2l0eSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmYWNlQ29sb3JzLnB1c2ggKGZhY2VDb2xvci5yLCBmYWNlQ29sb3IuZywgZmFjZUNvbG9yLmIsIGZhY2VDb2xvci5hKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT25seU9uZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q29sb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvciA9IGZhY2VDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q29sb3IuciAhPT0gZmFjZUNvbG9yLnIgfHwgZGVmYXVsdENvbG9yLmcgIT09IGZhY2VDb2xvci5nIHx8IGRlZmF1bHRDb2xvci5iICE9PSBmYWNlQ29sb3IuYiB8fCBkZWZhdWx0Q29sb3IuYSAhPT0gZmFjZUNvbG9yLmEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNPbmx5T25lQ29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzT25seU9uZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgYmltRWxlbWVudC5jb2xvciA9IGRlZmF1bHRDb2xvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmltRWxlbWVudC5mYWNlX2NvbG9ycyA9IGZhY2VDb2xvcnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJpbUVsZW1lbnQuaW5mb1snTmFtZSddID0gbWVzaC5HZXROYW1lICgpO1xuICAgICAgICAgICAgdGhpcy5FeHBvcnRQcm9wZXJ0aWVzIChtZXNoLCBiaW1FbGVtZW50LmluZm8pO1xuXG4gICAgICAgICAgICBiaW1Db250ZW50Lm1lc2hlcy5wdXNoIChiaW1NZXNoKTtcbiAgICAgICAgICAgIGJpbUNvbnRlbnQuZWxlbWVudHMucHVzaCAoYmltRWxlbWVudCk7XG4gICAgICAgICAgICBtZXNoSWQgKz0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGJpbUZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlICgnbW9kZWwuYmltJyk7XG4gICAgICAgIGJpbUZpbGUuU2V0VGV4dENvbnRlbnQgKEpTT04uc3RyaW5naWZ5IChiaW1Db250ZW50LCBudWxsLCA0KSk7XG4gICAgICAgIGZpbGVzLnB1c2ggKGJpbUZpbGUpO1xuICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICB9XG5cbiAgICBFeHBvcnRQcm9wZXJ0aWVzIChlbGVtZW50LCB0YXJnZXRPYmplY3QpXG4gICAge1xuICAgICAgICBmb3IgKGxldCBncm91cEluZGV4ID0gMDsgZ3JvdXBJbmRleCA8IGVsZW1lbnQuUHJvcGVydHlHcm91cENvdW50ICgpOyBncm91cEluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBncm91cCA9IGVsZW1lbnQuR2V0UHJvcGVydHlHcm91cCAoZ3JvdXBJbmRleCk7XG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eUluZGV4ID0gMDsgcHJvcGVydHlJbmRleCA8IGdyb3VwLlByb3BlcnR5Q291bnQgKCk7IHByb3BlcnR5SW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IGdyb3VwLkdldFByb3BlcnR5IChwcm9wZXJ0eUluZGV4KTtcbiAgICAgICAgICAgICAgICB0YXJnZXRPYmplY3RbcHJvcGVydHkubmFtZV0gPSBQcm9wZXJ0eVRvU3RyaW5nIChwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQmluYXJ5V3JpdGVyXG57XG4gICAgY29uc3RydWN0b3IgKGJ5dGVMZW5ndGgsIGlzTGl0dGxlRW5kaWFuKVxuICAgIHtcbiAgICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlciAoYnl0ZUxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcgKHRoaXMuYXJyYXlCdWZmZXIpO1xuICAgICAgICB0aGlzLmlzTGl0dGxlRW5kaWFuID0gaXNMaXR0bGVFbmRpYW47XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAwO1xuICAgIH1cblxuICAgIEdldFBvc2l0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBTZXRQb3NpdGlvbiAocG9zaXRpb24pXG4gICAge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgfVxuXG4gICAgRW5kICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbiA+PSB0aGlzLmFycmF5QnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgR2V0QnVmZmVyICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJheUJ1ZmZlcjtcbiAgICB9XG5cbiAgICBXcml0ZUFycmF5QnVmZmVyIChhcnJheUJ1ZmZlcilcbiAgICB7XG4gICAgICAgIGxldCBidWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkgKGFycmF5QnVmZmVyKTtcbiAgICAgICAgbGV0IHRoaXNCdWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkgKHRoaXMuYXJyYXlCdWZmZXIpO1xuICAgICAgICB0aGlzQnVmZmVyVmlldy5zZXQgKGJ1ZmZlclZpZXcsIHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGFycmF5QnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgV3JpdGVCb29sZWFuOCAodmFsKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRJbnQ4ICh0aGlzLnBvc2l0aW9uLCB2YWwgPyAxIDogMCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMTtcbiAgICB9XG5cbiAgICBXcml0ZUNoYXJhY3RlcjggKHZhbClcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0SW50OCAodGhpcy5wb3NpdGlvbiwgdmFsKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyAxO1xuICAgIH1cblxuICAgIFdyaXRlVW5zaWduZWRDaGFyYWN0ZXI4ICh2YWwpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQ4ICh0aGlzLnBvc2l0aW9uLCB2YWwpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiArIDE7XG4gICAgfVxuXG4gICAgV3JpdGVJbnRlZ2VyMTYgKHZhbClcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0SW50MTYgKHRoaXMucG9zaXRpb24sIHZhbCwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMjtcbiAgICB9XG5cbiAgICBXcml0ZVVuc2lnbmVkSW50ZWdlcjE2ICh2YWwpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQxNiAodGhpcy5wb3NpdGlvbiwgdmFsLCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyAyO1xuICAgIH1cblxuICAgIFdyaXRlSW50ZWdlcjMyICh2YWwpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldEludDMyICh0aGlzLnBvc2l0aW9uLCB2YWwsIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiArIDQ7XG4gICAgfVxuXG4gICAgV3JpdGVVbnNpZ25lZEludGVnZXIzMiAodmFsKVxuICAgIHtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MzIgKHRoaXMucG9zaXRpb24sIHZhbCwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgNDtcbiAgICB9XG5cbiAgICBXcml0ZUZsb2F0MzIgKHZhbClcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0RmxvYXQzMiAodGhpcy5wb3NpdGlvbiwgdmFsLCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyA0O1xuICAgIH1cblxuICAgIFdyaXRlRG91YmxlNjQgKHZhbClcbiAgICB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0RmxvYXQ2NCAodGhpcy5wb3NpdGlvbiwgdmFsLCB0aGlzLmlzTGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyA4O1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBDb29yZDREXG57XG5cdGNvbnN0cnVjdG9yICh4LCB5LCB6LCB3KVxuXHR7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMudyA9IHc7XG5cdH1cblxuXHRDbG9uZSAoKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBDb29yZDREICh0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBJc0VxdWFsIH0gZnJvbSAnLi9nZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBRdWF0ZXJuaW9uXG57XG5cdGNvbnN0cnVjdG9yICh4LCB5LCB6LCB3KVxuXHR7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMudyA9IHc7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFF1YXRlcm5pb25Jc0VxdWFsIChhLCBiKVxue1xuXHRyZXR1cm4gSXNFcXVhbCAoYS54LCBiLngpICYmIElzRXF1YWwgKGEueSwgYi55KSAmJiBJc0VxdWFsIChhLnosIGIueikgJiYgSXNFcXVhbCAoYS53LCBiLncpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXJyYXlUb1F1YXRlcm5pb24gKGFycilcbntcblx0cmV0dXJuIG5ldyBRdWF0ZXJuaW9uIChhcnJbMF0sIGFyclsxXSwgYXJyWzJdLCBhcnJbM10pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUXVhdGVybmlvbkZyb21BeGlzQW5nbGUgKGF4aXMsIGFuZ2xlKVxue1xuXHRjb25zdCBhID0gYW5nbGUgLyAyLjA7XG5cdGNvbnN0IHMgPSBNYXRoLnNpbiAoYSk7XG5cblx0cmV0dXJuIG5ldyBRdWF0ZXJuaW9uIChcblx0XHRheGlzLnggKiBzLFxuXHRcdGF4aXMueSAqIHMsXG5cdFx0YXhpcy56ICogcyxcblx0XHRNYXRoLmNvcyAoYSlcblx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFF1YXRlcm5pb25Gcm9tWFlaICh4LCB5LCB6LCBtb2RlKSB7XG5cblx0Y29uc3QgYzEgPSBNYXRoLmNvcyAoeCAvIDIuMCk7XG5cdGNvbnN0IGMyID0gTWF0aC5jb3MgKHkgLyAyLjApO1xuXHRjb25zdCBjMyA9IE1hdGguY29zICh6IC8gMi4wKTtcblxuXHRjb25zdCBzMSA9IE1hdGguc2luICh4IC8gMi4wKTtcblx0Y29uc3QgczIgPSBNYXRoLnNpbiAoeSAvIDIuMCk7XG5cdGNvbnN0IHMzID0gTWF0aC5zaW4gKHogLyAyLjApO1xuXG5cdGxldCBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24gKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG5cdGlmIChtb2RlID09PSAnWFlaJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0fSBlbHNlIGlmIChtb2RlID09PSAnWVhaJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0fSBlbHNlIGlmIChtb2RlID09PSAnWlhZJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0fSBlbHNlIGlmIChtb2RlID09PSAnWllYJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0fSBlbHNlIGlmIChtb2RlID09PSAnWVpYJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0fSBlbHNlIGlmIChtb2RlID09PSAnWFpZJykge1xuXHRcdHF1YXRlcm5pb24ueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRxdWF0ZXJuaW9uLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0cXVhdGVybmlvbi56ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdHF1YXRlcm5pb24udyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBxdWF0ZXJuaW9uO1xufVxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vcXVhdGVybmlvbi5qcyc7XG5pbXBvcnQgeyBDb29yZDNELCBWZWN0b3JMZW5ndGgzRCB9IGZyb20gJy4vY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBDb29yZDREIH0gZnJvbSAnLi9jb29yZDRkLmpzJztcbmltcG9ydCB7IElzRXF1YWwsIElzTmVnYXRpdmUgfSBmcm9tICcuL2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IFF1YXRlcm5pb25Gcm9tQXhpc0FuZ2xlIH0gZnJvbSAnLi9xdWF0ZXJuaW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIE1hdHJpeFxue1xuICAgIGNvbnN0cnVjdG9yIChtYXRyaXgpXG4gICAge1xuICAgICAgICB0aGlzLm1hdHJpeCA9IG51bGw7XG4gICAgICAgIGlmIChtYXRyaXggIT09IHVuZGVmaW5lZCAmJiBtYXRyaXggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubWF0cml4ID0gbWF0cml4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSXNWYWxpZCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4ICE9PSBudWxsO1xuICAgIH1cblxuICAgIFNldCAobWF0cml4KVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIEdldCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4O1xuICAgIH1cblxuICAgIENsb25lICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdGhpcy5tYXRyaXhbMF0sIHRoaXMubWF0cml4WzFdLCB0aGlzLm1hdHJpeFsyXSwgdGhpcy5tYXRyaXhbM10sXG4gICAgICAgICAgICB0aGlzLm1hdHJpeFs0XSwgdGhpcy5tYXRyaXhbNV0sIHRoaXMubWF0cml4WzZdLCB0aGlzLm1hdHJpeFs3XSxcbiAgICAgICAgICAgIHRoaXMubWF0cml4WzhdLCB0aGlzLm1hdHJpeFs5XSwgdGhpcy5tYXRyaXhbMTBdLCB0aGlzLm1hdHJpeFsxMV0sXG4gICAgICAgICAgICB0aGlzLm1hdHJpeFsxMl0sIHRoaXMubWF0cml4WzEzXSwgdGhpcy5tYXRyaXhbMTRdLCB0aGlzLm1hdHJpeFsxNV1cbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXggKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgQ3JlYXRlSWRlbnRpdHkgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWF0cml4ID0gW1xuICAgICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIElzSWRlbnRpdHkgKClcbiAgICB7XG4gICAgICAgIGxldCBpZGVudGl0eSA9IG5ldyBNYXRyaXggKCkuQ3JlYXRlSWRlbnRpdHkgKCkuR2V0ICgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGlmICghSXNFcXVhbCAodGhpcy5tYXRyaXhbaV0sIGlkZW50aXR5W2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBDcmVhdGVUcmFuc2xhdGlvbiAoeCwgeSwgeilcbiAgICB7XG4gICAgICAgIHRoaXMubWF0cml4ID0gW1xuICAgICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCwgMC4wLFxuICAgICAgICAgICAgeCwgeSwgeiwgMS4wXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIENyZWF0ZVJvdGF0aW9uICh4LCB5LCB6LCB3KVxuICAgIHtcbiAgICAgICAgbGV0IHgyID0geCArIHg7XG4gICAgICAgIGxldCB5MiA9IHkgKyB5O1xuICAgICAgICBsZXQgejIgPSB6ICsgejtcbiAgICAgICAgbGV0IHh4ID0geCAqIHgyO1xuICAgICAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgICAgIGxldCB4eiA9IHggKiB6MjtcbiAgICAgICAgbGV0IHl5ID0geSAqIHkyO1xuICAgICAgICBsZXQgeXogPSB5ICogejI7XG4gICAgICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICAgICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgICAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgICAgIGxldCB3eiA9IHcgKiB6MjtcbiAgICAgICAgdGhpcy5tYXRyaXggPSBbXG4gICAgICAgICAgICAxLjAgLSAoeXkgKyB6eiksIHh5ICsgd3osIHh6IC0gd3ksIDAuMCxcbiAgICAgICAgICAgIHh5IC0gd3osIDEuMCAtICh4eCArIHp6KSwgeXogKyB3eCwgMC4wLFxuICAgICAgICAgICAgeHogKyB3eSwgeXogLSB3eCwgMS4wIC0gKHh4ICsgeXkpLCAwLjAsXG4gICAgICAgICAgICAwLjAsIDAuMCwgMC4wLCAxLjBcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgQ3JlYXRlUm90YXRpb25BeGlzQW5nbGUgKGF4aXMsIGFuZ2xlKVxuICAgIHtcbiAgICAgICAgbGV0IHF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uRnJvbUF4aXNBbmdsZSAoYXhpcywgYW5nbGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5DcmVhdGVSb3RhdGlvbiAocXVhdGVybmlvbi54LCBxdWF0ZXJuaW9uLnksIHF1YXRlcm5pb24ueiwgcXVhdGVybmlvbi53KTtcbiAgICB9XG5cbiAgICBDcmVhdGVTY2FsZSAoeCwgeSwgeilcbiAgICB7XG4gICAgICAgIHRoaXMubWF0cml4ID0gW1xuICAgICAgICAgICAgeCwgMC4wLCAwLjAsIDAuMCxcbiAgICAgICAgICAgIDAuMCwgeSwgMC4wLCAwLjAsXG4gICAgICAgICAgICAwLjAsIDAuMCwgeiwgMC4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIENvbXBvc2VUUlMgKHRyYW5zbGF0aW9uLCByb3RhdGlvbiwgc2NhbGUpXG4gICAge1xuICAgICAgICBsZXQgdHggPSB0cmFuc2xhdGlvbi54O1xuICAgICAgICBsZXQgdHkgPSB0cmFuc2xhdGlvbi55O1xuICAgICAgICBsZXQgdHogPSB0cmFuc2xhdGlvbi56O1xuICAgICAgICBsZXQgcXggPSByb3RhdGlvbi54O1xuICAgICAgICBsZXQgcXkgPSByb3RhdGlvbi55O1xuICAgICAgICBsZXQgcXogPSByb3RhdGlvbi56O1xuICAgICAgICBsZXQgcXcgPSByb3RhdGlvbi53O1xuICAgICAgICBsZXQgc3ggPSBzY2FsZS54O1xuICAgICAgICBsZXQgc3kgPSBzY2FsZS55O1xuICAgICAgICBsZXQgc3ogPSBzY2FsZS56O1xuXG4gICAgICAgIGxldCB4MiA9IHF4ICsgcXg7XG4gICAgICAgIGxldCB5MiA9IHF5ICsgcXk7XG4gICAgICAgIGxldCB6MiA9IHF6ICsgcXo7XG4gICAgICAgIGxldCB4eCA9IHF4ICogeDI7XG4gICAgICAgIGxldCB4eSA9IHF4ICogeTI7XG4gICAgICAgIGxldCB4eiA9IHF4ICogejI7XG4gICAgICAgIGxldCB5eSA9IHF5ICogeTI7XG4gICAgICAgIGxldCB5eiA9IHF5ICogejI7XG4gICAgICAgIGxldCB6eiA9IHF6ICogejI7XG4gICAgICAgIGxldCB3eCA9IHF3ICogeDI7XG4gICAgICAgIGxldCB3eSA9IHF3ICogeTI7XG4gICAgICAgIGxldCB3eiA9IHF3ICogejI7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBbXG4gICAgICAgICAgICAoMS4wIC0gKHl5ICsgenopKSAqIHN4LCAoeHkgKyB3eikgKiBzeCwgKHh6IC0gd3kpICogc3gsIDAuMCxcbiAgICAgICAgICAgICh4eSAtIHd6KSAqIHN5LCAoMS4wIC0gKHh4ICsgenopKSAqIHN5LCAoeXogKyB3eCkgKiBzeSwgMC4wLFxuICAgICAgICAgICAgKHh6ICsgd3kpICogc3osICh5eiAtIHd4KSAqIHN6LCAoMS4wIC0gKHh4ICsgeXkpKSAqIHN6LCAwLjAsXG4gICAgICAgICAgICB0eCwgdHksIHR6LCAxLjBcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgRGVjb21wb3NlVFJTICgpXG4gICAge1xuICAgICAgICBsZXQgdHJhbnNsYXRpb24gPSBuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICB0aGlzLm1hdHJpeFsxMl0sXG4gICAgICAgICAgICB0aGlzLm1hdHJpeFsxM10sXG4gICAgICAgICAgICB0aGlzLm1hdHJpeFsxNF1cbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgc3ggPSBWZWN0b3JMZW5ndGgzRCAodGhpcy5tYXRyaXhbMF0sIHRoaXMubWF0cml4WzFdLCB0aGlzLm1hdHJpeFsyXSk7XG4gICAgICAgIGxldCBzeSA9IFZlY3Rvckxlbmd0aDNEICh0aGlzLm1hdHJpeFs0XSwgdGhpcy5tYXRyaXhbNV0sIHRoaXMubWF0cml4WzZdKTtcbiAgICAgICAgbGV0IHN6ID0gVmVjdG9yTGVuZ3RoM0QgKHRoaXMubWF0cml4WzhdLCB0aGlzLm1hdHJpeFs5XSwgdGhpcy5tYXRyaXhbMTBdKTtcbiAgICAgICAgbGV0IGRldGVybWluYW50ID0gdGhpcy5EZXRlcm1pbmFudCAoKTtcbiAgICAgICAgaWYgKElzTmVnYXRpdmUgKGRldGVybWluYW50KSkge1xuICAgICAgICAgICAgc3ggKj0gLTEuMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NhbGUgPSBuZXcgQ29vcmQzRCAoc3gsIHN5LCBzeik7XG5cbiAgICAgICAgbGV0IG0wMCA9IHRoaXMubWF0cml4WzBdIC8gc3g7XG4gICAgICAgIGxldCBtMDEgPSB0aGlzLm1hdHJpeFs0XSAvIHN5O1xuICAgICAgICBsZXQgbTAyID0gdGhpcy5tYXRyaXhbOF0gLyBzejtcbiAgICAgICAgbGV0IG0xMCA9IHRoaXMubWF0cml4WzFdIC8gc3g7XG4gICAgICAgIGxldCBtMTEgPSB0aGlzLm1hdHJpeFs1XSAvIHN5O1xuICAgICAgICBsZXQgbTEyID0gdGhpcy5tYXRyaXhbOV0gLyBzejtcbiAgICAgICAgbGV0IG0yMCA9IHRoaXMubWF0cml4WzJdIC8gc3g7XG4gICAgICAgIGxldCBtMjEgPSB0aGlzLm1hdHJpeFs2XSAvIHN5O1xuICAgICAgICBsZXQgbTIyID0gdGhpcy5tYXRyaXhbMTBdIC8gc3o7XG5cbiAgICAgICAgLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cbiAgICAgICAgbGV0IHJvdGF0aW9uID0gbnVsbDtcbiAgICAgICAgbGV0IHRyID0gbTAwICsgbTExICsgbTIyO1xuICAgICAgICBpZiAodHIgPiAwLjApIHtcbiAgICAgICAgICAgIGxldCBzID0gTWF0aC5zcXJ0ICh0ciArIDEuMCkgKiAyLjA7XG4gICAgICAgICAgICByb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uIChcbiAgICAgICAgICAgICAgICAobTIxIC0gbTEyKSAvIHMsXG4gICAgICAgICAgICAgICAgKG0wMiAtIG0yMCkgLyBzLFxuICAgICAgICAgICAgICAgIChtMTAgLSBtMDEpIC8gcyxcbiAgICAgICAgICAgICAgICAwLjI1ICogc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICgobTAwID4gbTExKSAmJiAobTAwID4gbTIyKSkge1xuICAgICAgICAgICAgbGV0IHMgPSBNYXRoLnNxcnQgKDEuMCArIG0wMCAtIG0xMSAtIG0yMikgKiAyLjA7XG4gICAgICAgICAgICByb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uIChcbiAgICAgICAgICAgICAgICAwLjI1ICogcyxcbiAgICAgICAgICAgICAgICAobTAxICsgbTEwKSAvIHMsXG4gICAgICAgICAgICAgICAgKG0wMiArIG0yMCkgLyBzLFxuICAgICAgICAgICAgICAgIChtMjEgLSBtMTIpIC8gc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChtMTEgPiBtMjIpIHtcbiAgICAgICAgICAgIGxldCBzID0gTWF0aC5zcXJ0ICgxLjAgKyBtMTEgLSBtMDAgLSBtMjIpICogMi4wO1xuICAgICAgICAgICAgcm90YXRpb24gPSBuZXcgUXVhdGVybmlvbiAoXG4gICAgICAgICAgICAgICAgKG0wMSArIG0xMCkgLyBzLFxuICAgICAgICAgICAgICAgIDAuMjUgKiBzLFxuICAgICAgICAgICAgICAgIChtMTIgKyBtMjEpIC8gcyxcbiAgICAgICAgICAgICAgICAobTAyIC0gbTIwKSAvIHNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcyA9IE1hdGguc3FydCAoMS4wICsgbTIyIC0gbTAwIC0gbTExKSAqIDIuMDtcbiAgICAgICAgICAgIHJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24gKFxuICAgICAgICAgICAgICAgIChtMDIgKyBtMjApIC8gcyxcbiAgICAgICAgICAgICAgICAobTEyICsgbTIxKSAvIHMsXG4gICAgICAgICAgICAgICAgMC4yNSAqIHMsXG4gICAgICAgICAgICAgICAgKG0xMCAtIG0wMSkgLyBzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uIDogdHJhbnNsYXRpb24sXG4gICAgICAgICAgICByb3RhdGlvbiA6IHJvdGF0aW9uLFxuICAgICAgICAgICAgc2NhbGUgOiBzY2FsZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIERldGVybWluYW50ICgpXG4gICAge1xuICAgICAgICBsZXQgYTAwID0gdGhpcy5tYXRyaXhbMF07XG4gICAgICAgIGxldCBhMDEgPSB0aGlzLm1hdHJpeFsxXTtcbiAgICAgICAgbGV0IGEwMiA9IHRoaXMubWF0cml4WzJdO1xuICAgICAgICBsZXQgYTAzID0gdGhpcy5tYXRyaXhbM107XG4gICAgICAgIGxldCBhMTAgPSB0aGlzLm1hdHJpeFs0XTtcbiAgICAgICAgbGV0IGExMSA9IHRoaXMubWF0cml4WzVdO1xuICAgICAgICBsZXQgYTEyID0gdGhpcy5tYXRyaXhbNl07XG4gICAgICAgIGxldCBhMTMgPSB0aGlzLm1hdHJpeFs3XTtcbiAgICAgICAgbGV0IGEyMCA9IHRoaXMubWF0cml4WzhdO1xuICAgICAgICBsZXQgYTIxID0gdGhpcy5tYXRyaXhbOV07XG4gICAgICAgIGxldCBhMjIgPSB0aGlzLm1hdHJpeFsxMF07XG4gICAgICAgIGxldCBhMjMgPSB0aGlzLm1hdHJpeFsxMV07XG4gICAgICAgIGxldCBhMzAgPSB0aGlzLm1hdHJpeFsxMl07XG4gICAgICAgIGxldCBhMzEgPSB0aGlzLm1hdHJpeFsxM107XG4gICAgICAgIGxldCBhMzIgPSB0aGlzLm1hdHJpeFsxNF07XG4gICAgICAgIGxldCBhMzMgPSB0aGlzLm1hdHJpeFsxNV07XG5cbiAgICAgICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICAgICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICAgICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICAgICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICAgICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICAgICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICAgICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICAgICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICAgICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICAgICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICAgICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICAgICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgICAgICBsZXQgZGV0ZXJtaW5hbnQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG4gICAgICAgIHJldHVybiBkZXRlcm1pbmFudDtcbiAgICB9XG5cbiAgICBJbnZlcnQgKClcbiAgICB7XG4gICAgICAgIGxldCBhMDAgPSB0aGlzLm1hdHJpeFswXTtcbiAgICAgICAgbGV0IGEwMSA9IHRoaXMubWF0cml4WzFdO1xuICAgICAgICBsZXQgYTAyID0gdGhpcy5tYXRyaXhbMl07XG4gICAgICAgIGxldCBhMDMgPSB0aGlzLm1hdHJpeFszXTtcbiAgICAgICAgbGV0IGExMCA9IHRoaXMubWF0cml4WzRdO1xuICAgICAgICBsZXQgYTExID0gdGhpcy5tYXRyaXhbNV07XG4gICAgICAgIGxldCBhMTIgPSB0aGlzLm1hdHJpeFs2XTtcbiAgICAgICAgbGV0IGExMyA9IHRoaXMubWF0cml4WzddO1xuICAgICAgICBsZXQgYTIwID0gdGhpcy5tYXRyaXhbOF07XG4gICAgICAgIGxldCBhMjEgPSB0aGlzLm1hdHJpeFs5XTtcbiAgICAgICAgbGV0IGEyMiA9IHRoaXMubWF0cml4WzEwXTtcbiAgICAgICAgbGV0IGEyMyA9IHRoaXMubWF0cml4WzExXTtcbiAgICAgICAgbGV0IGEzMCA9IHRoaXMubWF0cml4WzEyXTtcbiAgICAgICAgbGV0IGEzMSA9IHRoaXMubWF0cml4WzEzXTtcbiAgICAgICAgbGV0IGEzMiA9IHRoaXMubWF0cml4WzE0XTtcbiAgICAgICAgbGV0IGEzMyA9IHRoaXMubWF0cml4WzE1XTtcblxuICAgICAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgICAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgICAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgICAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgICAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgICAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgICAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgICAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgICAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgICAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgICAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgICAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgICAgIGxldCBkZXRlcm1pbmFudCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbiAgICAgICAgaWYgKElzRXF1YWwgKGRldGVybWluYW50LCAwLjApKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBbXG4gICAgICAgICAgICAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAvIGRldGVybWluYW50LFxuICAgICAgICAgICAgKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICAgIChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgICAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAvIGRldGVybWluYW50LFxuICAgICAgICAgICAgKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICAgIChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgICAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAvIGRldGVybWluYW50LFxuICAgICAgICAgICAgKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICAgIChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgICAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAvIGRldGVybWluYW50LFxuICAgICAgICAgICAgKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICAgIChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgICAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAvIGRldGVybWluYW50LFxuICAgICAgICAgICAgKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgICAgIChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgICAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAvIGRldGVybWluYW50XG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXggKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgVHJhbnNwb3NlICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdGhpcy5tYXRyaXhbMF0sIHRoaXMubWF0cml4WzRdLCB0aGlzLm1hdHJpeFs4XSwgdGhpcy5tYXRyaXhbMTJdLFxuICAgICAgICAgICAgdGhpcy5tYXRyaXhbMV0sIHRoaXMubWF0cml4WzVdLCB0aGlzLm1hdHJpeFs5XSwgdGhpcy5tYXRyaXhbMTNdLFxuICAgICAgICAgICAgdGhpcy5tYXRyaXhbMl0sIHRoaXMubWF0cml4WzZdLCB0aGlzLm1hdHJpeFsxMF0sIHRoaXMubWF0cml4WzE0XSxcbiAgICAgICAgICAgIHRoaXMubWF0cml4WzNdLCB0aGlzLm1hdHJpeFs3XSwgdGhpcy5tYXRyaXhbMTFdLCB0aGlzLm1hdHJpeFsxNV1cbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXggKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgSW52ZXJ0VHJhbnNwb3NlICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5JbnZlcnQgKCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuVHJhbnNwb3NlICgpO1xuICAgIH1cblxuICAgIE11bHRpcGx5VmVjdG9yICh2ZWN0b3IpXG4gICAge1xuICAgICAgICBsZXQgYTAwID0gdmVjdG9yLng7XG4gICAgICAgIGxldCBhMDEgPSB2ZWN0b3IueTtcbiAgICAgICAgbGV0IGEwMiA9IHZlY3Rvci56O1xuICAgICAgICBsZXQgYTAzID0gdmVjdG9yLnc7XG5cbiAgICAgICAgbGV0IGIwMCA9IHRoaXMubWF0cml4WzBdO1xuICAgICAgICBsZXQgYjAxID0gdGhpcy5tYXRyaXhbMV07XG4gICAgICAgIGxldCBiMDIgPSB0aGlzLm1hdHJpeFsyXTtcbiAgICAgICAgbGV0IGIwMyA9IHRoaXMubWF0cml4WzNdO1xuICAgICAgICBsZXQgYjEwID0gdGhpcy5tYXRyaXhbNF07XG4gICAgICAgIGxldCBiMTEgPSB0aGlzLm1hdHJpeFs1XTtcbiAgICAgICAgbGV0IGIxMiA9IHRoaXMubWF0cml4WzZdO1xuICAgICAgICBsZXQgYjEzID0gdGhpcy5tYXRyaXhbN107XG4gICAgICAgIGxldCBiMjAgPSB0aGlzLm1hdHJpeFs4XTtcbiAgICAgICAgbGV0IGIyMSA9IHRoaXMubWF0cml4WzldO1xuICAgICAgICBsZXQgYjIyID0gdGhpcy5tYXRyaXhbMTBdO1xuICAgICAgICBsZXQgYjIzID0gdGhpcy5tYXRyaXhbMTFdO1xuICAgICAgICBsZXQgYjMwID0gdGhpcy5tYXRyaXhbMTJdO1xuICAgICAgICBsZXQgYjMxID0gdGhpcy5tYXRyaXhbMTNdO1xuICAgICAgICBsZXQgYjMyID0gdGhpcy5tYXRyaXhbMTRdO1xuICAgICAgICBsZXQgYjMzID0gdGhpcy5tYXRyaXhbMTVdO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgQ29vcmQ0RCAoXG4gICAgICAgICAgICBhMDAgKiBiMDAgKyBhMDEgKiBiMTAgKyBhMDIgKiBiMjAgKyBhMDMgKiBiMzAsXG4gICAgICAgICAgICBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjEgKyBhMDMgKiBiMzEsXG4gICAgICAgICAgICBhMDAgKiBiMDIgKyBhMDEgKiBiMTIgKyBhMDIgKiBiMjIgKyBhMDMgKiBiMzIsXG4gICAgICAgICAgICBhMDAgKiBiMDMgKyBhMDEgKiBiMTMgKyBhMDIgKiBiMjMgKyBhMDMgKiBiMzNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBNdWx0aXBseU1hdHJpeCAobWF0cml4KVxuICAgIHtcbiAgICAgICAgbGV0IGEwMCA9IHRoaXMubWF0cml4WzBdO1xuICAgICAgICBsZXQgYTAxID0gdGhpcy5tYXRyaXhbMV07XG4gICAgICAgIGxldCBhMDIgPSB0aGlzLm1hdHJpeFsyXTtcbiAgICAgICAgbGV0IGEwMyA9IHRoaXMubWF0cml4WzNdO1xuICAgICAgICBsZXQgYTEwID0gdGhpcy5tYXRyaXhbNF07XG4gICAgICAgIGxldCBhMTEgPSB0aGlzLm1hdHJpeFs1XTtcbiAgICAgICAgbGV0IGExMiA9IHRoaXMubWF0cml4WzZdO1xuICAgICAgICBsZXQgYTEzID0gdGhpcy5tYXRyaXhbN107XG4gICAgICAgIGxldCBhMjAgPSB0aGlzLm1hdHJpeFs4XTtcbiAgICAgICAgbGV0IGEyMSA9IHRoaXMubWF0cml4WzldO1xuICAgICAgICBsZXQgYTIyID0gdGhpcy5tYXRyaXhbMTBdO1xuICAgICAgICBsZXQgYTIzID0gdGhpcy5tYXRyaXhbMTFdO1xuICAgICAgICBsZXQgYTMwID0gdGhpcy5tYXRyaXhbMTJdO1xuICAgICAgICBsZXQgYTMxID0gdGhpcy5tYXRyaXhbMTNdO1xuICAgICAgICBsZXQgYTMyID0gdGhpcy5tYXRyaXhbMTRdO1xuICAgICAgICBsZXQgYTMzID0gdGhpcy5tYXRyaXhbMTVdO1xuXG4gICAgICAgIGxldCBiMDAgPSBtYXRyaXgubWF0cml4WzBdO1xuICAgICAgICBsZXQgYjAxID0gbWF0cml4Lm1hdHJpeFsxXTtcbiAgICAgICAgbGV0IGIwMiA9IG1hdHJpeC5tYXRyaXhbMl07XG4gICAgICAgIGxldCBiMDMgPSBtYXRyaXgubWF0cml4WzNdO1xuICAgICAgICBsZXQgYjEwID0gbWF0cml4Lm1hdHJpeFs0XTtcbiAgICAgICAgbGV0IGIxMSA9IG1hdHJpeC5tYXRyaXhbNV07XG4gICAgICAgIGxldCBiMTIgPSBtYXRyaXgubWF0cml4WzZdO1xuICAgICAgICBsZXQgYjEzID0gbWF0cml4Lm1hdHJpeFs3XTtcbiAgICAgICAgbGV0IGIyMCA9IG1hdHJpeC5tYXRyaXhbOF07XG4gICAgICAgIGxldCBiMjEgPSBtYXRyaXgubWF0cml4WzldO1xuICAgICAgICBsZXQgYjIyID0gbWF0cml4Lm1hdHJpeFsxMF07XG4gICAgICAgIGxldCBiMjMgPSBtYXRyaXgubWF0cml4WzExXTtcbiAgICAgICAgbGV0IGIzMCA9IG1hdHJpeC5tYXRyaXhbMTJdO1xuICAgICAgICBsZXQgYjMxID0gbWF0cml4Lm1hdHJpeFsxM107XG4gICAgICAgIGxldCBiMzIgPSBtYXRyaXgubWF0cml4WzE0XTtcbiAgICAgICAgbGV0IGIzMyA9IG1hdHJpeC5tYXRyaXhbMTVdO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBbXG4gICAgICAgICAgICBhMDAgKiBiMDAgKyBhMDEgKiBiMTAgKyBhMDIgKiBiMjAgKyBhMDMgKiBiMzAsXG4gICAgICAgICAgICBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjEgKyBhMDMgKiBiMzEsXG4gICAgICAgICAgICBhMDAgKiBiMDIgKyBhMDEgKiBiMTIgKyBhMDIgKiBiMjIgKyBhMDMgKiBiMzIsXG4gICAgICAgICAgICBhMDAgKiBiMDMgKyBhMDEgKiBiMTMgKyBhMDIgKiBiMjMgKyBhMDMgKiBiMzMsXG4gICAgICAgICAgICBhMTAgKiBiMDAgKyBhMTEgKiBiMTAgKyBhMTIgKiBiMjAgKyBhMTMgKiBiMzAsXG4gICAgICAgICAgICBhMTAgKiBiMDEgKyBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEsXG4gICAgICAgICAgICBhMTAgKiBiMDIgKyBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIsXG4gICAgICAgICAgICBhMTAgKiBiMDMgKyBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMsXG4gICAgICAgICAgICBhMjAgKiBiMDAgKyBhMjEgKiBiMTAgKyBhMjIgKiBiMjAgKyBhMjMgKiBiMzAsXG4gICAgICAgICAgICBhMjAgKiBiMDEgKyBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEsXG4gICAgICAgICAgICBhMjAgKiBiMDIgKyBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIsXG4gICAgICAgICAgICBhMjAgKiBiMDMgKyBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMsXG4gICAgICAgICAgICBhMzAgKiBiMDAgKyBhMzEgKiBiMTAgKyBhMzIgKiBiMjAgKyBhMzMgKiBiMzAsXG4gICAgICAgICAgICBhMzAgKiBiMDEgKyBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEsXG4gICAgICAgICAgICBhMzAgKiBiMDIgKyBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzIsXG4gICAgICAgICAgICBhMzAgKiBiMDMgKyBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzNcbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCAocmVzdWx0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNYXRyaXhJc0VxdWFsIChhLCBiKVxue1xuICAgIGNvbnN0IGFNYXRyaXggPSBhLkdldCAoKTtcbiAgICBjb25zdCBiTWF0cml4ID0gYi5HZXQgKCk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBpZiAoIUlzRXF1YWwgKGFNYXRyaXhbaV0sIGJNYXRyaXhbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgeyBDb29yZDNEIH0gZnJvbSAnLi9jb29yZDNkLmpzJztcbmltcG9ydCB7IENvb3JkNEQgfSBmcm9tICcuL2Nvb3JkNGQuanMnO1xuaW1wb3J0IHsgTWF0cml4LCBNYXRyaXhJc0VxdWFsIH0gZnJvbSAnLi9tYXRyaXguanMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtYXRpb25cbntcbiAgICBjb25zdHJ1Y3RvciAobWF0cml4KVxuICAgIHtcbiAgICAgICAgaWYgKG1hdHJpeCAhPT0gdW5kZWZpbmVkICYmIG1hdHJpeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXggKCk7XG4gICAgICAgICAgICB0aGlzLm1hdHJpeC5DcmVhdGVJZGVudGl0eSAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFNldE1hdHJpeCAobWF0cml4KVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIEdldE1hdHJpeCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4O1xuICAgIH1cblxuICAgIElzSWRlbnRpdHkgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdHJpeC5Jc0lkZW50aXR5ICgpO1xuICAgIH1cblxuICAgIEFwcGVuZE1hdHJpeCAobWF0cml4KVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5NdWx0aXBseU1hdHJpeCAobWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgQXBwZW5kICh0cmFuc2Zvcm1hdGlvbilcbiAgICB7XG4gICAgICAgIHRoaXMuQXBwZW5kTWF0cml4ICh0cmFuc2Zvcm1hdGlvbi5HZXRNYXRyaXggKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBUcmFuc2Zvcm1Db29yZDNEIChjb29yZClcbiAgICB7XG4gICAgICAgIGxldCBjb29yZDREID0gbmV3IENvb3JkNEQgKGNvb3JkLngsIGNvb3JkLnksIGNvb3JkLnosIDEuMCk7XG4gICAgICAgIGxldCByZXN1bHRDb29yZDREID0gdGhpcy5tYXRyaXguTXVsdGlwbHlWZWN0b3IgKGNvb3JkNEQpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IENvb3JkM0QgKHJlc3VsdENvb3JkNEQueCwgcmVzdWx0Q29vcmQ0RC55LCByZXN1bHRDb29yZDRELnopO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIENsb25lICgpXG4gICAge1xuICAgICAgICBjb25zdCBjbG9uZWRNYXRyaXggPSB0aGlzLm1hdHJpeC5DbG9uZSAoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbiAoY2xvbmVkTWF0cml4KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm1hdGlvbklzRXF1YWwgKGEsIGIpXG57XG4gICAgcmV0dXJuIE1hdHJpeElzRXF1YWwgKGEuR2V0TWF0cml4ICgpLCBiLkdldE1hdHJpeCAoKSk7XG59XG4iLCJpbXBvcnQgeyBDcm9zc1ZlY3RvcjNELCBTdWJDb29yZDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybWF0aW9uLmpzJztcblxuZXhwb3J0IGNvbnN0IE1lc2hUeXBlID1cbntcbiAgICBFbXB0eSA6IDAsXG4gICAgVHJpYW5nbGVNZXNoIDogMVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIEdldE1lc2hUeXBlIChtZXNoKVxue1xuICAgIGlmIChtZXNoLlRyaWFuZ2xlQ291bnQgKCkgPiAwKSB7XG4gICAgICAgIHJldHVybiBNZXNoVHlwZS5UcmlhbmdsZU1lc2g7XG4gICAgfVxuICAgIHJldHVybiBNZXNoVHlwZS5FbXB0eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbGN1bGF0ZVRyaWFuZ2xlTm9ybWFsICh2MCwgdjEsIHYyKVxue1xuICAgIGxldCB2ID0gU3ViQ29vcmQzRCAodjEsIHYwKTtcbiAgICBsZXQgdyA9IFN1YkNvb3JkM0QgKHYyLCB2MCk7XG4gICAgbGV0IG5vcm1hbCA9IENyb3NzVmVjdG9yM0QgKHYsIHcpO1xuICAgIG5vcm1hbC5Ob3JtYWxpemUgKCk7XG4gICAgcmV0dXJuIG5vcm1hbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybU1lc2ggKG1lc2gsIHRyYW5zZm9ybWF0aW9uKVxue1xuICAgIGlmICh0cmFuc2Zvcm1hdGlvbi5Jc0lkZW50aXR5ICgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2guVmVydGV4Q291bnQgKCk7IGkrKykge1xuICAgICAgICBsZXQgdmVydGV4ID0gbWVzaC5HZXRWZXJ0ZXggKGkpO1xuICAgICAgICBsZXQgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1hdGlvbi5UcmFuc2Zvcm1Db29yZDNEICh2ZXJ0ZXgpO1xuICAgICAgICB2ZXJ0ZXgueCA9IHRyYW5zZm9ybWVkLng7XG4gICAgICAgIHZlcnRleC55ID0gdHJhbnNmb3JtZWQueTtcbiAgICAgICAgdmVydGV4LnogPSB0cmFuc2Zvcm1lZC56O1xuICAgIH1cblxuICAgIGlmIChtZXNoLk5vcm1hbENvdW50ICgpID4gMCkge1xuICAgICAgICBsZXQgbm9ybWFsTWF0cml4ID0gdHJhbnNmb3JtYXRpb24uR2V0TWF0cml4ICgpLkludmVydFRyYW5zcG9zZSAoKTtcbiAgICAgICAgaWYgKG5vcm1hbE1hdHJpeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG5vcm1hbFRyYW5zZm9ybWF0aW9uID0gbmV3IFRyYW5zZm9ybWF0aW9uIChub3JtYWxNYXRyaXgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoLk5vcm1hbENvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsID0gbWVzaC5HZXROb3JtYWwgKGkpO1xuICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZCA9IG5vcm1hbFRyYW5zZm9ybWF0aW9uLlRyYW5zZm9ybUNvb3JkM0QgKG5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbm9ybWFsLnggPSB0cmFuc2Zvcm1lZC54O1xuICAgICAgICAgICAgICAgIG5vcm1hbC55ID0gdHJhbnNmb3JtZWQueTtcbiAgICAgICAgICAgICAgICBub3JtYWwueiA9IHRyYW5zZm9ybWVkLno7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGbGlwTWVzaFRyaWFuZ2xlc09yaWVudGF0aW9uIChtZXNoKVxue1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5UcmlhbmdsZUNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAoaSk7XG4gICAgICAgIGxldCB0bXAgPSB0cmlhbmdsZS52MTtcbiAgICAgICAgdHJpYW5nbGUudjEgPSB0cmlhbmdsZS52MjtcbiAgICAgICAgdHJpYW5nbGUudjIgPSB0bXA7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE9iamVjdDNEXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG5cbiAgICB9XG5cbiAgICBWZXJ0ZXhDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgVmVydGV4Q29sb3JDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgTm9ybWFsQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIFRleHR1cmVVVkNvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBUcmlhbmdsZUNvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBFbnVtZXJhdGVWZXJ0aWNlcyAob25WZXJ0ZXgpXG4gICAge1xuXG4gICAgfVxuXG4gICAgRW51bWVyYXRlVHJpYW5nbGVWZXJ0ZXhJbmRpY2VzIChvblRyaWFuZ2xlVmVydGV4SW5kaWNlcylcbiAgICB7XG5cbiAgICB9XG5cbiAgICBFbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpXG4gICAge1xuXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW9kZWxPYmplY3QzRCBleHRlbmRzIE9iamVjdDNEXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUdyb3VwcyA9IFtdO1xuICAgIH1cblxuICAgIEdldE5hbWUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuXG4gICAgU2V0TmFtZSAobmFtZSlcbiAgICB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgUHJvcGVydHlHcm91cENvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0eUdyb3Vwcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgQWRkUHJvcGVydHlHcm91cCAocHJvcGVydHlHcm91cClcbiAgICB7XG4gICAgICAgIHRoaXMucHJvcGVydHlHcm91cHMucHVzaCAocHJvcGVydHlHcm91cCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnR5R3JvdXBzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgR2V0UHJvcGVydHlHcm91cCAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0eUdyb3Vwc1tpbmRleF07XG4gICAgfVxuXG4gICAgQ2xvbmVQcm9wZXJ0aWVzICh0YXJnZXQpXG4gICAge1xuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eUdyb3VwIG9mIHRoaXMucHJvcGVydHlHcm91cHMpIHtcbiAgICAgICAgICAgIHRhcmdldC5BZGRQcm9wZXJ0eUdyb3VwIChwcm9wZXJ0eUdyb3VwLkNsb25lICgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zZm9ybU1lc2ggfSBmcm9tICcuL21lc2h1dGlscy5qcyc7XG5pbXBvcnQgeyBNb2RlbE9iamVjdDNEIH0gZnJvbSAnLi9vYmplY3QuanMnO1xuXG5leHBvcnQgY2xhc3MgTWVzaEluc3RhbmNlSWRcbntcbiAgICBjb25zdHJ1Y3RvciAobm9kZUlkLCBtZXNoSW5kZXgpXG4gICAge1xuICAgICAgICB0aGlzLm5vZGVJZCA9IG5vZGVJZDtcbiAgICAgICAgdGhpcy5tZXNoSW5kZXggPSBtZXNoSW5kZXg7XG4gICAgfVxuXG4gICAgSXNFcXVhbCAocmhzKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUlkID09PSByaHMubm9kZUlkICYmIHRoaXMubWVzaEluZGV4ID09PSByaHMubWVzaEluZGV4O1xuICAgIH1cblxuICAgIEdldEtleSAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUlkLnRvU3RyaW5nICgpICsgJzonICsgdGhpcy5tZXNoSW5kZXgudG9TdHJpbmcgKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVzaEluc3RhbmNlIGV4dGVuZHMgTW9kZWxPYmplY3QzRFxue1xuICAgIGNvbnN0cnVjdG9yIChpZCwgbm9kZSwgbWVzaClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMubWVzaCA9IG1lc2g7XG4gICAgfVxuXG4gICAgR2V0SWQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIEdldFRyYW5zZm9ybWF0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLkdldFdvcmxkVHJhbnNmb3JtYXRpb24gKCk7XG4gICAgfVxuXG4gICAgR2V0TWVzaCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaDtcbiAgICB9XG5cbiAgICBWZXJ0ZXhDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaC5WZXJ0ZXhDb3VudCAoKTtcbiAgICB9XG5cbiAgICBWZXJ0ZXhDb2xvckNvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNoLlZlcnRleENvbG9yQ291bnQgKCk7XG4gICAgfVxuXG4gICAgTm9ybWFsQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2guTm9ybWFsQ291bnQgKCk7XG4gICAgfVxuXG4gICAgVGV4dHVyZVVWQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2guVGV4dHVyZVVWQ291bnQgKCk7XG4gICAgfVxuXG4gICAgVHJpYW5nbGVDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaC5UcmlhbmdsZUNvdW50ICgpO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZVZlcnRpY2VzIChvblZlcnRleClcbiAgICB7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IHRoaXMubm9kZS5HZXRXb3JsZFRyYW5zZm9ybWF0aW9uICgpO1xuICAgICAgICBpZiAodHJhbnNmb3JtYXRpb24uSXNJZGVudGl0eSAoKSkge1xuICAgICAgICAgICAgdGhpcy5tZXNoLkVudW1lcmF0ZVZlcnRpY2VzIChvblZlcnRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lc2guRW51bWVyYXRlVmVydGljZXMgKCh2ZXJ0ZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWF0aW9uLlRyYW5zZm9ybUNvb3JkM0QgKHZlcnRleCk7XG4gICAgICAgICAgICAgICAgb25WZXJ0ZXggKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRW51bWVyYXRlVHJpYW5nbGVWZXJ0ZXhJbmRpY2VzIChvblRyaWFuZ2xlVmVydGV4SW5kaWNlcylcbiAgICB7XG4gICAgICAgIHRoaXMubWVzaC5FbnVtZXJhdGVUcmlhbmdsZVZlcnRleEluZGljZXMgKG9uVHJpYW5nbGVWZXJ0ZXhJbmRpY2VzKTtcbiAgICB9XG5cbiAgICBFbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpXG4gICAge1xuICAgICAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSB0aGlzLm5vZGUuR2V0V29ybGRUcmFuc2Zvcm1hdGlvbiAoKTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uLklzSWRlbnRpdHkgKCkpIHtcbiAgICAgICAgICAgIHRoaXMubWVzaC5FbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZXNoLkVudW1lcmF0ZVRyaWFuZ2xlVmVydGljZXMgKCh2MCwgdjEsIHYyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjBUcmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWF0aW9uLlRyYW5zZm9ybUNvb3JkM0QgKHYwKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MVRyYW5zZm9ybWVkID0gdHJhbnNmb3JtYXRpb24uVHJhbnNmb3JtQ29vcmQzRCAodjEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYyVHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1hdGlvbi5UcmFuc2Zvcm1Db29yZDNEICh2Mik7XG4gICAgICAgICAgICAgICAgb25UcmlhbmdsZVZlcnRpY2VzICh2MFRyYW5zZm9ybWVkLCB2MVRyYW5zZm9ybWVkLCB2MlRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUHJvcGVydHlHcm91cENvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNoLlByb3BlcnR5R3JvdXBDb3VudCAoKTtcbiAgICB9XG5cbiAgICBBZGRQcm9wZXJ0eUdyb3VwIChwcm9wZXJ0eUdyb3VwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaC5BZGRQcm9wZXJ0eUdyb3VwIChwcm9wZXJ0eUdyb3VwKTtcbiAgICB9XG5cbiAgICBHZXRQcm9wZXJ0eUdyb3VwIChpbmRleClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2guR2V0UHJvcGVydHlHcm91cCAoaW5kZXgpO1xuICAgIH1cblxuICAgIEdldFRyYW5zZm9ybWVkTWVzaCAoKVxuICAgIHtcbiAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gdGhpcy5ub2RlLkdldFdvcmxkVHJhbnNmb3JtYXRpb24gKCk7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1lZCA9IHRoaXMubWVzaC5DbG9uZSAoKTtcbiAgICAgICAgVHJhbnNmb3JtTWVzaCAodHJhbnNmb3JtZWQsIHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJpbmFyeVdyaXRlciB9IGZyb20gJy4uL2lvL2JpbmFyeXdyaXRlci5qcyc7XG5pbXBvcnQgeyBVdGY4U3RyaW5nVG9BcnJheUJ1ZmZlciB9IGZyb20gJy4uL2lvL2J1ZmZlcnV0aWxzLmpzJztcbmltcG9ydCB7IEZpbGVGb3JtYXQsIEdldEZpbGVFeHRlbnNpb24sIEdldEZpbGVOYW1lIH0gZnJvbSAnLi4vaW8vZmlsZXV0aWxzLmpzJztcbmltcG9ydCB7IE1lc2hJbnN0YW5jZUlkIH0gZnJvbSAnLi4vbW9kZWwvbWVzaGluc3RhbmNlLmpzJztcbmltcG9ydCB7IFJHQkNvbG9yLCBTUkdCVG9MaW5lYXIgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5pbXBvcnQgeyBNYXRlcmlhbFR5cGUgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBDb252ZXJ0TWVzaFRvTWVzaEJ1ZmZlciB9IGZyb20gJy4uL21vZGVsL21lc2hidWZmZXIuanMnO1xuaW1wb3J0IHsgRXhwb3J0ZWRGaWxlLCBFeHBvcnRlckJhc2UgfSBmcm9tICcuL2V4cG9ydGVyYmFzZS5qcyc7XG5cbmNvbnN0IEdsdGZDb21wb25lbnRUeXBlID1cbntcbiAgICBVTlNJR05FRF9JTlQgOiA1MTI1LFxuICAgIEZMT0FUIDogNTEyNlxufTtcblxuY29uc3QgR2x0ZkJ1ZmZlclR5cGUgPVxue1xuICAgIEFSUkFZX0JVRkZFUiA6IDM0OTYyLFxuICAgIEVMRU1FTlRfQVJSQVlfQlVGRkVSIDogMzQ5NjNcbn07XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlckdsdGYgZXh0ZW5kcyBFeHBvcnRlckJhc2Vcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHN1cGVyICgpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSB7XG4gICAgICAgICAgICBpbmRleCA6IHtcbiAgICAgICAgICAgICAgICB0eXBlIDogR2x0ZkNvbXBvbmVudFR5cGUuVU5TSUdORURfSU5ULFxuICAgICAgICAgICAgICAgIHNpemUgOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbnVtYmVyIDoge1xuICAgICAgICAgICAgICAgIHR5cGUgOiBHbHRmQ29tcG9uZW50VHlwZS5GTE9BVCxcbiAgICAgICAgICAgICAgICBzaXplIDogNFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXHR9XG5cbiAgICBDYW5FeHBvcnQgKGZvcm1hdCwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIChmb3JtYXQgPT09IEZpbGVGb3JtYXQuVGV4dCAmJiBleHRlbnNpb24gPT09ICdnbHRmJykgfHwgKGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5CaW5hcnkgJiYgZXh0ZW5zaW9uID09PSAnZ2xiJyk7XG4gICAgfVxuXG5cdEV4cG9ydENvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgZmlsZXMsIG9uRmluaXNoKVxuXHR7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZpbGVGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5FeHBvcnRBc2NpaUNvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IEZpbGVGb3JtYXQuQmluYXJ5KSB7XG4gICAgICAgICAgICB0aGlzLkV4cG9ydEJpbmFyeUNvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzKTtcbiAgICAgICAgfVxuICAgICAgICBvbkZpbmlzaCAoKTtcblx0fVxuXG5cdEV4cG9ydEFzY2lpQ29udGVudCAoZXhwb3J0ZXJNb2RlbCwgZmlsZXMpXG5cdHtcbiAgICAgICAgbGV0IGdsdGZGaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLmdsdGYnKTtcbiAgICAgICAgbGV0IGJpbkZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlICgnbW9kZWwuYmluJyk7XG4gICAgICAgIGZpbGVzLnB1c2ggKGdsdGZGaWxlKTtcbiAgICAgICAgZmlsZXMucHVzaCAoYmluRmlsZSk7XG5cbiAgICAgICAgbGV0IG1lc2hEYXRhQXJyID0gdGhpcy5HZXRNZXNoRGF0YSAoZXhwb3J0ZXJNb2RlbCk7XG4gICAgICAgIGxldCBtYWluQnVmZmVyID0gdGhpcy5HZXRNYWluQnVmZmVyIChtZXNoRGF0YUFycik7XG4gICAgICAgIGxldCBtYWluSnNvbiA9IHRoaXMuR2V0TWFpbkpzb24gKGV4cG9ydGVyTW9kZWwsIG1lc2hEYXRhQXJyKTtcbiAgICAgICAgbWFpbkpzb24uYnVmZmVycy5wdXNoICh7XG4gICAgICAgICAgICB1cmkgOiBiaW5GaWxlLkdldE5hbWUgKCksXG4gICAgICAgICAgICBieXRlTGVuZ3RoIDogbWFpbkJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBmaWxlTmFtZVRvSW5kZXggPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLkV4cG9ydE1hdGVyaWFscyAoZXhwb3J0ZXJNb2RlbCwgbWFpbkpzb24sICh0ZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmlsZU5hbWUgPSBHZXRGaWxlTmFtZSAodGV4dHVyZS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWxlTmFtZVRvSW5kZXguaGFzIChmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZU5hbWVUb0luZGV4LmdldCAoZmlsZU5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZUZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlIChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZUZpbGUuU2V0QnVmZmVyQ29udGVudCAodGV4dHVyZS5idWZmZXIpO1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2ggKHRleHR1cmVGaWxlKTtcblxuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlSW5kZXggPSBtYWluSnNvbi50ZXh0dXJlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWVUb0luZGV4LnNldCAoZmlsZU5hbWUsIHRleHR1cmVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICBtYWluSnNvbi5pbWFnZXMucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICB1cmkgOiBmaWxlTmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFpbkpzb24udGV4dHVyZXMucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgOiB0ZXh0dXJlSW5kZXhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdsdGZGaWxlLlNldFRleHRDb250ZW50IChKU09OLnN0cmluZ2lmeSAobWFpbkpzb24sIG51bGwsIDQpKTtcbiAgICAgICAgYmluRmlsZS5TZXRCdWZmZXJDb250ZW50IChtYWluQnVmZmVyKTtcbiAgICB9XG5cbiAgICBFeHBvcnRCaW5hcnlDb250ZW50IChleHBvcnRlck1vZGVsLCBmaWxlcylcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIEFsaWduVG9Cb3VuZGFyeSAoc2l6ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHJlbWFpbmRlciA9IHNpemUgJSA0O1xuICAgICAgICAgICAgaWYgKHJlbWFpbmRlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpemUgKyAoNCAtIHJlbWFpbmRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBXcml0ZUNoYXJhY3RlcnMgKHdyaXRlciwgY2hhciwgY291bnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHdyaXRlci5Xcml0ZVVuc2lnbmVkQ2hhcmFjdGVyOCAoY2hhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZ2xiRmlsZSA9IG5ldyBFeHBvcnRlZEZpbGUgKCdtb2RlbC5nbGInKTtcbiAgICAgICAgZmlsZXMucHVzaCAoZ2xiRmlsZSk7XG5cbiAgICAgICAgbGV0IG1lc2hEYXRhQXJyID0gdGhpcy5HZXRNZXNoRGF0YSAoZXhwb3J0ZXJNb2RlbCk7XG4gICAgICAgIGxldCBtYWluQnVmZmVyID0gdGhpcy5HZXRNYWluQnVmZmVyIChtZXNoRGF0YUFycik7XG4gICAgICAgIGxldCBtYWluSnNvbiA9IHRoaXMuR2V0TWFpbkpzb24gKGV4cG9ydGVyTW9kZWwsIG1lc2hEYXRhQXJyKTtcblxuICAgICAgICBsZXQgdGV4dHVyZUJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgbGV0IHRleHR1cmVPZmZzZXQgPSBtYWluQnVmZmVyLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgbGV0IGZpbGVOYW1lVG9JbmRleCA9IG5ldyBNYXAgKCk7XG4gICAgICAgIHRoaXMuRXhwb3J0TWF0ZXJpYWxzIChleHBvcnRlck1vZGVsLCBtYWluSnNvbiwgKHRleHR1cmUpID0+IHtcbiAgICAgICAgICAgIGxldCBmaWxlTmFtZSA9IEdldEZpbGVOYW1lICh0ZXh0dXJlLm5hbWUpO1xuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbiA9IEdldEZpbGVFeHRlbnNpb24gKHRleHR1cmUubmFtZSk7XG4gICAgICAgICAgICBpZiAoZmlsZU5hbWVUb0luZGV4LmhhcyAoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVOYW1lVG9JbmRleC5nZXQgKGZpbGVOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZmZlclZpZXdJbmRleCA9IG1haW5Kc29uLmJ1ZmZlclZpZXdzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZUluZGV4ID0gbWFpbkpzb24udGV4dHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lVG9JbmRleC5zZXQgKGZpbGVOYW1lLCB0ZXh0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gdGV4dHVyZS5idWZmZXI7XG4gICAgICAgICAgICAgICAgdGV4dHVyZUJ1ZmZlcnMucHVzaCAodGV4dHVyZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgbWFpbkpzb24uYnVmZmVyVmlld3MucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIgOiAwLFxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0IDogdGV4dHVyZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZUxlbmd0aCA6IHRleHR1cmVCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRleHR1cmVPZmZzZXQgKz0gdGV4dHVyZUJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIG1haW5Kc29uLmltYWdlcy5wdXNoICh7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXcgOiBidWZmZXJWaWV3SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlIDogJ2ltYWdlLycgKyBleHRlbnNpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtYWluSnNvbi50ZXh0dXJlcy5wdXNoICh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA6IHRleHR1cmVJbmRleFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG1haW5CaW5hcnlCdWZmZXJMZW5ndGggPSBtYWluQnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHVyZUJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gdGV4dHVyZUJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBtYWluQmluYXJ5QnVmZmVyTGVuZ3RoICs9IHRleHR1cmVCdWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWFpbkJpbmFyeUJ1ZmZlckFsaWduZWRMZW5ndGggPSBBbGlnblRvQm91bmRhcnkgKG1haW5CaW5hcnlCdWZmZXJMZW5ndGgpO1xuICAgICAgICBtYWluSnNvbi5idWZmZXJzLnB1c2ggKHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggOiBtYWluQmluYXJ5QnVmZmVyQWxpZ25lZExlbmd0aFxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgbWFpbkpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSAobWFpbkpzb24pO1xuICAgICAgICBsZXQgbWFpbkpzb25CdWZmZXIgPSBVdGY4U3RyaW5nVG9BcnJheUJ1ZmZlciAobWFpbkpzb25TdHJpbmcpO1xuICAgICAgICBsZXQgbWFpbkpzb25CdWZmZXJMZW5ndGggPSBtYWluSnNvbkJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBsZXQgbWFpbkpzb25CdWZmZXJBbGlnbmVkTGVuZ3RoID0gQWxpZ25Ub0JvdW5kYXJ5IChtYWluSnNvbkJ1ZmZlckxlbmd0aCk7XG5cbiAgICAgICAgbGV0IGdsYlNpemUgPSAxMiArIDggKyBtYWluSnNvbkJ1ZmZlckFsaWduZWRMZW5ndGggKyA4ICsgbWFpbkJpbmFyeUJ1ZmZlckFsaWduZWRMZW5ndGg7XG4gICAgICAgIGxldCBnbGJXcml0ZXIgPSBuZXcgQmluYXJ5V3JpdGVyIChnbGJTaXplLCB0cnVlKTtcblxuICAgICAgICBnbGJXcml0ZXIuV3JpdGVVbnNpZ25lZEludGVnZXIzMiAoMHg0NjU0NkM2Nyk7XG4gICAgICAgIGdsYldyaXRlci5Xcml0ZVVuc2lnbmVkSW50ZWdlcjMyICgyKTtcbiAgICAgICAgZ2xiV3JpdGVyLldyaXRlVW5zaWduZWRJbnRlZ2VyMzIgKGdsYlNpemUpO1xuXG4gICAgICAgIGdsYldyaXRlci5Xcml0ZVVuc2lnbmVkSW50ZWdlcjMyIChtYWluSnNvbkJ1ZmZlckFsaWduZWRMZW5ndGgpO1xuICAgICAgICBnbGJXcml0ZXIuV3JpdGVVbnNpZ25lZEludGVnZXIzMiAoMHg0RTRGNTM0QSk7XG4gICAgICAgIGdsYldyaXRlci5Xcml0ZUFycmF5QnVmZmVyIChtYWluSnNvbkJ1ZmZlcik7XG4gICAgICAgIFdyaXRlQ2hhcmFjdGVycyAoZ2xiV3JpdGVyLCAzMiwgbWFpbkpzb25CdWZmZXJBbGlnbmVkTGVuZ3RoIC0gbWFpbkpzb25CdWZmZXJMZW5ndGgpO1xuXG4gICAgICAgIGdsYldyaXRlci5Xcml0ZVVuc2lnbmVkSW50ZWdlcjMyIChtYWluQmluYXJ5QnVmZmVyQWxpZ25lZExlbmd0aCk7XG4gICAgICAgIGdsYldyaXRlci5Xcml0ZVVuc2lnbmVkSW50ZWdlcjMyICgweDAwNEU0OTQyKTtcbiAgICAgICAgZ2xiV3JpdGVyLldyaXRlQXJyYXlCdWZmZXIgKG1haW5CdWZmZXIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHVyZUJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gdGV4dHVyZUJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBnbGJXcml0ZXIuV3JpdGVBcnJheUJ1ZmZlciAodGV4dHVyZUJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgV3JpdGVDaGFyYWN0ZXJzIChnbGJXcml0ZXIsIDAsIG1haW5CaW5hcnlCdWZmZXJBbGlnbmVkTGVuZ3RoIC0gbWFpbkJpbmFyeUJ1ZmZlckxlbmd0aCk7XG5cbiAgICAgICAgZ2xiRmlsZS5TZXRCdWZmZXJDb250ZW50IChnbGJXcml0ZXIuR2V0QnVmZmVyICgpKTtcbiAgICB9XG5cbiAgICBHZXRNZXNoRGF0YSAoZXhwb3J0ZXJNb2RlbClcbiAgICB7XG4gICAgICAgIGxldCBtZXNoRGF0YUFyciA9IFtdO1xuXG4gICAgICAgIGV4cG9ydGVyTW9kZWwuRW51bWVyYXRlTWVzaGVzICgobWVzaCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IENvbnZlcnRNZXNoVG9NZXNoQnVmZmVyIChtZXNoKTtcbiAgICAgICAgICAgIG1lc2hEYXRhQXJyLnB1c2ggKHtcbiAgICAgICAgICAgICAgICBuYW1lIDogbWVzaC5HZXROYW1lICgpLFxuICAgICAgICAgICAgICAgIGJ1ZmZlciA6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICBvZmZzZXRzIDogW10sXG4gICAgICAgICAgICAgICAgc2l6ZXMgOiBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtZXNoRGF0YUFycjtcbiAgICB9XG5cbiAgICBHZXRNYWluQnVmZmVyIChtZXNoRGF0YUFycilcbiAgICB7XG4gICAgICAgIGxldCBtYWluQnVmZmVyU2l6ZSA9IDA7XG4gICAgICAgIGZvciAobGV0IG1lc2hEYXRhIG9mIG1lc2hEYXRhQXJyKSB7XG4gICAgICAgICAgICBtYWluQnVmZmVyU2l6ZSArPSBtZXNoRGF0YS5idWZmZXIuR2V0Qnl0ZUxlbmd0aCAodGhpcy5jb21wb25lbnRzLmluZGV4LnNpemUsIHRoaXMuY29tcG9uZW50cy5udW1iZXIuc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgd3JpdGVyID0gbmV3IEJpbmFyeVdyaXRlciAobWFpbkJ1ZmZlclNpemUsIHRydWUpO1xuICAgICAgICBmb3IgKGxldCBtZXNoRGF0YSBvZiBtZXNoRGF0YUFycikge1xuICAgICAgICAgICAgZm9yIChsZXQgcHJpbWl0aXZlSW5kZXggPSAwOyBwcmltaXRpdmVJbmRleCA8IG1lc2hEYXRhLmJ1ZmZlci5QcmltaXRpdmVDb3VudCAoKTsgcHJpbWl0aXZlSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCBwcmltaXRpdmUgPSBtZXNoRGF0YS5idWZmZXIuR2V0UHJpbWl0aXZlIChwcmltaXRpdmVJbmRleCk7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IHdyaXRlci5HZXRQb3NpdGlvbiAoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByaW1pdGl2ZS5pbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci5Xcml0ZVVuc2lnbmVkSW50ZWdlcjMyIChwcmltaXRpdmUuaW5kaWNlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpbWl0aXZlLnZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci5Xcml0ZUZsb2F0MzIgKHByaW1pdGl2ZS52ZXJ0aWNlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpbWl0aXZlLmNvbG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXIuV3JpdGVGbG9hdDMyIChTUkdCVG9MaW5lYXIgKHByaW1pdGl2ZS5jb2xvcnNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmltaXRpdmUubm9ybWFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXIuV3JpdGVGbG9hdDMyIChwcmltaXRpdmUubm9ybWFsc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpbWl0aXZlLnV2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4Q29vcmQgPSBwcmltaXRpdmUudXZzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleENvb3JkICo9IC0xLjA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLldyaXRlRmxvYXQzMiAodGV4Q29vcmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXNoRGF0YS5vZmZzZXRzLnB1c2ggKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgbWVzaERhdGEuc2l6ZXMucHVzaCAod3JpdGVyLkdldFBvc2l0aW9uICgpIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3cml0ZXIuR2V0QnVmZmVyICgpO1xuICAgIH1cblxuICAgIEdldE1haW5Kc29uIChleHBvcnRlck1vZGVsLCBtZXNoRGF0YUFycilcbiAgICB7XG4gICAgICAgIGNsYXNzIEJ1ZmZlclZpZXdDcmVhdG9yXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yIChtYWluSnNvbiwgYnl0ZU9mZnNldClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5Kc29uID0gbWFpbkpzb247XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQWRkQnVmZmVyVmlldyAoYnl0ZUxlbmd0aCwgdGFyZ2V0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBidWZmZXJWaWV3ID0ge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIgOiAwLFxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0IDogdGhpcy5ieXRlT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBieXRlTGVuZ3RoIDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IDogdGFyZ2V0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5Kc29uLmJ1ZmZlclZpZXdzLnB1c2ggKGJ1ZmZlclZpZXcpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCArPSBieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW5Kc29uLmJ1ZmZlclZpZXdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBOb2RlSGFzVmlzaWJsZUNoaWxkcmVuIChtb2RlbCwgbm9kZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yIChsZXQgbWVzaEluZGV4IG9mIG5vZGUuR2V0TWVzaEluZGljZXMgKCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzaEluc3RhbmNlSWQgPSBuZXcgTWVzaEluc3RhbmNlSWQgKG5vZGUuR2V0SWQgKCksIG1lc2hJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLklzTWVzaEluc3RhbmNlVmlzaWJsZSAobWVzaEluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGNoaWxkTm9kZSBvZiBub2RlLkdldENoaWxkTm9kZXMgKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoTm9kZUhhc1Zpc2libGVDaGlsZHJlbiAobW9kZWwsIGNoaWxkTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gQWRkTm9kZSAobW9kZWwsIGpzb25QYXJlbnQsIGpzb25Ob2Rlcywgbm9kZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKG5vZGUuSXNNZXNoTm9kZSAoKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG1lc2hJbmRleCBvZiBub2RlLkdldE1lc2hJbmRpY2VzICgpKSB7XG4gICAgICAgICAgICAgICAgICAgIEFkZE1lc2hOb2RlIChtb2RlbCwganNvblBhcmVudCwganNvbk5vZGVzLCBub2RlLCBtZXNoSW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTm9kZUhhc1Zpc2libGVDaGlsZHJlbiAobW9kZWwsIG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGVKc29uID0ge307XG5cbiAgICAgICAgICAgICAgICBsZXQgbm9kZU5hbWUgPSBub2RlLkdldE5hbWUgKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUpzb24ubmFtZSA9IG5vZGVOYW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IG5vZGUuR2V0VHJhbnNmb3JtYXRpb24gKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1hdGlvbi5Jc0lkZW50aXR5ICgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVKc29uLm1hdHJpeCA9IG5vZGUuR2V0VHJhbnNmb3JtYXRpb24gKCkuR2V0TWF0cml4ICgpLkdldCAoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqc29uTm9kZXMucHVzaCAobm9kZUpzb24pO1xuICAgICAgICAgICAgICAgIGpzb25QYXJlbnQucHVzaCAoanNvbk5vZGVzLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgICAgICAgICAgbm9kZUpzb24uY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgICAgICBBZGRDaGlsZE5vZGVzIChtb2RlbCwgbm9kZUpzb24uY2hpbGRyZW4sIGpzb25Ob2Rlcywgbm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBBZGRNZXNoTm9kZSAobW9kZWwsIGpzb25QYXJlbnQsIGpzb25Ob2Rlcywgbm9kZSwgbWVzaEluZGV4LCBpc1N0YW5kYWxvbmVOb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbWVzaEluc3RhbmNlSWQgPSBuZXcgTWVzaEluc3RhbmNlSWQgKG5vZGUuR2V0SWQgKCksIG1lc2hJbmRleCk7XG4gICAgICAgICAgICBpZiAoIW1vZGVsLklzTWVzaEluc3RhbmNlVmlzaWJsZSAobWVzaEluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbm9kZUpzb24gPSB7XG4gICAgICAgICAgICAgICAgbWVzaCA6IG1vZGVsLk1hcE1lc2hJbmRleCAobWVzaEluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc1N0YW5kYWxvbmVOb2RlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gbm9kZS5HZXRUcmFuc2Zvcm1hdGlvbiAoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWF0aW9uLklzSWRlbnRpdHkgKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUpzb24ubWF0cml4ID0gbm9kZS5HZXRUcmFuc2Zvcm1hdGlvbiAoKS5HZXRNYXRyaXggKCkuR2V0ICgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAganNvbk5vZGVzLnB1c2ggKG5vZGVKc29uKTtcbiAgICAgICAgICAgIGpzb25QYXJlbnQucHVzaCAoanNvbk5vZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gQWRkQ2hpbGROb2RlcyAobW9kZWwsIGpzb25QYXJlbnQsIGpzb25Ob2Rlcywgbm9kZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGROb2RlIG9mIG5vZGUuR2V0Q2hpbGROb2RlcyAoKSkge1xuICAgICAgICAgICAgICAgIEFkZE5vZGUgKG1vZGVsLCBqc29uUGFyZW50LCBqc29uTm9kZXMsIGNoaWxkTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBtZXNoSW5kZXggb2Ygbm9kZS5HZXRNZXNoSW5kaWNlcyAoKSkge1xuICAgICAgICAgICAgICAgIEFkZE1lc2hOb2RlIChtb2RlbCwganNvblBhcmVudCwganNvbk5vZGVzLCBub2RlLCBtZXNoSW5kZXgsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYWluSnNvbiA9IHtcbiAgICAgICAgICAgIGFzc2V0IDoge1xuICAgICAgICAgICAgICAgIGdlbmVyYXRvciA6ICdodHRwczovLzNkdmlld2VyLm5ldCcsXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA6ICcyLjAnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NlbmUgOiAwLFxuICAgICAgICAgICAgc2NlbmVzIDogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMgOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBub2RlcyA6IFtdLFxuICAgICAgICAgICAgbWF0ZXJpYWxzIDogW10sXG4gICAgICAgICAgICBtZXNoZXMgOiBbXSxcbiAgICAgICAgICAgIGJ1ZmZlcnMgOiBbXSxcbiAgICAgICAgICAgIGJ1ZmZlclZpZXdzIDogW10sXG4gICAgICAgICAgICBhY2Nlc3NvcnMgOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCByb290Tm9kZSA9IGV4cG9ydGVyTW9kZWwuR2V0TW9kZWwgKCkuR2V0Um9vdE5vZGUgKCk7XG4gICAgICAgIEFkZENoaWxkTm9kZXMgKGV4cG9ydGVyTW9kZWwsIG1haW5Kc29uLnNjZW5lc1swXS5ub2RlcywgbWFpbkpzb24ubm9kZXMsIHJvb3ROb2RlKTtcblxuICAgICAgICBmb3IgKGxldCBtZXNoRGF0YSBvZiBtZXNoRGF0YUFycikge1xuICAgICAgICAgICAgbGV0IGpzb25NZXNoID0ge1xuICAgICAgICAgICAgICAgIG5hbWUgOiB0aGlzLkdldEV4cG9ydGVkTWVzaE5hbWUgKG1lc2hEYXRhLm5hbWUpLFxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZXMgOiBbXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IHByaW1pdGl2ZXMgPSBtZXNoRGF0YS5idWZmZXIucHJpbWl0aXZlcztcbiAgICAgICAgICAgIGZvciAobGV0IHByaW1pdGl2ZUluZGV4ID0gMDsgcHJpbWl0aXZlSW5kZXggPCBwcmltaXRpdmVzLmxlbmd0aDsgcHJpbWl0aXZlSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCBwcmltaXRpdmUgPSBwcmltaXRpdmVzW3ByaW1pdGl2ZUluZGV4XTtcblxuICAgICAgICAgICAgICAgIGxldCBidWZmZXJWaWV3Q3JlYXRvciA9IG5ldyBCdWZmZXJWaWV3Q3JlYXRvciAobWFpbkpzb24sIG1lc2hEYXRhLm9mZnNldHNbcHJpbWl0aXZlSW5kZXhdKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kaWNlc0J1ZmZlclZpZXcgPSBidWZmZXJWaWV3Q3JlYXRvci5BZGRCdWZmZXJWaWV3IChwcmltaXRpdmUuaW5kaWNlcy5sZW5ndGggKiB0aGlzLmNvbXBvbmVudHMuaW5kZXguc2l6ZSwgR2x0ZkJ1ZmZlclR5cGUuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO1xuICAgICAgICAgICAgICAgIGxldCB2ZXJ0aWNlc0J1ZmZlclZpZXcgPSBidWZmZXJWaWV3Q3JlYXRvci5BZGRCdWZmZXJWaWV3IChwcmltaXRpdmUudmVydGljZXMubGVuZ3RoICogdGhpcy5jb21wb25lbnRzLm51bWJlci5zaXplLCBHbHRmQnVmZmVyVHlwZS5BUlJBWV9CVUZGRVIpO1xuICAgICAgICAgICAgICAgIGxldCBjb2xvcnNCdWZmZXJWaWV3ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocHJpbWl0aXZlLmNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlclZpZXcgPSBidWZmZXJWaWV3Q3JlYXRvci5BZGRCdWZmZXJWaWV3IChwcmltaXRpdmUuY29sb3JzLmxlbmd0aCAqIHRoaXMuY29tcG9uZW50cy5udW1iZXIuc2l6ZSwgR2x0ZkJ1ZmZlclR5cGUuQVJSQVlfQlVGRkVSKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbHNCdWZmZXJWaWV3ID0gYnVmZmVyVmlld0NyZWF0b3IuQWRkQnVmZmVyVmlldyAocHJpbWl0aXZlLm5vcm1hbHMubGVuZ3RoICogdGhpcy5jb21wb25lbnRzLm51bWJlci5zaXplLCBHbHRmQnVmZmVyVHlwZS5BUlJBWV9CVUZGRVIpO1xuICAgICAgICAgICAgICAgIGxldCB1dnNCdWZmZXJWaWV3ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocHJpbWl0aXZlLnV2cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHV2c0J1ZmZlclZpZXcgPSBidWZmZXJWaWV3Q3JlYXRvci5BZGRCdWZmZXJWaWV3IChwcmltaXRpdmUudXZzLmxlbmd0aCAqIHRoaXMuY29tcG9uZW50cy5udW1iZXIuc2l6ZSwgR2x0ZkJ1ZmZlclR5cGUuQVJSQVlfQlVGRkVSKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQganNvblByaW1pdGl2ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyA6IHt9LFxuICAgICAgICAgICAgICAgICAgICBtb2RlIDogNCxcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgOiBwcmltaXRpdmUubWF0ZXJpYWxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbGV0IGJvdW5kcyA9IHByaW1pdGl2ZS5HZXRCb3VuZHMgKCk7XG5cbiAgICAgICAgICAgICAgICBtYWluSnNvbi5hY2Nlc3NvcnMucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJWaWV3IDogaW5kaWNlc0J1ZmZlclZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgOiAwLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlIDogdGhpcy5jb21wb25lbnRzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50IDogcHJpbWl0aXZlLmluZGljZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1NDQUxBUidcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBqc29uUHJpbWl0aXZlLmluZGljZXMgPSBtYWluSnNvbi5hY2Nlc3NvcnMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgICAgIG1haW5Kc29uLmFjY2Vzc29ycy5wdXNoICh7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXcgOiB2ZXJ0aWNlc0J1ZmZlclZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgOiAwLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlIDogdGhpcy5jb21wb25lbnRzLm51bWJlci50eXBlLFxuICAgICAgICAgICAgICAgICAgICBjb3VudCA6IHByaW1pdGl2ZS52ZXJ0aWNlcy5sZW5ndGggLyAzLFxuICAgICAgICAgICAgICAgICAgICBtaW4gOiBib3VuZHMubWluLFxuICAgICAgICAgICAgICAgICAgICBtYXggOiBib3VuZHMubWF4LFxuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1ZFQzMnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAganNvblByaW1pdGl2ZS5hdHRyaWJ1dGVzLlBPU0lUSU9OID0gbWFpbkpzb24uYWNjZXNzb3JzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29sb3JzQnVmZmVyVmlldyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtYWluSnNvbi5hY2Nlc3NvcnMucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVmlldyA6IGNvbG9yc0J1ZmZlclZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0IDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgOiB0aGlzLmNvbXBvbmVudHMubnVtYmVyLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA6IHByaW1pdGl2ZS5jb2xvcnMubGVuZ3RoIC8gMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnVkVDMydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGpzb25QcmltaXRpdmUuYXR0cmlidXRlcy5DT0xPUl8wID0gbWFpbkpzb24uYWNjZXNzb3JzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWFpbkpzb24uYWNjZXNzb3JzLnB1c2ggKHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyVmlldyA6IG5vcm1hbHNCdWZmZXJWaWV3LFxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0IDogMCxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VHlwZSA6IHRoaXMuY29tcG9uZW50cy5udW1iZXIudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgY291bnQgOiBwcmltaXRpdmUubm9ybWFscy5sZW5ndGggLyAzLFxuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1ZFQzMnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAganNvblByaW1pdGl2ZS5hdHRyaWJ1dGVzLk5PUk1BTCA9IG1haW5Kc29uLmFjY2Vzc29ycy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKHV2c0J1ZmZlclZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbkpzb24uYWNjZXNzb3JzLnB1c2ggKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXcgOiB1dnNCdWZmZXJWaWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlIDogdGhpcy5jb21wb25lbnRzLm51bWJlci50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgOiBwcmltaXRpdmUudXZzLmxlbmd0aCAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1ZFQzInXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBqc29uUHJpbWl0aXZlLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMCA9IG1haW5Kc29uLmFjY2Vzc29ycy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGpzb25NZXNoLnByaW1pdGl2ZXMucHVzaCAoanNvblByaW1pdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1haW5Kc29uLm1lc2hlcy5wdXNoIChqc29uTWVzaCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFpbkpzb247XG4gICAgfVxuXG4gICAgRXhwb3J0TWF0ZXJpYWxzIChleHBvcnRlck1vZGVsLCBtYWluSnNvbiwgYWRkVGV4dHVyZSlcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIEV4cG9ydE1hdGVyaWFsIChvYmosIG1haW5Kc29uLCBtYXRlcmlhbCwgYWRkVGV4dHVyZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZnVuY3Rpb24gQ29sb3JUb1JHQkEgKGNvbG9yLCBvcGFjaXR5KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIFNSR0JUb0xpbmVhciAoY29sb3IuciAvIDI1NS4wKSxcbiAgICAgICAgICAgICAgICAgICAgU1JHQlRvTGluZWFyIChjb2xvci5nIC8gMjU1LjApLFxuICAgICAgICAgICAgICAgICAgICBTUkdCVG9MaW5lYXIgKGNvbG9yLmIgLyAyNTUuMCksXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBDb2xvclRvUkdCIChjb2xvcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBTUkdCVG9MaW5lYXIgKGNvbG9yLnIgLyAyNTUuMCksXG4gICAgICAgICAgICAgICAgICAgIFNSR0JUb0xpbmVhciAoY29sb3IuZyAvIDI1NS4wKSxcbiAgICAgICAgICAgICAgICAgICAgU1JHQlRvTGluZWFyIChjb2xvci5iIC8gMjU1LjApXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0VGV4dHVyZVBhcmFtcyAobWFpbkpzb24sIHRleHR1cmUsIGFkZFRleHR1cmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHRleHR1cmUgPT09IG51bGwgfHwgIXRleHR1cmUuSXNWYWxpZCAoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWFpbkpzb24uaW1hZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbkpzb24uaW1hZ2VzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYWluSnNvbi50ZXh0dXJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1haW5Kc29uLnRleHR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHRleHR1cmVJbmRleCA9IGFkZFRleHR1cmUgKHRleHR1cmUpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA6IHRleHR1cmVJbmRleFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dHVyZS5IYXNUcmFuc2Zvcm1hdGlvbiAoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXh0ZW5zaW9uTmFtZSA9ICdLSFJfdGV4dHVyZV90cmFuc2Zvcm0nO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFpbkpzb24uZXh0ZW5zaW9uc1VzZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkpzb24uZXh0ZW5zaW9uc1VzZWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWFpbkpzb24uZXh0ZW5zaW9uc1VzZWQuaW5kZXhPZiAoZXh0ZW5zaW9uTmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluSnNvbi5leHRlbnNpb25zVXNlZC5wdXNoIChleHRlbnNpb25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlUGFyYW1zLmV4dGVuc2lvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLSFJfdGV4dHVyZV90cmFuc2Zvcm0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IDogW3RleHR1cmUub2Zmc2V0LngsIC10ZXh0dXJlLm9mZnNldC55XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA6IFt0ZXh0dXJlLnNjYWxlLngsIHRleHR1cmUuc2NhbGUueV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gOiAtdGV4dHVyZS5yb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlUGFyYW1zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQganNvbk1hdGVyaWFsID0ge1xuICAgICAgICAgICAgICAgIG5hbWUgOiBvYmouR2V0RXhwb3J0ZWRNYXRlcmlhbE5hbWUgKG1hdGVyaWFsLm5hbWUpLFxuICAgICAgICAgICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzIDoge1xuICAgICAgICAgICAgICAgICAgICBiYXNlQ29sb3JGYWN0b3IgOiBDb2xvclRvUkdCQSAobWF0ZXJpYWwuY29sb3IsIG1hdGVyaWFsLm9wYWNpdHkpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbWlzc2l2ZUZhY3RvciA6IENvbG9yVG9SR0IgKG1hdGVyaWFsLmVtaXNzaXZlKSxcbiAgICAgICAgICAgICAgICBkb3VibGVTaWRlZCA6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxwaGFNb2RlIDogJ09QQVFVRSdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC50cmFuc3BhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IG1hc2ssIGFscGhhQ3V0b2ZmP1xuICAgICAgICAgICAgICAgIGpzb25NYXRlcmlhbC5hbHBoYU1vZGUgPSAnQkxFTkQnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgYmFzZUNvbG9yVGV4dHVyZSA9IEdldFRleHR1cmVQYXJhbXMgKG1haW5Kc29uLCBtYXRlcmlhbC5kaWZmdXNlTWFwLCBhZGRUZXh0dXJlKTtcbiAgICAgICAgICAgIGlmIChiYXNlQ29sb3JUZXh0dXJlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbC5tdWx0aXBseURpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgICAgICAgICAganNvbk1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvciA9IENvbG9yVG9SR0JBIChuZXcgUkdCQ29sb3IgKDI1NSwgMjU1LCAyNTUpLCBtYXRlcmlhbC5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAganNvbk1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgPSBiYXNlQ29sb3JUZXh0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLnR5cGUgPT09IE1hdGVyaWFsVHlwZS5QaHlzaWNhbCkge1xuICAgICAgICAgICAgICAgIGxldCBtZXRhbGxpY1RleHR1cmUgPSBHZXRUZXh0dXJlUGFyYW1zIChtYWluSnNvbiwgbWF0ZXJpYWwubWV0YWxuZXNzTWFwLCBhZGRUZXh0dXJlKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0YWxsaWNUZXh0dXJlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGpzb25NYXRlcmlhbC5wYnJNZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgPSBtZXRhbGxpY1RleHR1cmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAganNvbk1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yID0gbWF0ZXJpYWwubWV0YWxuZXNzO1xuICAgICAgICAgICAgICAgICAgICBqc29uTWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBub3JtYWxUZXh0dXJlID0gR2V0VGV4dHVyZVBhcmFtcyAobWFpbkpzb24sIG1hdGVyaWFsLm5vcm1hbE1hcCwgYWRkVGV4dHVyZSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsVGV4dHVyZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGpzb25NYXRlcmlhbC5ub3JtYWxUZXh0dXJlID0gbm9ybWFsVGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBlbWlzc2l2ZVRleHR1cmUgPSBHZXRUZXh0dXJlUGFyYW1zIChtYWluSnNvbiwgbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIGFkZFRleHR1cmUpO1xuICAgICAgICAgICAgaWYgKGVtaXNzaXZlVGV4dHVyZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGpzb25NYXRlcmlhbC5lbWlzc2l2ZVRleHR1cmUgPSBlbWlzc2l2ZVRleHR1cmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1haW5Kc29uLm1hdGVyaWFscy5wdXNoIChqc29uTWF0ZXJpYWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWxJbmRleCA9IDA7IG1hdGVyaWFsSW5kZXggPCBleHBvcnRlck1vZGVsLk1hdGVyaWFsQ291bnQgKCk7IG1hdGVyaWFsSW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gZXhwb3J0ZXJNb2RlbC5HZXRNYXRlcmlhbCAobWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICBFeHBvcnRNYXRlcmlhbCAodGhpcywgbWFpbkpzb24sIG1hdGVyaWFsLCBhZGRUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvcHlPYmplY3RBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vY29yZS9jb3JlLmpzJztcbmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtYXRpb24uanMnO1xuaW1wb3J0IHsgQ2FsY3VsYXRlVHJpYW5nbGVOb3JtYWwsIFRyYW5zZm9ybU1lc2ggfSBmcm9tICcuLi9tb2RlbC9tZXNodXRpbHMuanMnO1xuXG5leHBvcnQgY2xhc3MgRXhwb3J0ZXJTZXR0aW5nc1xue1xuICAgIGNvbnN0cnVjdG9yIChzZXR0aW5ncylcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtYXRpb24gPSBuZXcgVHJhbnNmb3JtYXRpb24gKCk7XG4gICAgICAgIHRoaXMuaXNNZXNoVmlzaWJsZSA9IChtZXNoSW5zdGFuY2VJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgQ29weU9iamVjdEF0dHJpYnV0ZXMgKHNldHRpbmdzLCB0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlck1vZGVsXG57XG4gICAgY29uc3RydWN0b3IgKG1vZGVsLCBzZXR0aW5ncylcbiAgICB7XG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzIHx8IG5ldyBFeHBvcnRlclNldHRpbmdzICgpO1xuICAgICAgICB0aGlzLnZpc2libGVNZXNoZXMgPSBudWxsO1xuICAgICAgICB0aGlzLm1lc2hUb1Zpc2libGVNZXNoSW5kZXggPSBudWxsO1xuICAgIH1cblxuICAgIEdldE1vZGVsICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbDtcbiAgICB9XG5cbiAgICBNYXRlcmlhbENvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5NYXRlcmlhbENvdW50ICgpO1xuICAgIH1cblxuICAgIEdldE1hdGVyaWFsIChpbmRleClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLkdldE1hdGVyaWFsIChpbmRleCk7XG4gICAgfVxuXG4gICAgVmVydGV4Q291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCB2ZXJ0ZXhDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgdmVydGV4Q291bnQgKz0gbWVzaEluc3RhbmNlLlZlcnRleENvdW50ICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZlcnRleENvdW50O1xuICAgIH1cblxuICAgIFRyaWFuZ2xlQ291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCB0cmlhbmdsZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICB0cmlhbmdsZUNvdW50ICs9IG1lc2hJbnN0YW5jZS5UcmlhbmdsZUNvdW50ICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRyaWFuZ2xlQ291bnQ7XG4gICAgfVxuXG4gICAgTWVzaENvdW50ICgpXG4gICAge1xuICAgICAgICBsZXQgbWVzaENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBtZXNoQ291bnQgKz0gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtZXNoQ291bnQ7XG4gICAgfVxuXG4gICAgRW51bWVyYXRlTWVzaGVzIChvbk1lc2gpXG4gICAge1xuICAgICAgICB0aGlzLkZpbGxWaXNpYmxlTWVzaENhY2hlICgpO1xuICAgICAgICBmb3IgKGxldCBtZXNoSW5kZXggPSAwOyBtZXNoSW5kZXggPCB0aGlzLm1vZGVsLk1lc2hDb3VudCAoKTsgbWVzaEluZGV4KyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGVNZXNoZXMuaGFzIChtZXNoSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1lc2ggPSB0aGlzLm1vZGVsLkdldE1lc2ggKG1lc2hJbmRleCk7XG4gICAgICAgICAgICAgICAgb25NZXNoIChtZXNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIE1hcE1lc2hJbmRleCAobWVzaEluZGV4KVxuICAgIHtcbiAgICAgICAgdGhpcy5GaWxsVmlzaWJsZU1lc2hDYWNoZSAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaFRvVmlzaWJsZU1lc2hJbmRleC5nZXQgKG1lc2hJbmRleCk7XG4gICAgfVxuXG4gICAgSXNNZXNoSW5zdGFuY2VWaXNpYmxlIChtZXNoSW5zdGFuY2VJZClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlzTWVzaFZpc2libGUgKG1lc2hJbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBNZXNoSW5zdGFuY2VDb3VudCAoKVxuICAgIHtcbiAgICAgICAgbGV0IG1lc2hJbnN0YW5jZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBtZXNoSW5zdGFuY2VDb3VudCArPSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lc2hJbnN0YW5jZUNvdW50O1xuICAgIH1cblxuICAgIEVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKG9uTWVzaEluc3RhbmNlKVxuICAgIHtcbiAgICAgICAgdGhpcy5tb2RlbC5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5pc01lc2hWaXNpYmxlIChtZXNoSW5zdGFuY2UuR2V0SWQgKCkpKSB7XG4gICAgICAgICAgICAgICAgb25NZXNoSW5zdGFuY2UgKG1lc2hJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZVRyYW5zZm9ybWVkTWVzaEluc3RhbmNlcyAob25NZXNoKVxuICAgIHtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSBtZXNoSW5zdGFuY2UuR2V0VHJhbnNmb3JtYXRpb24gKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MudHJhbnNmb3JtYXRpb24uSXNJZGVudGl0eSAoKSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uLkFwcGVuZCAodGhpcy5zZXR0aW5ncy50cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtZXNoID0gbWVzaEluc3RhbmNlLkdldE1lc2ggKCk7XG4gICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWQgPSBtZXNoLkNsb25lICgpO1xuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1hdGlvbi5Jc0lkZW50aXR5ICgpKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3JtTWVzaCAodHJhbnNmb3JtZWQsIHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb25NZXNoICh0cmFuc2Zvcm1lZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZVZlcnRpY2VzQW5kVHJpYW5nbGVzIChjYWxsYmFja3MpXG4gICAge1xuICAgICAgICBsZXQgdHJhbnNmb3JtZWRNZXNoZXMgPSBbXTtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVUcmFuc2Zvcm1lZE1lc2hJbnN0YW5jZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE1lc2hlcy5wdXNoIChtZXNoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgbWVzaCBvZiB0cmFuc2Zvcm1lZE1lc2hlcykge1xuICAgICAgICAgICAgbWVzaC5FbnVtZXJhdGVWZXJ0aWNlcyAoKHZlcnRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblZlcnRleCAodmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKGxldCBtZXNoIG9mIHRyYW5zZm9ybWVkTWVzaGVzKSB7XG4gICAgICAgICAgICBtZXNoLkVudW1lcmF0ZVRyaWFuZ2xlVmVydGV4SW5kaWNlcyAoKHYwLCB2MSwgdjIpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25UcmlhbmdsZSAodjAgKyB2ZXJ0ZXhPZmZzZXQsIHYxICsgdmVydGV4T2Zmc2V0LCB2MiArIHZlcnRleE9mZnNldCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZlcnRleE9mZnNldCArPSBtZXNoLlZlcnRleENvdW50ICgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRW51bWVyYXRlVHJpYW5nbGVzV2l0aE5vcm1hbHMgKG9uVHJpYW5nbGUpXG4gICAge1xuICAgICAgICB0aGlzLkVudW1lcmF0ZVRyYW5zZm9ybWVkTWVzaEluc3RhbmNlcyAoKG1lc2gpID0+IHtcbiAgICAgICAgICAgIG1lc2guRW51bWVyYXRlVHJpYW5nbGVWZXJ0aWNlcyAoKHYwLCB2MSwgdjIpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsID0gQ2FsY3VsYXRlVHJpYW5nbGVOb3JtYWwgKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgICAgIG9uVHJpYW5nbGUgKHYwLCB2MSwgdjIsIG5vcm1hbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgRmlsbFZpc2libGVNZXNoQ2FjaGUgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGVNZXNoZXMgIT09IG51bGwgJiYgdGhpcy5tZXNoVG9WaXNpYmxlTWVzaEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpc2libGVNZXNoZXMgPSBuZXcgU2V0ICgpO1xuICAgICAgICB0aGlzLm1vZGVsLkVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKChtZXNoSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGxldCBtZXNoSW5zdGFuY2VJZCA9IG1lc2hJbnN0YW5jZS5HZXRJZCAoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmlzTWVzaFZpc2libGUgKG1lc2hJbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZU1lc2hlcy5hZGQgKG1lc2hJbnN0YW5jZUlkLm1lc2hJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubWVzaFRvVmlzaWJsZU1lc2hJbmRleCA9IG5ldyBNYXAgKCk7XG4gICAgICAgIGxldCB2aXNpYmxlTWVzaEluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgbWVzaEluZGV4ID0gMDsgbWVzaEluZGV4IDwgdGhpcy5tb2RlbC5NZXNoQ291bnQgKCk7IG1lc2hJbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlTWVzaGVzLmhhcyAobWVzaEluZGV4KSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzaFRvVmlzaWJsZU1lc2hJbmRleC5zZXQgKG1lc2hJbmRleCwgdmlzaWJsZU1lc2hJbmRleCk7XG4gICAgICAgICAgICAgICAgdmlzaWJsZU1lc2hJbmRleCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFRleHRXcml0ZXJcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHRoaXMudGV4dCA9ICcnO1xuXHRcdHRoaXMuaW5kZW50YXRpb24gPSAwO1xuXHR9XG5cblx0R2V0VGV4dCAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMudGV4dDtcblx0fVxuXG5cdEluZGVudCAoZGlmZilcblx0e1xuXHRcdHRoaXMuaW5kZW50YXRpb24gKz0gZGlmZjtcblx0fVxuXG5cdFdyaXRlQXJyYXlMaW5lIChhcnIpXG5cdHtcblx0XHR0aGlzLldyaXRlTGluZSAoYXJyLmpvaW4gKCcgJykpO1xuXHR9XG5cblx0V3JpdGVMaW5lIChzdHIpXG5cdHtcblx0XHR0aGlzLldyaXRlSW5kZW50YXRpb24gKCk7XG5cdFx0dGhpcy5Xcml0ZSAoc3RyICsgJ1xcbicpO1xuXHR9XG5cblx0V3JpdGVJbmRlbnRhdGlvbiAoKVxuXHR7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmluZGVudGF0aW9uOyBpKyspIHtcblx0XHRcdHRoaXMuV3JpdGUgKCcgICcpO1xuXHRcdH1cblx0fVxuXG5cdFdyaXRlIChzdHIpXG5cdHtcblx0XHR0aGlzLnRleHQgKz0gc3RyO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBGaWxlRm9ybWF0LCBHZXRGaWxlTmFtZSB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBUZXh0V3JpdGVyIH0gZnJvbSAnLi4vaW8vdGV4dHdyaXRlci5qcyc7XG5pbXBvcnQgeyBNYXRlcmlhbFR5cGUgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlZEZpbGUsIEV4cG9ydGVyQmFzZSB9IGZyb20gJy4vZXhwb3J0ZXJiYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIEV4cG9ydGVyT2JqIGV4dGVuZHMgRXhwb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgIH1cblxuICAgIENhbkV4cG9ydCAoZm9ybWF0LCBleHRlbnNpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gZm9ybWF0ID09PSBGaWxlRm9ybWF0LlRleHQgJiYgZXh0ZW5zaW9uID09PSAnb2JqJztcbiAgICB9XG5cbiAgICBFeHBvcnRDb250ZW50IChleHBvcnRlck1vZGVsLCBmb3JtYXQsIGZpbGVzLCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIFdyaXRlVGV4dHVyZSAobXRsV3JpdGVyLCBrZXl3b3JkLCB0ZXh0dXJlLCBmaWxlcylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRleHR1cmUgPT09IG51bGwgfHwgIXRleHR1cmUuSXNWYWxpZCAoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmaWxlTmFtZSA9IEdldEZpbGVOYW1lICh0ZXh0dXJlLm5hbWUpO1xuICAgICAgICAgICAgbXRsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChba2V5d29yZCwgZmlsZU5hbWVdKTtcblxuICAgICAgICAgICAgbGV0IGZpbGVJbmRleCA9IGZpbGVzLmZpbmRJbmRleCAoKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5HZXROYW1lICgpID09PSBmaWxlTmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZpbGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZUZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlIChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZUZpbGUuU2V0QnVmZmVyQ29udGVudCAodGV4dHVyZS5idWZmZXIpO1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2ggKHRleHR1cmVGaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtdGxGaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLm10bCcpO1xuICAgICAgICBsZXQgb2JqRmlsZSA9IG5ldyBFeHBvcnRlZEZpbGUgKCdtb2RlbC5vYmonKTtcblxuICAgICAgICBmaWxlcy5wdXNoIChtdGxGaWxlKTtcbiAgICAgICAgZmlsZXMucHVzaCAob2JqRmlsZSk7XG5cbiAgICAgICAgbGV0IG10bFdyaXRlciA9IG5ldyBUZXh0V3JpdGVyICgpO1xuICAgICAgICBtdGxXcml0ZXIuV3JpdGVMaW5lICh0aGlzLkdldEhlYWRlclRleHQgKCkpO1xuICAgICAgICBmb3IgKGxldCBtYXRlcmlhbEluZGV4ID0gMDsgbWF0ZXJpYWxJbmRleCA8IGV4cG9ydGVyTW9kZWwuTWF0ZXJpYWxDb3VudCAoKTsgbWF0ZXJpYWxJbmRleCsrKSB7XG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSBleHBvcnRlck1vZGVsLkdldE1hdGVyaWFsIChtYXRlcmlhbEluZGV4KTtcbiAgICAgICAgICAgIG10bFdyaXRlci5Xcml0ZUFycmF5TGluZSAoWyduZXdtdGwnLCB0aGlzLkdldEV4cG9ydGVkTWF0ZXJpYWxOYW1lIChtYXRlcmlhbC5uYW1lKV0pO1xuICAgICAgICAgICAgbXRsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ0tkJywgbWF0ZXJpYWwuY29sb3IuciAvIDI1NS4wLCBtYXRlcmlhbC5jb2xvci5nIC8gMjU1LjAsIG1hdGVyaWFsLmNvbG9yLmIgLyAyNTUuMF0pO1xuICAgICAgICAgICAgbXRsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ2QnLCBtYXRlcmlhbC5vcGFjaXR5XSk7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwudHlwZSA9PT0gTWF0ZXJpYWxUeXBlLlBob25nKSB7XG4gICAgICAgICAgICAgICAgbXRsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ0thJywgbWF0ZXJpYWwuYW1iaWVudC5yIC8gMjU1LjAsIG1hdGVyaWFsLmFtYmllbnQuZyAvIDI1NS4wLCBtYXRlcmlhbC5hbWJpZW50LmIgLyAyNTUuMF0pO1xuICAgICAgICAgICAgICAgIG10bFdyaXRlci5Xcml0ZUFycmF5TGluZSAoWydLcycsIG1hdGVyaWFsLnNwZWN1bGFyLnIgLyAyNTUuMCwgbWF0ZXJpYWwuc3BlY3VsYXIuZyAvIDI1NS4wLCBtYXRlcmlhbC5zcGVjdWxhci5iIC8gMjU1LjBdKTtcbiAgICAgICAgICAgICAgICBtdGxXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFsnTnMnLCBtYXRlcmlhbC5zaGluaW5lc3MgKiAxMDAwLjBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFdyaXRlVGV4dHVyZSAobXRsV3JpdGVyLCAnbWFwX0tkJywgbWF0ZXJpYWwuZGlmZnVzZU1hcCwgZmlsZXMpO1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLnR5cGUgPT09IE1hdGVyaWFsVHlwZS5QaG9uZykge1xuICAgICAgICAgICAgICAgIFdyaXRlVGV4dHVyZSAobXRsV3JpdGVyLCAnbWFwX0tzJywgbWF0ZXJpYWwuc3BlY3VsYXJNYXAsIGZpbGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFdyaXRlVGV4dHVyZSAobXRsV3JpdGVyLCAnYnVtcCcsIG1hdGVyaWFsLmJ1bXBNYXAsIGZpbGVzKTtcbiAgICAgICAgfVxuICAgICAgICBtdGxGaWxlLlNldFRleHRDb250ZW50IChtdGxXcml0ZXIuR2V0VGV4dCAoKSk7XG5cbiAgICAgICAgbGV0IG9ialdyaXRlciA9IG5ldyBUZXh0V3JpdGVyICgpO1xuICAgICAgICBvYmpXcml0ZXIuV3JpdGVMaW5lICh0aGlzLkdldEhlYWRlclRleHQgKCkpO1xuICAgICAgICBvYmpXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFsnbXRsbGliJywgbXRsRmlsZS5HZXROYW1lICgpXSk7XG4gICAgICAgIGxldCB2ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgbm9ybWFsT2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IHV2T2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IHVzZWRNYXRlcmlhbE5hbWUgPSBudWxsO1xuICAgICAgICBleHBvcnRlck1vZGVsLkVudW1lcmF0ZVRyYW5zZm9ybWVkTWVzaEluc3RhbmNlcyAoKG1lc2gpID0+IHtcbiAgICAgICAgICAgIG9ialdyaXRlci5Xcml0ZUFycmF5TGluZSAoWydnJywgdGhpcy5HZXRFeHBvcnRlZE1lc2hOYW1lIChtZXNoLkdldE5hbWUgKCkpXSk7XG4gICAgICAgICAgICBmb3IgKGxldCB2ZXJ0ZXhJbmRleCA9IDA7IHZlcnRleEluZGV4IDwgbWVzaC5WZXJ0ZXhDb3VudCAoKTsgdmVydGV4SW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCB2ZXJ0ZXggPSBtZXNoLkdldFZlcnRleCAodmVydGV4SW5kZXgpO1xuICAgICAgICAgICAgICAgIG9ialdyaXRlci5Xcml0ZUFycmF5TGluZSAoWyd2JywgdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXguel0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgbm9ybWFsSW5kZXggPSAwOyBub3JtYWxJbmRleCA8IG1lc2guTm9ybWFsQ291bnQgKCk7IG5vcm1hbEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsID0gbWVzaC5HZXROb3JtYWwgKG5vcm1hbEluZGV4KTtcbiAgICAgICAgICAgICAgICBvYmpXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFsndm4nLCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCB0ZXh0dXJlVVZJbmRleCA9IDA7IHRleHR1cmVVVkluZGV4IDwgbWVzaC5UZXh0dXJlVVZDb3VudCAoKTsgdGV4dHVyZVVWSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCB1diA9IG1lc2guR2V0VGV4dHVyZVVWICh0ZXh0dXJlVVZJbmRleCk7XG4gICAgICAgICAgICAgICAgb2JqV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ3Z0JywgdXYueCwgdXYueV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgdHJpYW5nbGVJbmRleCA9IDA7IHRyaWFuZ2xlSW5kZXggPCBtZXNoLlRyaWFuZ2xlQ291bnQgKCk7IHRyaWFuZ2xlSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG1lc2guR2V0VHJpYW5nbGUgKHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxldCB2MCA9IHRyaWFuZ2xlLnYwICsgdmVydGV4T2Zmc2V0ICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgdjEgPSB0cmlhbmdsZS52MSArIHZlcnRleE9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgbGV0IHYyID0gdHJpYW5nbGUudjIgKyB2ZXJ0ZXhPZmZzZXQgKyAxO1xuICAgICAgICAgICAgICAgIGxldCBuMCA9IHRyaWFuZ2xlLm4wICsgbm9ybWFsT2Zmc2V0ICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgbjEgPSB0cmlhbmdsZS5uMSArIG5vcm1hbE9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgbGV0IG4yID0gdHJpYW5nbGUubjIgKyBub3JtYWxPZmZzZXQgKyAxO1xuICAgICAgICAgICAgICAgIGlmICh0cmlhbmdsZS5tYXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gZXhwb3J0ZXJNb2RlbC5HZXRNYXRlcmlhbCAodHJpYW5nbGUubWF0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGVyaWFsTmFtZSA9IHRoaXMuR2V0RXhwb3J0ZWRNYXRlcmlhbE5hbWUgKG1hdGVyaWFsLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWxOYW1lICE9PSB1c2VkTWF0ZXJpYWxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFsndXNlbXRsJywgbWF0ZXJpYWxOYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkTWF0ZXJpYWxOYW1lID0gbWF0ZXJpYWxOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB1MCA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCB1MSA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCB1MiA9ICcnO1xuICAgICAgICAgICAgICAgIGlmICh0cmlhbmdsZS5IYXNUZXh0dXJlVVZzICgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHUwID0gdHJpYW5nbGUudTAgKyB1dk9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHUxID0gdHJpYW5nbGUudTEgKyB1dk9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHUyID0gdHJpYW5nbGUudTIgKyB1dk9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9ialdyaXRlci5Xcml0ZUFycmF5TGluZSAoWydmJywgW3YwLCB1MCwgbjBdLmpvaW4gKCcvJyksIFt2MSwgdTEsIG4xXS5qb2luICgnLycpLCBbdjIsIHUyLCBuMl0uam9pbiAoJy8nKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmVydGV4T2Zmc2V0ICs9IG1lc2guVmVydGV4Q291bnQgKCk7XG4gICAgICAgICAgICBub3JtYWxPZmZzZXQgKz0gbWVzaC5Ob3JtYWxDb3VudCAoKTtcbiAgICAgICAgICAgIHV2T2Zmc2V0ICs9IG1lc2guVGV4dHVyZVVWQ291bnQgKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9iakZpbGUuU2V0VGV4dENvbnRlbnQgKG9ialdyaXRlci5HZXRUZXh0ICgpKTtcbiAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgfVxuXG4gICAgR2V0SGVhZGVyVGV4dCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICcjIGV4cG9ydGVkIGJ5IGh0dHBzOi8vM2R2aWV3ZXIubmV0JztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGaWxlRm9ybWF0IH0gZnJvbSAnLi4vaW8vZmlsZXV0aWxzLmpzJztcbmltcG9ydCB7IFRleHRXcml0ZXIgfSBmcm9tICcuLi9pby90ZXh0d3JpdGVyLmpzJztcbmltcG9ydCB7IEV4cG9ydGVkRmlsZSwgRXhwb3J0ZXJCYXNlIH0gZnJvbSAnLi9leHBvcnRlcmJhc2UuanMnO1xuXG5leHBvcnQgY2xhc3MgRXhwb3J0ZXJPZmYgZXh0ZW5kcyBFeHBvcnRlckJhc2Vcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHN1cGVyICgpO1xuXHR9XG5cbiAgICBDYW5FeHBvcnQgKGZvcm1hdCwgZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5UZXh0ICYmIGV4dGVuc2lvbiA9PT0gJ29mZic7XG4gICAgfVxuXG5cdEV4cG9ydENvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgZmlsZXMsIG9uRmluaXNoKVxuXHR7XG5cdFx0bGV0IG9mZkZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlICgnbW9kZWwub2ZmJyk7XG5cdFx0ZmlsZXMucHVzaCAob2ZmRmlsZSk7XG5cblx0XHRsZXQgb2ZmV3JpdGVyID0gbmV3IFRleHRXcml0ZXIgKCk7XG5cdFx0b2ZmV3JpdGVyLldyaXRlTGluZSAoJ09GRicpO1xuXHRcdG9mZldyaXRlci5Xcml0ZUFycmF5TGluZSAoW2V4cG9ydGVyTW9kZWwuVmVydGV4Q291bnQgKCksIGV4cG9ydGVyTW9kZWwuVHJpYW5nbGVDb3VudCAoKSwgMF0pO1xuXG5cdFx0ZXhwb3J0ZXJNb2RlbC5FbnVtZXJhdGVWZXJ0aWNlc0FuZFRyaWFuZ2xlcyAoe1xuXHRcdFx0b25WZXJ0ZXggOiBmdW5jdGlvbiAoeCwgeSwgeikge1xuXHRcdFx0XHRvZmZXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFt4LCB5LCB6XSk7XG5cdFx0XHR9LFxuXHRcdFx0b25UcmlhbmdsZSA6IGZ1bmN0aW9uICh2MCwgdjEsIHYyKSB7XG5cdFx0XHRcdG9mZldyaXRlci5Xcml0ZUFycmF5TGluZSAoWzMsIHYwLCB2MSwgdjJdKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG9mZkZpbGUuU2V0VGV4dENvbnRlbnQgKG9mZldyaXRlci5HZXRUZXh0ICgpKTtcblx0XHRvbkZpbmlzaCAoKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgQmluYXJ5V3JpdGVyIH0gZnJvbSAnLi4vaW8vYmluYXJ5d3JpdGVyLmpzJztcbmltcG9ydCB7IEZpbGVGb3JtYXQgfSBmcm9tICcuLi9pby9maWxldXRpbHMuanMnO1xuaW1wb3J0IHsgVGV4dFdyaXRlciB9IGZyb20gJy4uL2lvL3RleHR3cml0ZXIuanMnO1xuaW1wb3J0IHsgRXhwb3J0ZWRGaWxlLCBFeHBvcnRlckJhc2UgfSBmcm9tICcuL2V4cG9ydGVyYmFzZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlclBseSBleHRlbmRzIEV4cG9ydGVyQmFzZVxue1xuXHRjb25zdHJ1Y3RvciAoKVxuXHR7XG5cdFx0c3VwZXIgKCk7XG5cdH1cblxuICAgIENhbkV4cG9ydCAoZm9ybWF0LCBleHRlbnNpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gKGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5UZXh0IHx8IGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5CaW5hcnkpICYmIGV4dGVuc2lvbiA9PT0gJ3BseSc7XG4gICAgfVxuXG5cdEV4cG9ydENvbnRlbnQgKGV4cG9ydGVyTW9kZWwsIGZvcm1hdCwgZmlsZXMsIG9uRmluaXNoKVxuXHR7XG5cdFx0aWYgKGZvcm1hdCA9PT0gRmlsZUZvcm1hdC5UZXh0KSB7XG5cdFx0XHR0aGlzLkV4cG9ydFRleHQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5FeHBvcnRCaW5hcnkgKGV4cG9ydGVyTW9kZWwsIGZpbGVzKTtcblx0XHR9XG5cdFx0b25GaW5pc2ggKCk7XG5cdH1cblxuXHRFeHBvcnRUZXh0IChleHBvcnRlck1vZGVsLCBmaWxlcylcblx0e1xuXHRcdGxldCBwbHlGaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLnBseScpO1xuXHRcdGZpbGVzLnB1c2ggKHBseUZpbGUpO1xuXG5cdFx0bGV0IHBseVdyaXRlciA9IG5ldyBUZXh0V3JpdGVyICgpO1xuXG5cdFx0bGV0IHZlcnRleENvdW50ID0gZXhwb3J0ZXJNb2RlbC5WZXJ0ZXhDb3VudCAoKTtcblx0XHRsZXQgdHJpYW5nbGVDb3VudCA9IGV4cG9ydGVyTW9kZWwuVHJpYW5nbGVDb3VudCAoKTtcblx0XHRsZXQgaGVhZGVyVGV4dCA9IHRoaXMuR2V0SGVhZGVyVGV4dCAoJ2FzY2lpJywgdmVydGV4Q291bnQsIHRyaWFuZ2xlQ291bnQpO1xuXHRcdHBseVdyaXRlci5Xcml0ZSAoaGVhZGVyVGV4dCk7XG5cblx0XHRleHBvcnRlck1vZGVsLkVudW1lcmF0ZVZlcnRpY2VzQW5kVHJpYW5nbGVzICh7XG5cdFx0XHRvblZlcnRleCA6IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cdFx0XHRcdHBseVdyaXRlci5Xcml0ZUFycmF5TGluZSAoW3gsIHksIHpdKTtcblx0XHRcdH0sXG5cdFx0XHRvblRyaWFuZ2xlIDogZnVuY3Rpb24gKHYwLCB2MSwgdjIpIHtcblx0XHRcdFx0cGx5V3JpdGVyLldyaXRlQXJyYXlMaW5lIChbMywgdjAsIHYxLCB2Ml0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cGx5RmlsZS5TZXRUZXh0Q29udGVudCAocGx5V3JpdGVyLkdldFRleHQgKCkpO1xuXHR9XG5cblx0RXhwb3J0QmluYXJ5IChleHBvcnRlck1vZGVsLCBmaWxlcylcblx0e1xuXHRcdGxldCBwbHlGaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLnBseScpO1xuXHRcdGZpbGVzLnB1c2ggKHBseUZpbGUpO1xuXG5cdFx0bGV0IHZlcnRleENvdW50ID0gZXhwb3J0ZXJNb2RlbC5WZXJ0ZXhDb3VudCAoKTtcblx0XHRsZXQgdHJpYW5nbGVDb3VudCA9IGV4cG9ydGVyTW9kZWwuVHJpYW5nbGVDb3VudCAoKTtcblx0XHRsZXQgaGVhZGVyVGV4dCA9IHRoaXMuR2V0SGVhZGVyVGV4dCAoJ2JpbmFyeV9saXR0bGVfZW5kaWFuJywgdmVydGV4Q291bnQsIHRyaWFuZ2xlQ291bnQpO1xuXG5cdFx0bGV0IGZ1bGxCeXRlTGVuZ3RoID0gaGVhZGVyVGV4dC5sZW5ndGggKyB2ZXJ0ZXhDb3VudCAqIDMgKiA0ICsgdHJpYW5nbGVDb3VudCAqICgxICsgMyAqIDQpO1xuXHRcdGxldCBwbHlXcml0ZXIgPSBuZXcgQmluYXJ5V3JpdGVyIChmdWxsQnl0ZUxlbmd0aCwgdHJ1ZSk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlclRleHQubGVuZ3RoOyBpKyspIHtcblx0XHRcdHBseVdyaXRlci5Xcml0ZVVuc2lnbmVkQ2hhcmFjdGVyOCAoaGVhZGVyVGV4dC5jaGFyQ29kZUF0IChpKSk7XG5cdFx0fVxuXG5cdFx0ZXhwb3J0ZXJNb2RlbC5FbnVtZXJhdGVWZXJ0aWNlc0FuZFRyaWFuZ2xlcyAoe1xuXHRcdFx0b25WZXJ0ZXggOiBmdW5jdGlvbiAoeCwgeSwgeikge1xuXHRcdFx0XHRwbHlXcml0ZXIuV3JpdGVGbG9hdDMyICh4KTtcblx0XHRcdFx0cGx5V3JpdGVyLldyaXRlRmxvYXQzMiAoeSk7XG5cdFx0XHRcdHBseVdyaXRlci5Xcml0ZUZsb2F0MzIgKHopO1xuXHRcdFx0fSxcblx0XHRcdG9uVHJpYW5nbGUgOiBmdW5jdGlvbiAodjAsIHYxLCB2Mikge1xuXHRcdFx0XHRwbHlXcml0ZXIuV3JpdGVVbnNpZ25lZENoYXJhY3RlcjggKDMpO1xuXHRcdFx0XHRwbHlXcml0ZXIuV3JpdGVJbnRlZ2VyMzIgKHYwKTtcblx0XHRcdFx0cGx5V3JpdGVyLldyaXRlSW50ZWdlcjMyICh2MSk7XG5cdFx0XHRcdHBseVdyaXRlci5Xcml0ZUludGVnZXIzMiAodjIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cGx5RmlsZS5TZXRCdWZmZXJDb250ZW50IChwbHlXcml0ZXIuR2V0QnVmZmVyICgpKTtcblx0fVxuXG5cdEdldEhlYWRlclRleHQgKGZvcm1hdCwgdmVydGV4Q291bnQsIHRyaWFuZ2xlQ291bnQpXG5cdHtcblx0XHRsZXQgaGVhZGVyV3JpdGVyID0gbmV3IFRleHRXcml0ZXIgKCk7XG5cdFx0aGVhZGVyV3JpdGVyLldyaXRlTGluZSAoJ3BseScpO1xuXHRcdGhlYWRlcldyaXRlci5Xcml0ZUxpbmUgKCdmb3JtYXQgJyArIGZvcm1hdCArICcgMS4wJyk7XG5cdFx0aGVhZGVyV3JpdGVyLldyaXRlTGluZSAoJ2VsZW1lbnQgdmVydGV4ICcgKyB2ZXJ0ZXhDb3VudCk7XG5cdFx0aGVhZGVyV3JpdGVyLldyaXRlTGluZSAoJ3Byb3BlcnR5IGZsb2F0IHgnKTtcblx0XHRoZWFkZXJXcml0ZXIuV3JpdGVMaW5lICgncHJvcGVydHkgZmxvYXQgeScpO1xuXHRcdGhlYWRlcldyaXRlci5Xcml0ZUxpbmUgKCdwcm9wZXJ0eSBmbG9hdCB6Jyk7XG5cdFx0aGVhZGVyV3JpdGVyLldyaXRlTGluZSAoJ2VsZW1lbnQgZmFjZSAnICsgdHJpYW5nbGVDb3VudCk7XG5cdFx0aGVhZGVyV3JpdGVyLldyaXRlTGluZSAoJ3Byb3BlcnR5IGxpc3QgdWNoYXIgaW50IHZlcnRleF9pbmRleCcpO1xuXHRcdGhlYWRlcldyaXRlci5Xcml0ZUxpbmUgKCdlbmRfaGVhZGVyJyk7XG5cdFx0cmV0dXJuIGhlYWRlcldyaXRlci5HZXRUZXh0ICgpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBCaW5hcnlXcml0ZXIgfSBmcm9tICcuLi9pby9iaW5hcnl3cml0ZXIuanMnO1xuaW1wb3J0IHsgRmlsZUZvcm1hdCB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBUZXh0V3JpdGVyIH0gZnJvbSAnLi4vaW8vdGV4dHdyaXRlci5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlZEZpbGUsIEV4cG9ydGVyQmFzZSB9IGZyb20gJy4vZXhwb3J0ZXJiYXNlLmpzJztcblxuZXhwb3J0IGNsYXNzIEV4cG9ydGVyU3RsIGV4dGVuZHMgRXhwb3J0ZXJCYXNlXG57XG5cdGNvbnN0cnVjdG9yICgpXG5cdHtcblx0XHRzdXBlciAoKTtcblx0fVxuXG4gICAgQ2FuRXhwb3J0IChmb3JtYXQsIGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiAoZm9ybWF0ID09PSBGaWxlRm9ybWF0LlRleHQgfHwgZm9ybWF0ID09PSBGaWxlRm9ybWF0LkJpbmFyeSkgJiYgZXh0ZW5zaW9uID09PSAnc3RsJztcbiAgICB9XG5cblx0RXhwb3J0Q29udGVudCAoZXhwb3J0ZXJNb2RlbCwgZm9ybWF0LCBmaWxlcywgb25GaW5pc2gpXG5cdHtcblx0XHRpZiAoZm9ybWF0ID09PSBGaWxlRm9ybWF0LlRleHQpIHtcblx0XHRcdHRoaXMuRXhwb3J0VGV4dCAoZXhwb3J0ZXJNb2RlbCwgZmlsZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLkV4cG9ydEJpbmFyeSAoZXhwb3J0ZXJNb2RlbCwgZmlsZXMpO1xuXHRcdH1cblx0XHRvbkZpbmlzaCAoKTtcblx0fVxuXG5cdEV4cG9ydFRleHQgKGV4cG9ydGVyTW9kZWwsIGZpbGVzKVxuXHR7XG5cdFx0bGV0IHN0bEZpbGUgPSBuZXcgRXhwb3J0ZWRGaWxlICgnbW9kZWwuc3RsJyk7XG5cdFx0ZmlsZXMucHVzaCAoc3RsRmlsZSk7XG5cblx0XHRsZXQgc3RsV3JpdGVyID0gbmV3IFRleHRXcml0ZXIgKCk7XG5cdFx0c3RsV3JpdGVyLldyaXRlTGluZSAoJ3NvbGlkIE1vZGVsJyk7XG5cdFx0ZXhwb3J0ZXJNb2RlbC5FbnVtZXJhdGVUcmlhbmdsZXNXaXRoTm9ybWFscyAoKHYwLCB2MSwgdjIsIG5vcm1hbCkgPT4ge1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ2ZhY2V0JywgJ25vcm1hbCcsIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnpdKTtcblx0XHRcdHN0bFdyaXRlci5JbmRlbnQgKDEpO1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlTGluZSAoJ291dGVyIGxvb3AnKTtcblx0XHRcdHN0bFdyaXRlci5JbmRlbnQgKDEpO1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlQXJyYXlMaW5lIChbJ3ZlcnRleCcsIHYwLngsIHYwLnksIHYwLnpdKTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUFycmF5TGluZSAoWyd2ZXJ0ZXgnLCB2MS54LCB2MS55LCB2MS56XSk7XG5cdFx0XHRzdGxXcml0ZXIuV3JpdGVBcnJheUxpbmUgKFsndmVydGV4JywgdjIueCwgdjIueSwgdjIuel0pO1xuXHRcdFx0c3RsV3JpdGVyLkluZGVudCAoLTEpO1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlTGluZSAoJ2VuZGxvb3AnKTtcblx0XHRcdHN0bFdyaXRlci5JbmRlbnQgKC0xKTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUxpbmUgKCdlbmRmYWNldCcpO1xuXHRcdH0pO1xuXHRcdHN0bFdyaXRlci5Xcml0ZUxpbmUgKCdlbmRzb2xpZCBNb2RlbCcpO1xuXG5cdFx0c3RsRmlsZS5TZXRUZXh0Q29udGVudCAoc3RsV3JpdGVyLkdldFRleHQgKCkpO1xuXHR9XG5cblx0RXhwb3J0QmluYXJ5IChleHBvcnRlck1vZGVsLCBmaWxlcylcblx0e1xuXHRcdGxldCBzdGxGaWxlID0gbmV3IEV4cG9ydGVkRmlsZSAoJ21vZGVsLnN0bCcpO1xuXHRcdGZpbGVzLnB1c2ggKHN0bEZpbGUpO1xuXG5cdFx0bGV0IHRyaWFuZ2xlQ291bnQgPSBleHBvcnRlck1vZGVsLlRyaWFuZ2xlQ291bnQgKCk7XG5cdFx0bGV0IGhlYWRlclNpemUgPSA4MDtcblx0XHRsZXQgZnVsbEJ5dGVMZW5ndGggPSBoZWFkZXJTaXplICsgNCArIHRyaWFuZ2xlQ291bnQgKiA1MDtcblx0XHRsZXQgc3RsV3JpdGVyID0gbmV3IEJpbmFyeVdyaXRlciAoZnVsbEJ5dGVMZW5ndGgsIHRydWUpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJTaXplOyBpKyspIHtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZVVuc2lnbmVkQ2hhcmFjdGVyOCAoMCk7XG5cdFx0fVxuXG5cdFx0c3RsV3JpdGVyLldyaXRlVW5zaWduZWRJbnRlZ2VyMzIgKHRyaWFuZ2xlQ291bnQpO1xuXHRcdGV4cG9ydGVyTW9kZWwuRW51bWVyYXRlVHJpYW5nbGVzV2l0aE5vcm1hbHMgKCh2MCwgdjEsIHYyLCBub3JtYWwpID0+IHtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKG5vcm1hbC54KTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKG5vcm1hbC55KTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKG5vcm1hbC56KTtcblxuXHRcdFx0c3RsV3JpdGVyLldyaXRlRmxvYXQzMiAodjAueCk7XG5cdFx0XHRzdGxXcml0ZXIuV3JpdGVGbG9hdDMyICh2MC55KTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKHYwLnopO1xuXG5cdFx0XHRzdGxXcml0ZXIuV3JpdGVGbG9hdDMyICh2MS54KTtcblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKHYxLnkpO1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlRmxvYXQzMiAodjEueik7XG5cblx0XHRcdHN0bFdyaXRlci5Xcml0ZUZsb2F0MzIgKHYyLngpO1xuXHRcdFx0c3RsV3JpdGVyLldyaXRlRmxvYXQzMiAodjIueSk7XG5cdFx0XHRzdGxXcml0ZXIuV3JpdGVGbG9hdDMyICh2Mi56KTtcblxuXHRcdFx0c3RsV3JpdGVyLldyaXRlVW5zaWduZWRJbnRlZ2VyMTYgKDApO1xuXHRcdH0pO1xuXG5cdFx0c3RsRmlsZS5TZXRCdWZmZXJDb250ZW50IChzdGxXcml0ZXIuR2V0QnVmZmVyICgpKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgRXhwb3J0ZXIzZG0gfSBmcm9tICcuL2V4cG9ydGVyM2RtLmpzJztcbmltcG9ydCB7IEV4cG9ydGVyQmltIH0gZnJvbSAnLi9leHBvcnRlcmJpbS5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlckdsdGYgfSBmcm9tICcuL2V4cG9ydGVyZ2x0Zi5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlck1vZGVsIH0gZnJvbSAnLi9leHBvcnRlcm1vZGVsLmpzJztcbmltcG9ydCB7IEV4cG9ydGVyT2JqIH0gZnJvbSAnLi9leHBvcnRlcm9iai5qcyc7XG5pbXBvcnQgeyBFeHBvcnRlck9mZiB9IGZyb20gJy4vZXhwb3J0ZXJvZmYuanMnO1xuaW1wb3J0IHsgRXhwb3J0ZXJQbHkgfSBmcm9tICcuL2V4cG9ydGVycGx5LmpzJztcbmltcG9ydCB7IEV4cG9ydGVyU3RsIH0gZnJvbSAnLi9leHBvcnRlcnN0bC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlclxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLmV4cG9ydGVycyA9IFtcbiAgICAgICAgICAgIG5ldyBFeHBvcnRlck9iaiAoKSxcbiAgICAgICAgICAgIG5ldyBFeHBvcnRlclN0bCAoKSxcbiAgICAgICAgICAgIG5ldyBFeHBvcnRlclBseSAoKSxcbiAgICAgICAgICAgIG5ldyBFeHBvcnRlck9mZiAoKSxcbiAgICAgICAgICAgIG5ldyBFeHBvcnRlckdsdGYgKCksXG4gICAgICAgICAgICBuZXcgRXhwb3J0ZXIzZG0gKCksXG4gICAgICAgICAgICBuZXcgRXhwb3J0ZXJCaW0gKClcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBBZGRFeHBvcnRlciAoZXhwb3J0ZXIpXG4gICAge1xuICAgICAgICB0aGlzLmV4cG9ydGVycy5wdXNoIChleHBvcnRlcik7XG4gICAgfVxuXG4gICAgRXhwb3J0IChtb2RlbCwgc2V0dGluZ3MsIGZvcm1hdCwgZXh0ZW5zaW9uLCBjYWxsYmFja3MpXG4gICAge1xuICAgICAgICBsZXQgZXhwb3J0ZXIgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXhwb3J0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudEV4cG9ydGVyID0gdGhpcy5leHBvcnRlcnNbaV07XG4gICAgICAgICAgICBpZiAoY3VycmVudEV4cG9ydGVyLkNhbkV4cG9ydCAoZm9ybWF0LCBleHRlbnNpb24pKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0ZXIgPSBjdXJyZW50RXhwb3J0ZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cG9ydGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvciAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBleHBvcnRlck1vZGVsID0gbmV3IEV4cG9ydGVyTW9kZWwgKG1vZGVsLCBzZXR0aW5ncyk7XG4gICAgICAgIGV4cG9ydGVyLkV4cG9ydCAoZXhwb3J0ZXJNb2RlbCwgZm9ybWF0LCAoZmlsZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvciAoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uU3VjY2VzcyAoZmlsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb29yZDNEIH0gZnJvbSAnLi9jb29yZDNkLmpzJztcblxuZXhwb3J0IGNsYXNzIEJveDNEXG57XG4gICAgY29uc3RydWN0b3IgKG1pbiwgbWF4KVxuICAgIHtcbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cblxuICAgIEdldE1pbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluO1xuICAgIH1cblxuICAgIEdldE1heCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4O1xuICAgIH1cblxuICAgIEdldENlbnRlciAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb29yZDNEIChcbiAgICAgICAgICAgICh0aGlzLm1pbi54ICsgdGhpcy5tYXgueCkgLyAyLjAsXG4gICAgICAgICAgICAodGhpcy5taW4ueSArIHRoaXMubWF4LnkpIC8gMi4wLFxuICAgICAgICAgICAgKHRoaXMubWluLnogKyB0aGlzLm1heC56KSAvIDIuMFxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJvdW5kaW5nQm94Q2FsY3VsYXRvcjNEXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuYm94ID0gbmV3IEJveDNEIChcbiAgICAgICAgICAgIG5ldyBDb29yZDNEIChJbmZpbml0eSwgSW5maW5pdHksIEluZmluaXR5KSxcbiAgICAgICAgICAgIG5ldyBDb29yZDNEICgtSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBHZXRCb3ggKClcbiAgICB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ib3g7XG4gICAgfVxuXG4gICAgQWRkUG9pbnQgKHBvaW50KVxuICAgIHtcbiAgICAgICAgdGhpcy5ib3gubWluLnggPSBNYXRoLm1pbiAodGhpcy5ib3gubWluLngsIHBvaW50LngpO1xuICAgICAgICB0aGlzLmJveC5taW4ueSA9IE1hdGgubWluICh0aGlzLmJveC5taW4ueSwgcG9pbnQueSk7XG4gICAgICAgIHRoaXMuYm94Lm1pbi56ID0gTWF0aC5taW4gKHRoaXMuYm94Lm1pbi56LCBwb2ludC56KTtcbiAgICAgICAgdGhpcy5ib3gubWF4LnggPSBNYXRoLm1heCAodGhpcy5ib3gubWF4LngsIHBvaW50LngpO1xuICAgICAgICB0aGlzLmJveC5tYXgueSA9IE1hdGgubWF4ICh0aGlzLmJveC5tYXgueSwgcG9pbnQueSk7XG4gICAgICAgIHRoaXMuYm94Lm1heC56ID0gTWF0aC5tYXggKHRoaXMuYm94Lm1heC56LCBwb2ludC56KTtcbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCb3gzRCB9IGZyb20gJy4vYm94M2QuanMnO1xuaW1wb3J0IHsgQ29vcmQzRCwgQ29vcmRJc0VxdWFsM0QgfSBmcm9tICcuL2Nvb3JkM2QuanMnO1xuaW1wb3J0IHsgSXNHcmVhdGVyT3JFcXVhbCwgSXNMb3dlck9yRXF1YWwgfSBmcm9tICcuL2dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIE9jdHJlZU5vZGVcbntcbiAgICBjb25zdHJ1Y3RvciAoYm91bmRpbmdCb3gsIGxldmVsKVxuICAgIHtcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94O1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMucG9pbnRJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcbiAgICB9XG5cbiAgICBBZGRQb2ludCAocG9pbnQsIGRhdGEsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuRmluZE5vZGVGb3JQb2ludCAocG9pbnQpO1xuICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUuRmluZFBvaW50RGlyZWN0bHkgKHBvaW50KSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUucG9pbnRJdGVtcy5sZW5ndGggPCBvcHRpb25zLm1heFBvaW50c1Blck5vZGUgfHwgbm9kZS5sZXZlbCA+PSBvcHRpb25zLm1heFRyZWVEZXB0aCkge1xuICAgICAgICAgICAgbm9kZS5BZGRQb2ludERpcmVjdGx5IChwb2ludCwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuQ3JlYXRlQ2hpbGROb2RlcyAoKTtcbiAgICAgICAgICAgIGxldCBvbGRQb2ludEl0ZW1zID0gbm9kZS5wb2ludEl0ZW1zO1xuICAgICAgICAgICAgbm9kZS5wb2ludEl0ZW1zID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9sZFBvaW50SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnRJdGVtID0gb2xkUG9pbnRJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuQWRkUG9pbnQgKHBvaW50SXRlbS5wb2ludCwgcG9pbnRJdGVtLmRhdGEsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5BZGRQb2ludCAocG9pbnQsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRmluZFBvaW50IChwb2ludClcbiAgICB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5GaW5kTm9kZUZvclBvaW50IChwb2ludCk7XG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZS5GaW5kUG9pbnREaXJlY3RseSAocG9pbnQpO1xuICAgIH1cblxuICAgIEFkZFBvaW50RGlyZWN0bHkgKHBvaW50LCBkYXRhKVxuICAgIHtcbiAgICAgICAgdGhpcy5wb2ludEl0ZW1zLnB1c2ggKHtcbiAgICAgICAgICAgIHBvaW50IDogcG9pbnQsXG4gICAgICAgICAgICBkYXRhIDogZGF0YVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBGaW5kUG9pbnREaXJlY3RseSAocG9pbnQpXG4gICAge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9pbnRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBvaW50SXRlbSA9IHRoaXMucG9pbnRJdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChDb29yZElzRXF1YWwzRCAocG9pbnQsIHBvaW50SXRlbS5wb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRJdGVtLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgRmluZE5vZGVGb3JQb2ludCAocG9pbnQpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMuSXNQb2ludEluQm91bmRzIChwb2ludCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSB0aGlzLmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICBsZXQgZm91bmROb2RlID0gY2hpbGROb2RlLkZpbmROb2RlRm9yUG9pbnQgKHBvaW50KTtcbiAgICAgICAgICAgIGlmIChmb3VuZE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgQ3JlYXRlQ2hpbGROb2RlcyAoKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gQWRkQ2hpbGROb2RlIChub2RlLCBtaW5YLCBtaW5ZLCBtaW5aLCBzaXplWCwgc2l6ZVksIHNpemVaKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgYm94ID0gbmV3IEJveDNEIChcbiAgICAgICAgICAgICAgICBuZXcgQ29vcmQzRCAobWluWCwgbWluWSwgbWluWiksXG4gICAgICAgICAgICAgICAgbmV3IENvb3JkM0QgKG1pblggKyBzaXplWCwgbWluWSArIHNpemVZLCBtaW5aICsgc2l6ZVopXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbm9kZS5jaGlsZE5vZGVzLnB1c2ggKG5ldyBPY3RyZWVOb2RlIChib3gsIG5vZGUubGV2ZWwgKyAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWluID0gdGhpcy5ib3VuZGluZ0JveC5taW47XG4gICAgICAgIGxldCBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nQm94LkdldENlbnRlciAoKTtcbiAgICAgICAgbGV0IHNpemVYID0gKHRoaXMuYm91bmRpbmdCb3gubWF4LnggLSB0aGlzLmJvdW5kaW5nQm94Lm1pbi54KSAvIDIuMDtcbiAgICAgICAgbGV0IHNpemVZID0gKHRoaXMuYm91bmRpbmdCb3gubWF4LnkgLSB0aGlzLmJvdW5kaW5nQm94Lm1pbi55KSAvIDIuMDtcbiAgICAgICAgbGV0IHNpemVaID0gKHRoaXMuYm91bmRpbmdCb3gubWF4LnogLSB0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSAvIDIuMDtcblxuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIG1pbi54LCBtaW4ueSwgbWluLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIGNlbnRlci54LCBtaW4ueSwgbWluLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIG1pbi54LCBjZW50ZXIueSwgbWluLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIGNlbnRlci54LCBjZW50ZXIueSwgbWluLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIG1pbi54LCBtaW4ueSwgY2VudGVyLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIGNlbnRlci54LCBtaW4ueSwgY2VudGVyLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIG1pbi54LCBjZW50ZXIueSwgY2VudGVyLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgICAgICBBZGRDaGlsZE5vZGUgKHRoaXMsIGNlbnRlci54LCBjZW50ZXIueSwgY2VudGVyLnosIHNpemVYLCBzaXplWSwgc2l6ZVopO1xuICAgIH1cblxuICAgIElzUG9pbnRJbkJvdW5kcyAocG9pbnQpXG4gICAge1xuICAgICAgICBsZXQgaXNFcXVhbCA9XG4gICAgICAgICAgICBJc0dyZWF0ZXJPckVxdWFsIChwb2ludC54LCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54KSAmJlxuICAgICAgICAgICAgSXNHcmVhdGVyT3JFcXVhbCAocG9pbnQueSwgdGhpcy5ib3VuZGluZ0JveC5taW4ueSkgJiZcbiAgICAgICAgICAgIElzR3JlYXRlck9yRXF1YWwgKHBvaW50LnosIHRoaXMuYm91bmRpbmdCb3gubWluLnopICYmXG4gICAgICAgICAgICBJc0xvd2VyT3JFcXVhbCAocG9pbnQueCwgdGhpcy5ib3VuZGluZ0JveC5tYXgueCkgJiZcbiAgICAgICAgICAgIElzTG93ZXJPckVxdWFsIChwb2ludC55LCB0aGlzLmJvdW5kaW5nQm94Lm1heC55KSAmJlxuICAgICAgICAgICAgSXNMb3dlck9yRXF1YWwgKHBvaW50LnosIHRoaXMuYm91bmRpbmdCb3gubWF4LnopO1xuICAgICAgICByZXR1cm4gaXNFcXVhbDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPY3RyZWVcbntcbiAgICBjb25zdHJ1Y3RvciAoYm91bmRpbmdCb3gsIG9wdGlvbnMpXG4gICAge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtYXhQb2ludHNQZXJOb2RlIDogMTAsXG4gICAgICAgICAgICBtYXhUcmVlRGVwdGggOiAxMFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tYXhQb2ludHNQZXJOb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubWF4UG9pbnRzUGVyTm9kZSA9IG9wdGlvbnMubWF4UG9pbnRzUGVyTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1heFRyZWVEZXB0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1heFRyZWVEZXB0aCA9IG9wdGlvbnMubWF4VHJlZURlcHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdE5vZGUgPSBuZXcgT2N0cmVlTm9kZSAoYm91bmRpbmdCb3gsIDApO1xuICAgIH1cblxuICAgIEFkZFBvaW50IChwb2ludCwgZGF0YSlcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3ROb2RlLkFkZFBvaW50IChwb2ludCwgZGF0YSwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBGaW5kUG9pbnQgKHBvaW50KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdE5vZGUuRmluZFBvaW50IChwb2ludCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmREaXN0YW5jZTNELCBTdWJDb29yZDNEIH0gZnJvbSAnLi9jb29yZDNkLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIEJlemllclR3ZWVuRnVuY3Rpb24gKGRpc3RhbmNlLCBpbmRleCwgY291bnQpXG57XG4gICAgbGV0IHQgPSBpbmRleCAvIGNvdW50O1xuXHRyZXR1cm4gZGlzdGFuY2UgKiAodCAqIHQgKiAoMy4wIC0gMi4wICogdCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGluZWFyVHdlZW5GdW5jdGlvbiAoZGlzdGFuY2UsIGluZGV4LCBjb3VudClcbntcbiAgICByZXR1cm4gaW5kZXggKiBkaXN0YW5jZSAvIGNvdW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUGFyYWJvbGljVHdlZW5GdW5jdGlvbiAoZGlzdGFuY2UsIGluZGV4LCBjb3VudClcbntcbiAgICBsZXQgdCA9IGluZGV4IC8gY291bnQ7XG4gICAgbGV0IHQyID0gdCAqIHQ7XG4gICAgcmV0dXJuIGRpc3RhbmNlICogKHQyIC8gKDIuMCAqICh0MiAtIHQpICsgMS4wKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUd2VlbkNvb3JkM0QgKGEsIGIsIGNvdW50LCB0d2VlbkZ1bmMpXG57XG5cdGxldCBkaXIgPSBTdWJDb29yZDNEIChiLCBhKS5Ob3JtYWxpemUgKCk7XG5cdGxldCBkaXN0YW5jZSA9IENvb3JkRGlzdGFuY2UzRCAoYSwgYik7XG5cdGxldCByZXN1bHQgPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGxldCBzdGVwID0gdHdlZW5GdW5jIChkaXN0YW5jZSwgaSwgY291bnQgLSAxKTtcblx0XHRyZXN1bHQucHVzaCAoYS5DbG9uZSAoKS5PZmZzZXQgKGRpciwgc3RlcCkpO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBSdW5UYXNrcyB9IGZyb20gJy4uL2NvcmUvdGFza3J1bm5lci5qcyc7XG5pbXBvcnQgeyBGaWxlU291cmNlLCBHZXRGaWxlRXh0ZW5zaW9uLCBHZXRGaWxlTmFtZSwgUmVhZEZpbGUsIFJlcXVlc3RVcmwgfSBmcm9tICcuLi9pby9maWxldXRpbHMuanMnO1xuXG4vKipcbiAqIEZpbGUgcmVwcmVzZW50YXRpb24gY2xhc3MgZm9yIGltcG9ydGVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0RmlsZVxue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICogQHBhcmFtIHtGaWxlU291cmNlfSBzb3VyY2UgU291cmNlIG9mIHRoZSBmaWxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEZpbGV9IGRhdGEgSWYgdGhlIGZpbGUgc291cmNlIGlzIHVybCwgdGhpcyBtdXN0IGJlIHRoZSB1cmwgc3RyaW5nLiBJZiB0aGUgZmlsZSBzb3VyY2VcbiAgICAgKiBpcyBmaWxlLCB0aGlzIG11c3QgYmUgYSB7QGxpbmsgRmlsZX0gb2JqZWN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChuYW1lLCBzb3VyY2UsIGRhdGEpXG4gICAge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBJbnB1dEZpbGVzRnJvbVVybHMgKHVybHMpXG57XG4gICAgbGV0IGlucHV0RmlsZXMgPSBbXTtcbiAgICBmb3IgKGxldCB1cmwgb2YgdXJscykge1xuICAgICAgICBsZXQgZmlsZU5hbWUgPSBHZXRGaWxlTmFtZSAodXJsKTtcbiAgICAgICAgaW5wdXRGaWxlcy5wdXNoIChuZXcgSW5wdXRGaWxlIChmaWxlTmFtZSwgRmlsZVNvdXJjZS5VcmwsIHVybCkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRGaWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElucHV0RmlsZXNGcm9tRmlsZU9iamVjdHMgKGZpbGVPYmplY3RzKVxue1xuICAgIGxldCBpbnB1dEZpbGVzID0gW107XG4gICAgZm9yIChsZXQgZmlsZU9iamVjdCBvZiBmaWxlT2JqZWN0cykge1xuICAgICAgICBsZXQgZmlsZU5hbWUgPSBHZXRGaWxlTmFtZSAoZmlsZU9iamVjdC5uYW1lKTtcbiAgICAgICAgaW5wdXRGaWxlcy5wdXNoIChuZXcgSW5wdXRGaWxlIChmaWxlTmFtZSwgRmlsZVNvdXJjZS5GaWxlLCBmaWxlT2JqZWN0KSk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dEZpbGVzO1xufVxuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJGaWxlXG57XG4gICAgY29uc3RydWN0b3IgKG5hbWUsIHNvdXJjZSwgZGF0YSlcbiAgICB7XG4gICAgICAgIHRoaXMubmFtZSA9IEdldEZpbGVOYW1lIChuYW1lKTtcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBHZXRGaWxlRXh0ZW5zaW9uIChuYW1lKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuY29udGVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgU2V0Q29udGVudCAoY29udGVudClcbiAgICB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJGaWxlTGlzdFxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLmZpbGVzID0gW107XG4gICAgfVxuXG4gICAgRmlsbEZyb21JbnB1dEZpbGVzIChpbnB1dEZpbGVzKVxuICAgIHtcbiAgICAgICAgdGhpcy5maWxlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbnB1dEZpbGUgb2YgaW5wdXRGaWxlcykge1xuICAgICAgICAgICAgbGV0IGZpbGUgPSBuZXcgSW1wb3J0ZXJGaWxlIChpbnB1dEZpbGUubmFtZSwgaW5wdXRGaWxlLnNvdXJjZSwgaW5wdXRGaWxlLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5maWxlcy5wdXNoIChmaWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEV4dGVuZEZyb21GaWxlTGlzdCAoZmlsZUxpc3QpXG4gICAge1xuICAgICAgICBsZXQgZmlsZXMgPSBmaWxlTGlzdC5HZXRGaWxlcyAoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGZpbGUgPSBmaWxlc1tpXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5Db250YWluc0ZpbGVCeVBhdGggKGZpbGUubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVzLnB1c2ggKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgR2V0RmlsZXMgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVzO1xuICAgIH1cblxuICAgIEdldENvbnRlbnQgKGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIFJ1blRhc2tzICh0aGlzLmZpbGVzLmxlbmd0aCwge1xuICAgICAgICAgICAgcnVuVGFzayA6IChpbmRleCwgb25UYXNrQ29tcGxldGUpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25GaWxlTGlzdFByb2dyZXNzIChpbmRleCwgdGhpcy5maWxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuR2V0RmlsZUNvbnRlbnQgKHRoaXMuZmlsZXNbaW5kZXhdLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVhZHkgOiBvblRhc2tDb21wbGV0ZSxcbiAgICAgICAgICAgICAgICAgICAgb25Qcm9ncmVzcyA6IGNhbGxiYWNrcy5vbkZpbGVMb2FkUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlYWR5IDogY2FsbGJhY2tzLm9uUmVhZHlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQ29udGFpbnNGaWxlQnlQYXRoIChmaWxlUGF0aClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLkZpbmRGaWxlQnlQYXRoIChmaWxlUGF0aCkgIT09IG51bGw7XG4gICAgfVxuXG4gICAgRmluZEZpbGVCeVBhdGggKGZpbGVQYXRoKVxuICAgIHtcbiAgICAgICAgbGV0IGZpbGVOYW1lID0gR2V0RmlsZU5hbWUgKGZpbGVQYXRoKS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgZm9yIChsZXQgZmlsZUluZGV4ID0gMDsgZmlsZUluZGV4IDwgdGhpcy5maWxlcy5sZW5ndGg7IGZpbGVJbmRleCsrKSB7XG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuZmlsZXNbZmlsZUluZGV4XTtcbiAgICAgICAgICAgIGlmIChmaWxlLm5hbWUudG9Mb3dlckNhc2UgKCkgPT09IGZpbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgSXNPbmx5VXJsU291cmNlICgpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5maWxlc1tpXTtcbiAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZSAhPT0gRmlsZVNvdXJjZS5VcmwgJiYgZmlsZS5zb3VyY2UgIT09IEZpbGVTb3VyY2UuRGVjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIEFkZEZpbGUgKGZpbGUpXG4gICAge1xuICAgICAgICB0aGlzLmZpbGVzLnB1c2ggKGZpbGUpO1xuICAgIH1cblxuICAgIEdldEZpbGVDb250ZW50IChmaWxlLCBjYWxsYmFja3MpXG4gICAge1xuICAgICAgICBpZiAoZmlsZS5jb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25SZWFkeSAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbG9hZGVyUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIGZpbGUuc291cmNlID0gRmlsZVNvdXJjZS5GaWxlO1xuICAgICAgICBmaWxlLnBhdGggPSBmaWxlLmRhdGE7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGBJbXBvcnRlckZpbGVMaXN0I0dldEZpbGVDb250ZW50OiBVcmwoJHtGaWxlU291cmNlLlVybH0pIEZpbGUoJHtGaWxlU291cmNlLkZpbGV9KSwgdGhpcyBmaWxlOmAsXG4gICAgICAgICAgZmlsZS5zb3VyY2UsIGZpbGUpO1xuXG4gICAgICAgIGlmIChmaWxlLnNvdXJjZSA9PT0gRmlsZVNvdXJjZS5VcmwpIHtcbiAgICAgICAgICAgIGxvYWRlclByb21pc2UgPSBSZXF1ZXN0VXJsIChmaWxlLmRhdGEsIGNhbGxiYWNrcy5vblByb2dyZXNzKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLnNvdXJjZSA9PT0gRmlsZVNvdXJjZS5GaWxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW1wb3J0ZXJGaWxlI0dldEZpbGVDb250ZW50OiBjYWxsaW5nIFJlYWRGaWxlJyk7XG4gICAgICAgICAgICBsb2FkZXJQcm9taXNlID0gUmVhZEZpbGUoZmlsZSwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlYWRGaWxlOiBwcm9ncmVzcy4uLicpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLm9uUHJvZ3Jlc3MgKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25SZWFkeSAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRlclByb21pc2UudGhlbihcbiAgICAgICAgICAoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0dPVCBDT05URU5ULCBzZXR0aW5nJywgY29udGVudCk7XG4gICAgICAgICAgICBmaWxlLlNldENvbnRlbnQgKGNvbnRlbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRkFJTEVEIFRPIExPQUQ6ICcsIHJlYXNvbik7XG4gICAgICAgICAgfVxuICAgICAgICApLmNhdGNoICgoZXJyKSA9PiB7XG4gICAgICAgICAgY29uc29sZS50cmFjZShlcnIpO1xuICAgICAgICB9KS5maW5hbGx5ICgoKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2ZpbmFsbHknKTtcbiAgICAgICAgICBjYWxsYmFja3Mub25SZWFkeSAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyc7XG5cbmNsYXNzIE5vZGVJZEdlbmVyYXRvclxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLm5leHRJZCA9IDA7XG4gICAgfVxuXG4gICAgR2VuZXJhdGVJZCAoKVxuICAgIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLm5leHRJZDtcbiAgICAgICAgdGhpcy5uZXh0SWQgKz0gMTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbiAoKTtcblxuICAgICAgICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5tZXNoSW5kaWNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuaWRHZW5lcmF0b3IgPSBuZXcgTm9kZUlkR2VuZXJhdG9yICgpO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZEdlbmVyYXRvci5HZW5lcmF0ZUlkICgpO1xuICAgIH1cblxuICAgIElzRW1wdHkgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHRoaXMubWVzaEluZGljZXMubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIElzTWVzaE5vZGUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHRoaXMubWVzaEluZGljZXMubGVuZ3RoID09PSAxO1xuICAgIH1cblxuICAgIEdldElkICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5pZDtcbiAgICB9XG5cbiAgICBHZXROYW1lICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIFNldE5hbWUgKG5hbWUpXG4gICAge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIEhhc1BhcmVudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ICE9PSBudWxsO1xuICAgIH1cblxuICAgIEdldFBhcmVudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH1cblxuICAgIEdldFRyYW5zZm9ybWF0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1hdGlvbjtcbiAgICB9XG5cbiAgICBHZXRXb3JsZFRyYW5zZm9ybWF0aW9uICgpXG4gICAge1xuICAgICAgICBsZXQgdHJhbnNmb3JtYXRpb24gPSB0aGlzLnRyYW5zZm9ybWF0aW9uLkNsb25lICgpO1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uLkFwcGVuZCAocGFyZW50LnRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWF0aW9uO1xuICAgIH1cblxuICAgIFNldFRyYW5zZm9ybWF0aW9uICh0cmFuc2Zvcm1hdGlvbilcbiAgICB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtYXRpb24gPSB0cmFuc2Zvcm1hdGlvbjtcbiAgICB9XG5cbiAgICBBZGRDaGlsZE5vZGUgKG5vZGUpXG4gICAge1xuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIG5vZGUuaWRHZW5lcmF0b3IgPSB0aGlzLmlkR2VuZXJhdG9yO1xuICAgICAgICBub2RlLmlkID0gbm9kZS5pZEdlbmVyYXRvci5HZW5lcmF0ZUlkICgpO1xuICAgICAgICB0aGlzLmNoaWxkTm9kZXMucHVzaCAobm9kZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBSZW1vdmVDaGlsZE5vZGUgKG5vZGUpXG4gICAge1xuICAgICAgICBub2RlLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuY2hpbGROb2Rlcy5pbmRleE9mIChub2RlKTtcbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzLnNwbGljZSAoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIEdldENoaWxkTm9kZXMgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXM7XG4gICAgfVxuXG4gICAgQ2hpbGROb2RlQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIEdldENoaWxkTm9kZSAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzW2luZGV4XTtcbiAgICB9XG5cbiAgICBBZGRNZXNoSW5kZXggKGluZGV4KVxuICAgIHtcbiAgICAgICAgdGhpcy5tZXNoSW5kaWNlcy5wdXNoIChpbmRleCk7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2hJbmRpY2VzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgTWVzaEluZGV4Q291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2hJbmRpY2VzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBHZXRNZXNoSW5kZXggKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaEluZGljZXNbaW5kZXhdO1xuICAgIH1cblxuICAgIEdldE1lc2hJbmRpY2VzICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNoSW5kaWNlcztcbiAgICB9XG5cbiAgICBFbnVtZXJhdGUgKHByb2Nlc3NvcilcbiAgICB7XG4gICAgICAgIHByb2Nlc3NvciAodGhpcyk7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGROb2RlIG9mIHRoaXMuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgY2hpbGROb2RlLkVudW1lcmF0ZSAocHJvY2Vzc29yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEVudW1lcmF0ZUNoaWxkcmVuIChwcm9jZXNzb3IpXG4gICAge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiB0aGlzLmNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgIHByb2Nlc3NvciAoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIGNoaWxkTm9kZS5FbnVtZXJhdGVDaGlsZHJlbiAocHJvY2Vzc29yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEVudW1lcmF0ZU1lc2hJbmRpY2VzIChwcm9jZXNzb3IpXG4gICAge1xuICAgICAgICBmb3IgKGNvbnN0IG1lc2hJbmRleCBvZiB0aGlzLm1lc2hJbmRpY2VzKSB7XG4gICAgICAgICAgICBwcm9jZXNzb3IgKG1lc2hJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBjaGlsZE5vZGUgb2YgdGhpcy5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUuRW51bWVyYXRlTWVzaEluZGljZXMgKHByb2Nlc3Nvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBNZXNoSW5zdGFuY2UsIE1lc2hJbnN0YW5jZUlkIH0gZnJvbSAnLi9tZXNoaW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4vbm9kZS5qcyc7XG5pbXBvcnQgeyBNb2RlbE9iamVjdDNEIH0gZnJvbSAnLi9vYmplY3QuanMnO1xuXG5leHBvcnQgY2xhc3MgTW9kZWwgZXh0ZW5kcyBNb2RlbE9iamVjdDNEXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgTm9kZSAoKTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbHMgPSBbXTtcbiAgICAgICAgdGhpcy5tZXNoZXMgPSBbXTtcbiAgICB9XG5cbiAgICBHZXRSb290Tm9kZSAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgICB9XG5cbiAgICBOb2RlQ291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMucm9vdC5FbnVtZXJhdGUgKChub2RlKSA9PiB7XG4gICAgICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50IC0gMTtcbiAgICB9XG5cbiAgICBNYXRlcmlhbENvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRlcmlhbHMubGVuZ3RoO1xuICAgIH1cblxuICAgIE1lc2hDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaGVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBNZXNoSW5zdGFuY2VDb3VudCAoKVxuICAgIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5yb290LkVudW1lcmF0ZSAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGNvdW50ICs9IG5vZGUuTWVzaEluZGV4Q291bnQgKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuXG4gICAgVmVydGV4Q291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgY291bnQgKz0gbWVzaEluc3RhbmNlLlZlcnRleENvdW50ICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICAgIFZlcnRleENvbG9yQ291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgY291bnQgKz0gbWVzaEluc3RhbmNlLlZlcnRleENvbG9yQ291bnQgKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuXG4gICAgTm9ybWFsQ291bnQgKClcbiAgICB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgY291bnQgKz0gbWVzaEluc3RhbmNlLk5vcm1hbENvdW50ICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICAgIFRleHR1cmVVVkNvdW50ICgpXG4gICAge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICB0aGlzLkVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKChtZXNoSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGNvdW50ICs9IG1lc2hJbnN0YW5jZS5UZXh0dXJlVVZDb3VudCAoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG5cbiAgICBUcmlhbmdsZUNvdW50ICgpXG4gICAge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICB0aGlzLkVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKChtZXNoSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGNvdW50ICs9IG1lc2hJbnN0YW5jZS5UcmlhbmdsZUNvdW50ICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICAgIEFkZE1hdGVyaWFsIChtYXRlcmlhbClcbiAgICB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2ggKG1hdGVyaWFsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgR2V0TWF0ZXJpYWwgKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzW2luZGV4XTtcbiAgICB9XG5cbiAgICBBZGRNZXNoIChtZXNoKVxuICAgIHtcbiAgICAgICAgdGhpcy5tZXNoZXMucHVzaCAobWVzaCk7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2hlcy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIEFkZE1lc2hUb1Jvb3ROb2RlIChtZXNoKVxuICAgIHtcbiAgICAgICAgY29uc3QgbWVzaEluZGV4ID0gdGhpcy5BZGRNZXNoIChtZXNoKTtcbiAgICAgICAgdGhpcy5yb290LkFkZE1lc2hJbmRleCAobWVzaEluZGV4KTtcbiAgICAgICAgcmV0dXJuIG1lc2hJbmRleDtcbiAgICB9XG5cbiAgICBSZW1vdmVNZXNoIChpbmRleClcbiAgICB7XG4gICAgICAgIHRoaXMubWVzaGVzLnNwbGljZSAoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLnJvb3QuRW51bWVyYXRlICgobm9kZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLm1lc2hJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubWVzaEluZGljZXNbaV0gPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubWVzaEluZGljZXMuc3BsaWNlIChpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5tZXNoSW5kaWNlc1tpXSA+IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubWVzaEluZGljZXNbaV0gLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEdldE1lc2ggKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaGVzW2luZGV4XTtcbiAgICB9XG5cbiAgICBHZXRNZXNoSW5zdGFuY2UgKGluc3RhbmNlSWQpXG4gICAge1xuICAgICAgICBsZXQgZm91bmROb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5yb290LkVudW1lcmF0ZSAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLkdldElkICgpID09PSBpbnN0YW5jZUlkLm5vZGVJZCkge1xuICAgICAgICAgICAgICAgIGZvdW5kTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZm91bmROb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlTWVzaEluZGljZXMgPSBmb3VuZE5vZGUuR2V0TWVzaEluZGljZXMgKCk7XG4gICAgICAgIGlmIChub2RlTWVzaEluZGljZXMuaW5kZXhPZiAoaW5zdGFuY2VJZC5tZXNoSW5kZXgpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvdW5kTWVzaCA9IHRoaXMuR2V0TWVzaCAoaW5zdGFuY2VJZC5tZXNoSW5kZXgpO1xuICAgICAgICBsZXQgaWQgPSBuZXcgTWVzaEluc3RhbmNlSWQgKGZvdW5kTm9kZS5HZXRJZCAoKSwgaW5zdGFuY2VJZC5tZXNoSW5kZXgpO1xuICAgICAgICByZXR1cm4gbmV3IE1lc2hJbnN0YW5jZSAoaWQsIGZvdW5kTm9kZSwgZm91bmRNZXNoKTtcbiAgICB9XG5cbiAgICBFbnVtZXJhdGVNZXNoZXMgKG9uTWVzaClcbiAgICB7XG4gICAgICAgIGZvciAoY29uc3QgbWVzaCBvZiB0aGlzLm1lc2hlcykge1xuICAgICAgICAgICAgb25NZXNoIChtZXNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKG9uTWVzaEluc3RhbmNlKVxuICAgIHtcbiAgICAgICAgdGhpcy5yb290LkVudW1lcmF0ZSAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IG1lc2hJbmRleCBvZiBub2RlLkdldE1lc2hJbmRpY2VzICgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gbmV3IE1lc2hJbnN0YW5jZUlkIChub2RlLkdldElkICgpLCBtZXNoSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxldCBtZXNoID0gdGhpcy5HZXRNZXNoIChtZXNoSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxldCBtZXNoSW5zdGFuY2UgPSBuZXcgTWVzaEluc3RhbmNlIChpZCwgbm9kZSwgbWVzaCk7XG4gICAgICAgICAgICAgICAgb25NZXNoSW5zdGFuY2UgKG1lc2hJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZVRyYW5zZm9ybWVkTWVzaEluc3RhbmNlcyAob25NZXNoKVxuICAgIHtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IG1lc2hJbnN0YW5jZS5HZXRUcmFuc2Zvcm1lZE1lc2ggKCk7XG4gICAgICAgICAgICBvbk1lc2ggKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgRW51bWVyYXRlVmVydGljZXMgKG9uVmVydGV4KVxuICAgIHtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoSW5zdGFuY2VzICgobWVzaEluc3RhbmNlKSA9PiB7XG4gICAgICAgICAgICBtZXNoSW5zdGFuY2UuRW51bWVyYXRlVmVydGljZXMgKG9uVmVydGV4KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgRW51bWVyYXRlVHJpYW5nbGVWZXJ0ZXhJbmRpY2VzIChvblRyaWFuZ2xlVmVydGV4SW5kaWNlcylcbiAgICB7XG4gICAgICAgIHRoaXMuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgbWVzaEluc3RhbmNlLkVudW1lcmF0ZVRyaWFuZ2xlVmVydGV4SW5kaWNlcyAob25UcmlhbmdsZVZlcnRleEluZGljZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBFbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpXG4gICAge1xuICAgICAgICB0aGlzLkVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKChtZXNoSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIG1lc2hJbnN0YW5jZS5FbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgVG9wb2xvZ3lWZXJ0ZXhcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5lZGdlcyA9IFtdO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlcyA9IFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvcG9sb2d5RWRnZVxue1xuICAgIGNvbnN0cnVjdG9yICh2ZXJ0ZXgxLCB2ZXJ0ZXgyKVxuICAgIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXgxID0gdmVydGV4MTtcbiAgICAgICAgdGhpcy52ZXJ0ZXgyID0gdmVydGV4MjtcbiAgICAgICAgdGhpcy50cmlhbmdsZXMgPSBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BvbG9neVRyaWFuZ2xlRWRnZVxue1xuICAgIGNvbnN0cnVjdG9yIChlZGdlLCByZXZlcnNlZClcbiAgICB7XG4gICAgICAgIHRoaXMuZWRnZSA9IGVkZ2U7XG4gICAgICAgIHRoaXMucmV2ZXJzZWQgPSByZXZlcnNlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BvbG9neVRyaWFuZ2xlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMudHJpRWRnZTEgPSBudWxsO1xuICAgICAgICB0aGlzLnRyaUVkZ2UyID0gbnVsbDtcbiAgICAgICAgdGhpcy50cmlFZGdlMyA9IG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9wb2xvZ3lcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xuICAgICAgICB0aGlzLmVkZ2VzID0gW107XG4gICAgICAgIHRoaXMudHJpYW5nbGVFZGdlcyA9IFtdO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlcyA9IFtdO1xuICAgICAgICB0aGlzLmVkZ2VTdGFydFRvRW5kVmVydGV4TWFwID0gbmV3IE1hcCAoKTtcbiAgICB9XG5cbiAgICBBZGRWZXJ0ZXggKClcbiAgICB7XG4gICAgICAgIHRoaXMudmVydGljZXMucHVzaCAobmV3IFRvcG9sb2d5VmVydGV4ICgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBBZGRUcmlhbmdsZSAodmVydGV4MSwgdmVydGV4MiwgdmVydGV4MylcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIEFkZFRyaWFuZ2xlVG9WZXJ0ZXggKHZlcnRpY2VzLCB2ZXJ0ZXhJbmRleCwgdHJpYW5nbGVJbmRleClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHZlcnRleCA9IHZlcnRpY2VzW3ZlcnRleEluZGV4XTtcbiAgICAgICAgICAgIHZlcnRleC50cmlhbmdsZXMucHVzaCAodHJpYW5nbGVJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBBZGRFZGdlVG9WZXJ0ZXggKHZlcnRpY2VzLCB0cmlhbmdsZUVkZ2VzLCB2ZXJ0ZXhJbmRleCwgdHJpYW5nbGVFZGdlSW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCB2ZXJ0ZXggPSB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF07XG4gICAgICAgICAgICBsZXQgdHJpYW5nbGVFZGdlID0gdHJpYW5nbGVFZGdlc1t0cmlhbmdsZUVkZ2VJbmRleF07XG4gICAgICAgICAgICB2ZXJ0ZXguZWRnZXMucHVzaCAodHJpYW5nbGVFZGdlLmVkZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gQWRkVHJpYW5nbGVUb0VkZ2UgKGVkZ2VzLCB0cmlhbmdsZUVkZ2VzLCB0cmlhbmdsZUVkZ2VJbmRleCwgdHJpYW5nbGVJbmRleClcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlRWRnZSA9IHRyaWFuZ2xlRWRnZXNbdHJpYW5nbGVFZGdlSW5kZXhdO1xuICAgICAgICAgICAgbGV0IGVkZ2UgPSBlZGdlc1t0cmlhbmdsZUVkZ2UuZWRnZV07XG4gICAgICAgICAgICBlZGdlLnRyaWFuZ2xlcy5wdXNoICh0cmlhbmdsZUluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0cmlhbmdsZUluZGV4ID0gdGhpcy50cmlhbmdsZXMubGVuZ3RoO1xuXG4gICAgICAgIGxldCB0cmlhbmdsZSA9IG5ldyBUb3BvbG9neVRyaWFuZ2xlICgpO1xuICAgICAgICB0cmlhbmdsZS50cmlFZGdlMSA9IHRoaXMuQWRkVHJpYW5nbGVFZGdlICh2ZXJ0ZXgxLCB2ZXJ0ZXgyKTtcbiAgICAgICAgdHJpYW5nbGUudHJpRWRnZTIgPSB0aGlzLkFkZFRyaWFuZ2xlRWRnZSAodmVydGV4MiwgdmVydGV4Myk7XG4gICAgICAgIHRyaWFuZ2xlLnRyaUVkZ2UzID0gdGhpcy5BZGRUcmlhbmdsZUVkZ2UgKHZlcnRleDMsIHZlcnRleDEpO1xuXG4gICAgICAgIEFkZFRyaWFuZ2xlVG9WZXJ0ZXggKHRoaXMudmVydGljZXMsIHZlcnRleDEsIHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICBBZGRUcmlhbmdsZVRvVmVydGV4ICh0aGlzLnZlcnRpY2VzLCB2ZXJ0ZXgyLCB0cmlhbmdsZUluZGV4KTtcbiAgICAgICAgQWRkVHJpYW5nbGVUb1ZlcnRleCAodGhpcy52ZXJ0aWNlcywgdmVydGV4MywgdHJpYW5nbGVJbmRleCk7XG5cbiAgICAgICAgQWRkRWRnZVRvVmVydGV4ICh0aGlzLnZlcnRpY2VzLCB0aGlzLnRyaWFuZ2xlRWRnZXMsIHZlcnRleDEsIHRyaWFuZ2xlLnRyaUVkZ2UxKTtcbiAgICAgICAgQWRkRWRnZVRvVmVydGV4ICh0aGlzLnZlcnRpY2VzLCB0aGlzLnRyaWFuZ2xlRWRnZXMsIHZlcnRleDIsIHRyaWFuZ2xlLnRyaUVkZ2UyKTtcbiAgICAgICAgQWRkRWRnZVRvVmVydGV4ICh0aGlzLnZlcnRpY2VzLCB0aGlzLnRyaWFuZ2xlRWRnZXMsIHZlcnRleDMsIHRyaWFuZ2xlLnRyaUVkZ2UzKTtcblxuICAgICAgICBBZGRUcmlhbmdsZVRvRWRnZSAodGhpcy5lZGdlcywgdGhpcy50cmlhbmdsZUVkZ2VzLCB0cmlhbmdsZS50cmlFZGdlMSwgdHJpYW5nbGVJbmRleCk7XG4gICAgICAgIEFkZFRyaWFuZ2xlVG9FZGdlICh0aGlzLmVkZ2VzLCB0aGlzLnRyaWFuZ2xlRWRnZXMsIHRyaWFuZ2xlLnRyaUVkZ2UyLCB0cmlhbmdsZUluZGV4KTtcbiAgICAgICAgQWRkVHJpYW5nbGVUb0VkZ2UgKHRoaXMuZWRnZXMsIHRoaXMudHJpYW5nbGVFZGdlcywgdHJpYW5nbGUudHJpRWRnZTMsIHRyaWFuZ2xlSW5kZXgpO1xuXG4gICAgICAgIHRoaXMudHJpYW5nbGVzLnB1c2ggKHRyaWFuZ2xlKTtcbiAgICB9XG5cbiAgICBBZGRUcmlhbmdsZUVkZ2UgKHZlcnRleDEsIHZlcnRleDIpXG4gICAge1xuICAgICAgICBsZXQgc3RhcnRWZXJ0ZXggPSB2ZXJ0ZXgxO1xuICAgICAgICBsZXQgZW5kVmVydGV4ID0gdmVydGV4MjtcbiAgICAgICAgbGV0IHJldmVyc2VkID0gZmFsc2U7XG4gICAgICAgIGlmICh2ZXJ0ZXgyIDwgdmVydGV4MSkge1xuICAgICAgICAgICAgc3RhcnRWZXJ0ZXggPSB2ZXJ0ZXgyO1xuICAgICAgICAgICAgZW5kVmVydGV4ID0gdmVydGV4MTtcbiAgICAgICAgICAgIHJldmVyc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlZGdlSW5kZXggPSB0aGlzLkFkZEVkZ2UgKHN0YXJ0VmVydGV4LCBlbmRWZXJ0ZXgpO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlRWRnZXMucHVzaCAobmV3IFRvcG9sb2d5VHJpYW5nbGVFZGdlIChlZGdlSW5kZXgsIHJldmVyc2VkKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyaWFuZ2xlRWRnZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBBZGRFZGdlIChzdGFydFZlcnRleCwgZW5kVmVydGV4KVxuICAgIHtcbiAgICAgICAgaWYgKCF0aGlzLmVkZ2VTdGFydFRvRW5kVmVydGV4TWFwLmhhcyAoc3RhcnRWZXJ0ZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmVkZ2VTdGFydFRvRW5kVmVydGV4TWFwLnNldCAoc3RhcnRWZXJ0ZXgsIFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbmRWZXJ0aWNlcyA9IHRoaXMuZWRnZVN0YXJ0VG9FbmRWZXJ0ZXhNYXAuZ2V0IChzdGFydFZlcnRleCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5kVmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBlbmRWZXJ0ZXhJdGVtID0gZW5kVmVydGljZXNbaV07XG4gICAgICAgICAgICBpZiAoZW5kVmVydGV4SXRlbS5lbmRWZXJ0ZXggPT09IGVuZFZlcnRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmRWZXJ0ZXhJdGVtLmVkZ2VJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlZGdlSW5kZXggPSB0aGlzLmVkZ2VzLmxlbmd0aDtcbiAgICAgICAgZW5kVmVydGljZXMucHVzaCAoe1xuICAgICAgICAgICAgZW5kVmVydGV4IDogZW5kVmVydGV4LFxuICAgICAgICAgICAgZWRnZUluZGV4IDogZWRnZUluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZWRnZXMucHVzaCAobmV3IFRvcG9sb2d5RWRnZSAoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCkpO1xuICAgICAgICByZXR1cm4gZWRnZUluZGV4O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJvdW5kaW5nQm94Q2FsY3VsYXRvcjNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvYm94M2QuanMnO1xuaW1wb3J0IHsgT2N0cmVlIH0gZnJvbSAnLi4vZ2VvbWV0cnkvb2N0cmVlLmpzJztcbmltcG9ydCB7IEdldE1lc2hUeXBlLCBNZXNoVHlwZSB9IGZyb20gJy4vbWVzaHV0aWxzLmpzJztcbmltcG9ydCB7IE1vZGVsIH0gZnJvbSAnLi9tb2RlbC5qcyc7XG5pbXBvcnQgeyBUb3BvbG9neSB9IGZyb20gJy4vdG9wb2xvZ3kuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gSXNNb2RlbEVtcHR5IChtb2RlbClcbntcbiAgICBsZXQgaXNFbXB0eSA9IHRydWU7XG4gICAgbW9kZWwuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICBpZiAoR2V0TWVzaFR5cGUgKG1lc2hJbnN0YW5jZSkgIT09IE1lc2hUeXBlLkVtcHR5KSB7XG4gICAgICAgICAgICBpc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXNFbXB0eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldEJvdW5kaW5nQm94IChvYmplY3QzRClcbntcbiAgICBsZXQgY2FsY3VsYXRvciA9IG5ldyBCb3VuZGluZ0JveENhbGN1bGF0b3IzRCAoKTtcbiAgICBvYmplY3QzRC5FbnVtZXJhdGVWZXJ0aWNlcyAoKHZlcnRleCkgPT4ge1xuICAgICAgICBjYWxjdWxhdG9yLkFkZFBvaW50ICh2ZXJ0ZXgpO1xuICAgIH0pO1xuICAgIHJldHVybiBjYWxjdWxhdG9yLkdldEJveCAoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldFRvcG9sb2d5IChvYmplY3QzRClcbntcbiAgICBmdW5jdGlvbiBHZXRWZXJ0ZXhJbmRleCAodmVydGV4LCBvY3RyZWUsIHRvcG9sb2d5KVxuICAgIHtcbiAgICAgICAgbGV0IGluZGV4ID0gb2N0cmVlLkZpbmRQb2ludCAodmVydGV4KTtcbiAgICAgICAgaWYgKGluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICBpbmRleCA9IHRvcG9sb2d5LkFkZFZlcnRleCAoKTtcbiAgICAgICAgICAgIG9jdHJlZS5BZGRQb2ludCAodmVydGV4LCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIGxldCBib3VuZGluZ0JveCA9IEdldEJvdW5kaW5nQm94IChvYmplY3QzRCk7XG4gICAgbGV0IG9jdHJlZSA9IG5ldyBPY3RyZWUgKGJvdW5kaW5nQm94KTtcbiAgICBsZXQgdG9wb2xvZ3kgPSBuZXcgVG9wb2xvZ3kgKCk7XG5cbiAgICBvYmplY3QzRC5FbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzICgodjAsIHYxLCB2MikgPT4ge1xuICAgICAgICBsZXQgdjBJbmRleCA9IEdldFZlcnRleEluZGV4ICh2MCwgb2N0cmVlLCB0b3BvbG9neSk7XG4gICAgICAgIGxldCB2MUluZGV4ID0gR2V0VmVydGV4SW5kZXggKHYxLCBvY3RyZWUsIHRvcG9sb2d5KTtcbiAgICAgICAgbGV0IHYySW5kZXggPSBHZXRWZXJ0ZXhJbmRleCAodjIsIG9jdHJlZSwgdG9wb2xvZ3kpO1xuICAgICAgICB0b3BvbG9neS5BZGRUcmlhbmdsZSAodjBJbmRleCwgdjFJbmRleCwgdjJJbmRleCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvcG9sb2d5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNUd29NYW5pZm9sZCAob2JqZWN0M0QpXG57XG4gICAgZnVuY3Rpb24gR2V0RWRnZU9yaWVudGF0aW9uSW5UcmlhbmdsZSAodG9wb2xvZ3ksIHRyaWFuZ2xlSW5kZXgsIGVkZ2VJbmRleClcbiAgICB7XG4gICAgICAgIGNvbnN0IHRyaWFuZ2xlID0gdG9wb2xvZ3kudHJpYW5nbGVzW3RyaWFuZ2xlSW5kZXhdO1xuICAgICAgICBjb25zdCB0cmlFZGdlMSA9IHRvcG9sb2d5LnRyaWFuZ2xlRWRnZXNbdHJpYW5nbGUudHJpRWRnZTFdO1xuICAgICAgICBjb25zdCB0cmlFZGdlMiA9IHRvcG9sb2d5LnRyaWFuZ2xlRWRnZXNbdHJpYW5nbGUudHJpRWRnZTJdO1xuICAgICAgICBjb25zdCB0cmlFZGdlMyA9IHRvcG9sb2d5LnRyaWFuZ2xlRWRnZXNbdHJpYW5nbGUudHJpRWRnZTNdO1xuICAgICAgICBpZiAodHJpRWRnZTEuZWRnZSA9PT0gZWRnZUluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpRWRnZTEucmV2ZXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaUVkZ2UyLmVkZ2UgPT09IGVkZ2VJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyaUVkZ2UyLnJldmVyc2VkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlFZGdlMy5lZGdlID09PSBlZGdlSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmlFZGdlMy5yZXZlcnNlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAob2JqZWN0M0QgaW5zdGFuY2VvZiBNb2RlbCkge1xuICAgICAgICBsZXQgaXNUd29NYW5pZm9sZCA9IHRydWU7XG4gICAgICAgIG9iamVjdDNELkVudW1lcmF0ZU1lc2hJbnN0YW5jZXMgKChtZXNoSW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1R3b01hbmlmb2xkKSB7XG4gICAgICAgICAgICAgICAgaXNUd29NYW5pZm9sZCA9IElzVHdvTWFuaWZvbGQgKG1lc2hJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaXNUd29NYW5pZm9sZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0b3BvbG9neSA9IEdldFRvcG9sb2d5IChvYmplY3QzRCk7XG4gICAgICAgIGZvciAobGV0IGVkZ2VJbmRleCA9IDA7IGVkZ2VJbmRleCA8IHRvcG9sb2d5LmVkZ2VzLmxlbmd0aDsgZWRnZUluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0b3BvbG9neS5lZGdlc1tlZGdlSW5kZXhdO1xuICAgICAgICAgICAgaWYgKGVkZ2UudHJpYW5nbGVzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGVkZ2VPcmllbnRhdGlvbjEgPSBHZXRFZGdlT3JpZW50YXRpb25JblRyaWFuZ2xlICh0b3BvbG9neSwgZWRnZS50cmlhbmdsZXNbMF0sIGVkZ2VJbmRleCk7XG4gICAgICAgICAgICBsZXQgZWRnZU9yaWVudGF0aW9uMiA9IEdldEVkZ2VPcmllbnRhdGlvbkluVHJpYW5nbGUgKHRvcG9sb2d5LCBlZGdlLnRyaWFuZ2xlc1sxXSwgZWRnZUluZGV4KTtcbiAgICAgICAgICAgIGlmIChlZGdlT3JpZW50YXRpb24xID09PSBudWxsIHx8IGVkZ2VPcmllbnRhdGlvbjIgPT09IG51bGwgfHwgZWRnZU9yaWVudGF0aW9uMSA9PT0gZWRnZU9yaWVudGF0aW9uMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIYXNEZWZhdWx0TWF0ZXJpYWwgKG1vZGVsKVxue1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWwuTWF0ZXJpYWxDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgIGxldCBtYXRlcmlhbCA9IG1vZGVsLkdldE1hdGVyaWFsIChpKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLmlzRGVmYXVsdCAmJiAhbWF0ZXJpYWwudmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXBsYWNlRGVmYXVsdE1hdGVyaWFsQ29sb3IgKG1vZGVsLCBjb2xvcilcbntcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGVsLk1hdGVyaWFsQ291bnQgKCk7IGkrKykge1xuICAgICAgICBsZXQgbWF0ZXJpYWwgPSBtb2RlbC5HZXRNYXRlcmlhbCAoaSk7XG4gICAgICAgIGlmIChtYXRlcmlhbC5pc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvbG9yID0gY29sb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBNb2RlbE9iamVjdDNEIH0gZnJvbSAnLi9vYmplY3QuanMnO1xuXG5leHBvcnQgY2xhc3MgTWVzaCBleHRlbmRzIE1vZGVsT2JqZWN0M0RcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSBbXTtcbiAgICAgICAgdGhpcy52ZXJ0ZXhDb2xvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5ub3JtYWxzID0gW107XG4gICAgICAgIHRoaXMudXZzID0gW107XG4gICAgICAgIHRoaXMudHJpYW5nbGVzID0gW107XG4gICAgfVxuXG4gICAgVmVydGV4Q291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBWZXJ0ZXhDb2xvckNvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0ZXhDb2xvcnMubGVuZ3RoO1xuICAgIH1cblxuICAgIE5vcm1hbENvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBUZXh0dXJlVVZDb3VudCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXZzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBUcmlhbmdsZUNvdW50ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy50cmlhbmdsZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIEFkZFZlcnRleCAodmVydGV4KVxuICAgIHtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoICh2ZXJ0ZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIFNldFZlcnRleCAoaW5kZXgsIHZlcnRleClcbiAgICB7XG4gICAgICAgIHRoaXMudmVydGljZXNbaW5kZXhdID0gdmVydGV4O1xuICAgIH1cblxuICAgIEdldFZlcnRleCAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlc1tpbmRleF07XG4gICAgfVxuXG4gICAgQWRkVmVydGV4Q29sb3IgKGNvbG9yKVxuICAgIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhDb2xvcnMucHVzaCAoY29sb3IpO1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0ZXhDb2xvcnMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBTZXRWZXJ0ZXhDb2xvciAoaW5kZXgsIGNvbG9yKVxuICAgIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhDb2xvcnNbaW5kZXhdID0gY29sb3I7XG4gICAgfVxuXG4gICAgR2V0VmVydGV4Q29sb3IgKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGV4Q29sb3JzW2luZGV4XTtcbiAgICB9XG5cbiAgICBBZGROb3JtYWwgKG5vcm1hbClcbiAgICB7XG4gICAgICAgIHRoaXMubm9ybWFscy5wdXNoIChub3JtYWwpO1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG5TZXROb3JtYWwgKGluZGV4LCBub3JtYWwpXG4gICAge1xuICAgICAgICB0aGlzLm5vcm1hbHNbaW5kZXhdID0gbm9ybWFsO1xuICAgIH1cblxuICAgIEdldE5vcm1hbCAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxzW2luZGV4XTtcbiAgICB9XG5cbiAgICBBZGRUZXh0dXJlVVYgKHV2KVxuICAgIHtcbiAgICAgICAgdGhpcy51dnMucHVzaCAodXYpO1xuICAgICAgICByZXR1cm4gdGhpcy51dnMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBTZXRUZXh0dXJlVVYgKGluZGV4LCB1dilcbiAgICB7XG4gICAgICAgIHRoaXMudXZzW2luZGV4XSA9IHV2O1xuICAgIH1cblxuICAgIEdldFRleHR1cmVVViAoaW5kZXgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy51dnNbaW5kZXhdO1xuICAgIH1cblxuICAgIEFkZFRyaWFuZ2xlICh0cmlhbmdsZSlcbiAgICB7XG4gICAgICAgIHRoaXMudHJpYW5nbGVzLnB1c2ggKHRyaWFuZ2xlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpYW5nbGVzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgR2V0VHJpYW5nbGUgKGluZGV4KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpYW5nbGVzW2luZGV4XTtcbiAgICB9XG5cbiAgICBFbnVtZXJhdGVWZXJ0aWNlcyAob25WZXJ0ZXgpXG4gICAge1xuICAgICAgICBmb3IgKGNvbnN0IHZlcnRleCBvZiB0aGlzLnZlcnRpY2VzKSB7XG4gICAgICAgICAgICBvblZlcnRleCAodmVydGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEVudW1lcmF0ZVRyaWFuZ2xlVmVydGV4SW5kaWNlcyAob25UcmlhbmdsZVZlcnRleEluZGljZXMpXG4gICAge1xuICAgICAgICBmb3IgKGNvbnN0IHRyaWFuZ2xlIG9mIHRoaXMudHJpYW5nbGVzKSB7XG4gICAgICAgICAgICBvblRyaWFuZ2xlVmVydGV4SW5kaWNlcyAodHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxLCB0cmlhbmdsZS52Mik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBFbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzIChvblRyaWFuZ2xlVmVydGljZXMpXG4gICAge1xuICAgICAgICBmb3IgKGNvbnN0IHRyaWFuZ2xlIG9mIHRoaXMudHJpYW5nbGVzKSB7XG4gICAgICAgICAgICBsZXQgdjAgPSB0aGlzLnZlcnRpY2VzW3RyaWFuZ2xlLnYwXTtcbiAgICAgICAgICAgIGxldCB2MSA9IHRoaXMudmVydGljZXNbdHJpYW5nbGUudjFdO1xuICAgICAgICAgICAgbGV0IHYyID0gdGhpcy52ZXJ0aWNlc1t0cmlhbmdsZS52Ml07XG4gICAgICAgICAgICBvblRyaWFuZ2xlVmVydGljZXMgKHYwLCB2MSwgdjIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ2xvbmUgKClcbiAgICB7XG4gICAgICAgIGxldCBjbG9uZWQgPSBuZXcgTWVzaCAoKTtcblxuICAgICAgICBjbG9uZWQuU2V0TmFtZSAodGhpcy5HZXROYW1lICgpKTtcbiAgICAgICAgdGhpcy5DbG9uZVByb3BlcnRpZXMgKGNsb25lZCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlZlcnRleENvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2ZXJ0ZXggPSB0aGlzLkdldFZlcnRleCAoaSk7XG4gICAgICAgICAgICBjbG9uZWQuQWRkVmVydGV4ICh2ZXJ0ZXguQ2xvbmUgKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlZlcnRleENvbG9yQ291bnQgKCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNvbG9yID0gdGhpcy5HZXRWZXJ0ZXhDb2xvciAoaSk7XG4gICAgICAgICAgICBjbG9uZWQuQWRkVmVydGV4Q29sb3IgKGNvbG9yLkNsb25lICgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5Ob3JtYWxDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9ybWFsID0gdGhpcy5HZXROb3JtYWwgKGkpO1xuICAgICAgICAgICAgY2xvbmVkLkFkZE5vcm1hbCAobm9ybWFsLkNsb25lICgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5UZXh0dXJlVVZDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdXYgPSB0aGlzLkdldFRleHR1cmVVViAoaSk7XG4gICAgICAgICAgICBjbG9uZWQuQWRkVGV4dHVyZVVWICh1di5DbG9uZSAoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVHJpYW5nbGVDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSB0aGlzLkdldFRyaWFuZ2xlIChpKTtcbiAgICAgICAgICAgIGNsb25lZC5BZGRUcmlhbmdsZSAodHJpYW5nbGUuQ2xvbmUgKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgVHJpYW5nbGVcbntcbiAgICBjb25zdHJ1Y3RvciAodjAsIHYxLCB2MilcbiAgICB7XG4gICAgICAgIHRoaXMudjAgPSB2MDtcbiAgICAgICAgdGhpcy52MSA9IHYxO1xuICAgICAgICB0aGlzLnYyID0gdjI7XG5cbiAgICAgICAgdGhpcy5jMCA9IG51bGw7XG4gICAgICAgIHRoaXMuYzEgPSBudWxsO1xuICAgICAgICB0aGlzLmMyID0gbnVsbDtcblxuICAgICAgICB0aGlzLm4wID0gbnVsbDtcbiAgICAgICAgdGhpcy5uMSA9IG51bGw7XG4gICAgICAgIHRoaXMubjIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMudTAgPSBudWxsO1xuICAgICAgICB0aGlzLnUxID0gbnVsbDtcbiAgICAgICAgdGhpcy51MiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tYXQgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnZlID0gbnVsbDtcbiAgICB9XG5cbiAgICBIYXNWZXJ0aWNlcyAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudjAgIT09IG51bGwgJiYgdGhpcy52MSAhPT0gbnVsbCAmJiB0aGlzLnYyICE9PSBudWxsO1xuICAgIH1cblxuICAgIEhhc1ZlcnRleENvbG9ycyAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYzAgIT09IG51bGwgJiYgdGhpcy5jMSAhPT0gbnVsbCAmJiB0aGlzLmMyICE9PSBudWxsO1xuICAgIH1cblxuICAgIEhhc05vcm1hbHMgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm4wICE9PSBudWxsICYmIHRoaXMubjEgIT09IG51bGwgJiYgdGhpcy5uMiAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBIYXNUZXh0dXJlVVZzICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy51MCAhPT0gbnVsbCAmJiB0aGlzLnUxICE9PSBudWxsICYmIHRoaXMudTIgIT09IG51bGw7XG4gICAgfVxuXG4gICAgU2V0VmVydGljZXMgKHYwLCB2MSwgdjIpXG4gICAge1xuICAgICAgICB0aGlzLnYwID0gdjA7XG4gICAgICAgIHRoaXMudjEgPSB2MTtcbiAgICAgICAgdGhpcy52MiA9IHYyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBTZXRWZXJ0ZXhDb2xvcnMgKGMwLCBjMSwgYzIpXG4gICAge1xuICAgICAgICB0aGlzLmMwID0gYzA7XG4gICAgICAgIHRoaXMuYzEgPSBjMTtcbiAgICAgICAgdGhpcy5jMiA9IGMyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBTZXROb3JtYWxzIChuMCwgbjEsIG4yKVxuICAgIHtcbiAgICAgICAgdGhpcy5uMCA9IG4wO1xuICAgICAgICB0aGlzLm4xID0gbjE7XG4gICAgICAgIHRoaXMubjIgPSBuMjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgU2V0VGV4dHVyZVVWcyAodTAsIHUxLCB1MilcbiAgICB7XG4gICAgICAgIHRoaXMudTAgPSB1MDtcbiAgICAgICAgdGhpcy51MSA9IHUxO1xuICAgICAgICB0aGlzLnUyID0gdTI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIFNldE1hdGVyaWFsIChtYXQpXG4gICAge1xuICAgICAgICB0aGlzLm1hdCA9IG1hdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgU2V0Q3VydmUgKGN1cnZlKVxuICAgIHtcbiAgICAgICAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBDbG9uZSAoKVxuICAgIHtcbiAgICAgICAgbGV0IGNsb25lZCA9IG5ldyBUcmlhbmdsZSAodGhpcy52MCwgdGhpcy52MSwgdGhpcy52Mik7XG4gICAgICAgIGNsb25lZC5TZXRWZXJ0ZXhDb2xvcnMgKHRoaXMuYzAsIHRoaXMuYzEsIHRoaXMuYzIpO1xuICAgICAgICBjbG9uZWQuU2V0Tm9ybWFscyAodGhpcy5uMCwgdGhpcy5uMSwgdGhpcy5uMik7XG4gICAgICAgIGNsb25lZC5TZXRUZXh0dXJlVVZzICh0aGlzLnUwLCB0aGlzLnUxLCB0aGlzLnUyKTtcbiAgICAgICAgY2xvbmVkLlNldE1hdGVyaWFsICh0aGlzLm1hdCk7XG4gICAgICAgIGNsb25lZC5TZXRDdXJ2ZSAodGhpcy5jdXJ2ZSk7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmQyRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkMmQuanMnO1xuaW1wb3J0IHsgQ29vcmQzRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkM2QuanMnO1xuaW1wb3J0IHsgUkdCQ29sb3JGcm9tRmxvYXRDb21wb25lbnRzIH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgTWF0ZXJpYWxUeXBlIH0gZnJvbSAnLi4vbW9kZWwvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2guanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tb2RlbC90cmlhbmdsZS5qcyc7XG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLy8gU29tZSBtb2JpbGUgZGV2aWNlcyBzYXkgdGhhdCB0aGV5IHN1cHBvcnQgbWVkaXVtcCwgYnV0IGluIHJlYWxpdHkgdGhleSBkb24ndC4gQXQgdGhlIGVuZFxuLy8gYWxsIG1hdGVyaWFscyByZW5kZXJlZCBhcyBibGFjay4gVGhpcyBoYWNrIHJlbmRlcnMgYSBzaW5nbGUgcGxhbmUgd2l0aCByZWQgbWF0ZXJpYWwgYW5kXG4vLyBpdCBjaGVja3MgaWYgaXQncyByZWFsbHkgcmVkLiBJZiBpdCdzIG5vdCwgdGhlbiBwcm9iYWJseSB0aGVyZSBpcyBhIGRyaXZlciBpc3N1ZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3ZhY3N2L09ubGluZTNEVmlld2VyL2lzc3Vlcy82OVxuZXhwb3J0IGZ1bmN0aW9uIEhhc0hpZ2hwRHJpdmVySXNzdWUgKClcbntcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAoJ2NhbnZhcycpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgKGNhbnZhcyk7XG4gICAgbGV0IHBhcmFtZXRlcnMgPSB7XG4gICAgICAgIGNhbnZhcyA6IGNhbnZhcyxcbiAgICAgICAgYW50aWFsaWFzIDogdHJ1ZVxuICAgIH07XG5cbiAgICBsZXQgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlciAocGFyYW1ldGVycyk7XG4gICAgcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA9IFRIUkVFLkxpbmVhclNSR0JDb2xvclNwYWNlO1xuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IgKCcjZmZmZmZmJywgMSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZSAoMTAsIDEwKTtcblxuICAgIGxldCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSAoKTtcblxuICAgIGxldCBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0ICgweDg4ODg4OCk7XG4gICAgc2NlbmUuYWRkIChhbWJpZW50TGlnaHQpO1xuXG4gICAgbGV0IGxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQgKDB4ODg4ODg4KTtcbiAgICBsaWdodC5wb3NpdGlvbi5zZXQgKDAuMCwgMC4wLCAxLjApO1xuICAgIHNjZW5lLmFkZCAobGlnaHQpO1xuXG4gICAgbGV0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSAoNDUuMCwgMS4wLCAwLjEsIDEwMDAuMCk7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCAoMC4wLCAwLjAsIDEuMCk7XG4gICAgY2FtZXJhLnVwLnNldCAoMC4wLCAxLjAsIDAuMCk7XG4gICAgY2FtZXJhLmxvb2tBdCAobmV3IFRIUkVFLlZlY3RvcjMgKDAuMCwgMC4wLCAwLjApKTtcbiAgICBzY2VuZS5hZGQgKGNhbWVyYSk7XG5cbiAgICBsZXQgcGxhbmUgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSAoMS4wLCAxLjApO1xuICAgIGxldCBtZXNoID0gbmV3IFRIUkVFLk1lc2ggKHBsYW5lLCBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwgKHtcbiAgICAgICAgY29sb3IgOiAweGNjMDAwMFxuICAgIH0pKTtcbiAgICBzY2VuZS5hZGQgKG1lc2gpO1xuICAgIHJlbmRlcmVyLnJlbmRlciAoc2NlbmUsIGNhbWVyYSk7XG5cbiAgICBsZXQgY29udGV4dCA9IHJlbmRlcmVyLmdldENvbnRleHQgKCk7XG4gICAgbGV0IHBpeGVscyA9IG5ldyBVaW50OEFycmF5ICg0KTtcbiAgICBjb250ZXh0LnJlYWRQaXhlbHMoXG4gICAgICAgIDUsIDUsIDEsIDEsXG4gICAgICAgIGNvbnRleHQuUkdCQSxcbiAgICAgICAgY29udGV4dC5VTlNJR05FRF9CWVRFLFxuICAgICAgICBwaXhlbHNcbiAgICApO1xuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCAoY2FudmFzKTtcblxuICAgIGxldCBibGFja1RocmVzaG9sZCA9IDUwO1xuICAgIGlmIChwaXhlbHNbMF0gPCBibGFja1RocmVzaG9sZCAmJiBwaXhlbHNbMV0gPCBibGFja1RocmVzaG9sZCAmJiBwaXhlbHNbMl0gPCBibGFja1RocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgY29uc3QgU2hhZGluZ1R5cGUgPVxue1xuICAgIFBob25nIDogMSxcbiAgICBQaHlzaWNhbCA6IDJcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRTaGFkaW5nVHlwZSAobW9kZWwpXG57XG4gICAgbGV0IHBob25nQ291bnQgPSAwO1xuICAgIGxldCBwaHlzaWNhbENvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGVsLk1hdGVyaWFsQ291bnQgKCk7IGkrKykge1xuICAgICAgICBsZXQgbWF0ZXJpYWwgPSBtb2RlbC5HZXRNYXRlcmlhbCAoaSk7XG4gICAgICAgIGlmIChtYXRlcmlhbC50eXBlID09PSBNYXRlcmlhbFR5cGUuUGhvbmcpIHtcbiAgICAgICAgICAgIHBob25nQ291bnQgKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRlcmlhbC50eXBlID09PSBNYXRlcmlhbFR5cGUuUGh5c2ljYWwpIHtcbiAgICAgICAgICAgIHBoeXNpY2FsQ291bnQgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGhvbmdDb3VudCA+PSBwaHlzaWNhbENvdW50KSB7XG4gICAgICAgIHJldHVybiBTaGFkaW5nVHlwZS5QaG9uZztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gU2hhZGluZ1R5cGUuUGh5c2ljYWw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGhyZWVDb2xvckNvbnZlcnRlclxue1xuICAgIENvbnZlcnQgKGNvbG9yKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGhyZWVMaW5lYXJUb1NSR0JDb2xvckNvbnZlcnRlciBleHRlbmRzIFRocmVlQ29sb3JDb252ZXJ0ZXJcbntcbiAgICBDb252ZXJ0IChjb2xvcilcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgVEhSRUUuQ29sb3IgKCkuY29weUxpbmVhclRvU1JHQiAoY29sb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRocmVlU1JHQlRvTGluZWFyQ29sb3JDb252ZXJ0ZXIgZXh0ZW5kcyBUaHJlZUNvbG9yQ29udmVydGVyXG57XG4gICAgQ29udmVydCAoY29sb3IpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkNvbG9yICgpLmNvcHlTUkdCVG9MaW5lYXIgKGNvbG9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb252ZXJ0VGhyZWVDb2xvclRvQ29sb3IgKHRocmVlQ29sb3IpXG57XG4gICAgcmV0dXJuIFJHQkNvbG9yRnJvbUZsb2F0Q29tcG9uZW50cyAodGhyZWVDb2xvci5yLCB0aHJlZUNvbG9yLmcsIHRocmVlQ29sb3IuYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKGNvbG9yKVxue1xuICAgIHJldHVybiBuZXcgVEhSRUUuQ29sb3IgKFxuICAgICAgICBjb2xvci5yIC8gMjU1LjAsXG4gICAgICAgIGNvbG9yLmcgLyAyNTUuMCxcbiAgICAgICAgY29sb3IuYiAvIDI1NS4wXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbnZlcnRUaHJlZUdlb21ldHJ5VG9NZXNoICh0aHJlZUdlb21ldHJ5LCBtYXRlcmlhbEluZGV4LCBjb2xvckNvbnZlcnRlcilcbntcbiAgICBsZXQgbWVzaCA9IG5ldyBNZXNoICgpO1xuXG4gICAgbGV0IHZlcnRpY2VzID0gdGhyZWVHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuICAgIGxldCB2ZXJ0ZXhJdGVtU2l6ZSA9IHRocmVlR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5pdGVtU2l6ZSB8fCAzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IHZlcnRleEl0ZW1TaXplKSB7XG4gICAgICAgIGxldCB4ID0gdmVydGljZXNbaV07XG4gICAgICAgIGxldCB5ID0gdmVydGljZXNbaSArIDFdO1xuICAgICAgICBsZXQgeiA9IHZlcnRpY2VzW2kgKyAyXTtcbiAgICAgICAgbWVzaC5BZGRWZXJ0ZXggKG5ldyBDb29yZDNEICh4LCB5LCB6KSk7XG4gICAgfVxuXG4gICAgbGV0IGhhc1ZlcnRleENvbG9ycyA9ICh0aHJlZUdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCk7XG4gICAgaWYgKGhhc1ZlcnRleENvbG9ycykge1xuICAgICAgICBsZXQgY29sb3JzID0gdGhyZWVHZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5O1xuICAgICAgICBsZXQgY29sb3JJdGVtU2l6ZSA9IHRocmVlR2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSB8fCAzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkgKz0gY29sb3JJdGVtU2l6ZSkge1xuICAgICAgICAgICAgbGV0IHRocmVlQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3IgKGNvbG9yc1tpXSwgY29sb3JzW2kgKyAxXSwgY29sb3JzW2kgKyAyXSk7XG4gICAgICAgICAgICBpZiAoY29sb3JDb252ZXJ0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJlZUNvbG9yID0gY29sb3JDb252ZXJ0ZXIuQ29udmVydCAodGhyZWVDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXNoLkFkZFZlcnRleENvbG9yIChDb252ZXJ0VGhyZWVDb2xvclRvQ29sb3IgKHRocmVlQ29sb3IpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBoYXNOb3JtYWxzID0gKHRocmVlR2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCk7XG4gICAgaWYgKGhhc05vcm1hbHMpIHtcbiAgICAgICAgbGV0IG5vcm1hbHMgPSB0aHJlZUdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuICAgICAgICBsZXQgbm9ybWFsSXRlbVNpemUgPSB0aHJlZUdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLml0ZW1TaXplIHx8IDM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9ybWFscy5sZW5ndGg7IGkgKz0gbm9ybWFsSXRlbVNpemUpIHtcbiAgICAgICAgICAgIGxldCB4ID0gbm9ybWFsc1tpXTtcbiAgICAgICAgICAgIGxldCB5ID0gbm9ybWFsc1tpICsgMV07XG4gICAgICAgICAgICBsZXQgeiA9IG5vcm1hbHNbaSArIDJdO1xuICAgICAgICAgICAgbWVzaC5BZGROb3JtYWwgKG5ldyBDb29yZDNEICh4LCB5LCB6KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaGFzVVZzID0gKHRocmVlR2VvbWV0cnkuYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkKTtcbiAgICBpZiAoaGFzVVZzKSB7XG4gICAgICAgIGxldCB1dnMgPSB0aHJlZUdlb21ldHJ5LmF0dHJpYnV0ZXMudXYuYXJyYXk7XG4gICAgICAgIGxldCB1dkl0ZW1TaXplID0gdGhyZWVHZW9tZXRyeS5hdHRyaWJ1dGVzLnV2Lml0ZW1TaXplIHx8IDI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXZzLmxlbmd0aDsgaSArPSB1dkl0ZW1TaXplKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHV2c1tpXTtcbiAgICAgICAgICAgIGxldCB5ID0gdXZzW2kgKyAxXTtcbiAgICAgICAgICAgIG1lc2guQWRkVGV4dHVyZVVWIChuZXcgQ29vcmQyRCAoeCwgeSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGluZGljZXMgPSBudWxsO1xuICAgIGlmICh0aHJlZUdlb21ldHJ5LmluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIGluZGljZXMgPSB0aHJlZUdlb21ldHJ5LmluZGV4LmFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGljZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGggLyAzOyBpKyspIHtcbiAgICAgICAgICAgIGluZGljZXMucHVzaCAoaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgbGV0IHYwID0gaW5kaWNlc1tpXTtcbiAgICAgICAgbGV0IHYxID0gaW5kaWNlc1tpICsgMV07XG4gICAgICAgIGxldCB2MiA9IGluZGljZXNbaSArIDJdO1xuICAgICAgICBsZXQgdHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUgKHYwLCB2MSwgdjIpO1xuICAgICAgICBpZiAoaGFzVmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXRWZXJ0ZXhDb2xvcnMgKHYwLCB2MSwgdjIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNOb3JtYWxzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXROb3JtYWxzICh2MCwgdjEsIHYyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVVZzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXRUZXh0dXJlVVZzICh2MCwgdjEsIHYyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0ZXJpYWxJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdHJpYW5nbGUuU2V0TWF0ZXJpYWwgKG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIG1lc2guQWRkVHJpYW5nbGUgKHRyaWFuZ2xlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVzaDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERpc3Bvc2VUaHJlZU9iamVjdHMgKG1haW5PYmplY3QpXG57XG4gICAgaWYgKG1haW5PYmplY3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1haW5PYmplY3QudHJhdmVyc2UgKChvYmopID0+IHtcbiAgICAgICAgaWYgKG9iai5pc01lc2ggfHwgb2JqLmlzTGluZVNlZ21lbnRzKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSAob2JqLm1hdGVyaWFsKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG1hdGVyaWFsIG9mIG9iai5tYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaXNwb3NlICgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqLm1hdGVyaWFsLmRpc3Bvc2UgKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmoudXNlckRhdGEgPSBudWxsO1xuICAgICAgICAgICAgb2JqLmdlb21ldHJ5LmRpc3Bvc2UgKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IENvcHlPYmplY3RBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vY29yZS9jb3JlLmpzJztcbmltcG9ydCB7IEFkZENvb3JkM0QsIENvb3JkM0QsIENvb3JkSXNFcXVhbDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gJy4vY29sb3IuanMnO1xuaW1wb3J0IHsgUGhvbmdNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgQ2FsY3VsYXRlVHJpYW5nbGVOb3JtYWwsIEdldE1lc2hUeXBlLCBNZXNoVHlwZSB9IGZyb20gJy4vbWVzaHV0aWxzLmpzJztcblxuY2xhc3MgTW9kZWxGaW5hbGl6ZXJcbntcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1zKVxuICAgIHtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB7XG4gICAgICAgICAgICBnZXREZWZhdWx0TWF0ZXJpYWxDb2xvciA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJHQkNvbG9yICgwLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ29weU9iamVjdEF0dHJpYnV0ZXMgKHBhcmFtcywgdGhpcy5wYXJhbXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHRNYXRlcmlhbEluZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBGaW5hbGl6ZSAobW9kZWwpXG4gICAge1xuICAgICAgICB0aGlzLlJlc2V0ICgpO1xuXG4gICAgICAgIHRoaXMuRmluYWxpemVNZXNoZXMgKG1vZGVsKTtcbiAgICAgICAgdGhpcy5GaW5hbGl6ZU1hdGVyaWFscyAobW9kZWwpO1xuICAgICAgICB0aGlzLkZpbmFsaXplTm9kZXMgKG1vZGVsKTtcbiAgICB9XG5cbiAgICBGaW5hbGl6ZU1hdGVyaWFscyAobW9kZWwpXG4gICAge1xuICAgICAgICBpZiAobW9kZWwuVmVydGV4Q29sb3JDb3VudCAoKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1hdGVyaWFsSGFzVmVydGV4Q29sb3JzID0gbmV3IE1hcCAoKTtcbiAgICAgICAgZm9yIChsZXQgbWVzaEluZGV4ID0gMDsgbWVzaEluZGV4IDwgbW9kZWwuTWVzaENvdW50ICgpOyBtZXNoSW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IG1lc2ggPSBtb2RlbC5HZXRNZXNoIChtZXNoSW5kZXgpO1xuICAgICAgICAgICAgZm9yIChsZXQgdHJpYW5nbGVJbmRleCA9IDA7IHRyaWFuZ2xlSW5kZXggPCBtZXNoLlRyaWFuZ2xlQ291bnQgKCk7IHRyaWFuZ2xlSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG1lc2guR2V0VHJpYW5nbGUgKHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxldCBoYXNWZXJ0ZXhDb2xvcnMgPSB0cmlhbmdsZS5IYXNWZXJ0ZXhDb2xvcnMgKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbEhhc1ZlcnRleENvbG9ycy5oYXMgKHRyaWFuZ2xlLm1hdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxIYXNWZXJ0ZXhDb2xvcnMuc2V0ICh0cmlhbmdsZS5tYXQsIGhhc1ZlcnRleENvbG9ycyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaGFzVmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsSGFzVmVydGV4Q29sb3JzLnNldCAodHJpYW5nbGUubWF0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgW21hdGVyaWFsSW5kZXgsIGhhc1ZlcnRleENvbG9yc10gb2YgbWF0ZXJpYWxIYXNWZXJ0ZXhDb2xvcnMpIHtcbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IG1vZGVsLkdldE1hdGVyaWFsIChtYXRlcmlhbEluZGV4KTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGhhc1ZlcnRleENvbG9ycztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEZpbmFsaXplTWVzaGVzIChtb2RlbClcbiAgICB7XG4gICAgICAgIGZvciAobGV0IG1lc2hJbmRleCA9IDA7IG1lc2hJbmRleCA8IG1vZGVsLk1lc2hDb3VudCAoKTsgbWVzaEluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBtZXNoID0gbW9kZWwuR2V0TWVzaCAobWVzaEluZGV4KTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gR2V0TWVzaFR5cGUgKG1lc2gpO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IE1lc2hUeXBlLkVtcHR5KSB7XG4gICAgICAgICAgICAgICAgbW9kZWwuUmVtb3ZlTWVzaCAobWVzaEluZGV4KTtcbiAgICAgICAgICAgICAgICBtZXNoSW5kZXggPSBtZXNoSW5kZXggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5GaW5hbGl6ZU1lc2ggKG1vZGVsLCBtZXNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEZpbmFsaXplTWVzaCAobW9kZWwsIG1lc2gpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBDYWxjdWxhdGVDdXJ2ZU5vcm1hbHMgKG1lc2gpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFkZEF2ZXJhZ2VOb3JtYWwgKG1lc2gsIHRyaWFuZ2xlLCB2ZXJ0ZXhJbmRleCwgdHJpYW5nbGVOb3JtYWxzLCB2ZXJ0ZXhUb1RyaWFuZ2xlcylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBJc05vcm1hbEluQXJyYXkgKGFycmF5LCBub3JtYWwpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvb3JkSXNFcXVhbDNEIChjdXJyZW50LCBub3JtYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBhdmVyYWdlTm9ybWFscyA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBuZWlnVHJpYW5nbGVzID0gdmVydGV4VG9UcmlhbmdsZXMuZ2V0ICh2ZXJ0ZXhJbmRleCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWlnVHJpYW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZWlnSW5kZXggPSBuZWlnVHJpYW5nbGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmVpZ1RyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAobmVpZ0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWFuZ2xlLmN1cnZlID09PSBuZWlnVHJpYW5nbGUuY3VydmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmlhbmdsZU5vcm1hbCA9IHRyaWFuZ2xlTm9ybWFsc1tuZWlnSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFJc05vcm1hbEluQXJyYXkgKGF2ZXJhZ2VOb3JtYWxzLCB0cmlhbmdsZU5vcm1hbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmVyYWdlTm9ybWFscy5wdXNoICh0cmlhbmdsZU5vcm1hbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgYXZlcmFnZU5vcm1hbCA9IG5ldyBDb29yZDNEICgwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF2ZXJhZ2VOb3JtYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VOb3JtYWwgPSBBZGRDb29yZDNEIChhdmVyYWdlTm9ybWFsLCBhdmVyYWdlTm9ybWFsc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VOb3JtYWwuTXVsdGlwbHlTY2FsYXIgKDEuMCAvIGF2ZXJhZ2VOb3JtYWxzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYXZlcmFnZU5vcm1hbC5Ob3JtYWxpemUgKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc2guQWRkTm9ybWFsIChhdmVyYWdlTm9ybWFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlTm9ybWFscyA9IFtdO1xuICAgICAgICAgICAgbGV0IHZlcnRleFRvVHJpYW5nbGVzID0gbmV3IE1hcCAoKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IG1lc2guVmVydGV4Q291bnQgKCk7IHZlcnRleEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhUb1RyaWFuZ2xlcy5zZXQgKHZlcnRleEluZGV4LCBbXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IHRyaWFuZ2xlSW5kZXggPSAwOyB0cmlhbmdsZUluZGV4IDwgbWVzaC5UcmlhbmdsZUNvdW50ICgpOyB0cmlhbmdsZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlICh0cmlhbmdsZUluZGV4KTtcbiAgICAgICAgICAgICAgICBsZXQgdjAgPSBtZXNoLkdldFZlcnRleCAodHJpYW5nbGUudjApO1xuICAgICAgICAgICAgICAgIGxldCB2MSA9IG1lc2guR2V0VmVydGV4ICh0cmlhbmdsZS52MSk7XG4gICAgICAgICAgICAgICAgbGV0IHYyID0gbWVzaC5HZXRWZXJ0ZXggKHRyaWFuZ2xlLnYyKTtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsID0gQ2FsY3VsYXRlVHJpYW5nbGVOb3JtYWwgKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlTm9ybWFscy5wdXNoIChub3JtYWwpO1xuICAgICAgICAgICAgICAgIHZlcnRleFRvVHJpYW5nbGVzLmdldCAodHJpYW5nbGUudjApLnB1c2ggKHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICAgICAgICAgIHZlcnRleFRvVHJpYW5nbGVzLmdldCAodHJpYW5nbGUudjEpLnB1c2ggKHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICAgICAgICAgIHZlcnRleFRvVHJpYW5nbGVzLmdldCAodHJpYW5nbGUudjIpLnB1c2ggKHRyaWFuZ2xlSW5kZXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCB0cmlhbmdsZUluZGV4ID0gMDsgdHJpYW5nbGVJbmRleCA8IG1lc2guVHJpYW5nbGVDb3VudCAoKTsgdHJpYW5nbGVJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAodHJpYW5nbGVJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0cmlhbmdsZS5IYXNOb3JtYWxzICgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuMCA9IEFkZEF2ZXJhZ2VOb3JtYWwgKG1lc2gsIHRyaWFuZ2xlLCB0cmlhbmdsZS52MCwgdHJpYW5nbGVOb3JtYWxzLCB2ZXJ0ZXhUb1RyaWFuZ2xlcyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuMSA9IEFkZEF2ZXJhZ2VOb3JtYWwgKG1lc2gsIHRyaWFuZ2xlLCB0cmlhbmdsZS52MSwgdHJpYW5nbGVOb3JtYWxzLCB2ZXJ0ZXhUb1RyaWFuZ2xlcyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuMiA9IEFkZEF2ZXJhZ2VOb3JtYWwgKG1lc2gsIHRyaWFuZ2xlLCB0cmlhbmdsZS52MiwgdHJpYW5nbGVOb3JtYWxzLCB2ZXJ0ZXhUb1RyaWFuZ2xlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLlNldE5vcm1hbHMgKG4wLCBuMSwgbjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtZXNoU3RhdHVzID0ge1xuICAgICAgICAgICAgY2FsY3VsYXRlQ3VydmVOb3JtYWxzIDogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2guVHJpYW5nbGVDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChpKTtcbiAgICAgICAgICAgIHRoaXMuRmluYWxpemVUcmlhbmdsZSAobWVzaCwgdHJpYW5nbGUsIG1lc2hTdGF0dXMpO1xuXG4gICAgICAgICAgICBpZiAodHJpYW5nbGUubWF0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGUubWF0ID0gdGhpcy5HZXREZWZhdWx0TWF0ZXJpYWxJbmRleCAobW9kZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc2hTdGF0dXMuY2FsY3VsYXRlQ3VydmVOb3JtYWxzKSB7XG4gICAgICAgICAgICBDYWxjdWxhdGVDdXJ2ZU5vcm1hbHMgKG1lc2gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRmluYWxpemVUcmlhbmdsZSAobWVzaCwgdHJpYW5nbGUsIG1lc2hTdGF0dXMpXG4gICAge1xuICAgICAgICBpZiAoIXRyaWFuZ2xlLkhhc05vcm1hbHMgKCkpIHtcbiAgICAgICAgICAgIGlmICh0cmlhbmdsZS5jdXJ2ZSA9PT0gbnVsbCB8fCB0cmlhbmdsZS5jdXJ2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxldCB2MCA9IG1lc2guR2V0VmVydGV4ICh0cmlhbmdsZS52MCk7XG4gICAgICAgICAgICAgICAgbGV0IHYxID0gbWVzaC5HZXRWZXJ0ZXggKHRyaWFuZ2xlLnYxKTtcbiAgICAgICAgICAgICAgICBsZXQgdjIgPSBtZXNoLkdldFZlcnRleCAodHJpYW5nbGUudjIpO1xuICAgICAgICAgICAgICAgIGxldCBub3JtYWwgPSBDYWxjdWxhdGVUcmlhbmdsZU5vcm1hbCAodjAsIHYxLCB2Mik7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbEluZGV4ID0gbWVzaC5BZGROb3JtYWwgKG5vcm1hbCk7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGUuU2V0Tm9ybWFscyAobm9ybWFsSW5kZXgsIG5vcm1hbEluZGV4LCBub3JtYWxJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc2hTdGF0dXMuY2FsY3VsYXRlQ3VydmVOb3JtYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmlhbmdsZS5jdXJ2ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdHJpYW5nbGUuY3VydmUgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRmluYWxpemVOb2RlcyAobW9kZWwpXG4gICAge1xuICAgICAgICBsZXQgcm9vdE5vZGUgPSBtb2RlbC5HZXRSb290Tm9kZSAoKTtcblxuICAgICAgICBsZXQgZW1wdHlOb2RlcyA9IFtdO1xuICAgICAgICByb290Tm9kZS5FbnVtZXJhdGVDaGlsZHJlbiAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLklzRW1wdHkgKCkpIHtcbiAgICAgICAgICAgICAgICBlbXB0eU5vZGVzLnB1c2ggKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBub2RlSW5kZXggPSAwOyBub2RlSW5kZXggPCBlbXB0eU5vZGVzLmxlbmd0aDsgbm9kZUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gZW1wdHlOb2Rlc1tub2RlSW5kZXhdO1xuICAgICAgICAgICAgbGV0IHBhcmVudE5vZGUgPSBub2RlLkdldFBhcmVudCAoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnROb2RlLlJlbW92ZUNoaWxkTm9kZSAobm9kZSk7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5Jc0VtcHR5ICgpKSB7XG4gICAgICAgICAgICAgICAgZW1wdHlOb2Rlcy5wdXNoIChwYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEdldERlZmF1bHRNYXRlcmlhbEluZGV4IChtb2RlbClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRNYXRlcmlhbEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgZGVmYXVsdE1hdGVyaWFsQ29sb3IgPSB0aGlzLnBhcmFtcy5nZXREZWZhdWx0TWF0ZXJpYWxDb2xvciAoKTtcbiAgICAgICAgICAgIGxldCBkZWZhdWx0TWF0ZXJpYWwgPSBuZXcgUGhvbmdNYXRlcmlhbCAoKTtcbiAgICAgICAgICAgIGRlZmF1bHRNYXRlcmlhbC5jb2xvciA9IGRlZmF1bHRNYXRlcmlhbENvbG9yO1xuICAgICAgICAgICAgZGVmYXVsdE1hdGVyaWFsLmlzRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRNYXRlcmlhbEluZGV4ID0gbW9kZWwuQWRkTWF0ZXJpYWwgKGRlZmF1bHRNYXRlcmlhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdE1hdGVyaWFsSW5kZXg7XG4gICAgfVxuXG4gICAgUmVzZXQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZGVmYXVsdE1hdGVyaWFsSW5kZXggPSBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZpbmFsaXplTW9kZWwgKG1vZGVsLCBwYXJhbXMpXG57XG4gICAgbGV0IGZpbmFsaXplciA9IG5ldyBNb2RlbEZpbmFsaXplciAocGFyYW1zKTtcbiAgICBmaW5hbGl6ZXIuRmluYWxpemUgKG1vZGVsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrTW9kZWwgKG1vZGVsKVxue1xuICAgIGZ1bmN0aW9uIElzQ29ycmVjdFZhbHVlICh2YWwpXG4gICAge1xuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gSXNDb3JyZWN0TnVtYmVyICh2YWwpXG4gICAge1xuICAgICAgICBpZiAoIUlzQ29ycmVjdFZhbHVlICh2YWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOICh2YWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gSXNDb3JyZWN0SW5kZXggKHZhbCwgY291bnQpXG4gICAge1xuICAgICAgICBpZiAoIUlzQ29ycmVjdE51bWJlciAodmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPCAwIHx8IHZhbCA+PSBjb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENoZWNrTWVzaCAobW9kZWwsIG1lc2gpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBDaGVja1RyaWFuZ2xlIChtb2RlbCwgbWVzaCwgdHJpYW5nbGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLnYwLCBtZXNoLlZlcnRleENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLnYxLCBtZXNoLlZlcnRleENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLnYyLCBtZXNoLlZlcnRleENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmlhbmdsZS5IYXNWZXJ0ZXhDb2xvcnMgKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQ29ycmVjdEluZGV4ICh0cmlhbmdsZS5jMCwgbWVzaC5WZXJ0ZXhDb2xvckNvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLmMxLCBtZXNoLlZlcnRleENvbG9yQ291bnQgKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvcnJlY3RJbmRleCAodHJpYW5nbGUuYzIsIG1lc2guVmVydGV4Q29sb3JDb3VudCAoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLm4wLCBtZXNoLk5vcm1hbENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLm4xLCBtZXNoLk5vcm1hbENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLm4yLCBtZXNoLk5vcm1hbENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmlhbmdsZS5IYXNUZXh0dXJlVVZzICgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvcnJlY3RJbmRleCAodHJpYW5nbGUudTAsIG1lc2guVGV4dHVyZVVWQ291bnQgKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLnUxLCBtZXNoLlRleHR1cmVVVkNvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghSXNDb3JyZWN0SW5kZXggKHRyaWFuZ2xlLnUyLCBtZXNoLlRleHR1cmVVVkNvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFJc0NvcnJlY3RJbmRleCAodHJpYW5nbGUubWF0LCBtb2RlbC5NYXRlcmlhbENvdW50ICgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyICh0cmlhbmdsZS5jdXJ2ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoLlZlcnRleENvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2ZXJ0ZXggPSBtZXNoLkdldFZlcnRleCAoaSk7XG4gICAgICAgICAgICBpZiAoIUlzQ29ycmVjdE51bWJlciAodmVydGV4LngpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFJc0NvcnJlY3ROdW1iZXIgKHZlcnRleC55KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyICh2ZXJ0ZXgueikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2guVmVydGV4Q29sb3JDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY29sb3IgPSBtZXNoLkdldFZlcnRleENvbG9yIChpKTtcbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyIChjb2xvci5yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyIChjb2xvci5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyIChjb2xvci5iKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5Ob3JtYWxDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9ybWFsID0gbWVzaC5HZXROb3JtYWwgKGkpO1xuICAgICAgICAgICAgaWYgKCFJc0NvcnJlY3ROdW1iZXIgKG5vcm1hbC54KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyIChub3JtYWwueSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUlzQ29ycmVjdE51bWJlciAobm9ybWFsLnopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoLlRleHR1cmVVVkNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB1diA9IG1lc2guR2V0VGV4dHVyZVVWIChpKTtcbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyICh1di54KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghSXNDb3JyZWN0TnVtYmVyICh1di55KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5UcmlhbmdsZUNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG1lc2guR2V0VHJpYW5nbGUgKGkpO1xuICAgICAgICAgICAgaWYgKCFDaGVja1RyaWFuZ2xlIChtb2RlbCwgbWVzaCwgdHJpYW5nbGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbC5NZXNoQ291bnQgKCk7IGkrKykge1xuICAgICAgICBsZXQgbWVzaCA9IG1vZGVsLkdldE1lc2ggKGkpO1xuICAgICAgICBpZiAoIUNoZWNrTWVzaCAobW9kZWwsIG1lc2gpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IE1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWwuanMnO1xuaW1wb3J0IHsgRmluYWxpemVNb2RlbCB9IGZyb20gJy4uL21vZGVsL21vZGVsZmluYWxpemF0aW9uLmpzJztcbmltcG9ydCB7IElzTW9kZWxFbXB0eSB9IGZyb20gJy4uL21vZGVsL21vZGVsdXRpbHMuanMnO1xuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMubmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBudWxsO1xuICAgICAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG51bGw7XG4gICAgfVxuXG4gICAgSW1wb3J0IChuYW1lLCBleHRlbnNpb24sIGNvbnRlbnQsIGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIHRoaXMuQ2xlYXIgKCk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBleHRlbnNpb247XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV3IE1vZGVsICgpO1xuICAgICAgICB0aGlzLmVycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuUmVzZXRDb250ZW50ICgpO1xuICAgICAgICB0aGlzLkltcG9ydENvbnRlbnQgKGNvbnRlbnQsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuQ3JlYXRlUmVzdWx0IChjYWxsYmFja3MpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBDbGVhciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5DbGVhckNvbnRlbnQgKCk7XG4gICAgfVxuXG4gICAgQ3JlYXRlUmVzdWx0IChjYWxsYmFja3MpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2tzLm9uRXJyb3IgKCk7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25Db21wbGV0ZSAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChJc01vZGVsRW1wdHkgKHRoaXMubW9kZWwpKSB7XG4gICAgICAgICAgICB0aGlzLlNldEVycm9yICgnVGhlIG1vZGVsIGRvZXNuXFwndCBjb250YWluIGFueSBtZXNoZXMuJyk7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvciAoKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vbkNvbXBsZXRlICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgRmluYWxpemVNb2RlbCAodGhpcy5tb2RlbCwge1xuICAgICAgICAgICAgZ2V0RGVmYXVsdE1hdGVyaWFsQ29sb3IgOiB0aGlzLmNhbGxiYWNrcy5nZXREZWZhdWx0TWF0ZXJpYWxDb2xvclxuICAgICAgICB9KTtcblxuICAgICAgICBjYWxsYmFja3Mub25TdWNjZXNzICgpO1xuICAgICAgICBjYWxsYmFja3Mub25Db21wbGV0ZSAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBHZXRVcERpcmVjdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIERpcmVjdGlvbi5aO1xuICAgIH1cblxuICAgIENsZWFyQ29udGVudCAoKVxuICAgIHtcblxuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcblxuICAgIH1cblxuICAgIEltcG9ydENvbnRlbnQgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG5cbiAgICB9XG5cbiAgICBHZXRNb2RlbCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gICAgfVxuXG4gICAgU2V0RXJyb3IgKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB0aGlzLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgV2FzRXJyb3IgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIEdldEVycm9yTWVzc2FnZSAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJc0xvd2VyIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgUGhvbmdNYXRlcmlhbCB9IGZyb20gJy4uL21vZGVsL21hdGVyaWFsLmpzJztcbmltcG9ydCB7IFJHQkNvbG9yLCBJbnRlZ2VyVG9IZXhTdHJpbmcgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBOYW1lRnJvbUxpbmUgKGxpbmUsIHN0YXJ0SW5kZXgsIGNvbW1lbnRDaGFyKVxue1xuXHRsZXQgbmFtZSA9IGxpbmUuc3Vic3RyaW5nIChzdGFydEluZGV4KTtcblx0bGV0IGNvbW1lbnRTdGFydCA9IG5hbWUuaW5kZXhPZiAoY29tbWVudENoYXIpO1xuXHRpZiAoY29tbWVudFN0YXJ0ICE9PSAtMSkge1xuXHRcdG5hbWUgPSBuYW1lLnN1YnN0cmluZyAoMCwgY29tbWVudFN0YXJ0KTtcblx0fVxuXHRyZXR1cm4gbmFtZS50cmltICgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUGFyYW1ldGVyc0Zyb21MaW5lIChsaW5lLCBjb21tZW50Q2hhcilcbntcblx0aWYgKGNvbW1lbnRDaGFyICE9PSBudWxsKSB7XG5cdFx0bGV0IGNvbW1lbnRTdGFydCA9IGxpbmUuaW5kZXhPZiAoY29tbWVudENoYXIpO1xuXHRcdGlmIChjb21tZW50U3RhcnQgIT09IC0xKSB7XG5cdFx0XHRsaW5lID0gbGluZS5zdWJzdHJpbmcgKDAsIGNvbW1lbnRTdGFydCkudHJpbSAoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGxpbmUuc3BsaXQgKC9cXHMrL3UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVhZExpbmVzIChzdHIsIG9uTGluZSlcbntcblx0ZnVuY3Rpb24gTGluZUZvdW5kIChsaW5lLCBvbkxpbmUpXG5cdHtcblx0XHRsZXQgdHJpbW1lZCA9IGxpbmUudHJpbSAoKTtcblx0XHRpZiAodHJpbW1lZC5sZW5ndGggPiAwKSB7XG5cdFx0XHRvbkxpbmUgKHRyaW1tZWQpO1xuXHRcdH1cblx0fVxuXG5cdGxldCBjdXJzb3IgPSAwO1xuXHRsZXQgbmV4dCA9IHN0ci5pbmRleE9mICgnXFxuJywgY3Vyc29yKTtcblx0d2hpbGUgKG5leHQgIT09IC0xKSB7XG5cdFx0TGluZUZvdW5kIChzdHIuc3Vic3RyaW5nIChjdXJzb3IsIG5leHQpLCBvbkxpbmUpO1xuXHRcdGN1cnNvciA9IG5leHQgKyAxO1xuXHRcdG5leHQgPSBzdHIuaW5kZXhPZiAoJ1xcbicsIGN1cnNvcik7XG5cdH1cblx0TGluZUZvdW5kIChzdHIuc3Vic3RyaW5nIChjdXJzb3IpLCBvbkxpbmUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNQb3dlck9mVHdvICh4KVxue1xuXHRyZXR1cm4gKHggJiAoeCAtIDEpKSA9PT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5leHRQb3dlck9mVHdvICh4KVxue1xuXHRpZiAoSXNQb3dlck9mVHdvICh4KSkge1xuXHRcdHJldHVybiB4O1xuXHR9XG5cdGxldCBucG90ID0gTWF0aC5wb3cgKDIsIE1hdGguY2VpbCAoTWF0aC5sb2cgKHgpIC8gTWF0aC5sb2cgKDIpKSk7XG5cdHJldHVybiBwYXJzZUludCAobnBvdCwgMTApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgKG1hdGVyaWFsKVxue1xuXHRtYXRlcmlhbC50cmFuc3BhcmVudCA9IGZhbHNlO1xuXHRpZiAoSXNMb3dlciAobWF0ZXJpYWwub3BhY2l0eSwgMS4wKSkge1xuXHRcdG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQ29sb3JUb01hdGVyaWFsQ29udmVydGVyXG57XG5cdGNvbnN0cnVjdG9yIChtb2RlbClcblx0e1xuXHRcdHRoaXMubW9kZWwgPSBtb2RlbDtcblx0XHR0aGlzLmNvbG9yVG9NYXRlcmlhbEluZGV4ID0gbmV3IE1hcCAoKTtcblx0fVxuXG5cdEdldE1hdGVyaWFsSW5kZXggKHIsIGcsIGIsIGEpXG5cdHtcblx0XHRsZXQgY29sb3JLZXkgPVxuXHRcdFx0SW50ZWdlclRvSGV4U3RyaW5nIChyKSArXG5cdFx0XHRJbnRlZ2VyVG9IZXhTdHJpbmcgKGcpICtcblx0XHRcdEludGVnZXJUb0hleFN0cmluZyAoYik7XG5cdFx0bGV0IGhhc0FscGhhID0gKGEgIT09IHVuZGVmaW5lZCAmJiBhICE9PSBudWxsKTtcblx0XHRpZiAoaGFzQWxwaGEpIHtcblx0XHRcdGNvbG9yS2V5ICs9IEludGVnZXJUb0hleFN0cmluZyAoYSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY29sb3JUb01hdGVyaWFsSW5kZXguaGFzIChjb2xvcktleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbG9yVG9NYXRlcmlhbEluZGV4LmdldCAoY29sb3JLZXkpO1xuXHRcdH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgUGhvbmdNYXRlcmlhbCAoKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLm5hbWUgPSBjb2xvcktleS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvbG9yID0gbmV3IFJHQkNvbG9yIChyLCBnLCBiKTtcbiAgICAgICAgICAgIGlmIChoYXNBbHBoYSAmJiBhIDwgMjU1KSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IGEgLyAyNTUuMDtcbiAgICAgICAgICAgICAgICBVcGRhdGVNYXRlcmlhbFRyYW5zcGFyZW5jeSAobWF0ZXJpYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1hdGVyaWFsSW5kZXggPSB0aGlzLm1vZGVsLkFkZE1hdGVyaWFsIChtYXRlcmlhbCk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yVG9NYXRlcmlhbEluZGV4LnNldCAoY29sb3JLZXksIG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsSW5kZXg7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXguanMnO1xuaW1wb3J0IHsgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyc7XG5pbXBvcnQgeyBMb2FkRXh0ZXJuYWxMaWJyYXJ5IH0gZnJvbSAnLi4vaW8vZXh0ZXJuYWxsaWJzLmpzJztcbmltcG9ydCB7IEdldEZpbGVOYW1lIH0gZnJvbSAnLi4vaW8vZmlsZXV0aWxzLmpzJztcbmltcG9ydCB7IFBob25nTWF0ZXJpYWwsIFBoeXNpY2FsTWF0ZXJpYWwgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1NZXNoIH0gZnJvbSAnLi4vbW9kZWwvbWVzaHV0aWxzLmpzJztcbmltcG9ydCB7IElzTW9kZWxFbXB0eSB9IGZyb20gJy4uL21vZGVsL21vZGVsdXRpbHMuanMnO1xuaW1wb3J0IHsgUHJvcGVydHksIFByb3BlcnR5R3JvdXAsIFByb3BlcnR5VHlwZSB9IGZyb20gJy4uL21vZGVsL3Byb3BlcnR5LmpzJztcbmltcG9ydCB7IENvbnZlcnRUaHJlZUdlb21ldHJ5VG9NZXNoIH0gZnJvbSAnLi4vdGhyZWVqcy90aHJlZXV0aWxzLmpzJztcbmltcG9ydCB7IEltcG9ydGVyQmFzZSB9IGZyb20gJy4vaW1wb3J0ZXJiYXNlLmpzJztcbmltcG9ydCB7IFVwZGF0ZU1hdGVyaWFsVHJhbnNwYXJlbmN5IH0gZnJvbSAnLi9pbXBvcnRlcnV0aWxzLmpzJztcbmltcG9ydCB7IFRleHR1cmVNYXAgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlcjNkbSBleHRlbmRzIEltcG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy5yaGlubyA9IG51bGw7XG4gICAgfVxuXG4gICAgQ2FuSW1wb3J0RXh0ZW5zaW9uIChleHRlbnNpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uID09PSAnM2RtJztcbiAgICB9XG5cbiAgICBHZXRVcERpcmVjdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIERpcmVjdGlvbi5aO1xuICAgIH1cblxuICAgIENsZWFyQ29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZUlkVG9PYmplY3QgPSBudWxsO1xuICAgICAgICB0aGlzLmluc3RhbmNlSWRUb0RlZmluaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZUlkVG9PYmplY3QgPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLmluc3RhbmNlSWRUb0RlZmluaXRpb24gPSBuZXcgTWFwICgpO1xuICAgIH1cblxuICAgIEltcG9ydENvbnRlbnQgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnJoaW5vID09PSBudWxsKSB7XG4gICAgICAgICAgICBMb2FkRXh0ZXJuYWxMaWJyYXJ5ICgnbG9hZGVycy9yaGlubzNkbS5taW4uanMnKS50aGVuICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmhpbm8zZG0gKCkudGhlbiAoKHJoaW5vKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmhpbm8gPSByaGlubztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5JbXBvcnRSaGlub0NvbnRlbnQgKGZpbGVDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaCAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdGYWlsZWQgdG8gbG9hZCByaGlubzNkbS4nKTtcbiAgICAgICAgICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5JbXBvcnRSaGlub0NvbnRlbnQgKGZpbGVDb250ZW50KTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSW1wb3J0Umhpbm9Db250ZW50IChmaWxlQ29udGVudClcbiAgICB7XG4gICAgICAgIGxldCByaGlub0RvYyA9IHRoaXMucmhpbm8uRmlsZTNkbS5mcm9tQnl0ZUFycmF5IChmaWxlQ29udGVudCk7XG4gICAgICAgIGlmIChyaGlub0RvYyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ZhaWxlZCB0byByZWFkIFJoaW5vIGZpbGUuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5JbXBvcnRSaGlub0RvY3VtZW50IChyaGlub0RvYyk7XG4gICAgICAgIGlmIChJc01vZGVsRW1wdHkgKHRoaXMubW9kZWwpKSB7XG4gICAgICAgICAgICB0aGlzLlNldEVycm9yICgnVGhlIG1vZGVsIGRvZXNuXFwndCBjb250YWluIGFueSAzRCBtZXNoZXMuIFRyeSB0byBzYXZlIHRoZSBtb2RlbCB3aGlsZSB5b3UgYXJlIGluIHNoYWRlZCB2aWV3IGluIFJoaW5vLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSW1wb3J0Umhpbm9Eb2N1bWVudCAocmhpbm9Eb2MpXG4gICAge1xuICAgICAgICB0aGlzLkluaXRSaGlub0luc3RhbmNlcyAocmhpbm9Eb2MpO1xuICAgICAgICB0aGlzLkltcG9ydFJoaW5vVXNlclN0cmluZ3MgKHJoaW5vRG9jKTtcbiAgICAgICAgdGhpcy5JbXBvcnRSaGlub0dlb21ldHJ5IChyaGlub0RvYyk7XG4gICAgfVxuXG4gICAgSW5pdFJoaW5vSW5zdGFuY2VzIChyaGlub0RvYylcbiAgICB7XG4gICAgICAgIGxldCByaGlub09iamVjdHMgPSByaGlub0RvYy5vYmplY3RzICgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJoaW5vT2JqZWN0cy5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmhpbm9PYmplY3QgPSByaGlub09iamVjdHMuZ2V0IChpKTtcbiAgICAgICAgICAgIGxldCByaGlub0F0dHJpYnV0ZXMgPSByaGlub09iamVjdC5hdHRyaWJ1dGVzICgpO1xuICAgICAgICAgICAgaWYgKHJoaW5vQXR0cmlidXRlcy5pc0luc3RhbmNlRGVmaW5pdGlvbk9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VJZFRvT2JqZWN0LnNldCAocmhpbm9BdHRyaWJ1dGVzLmlkLCByaGlub09iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJoaW5vSW5zdGFuY2VEZWZpbml0aW9ucyA9IHJoaW5vRG9jLmluc3RhbmNlRGVmaW5pdGlvbnMgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmhpbm9JbnN0YW5jZURlZmluaXRpb25zLmNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByaGlub0luc3RhbmNlRGVmaW5pdGlvbiA9IHJoaW5vSW5zdGFuY2VEZWZpbml0aW9ucy5nZXQgKGkpO1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZUlkVG9EZWZpbml0aW9uLnNldCAocmhpbm9JbnN0YW5jZURlZmluaXRpb24uaWQsIHJoaW5vSW5zdGFuY2VEZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEltcG9ydFJoaW5vVXNlclN0cmluZ3MgKHJoaW5vRG9jKVxuICAgIHtcbiAgICAgICAgbGV0IGRvY1N0cmluZ3MgPSByaGlub0RvYy5zdHJpbmdzICgpO1xuICAgICAgICBpZiAoZG9jU3RyaW5ncy5jb3VudCAoKSA+IDApIHtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUdyb3VwID0gbmV3IFByb3BlcnR5R3JvdXAgKCdEb2N1bWVudCB1c2VyIHRleHRzJyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvY1N0cmluZ3MuY291bnQgKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBkb2NTdHJpbmcgPSBkb2NTdHJpbmdzLmdldCAoaSk7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlHcm91cC5BZGRQcm9wZXJ0eSAobmV3IFByb3BlcnR5IChQcm9wZXJ0eVR5cGUuVGV4dCwgZG9jU3RyaW5nWzBdLCBkb2NTdHJpbmdbMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW9kZWwuQWRkUHJvcGVydHlHcm91cCAocHJvcGVydHlHcm91cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBJbXBvcnRSaGlub0dlb21ldHJ5IChyaGlub0RvYylcbiAgICB7XG4gICAgICAgIGxldCByaGlub09iamVjdHMgPSByaGlub0RvYy5vYmplY3RzICgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJoaW5vT2JqZWN0cy5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmhpbm9PYmplY3QgPSByaGlub09iamVjdHMuZ2V0IChpKTtcbiAgICAgICAgICAgIHRoaXMuSW1wb3J0Umhpbm9HZW9tZXRyeU9iamVjdCAocmhpbm9Eb2MsIHJoaW5vT2JqZWN0LCBbXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBJbXBvcnRSaGlub0dlb21ldHJ5T2JqZWN0IChyaGlub0RvYywgcmhpbm9PYmplY3QsIHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzKVxuICAgIHtcbiAgICAgICAgbGV0IHJoaW5vR2VvbWV0cnkgPSByaGlub09iamVjdC5nZW9tZXRyeSAoKTtcbiAgICAgICAgbGV0IHJoaW5vQXR0cmlidXRlcyA9IHJoaW5vT2JqZWN0LmF0dHJpYnV0ZXMgKCk7XG5cbiAgICAgICAgbGV0IG9iamVjdFR5cGUgPSByaGlub0dlb21ldHJ5Lm9iamVjdFR5cGU7XG4gICAgICAgIGlmIChyaGlub0F0dHJpYnV0ZXMuaXNJbnN0YW5jZURlZmluaXRpb25PYmplY3QgJiYgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmhpbm9NZXNoID0gbnVsbDtcbiAgICAgICAgbGV0IGRlbGV0ZU1lc2ggPSBmYWxzZTtcblxuICAgICAgICBpZiAob2JqZWN0VHlwZSA9PT0gdGhpcy5yaGluby5PYmplY3RUeXBlLk1lc2gpIHtcbiAgICAgICAgICAgIHJoaW5vTWVzaCA9IHJoaW5vR2VvbWV0cnk7XG4gICAgICAgICAgICBkZWxldGVNZXNoID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqZWN0VHlwZSA9PT0gdGhpcy5yaGluby5PYmplY3RUeXBlLkV4dHJ1c2lvbikge1xuICAgICAgICAgICAgcmhpbm9NZXNoID0gcmhpbm9HZW9tZXRyeS5nZXRNZXNoICh0aGlzLnJoaW5vLk1lc2hUeXBlLkFueSk7XG4gICAgICAgICAgICBkZWxldGVNZXNoID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmplY3RUeXBlID09PSB0aGlzLnJoaW5vLk9iamVjdFR5cGUuQnJlcCkge1xuICAgICAgICAgICAgcmhpbm9NZXNoID0gbmV3IHRoaXMucmhpbm8uTWVzaCAoKTtcbiAgICAgICAgICAgIGxldCBmYWNlcyA9IHJoaW5vR2VvbWV0cnkuZmFjZXMgKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2VzLmNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgZmFjZSA9IGZhY2VzLmdldCAoaSk7XG4gICAgICAgICAgICAgICAgbGV0IG1lc2ggPSBmYWNlLmdldE1lc2ggKHRoaXMucmhpbm8uTWVzaFR5cGUuQW55KTtcbiAgICAgICAgICAgICAgICBpZiAobWVzaCkge1xuICAgICAgICAgICAgICAgICAgICByaGlub01lc2guYXBwZW5kIChtZXNoKTtcbiAgICAgICAgICAgICAgICAgICAgbWVzaC5kZWxldGUgKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZhY2UuZGVsZXRlICgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmFjZXMuZGVsZXRlICgpO1xuICAgICAgICAgICAgcmhpbm9NZXNoLmNvbXBhY3QgKCk7XG4gICAgICAgICAgICBkZWxldGVNZXNoID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmplY3RUeXBlID09PSB0aGlzLnJoaW5vLk9iamVjdFR5cGUuU3ViRCkge1xuICAgICAgICAgICAgcmhpbm9HZW9tZXRyeS5zdWJkaXZpZGUgKDMpO1xuICAgICAgICAgICAgcmhpbm9NZXNoID0gdGhpcy5yaGluby5NZXNoLmNyZWF0ZUZyb21TdWJEQ29udHJvbE5ldCAocmhpbm9HZW9tZXRyeSk7XG4gICAgICAgICAgICBkZWxldGVNZXNoID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmplY3RUeXBlID09PSB0aGlzLnJoaW5vLk9iamVjdFR5cGUuSW5zdGFuY2VSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnREZWZpbml0aW9uSWQgPSByaGlub0dlb21ldHJ5LnBhcmVudElkZWZJZDtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlSWRUb0RlZmluaXRpb24uaGFzIChwYXJlbnREZWZpbml0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlRGVmaW5pdGlvbiA9IHRoaXMuaW5zdGFuY2VJZFRvRGVmaW5pdGlvbi5nZXQgKHBhcmVudERlZmluaXRpb25JZCk7XG4gICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlT2JqZWN0SWRzID0gaW5zdGFuY2VEZWZpbml0aW9uLmdldE9iamVjdElkcyAoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RhbmNlT2JqZWN0SWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnN0YW5jZU9iamVjdElkID0gaW5zdGFuY2VPYmplY3RJZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlSWRUb09iamVjdC5oYXMgKGluc3RhbmNlT2JqZWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2VPYmplY3QgPSB0aGlzLmluc3RhbmNlSWRUb09iamVjdC5nZXQgKGluc3RhbmNlT2JqZWN0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZXMucHVzaCAocmhpbm9PYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5JbXBvcnRSaGlub0dlb21ldHJ5T2JqZWN0IChyaGlub0RvYywgaW5zdGFuY2VPYmplY3QsIHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzLnBvcCAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyaGlub01lc2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuSW1wb3J0Umhpbm9NZXNoIChyaGlub0RvYywgcmhpbm9NZXNoLCByaGlub09iamVjdCwgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZXMpO1xuICAgICAgICAgICAgaWYgKGRlbGV0ZU1lc2gpIHtcbiAgICAgICAgICAgICAgICByaGlub01lc2guZGVsZXRlICgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgSW1wb3J0Umhpbm9NZXNoIChyaGlub0RvYywgcmhpbm9NZXNoLCByaGlub09iamVjdCwgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZXMpXG4gICAge1xuICAgICAgICBsZXQgcmhpbm9BdHRyaWJ1dGVzID0gcmhpbm9PYmplY3QuYXR0cmlidXRlcyAoKTtcblxuICAgICAgICBsZXQgbWF0ZXJpYWxJbmRleCA9IHRoaXMuR2V0TWF0ZXJpYWxJbmRleCAocmhpbm9Eb2MsIHJoaW5vT2JqZWN0LCByaGlub0luc3RhbmNlUmVmZXJlbmNlcyk7XG4gICAgICAgIGxldCB0aHJlZUpzb24gPSByaGlub01lc2gudG9UaHJlZWpzSlNPTiAoKTtcbiAgICAgICAgbGV0IG1lc2ggPSBDb252ZXJ0VGhyZWVHZW9tZXRyeVRvTWVzaCAodGhyZWVKc29uLmRhdGEsIG1hdGVyaWFsSW5kZXgsIG51bGwpO1xuICAgICAgICBtZXNoLlNldE5hbWUgKHJoaW5vQXR0cmlidXRlcy5uYW1lKTtcblxuICAgICAgICBsZXQgdXNlclN0cmluZ3MgPSByaGlub0F0dHJpYnV0ZXMuZ2V0VXNlclN0cmluZ3MgKCk7XG4gICAgICAgIGlmICh1c2VyU3RyaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgcHJvcGVydHlHcm91cCA9IG5ldyBQcm9wZXJ0eUdyb3VwICgnVXNlciB0ZXh0cycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyU3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB1c2VyU3RyaW5nID0gdXNlclN0cmluZ3NbaV07XG4gICAgICAgICAgICAgICAgcHJvcGVydHlHcm91cC5BZGRQcm9wZXJ0eSAobmV3IFByb3BlcnR5IChQcm9wZXJ0eVR5cGUuVGV4dCwgdXNlclN0cmluZ1swXSwgdXNlclN0cmluZ1sxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVzaC5BZGRQcm9wZXJ0eUdyb3VwIChwcm9wZXJ0eUdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyaGlub0luc3RhbmNlUmVmZXJlbmNlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4ICgpLkNyZWF0ZUlkZW50aXR5ICgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJoaW5vSW5zdGFuY2VSZWZlcmVuY2UgPSByaGlub0luc3RhbmNlUmVmZXJlbmNlc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZUdlb21ldHJ5ID0gcmhpbm9JbnN0YW5jZVJlZmVyZW5jZS5nZW9tZXRyeSAoKTtcbiAgICAgICAgICAgICAgICBsZXQgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZU1hdHJpeCA9IHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VHZW9tZXRyeS54Zm9ybS50b0Zsb2F0QXJyYXkgKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtYXRpb25NYXRyaXggPSBuZXcgTWF0cml4IChyaGlub0luc3RhbmNlUmVmZXJlbmNlTWF0cml4KTtcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBtYXRyaXguTXVsdGlwbHlNYXRyaXggKHRyYW5zZm9ybWF0aW9uTWF0cml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbiAobWF0cml4KTtcbiAgICAgICAgICAgIFRyYW5zZm9ybU1lc2ggKG1lc2gsIHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsLkFkZE1lc2hUb1Jvb3ROb2RlIChtZXNoKTtcbiAgICB9XG5cbiAgICBHZXRNYXRlcmlhbEluZGV4IChyaGlub0RvYywgcmhpbm9PYmplY3QsIHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gR2V0Umhpbm9NYXRlcmlhbCAocmhpbm8sIHJoaW5vT2JqZWN0LCByaGlub0luc3RhbmNlUmVmZXJlbmNlcylcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHJoaW5vQXR0cmlidXRlcyA9IHJoaW5vT2JqZWN0LmF0dHJpYnV0ZXMgKCk7XG4gICAgICAgICAgICBpZiAocmhpbm9BdHRyaWJ1dGVzLm1hdGVyaWFsU291cmNlID09PSByaGluby5PYmplY3RNYXRlcmlhbFNvdXJjZS5NYXRlcmlhbEZyb21PYmplY3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWF0ZXJpYWxJbmRleCA9IHJoaW5vQXR0cmlidXRlcy5tYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJoaW5vRG9jLm1hdGVyaWFscyAoKS5nZXQgKG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmhpbm9BdHRyaWJ1dGVzLm1hdGVyaWFsU291cmNlID09PSByaGluby5PYmplY3RNYXRlcmlhbFNvdXJjZS5NYXRlcmlhbEZyb21MYXllcikge1xuICAgICAgICAgICAgICAgIGxldCBsYXllckluZGV4ID0gcmhpbm9BdHRyaWJ1dGVzLmxheWVySW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVySW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGF5ZXIgPSByaGlub0RvYy5sYXllcnMgKCkuZ2V0IChsYXllckluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxheWVyTWF0ZXJpYWxJbmRleCA9IGxheWVyLnJlbmRlck1hdGVyaWFsSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllck1hdGVyaWFsSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJoaW5vRG9jLm1hdGVyaWFscyAoKS5nZXQgKGxheWVyTWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJoaW5vQXR0cmlidXRlcy5tYXRlcmlhbFNvdXJjZSA9PT0gcmhpbm8uT2JqZWN0TWF0ZXJpYWxTb3VyY2UuTWF0ZXJpYWxGcm9tUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gR2V0Umhpbm9NYXRlcmlhbCAocmhpbm8sIHJoaW5vSW5zdGFuY2VSZWZlcmVuY2VzWzBdLCBbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBDb252ZXJ0Umhpbm9NYXRlcmlhbCAocmhpbm9NYXRlcmlhbCwgY2FsbGJhY2tzKVxuICAgICAgICB7XG4gICAgICAgICAgICBmdW5jdGlvbiBTZXRDb2xvciAoY29sb3IsIHJoaW5vQ29sb3IpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sb3IuU2V0IChyaGlub0NvbG9yLnIsIHJoaW5vQ29sb3IuZywgcmhpbm9Db2xvci5iKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gSXNCbGFjayAocmhpbm9Db2xvcilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmhpbm9Db2xvci5yID09PSAwICYmIHJoaW5vQ29sb3IuZyA9PT0gMCAmJiByaGlub0NvbG9yLmIgPT09IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIElzV2hpdGUgKHJoaW5vQ29sb3IpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJoaW5vQ29sb3IuciA9PT0gMjU1ICYmIHJoaW5vQ29sb3IuZyA9PT0gMjU1ICYmIHJoaW5vQ29sb3IuYiA9PT0gMjU1O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICAgICAgbGV0IHBoeXNpY2FsbHlCYXNlZCA9IHJoaW5vTWF0ZXJpYWwucGh5c2ljYWxseUJhc2VkICgpO1xuICAgICAgICAgICAgaWYgKHBoeXNpY2FsbHlCYXNlZC5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBQaHlzaWNhbE1hdGVyaWFsICgpO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLm1ldGFsbmVzcyA9IHBoeXNpY2FsbHlCYXNlZC5tZXRhbGxpYyA/IDEuMCA6IDAuMDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3MgPSBwaHlzaWNhbGx5QmFzZWQucm91Z2huZXNzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBQaG9uZ01hdGVyaWFsICgpO1xuICAgICAgICAgICAgICAgIFNldENvbG9yIChtYXRlcmlhbC5hbWJpZW50LCByaGlub01hdGVyaWFsLmFtYmllbnRDb2xvcik7XG4gICAgICAgICAgICAgICAgU2V0Q29sb3IgKG1hdGVyaWFsLnNwZWN1bGFyLCByaGlub01hdGVyaWFsLnNwZWN1bGFyQ29sb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gcmhpbm9NYXRlcmlhbC5uYW1lO1xuXG4gICAgICAgICAgICBTZXRDb2xvciAobWF0ZXJpYWwuY29sb3IsIHJoaW5vTWF0ZXJpYWwuZGlmZnVzZUNvbG9yKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSAxLjAgLSByaGlub01hdGVyaWFsLnRyYW5zcGFyZW5jeTtcbiAgICAgICAgICAgIFVwZGF0ZU1hdGVyaWFsVHJhbnNwYXJlbmN5IChtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIGlmIChJc0JsYWNrIChtYXRlcmlhbC5jb2xvcikgJiYgIUlzV2hpdGUgKHJoaW5vTWF0ZXJpYWwucmVmbGVjdGlvbkNvbG9yKSkge1xuICAgICAgICAgICAgICAgIFNldENvbG9yIChtYXRlcmlhbC5jb2xvciwgcmhpbm9NYXRlcmlhbC5yZWZsZWN0aW9uQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKElzQmxhY2sgKG1hdGVyaWFsLmNvbG9yKSAmJiAhSXNXaGl0ZSAocmhpbm9NYXRlcmlhbC50cmFuc3BhcmVudENvbG9yKSkge1xuICAgICAgICAgICAgICAgIFNldENvbG9yIChtYXRlcmlhbC5jb2xvciwgcmhpbm9NYXRlcmlhbC50cmFuc3BhcmVudENvbG9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJoaW5vVGV4dHVyZSA9IHJoaW5vTWF0ZXJpYWwuZ2V0Qml0bWFwVGV4dHVyZSAoKTtcbiAgICAgICAgICAgIGlmIChyaGlub1RleHR1cmUpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZSA9IG5ldyBUZXh0dXJlTWFwICgpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlTmFtZSA9IEdldEZpbGVOYW1lIChyaGlub1RleHR1cmUuZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gY2FsbGJhY2tzLmdldEZpbGVCdWZmZXIgKHRleHR1cmVOYW1lKTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlTmFtZTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmJ1ZmZlciA9IHRleHR1cmVCdWZmZXI7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlmZnVzZU1hcCA9IHRleHR1cmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIEZpbmRNYXRjaGluZ01hdGVyaWFsIChtb2RlbCwgcmhpbm9NYXRlcmlhbCwgY2FsbGJhY2tzKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWwgPSBDb252ZXJ0Umhpbm9NYXRlcmlhbCAocmhpbm9NYXRlcmlhbCwgY2FsbGJhY2tzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWwuTWF0ZXJpYWxDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBtb2RlbC5HZXRNYXRlcmlhbCAoaSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuSXNFcXVhbCAobWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtb2RlbC5BZGRNYXRlcmlhbCAobWF0ZXJpYWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJoaW5vTWF0ZXJpYWwgPSBHZXRSaGlub01hdGVyaWFsICh0aGlzLnJoaW5vLCByaGlub09iamVjdCwgcmhpbm9JbnN0YW5jZVJlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmhpbm9NYXRlcmlhbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEZpbmRNYXRjaGluZ01hdGVyaWFsICh0aGlzLm1vZGVsLCByaGlub01hdGVyaWFsLCB0aGlzLmNhbGxiYWNrcyk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEJpbmFyeVJlYWRlclxue1xuICAgIGNvbnN0cnVjdG9yIChhcnJheUJ1ZmZlciwgaXNMaXR0bGVFbmRpYW4pXG4gICAge1xuICAgICAgICB0aGlzLmFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXI7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcgKGFycmF5QnVmZmVyKTtcbiAgICAgICAgdGhpcy5pc0xpdHRsZUVuZGlhbiA9IGlzTGl0dGxlRW5kaWFuO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gMDtcbiAgICB9XG5cbiAgICBHZXRQb3NpdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb247XG4gICAgfVxuXG4gICAgU2V0UG9zaXRpb24gKHBvc2l0aW9uKVxuICAgIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIH1cblxuICAgIEdldEJ5dGVMZW5ndGggKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5QnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgU2tpcCAoYnl0ZXMpXG4gICAge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiArIGJ5dGVzO1xuICAgIH1cblxuICAgIEVuZCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPj0gdGhpcy5hcnJheUJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIFJlYWRBcnJheUJ1ZmZlciAoYnl0ZUxlbmd0aClcbiAgICB7XG4gICAgICAgIGxldCBvcmlnaW5hbEJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheSAodGhpcy5hcnJheUJ1ZmZlcik7XG4gICAgICAgIGxldCBhcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlciAoYnl0ZUxlbmd0aCk7XG4gICAgICAgIGxldCBidWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkgKGFycmF5QnVmZmVyKTtcbiAgICAgICAgbGV0IHN1YkFycmF5ID0gb3JpZ2luYWxCdWZmZXJWaWV3LnN1YmFycmF5ICh0aGlzLnBvc2l0aW9uLCB0aGlzLnBvc2l0aW9uICsgYnl0ZUxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlclZpZXcuc2V0IChzdWJBcnJheSwgMCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYnl0ZUxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGFycmF5QnVmZmVyO1xuICAgIH1cblxuICAgIFJlYWRCb29sZWFuOCAoKVxuICAgIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuZGF0YVZpZXcuZ2V0SW50OCAodGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBSZWFkQ2hhcmFjdGVyOCAoKVxuICAgIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuZGF0YVZpZXcuZ2V0SW50OCAodGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkVW5zaWduZWRDaGFyYWN0ZXI4ICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kYXRhVmlldy5nZXRVaW50OCAodGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkSW50ZWdlcjE2ICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kYXRhVmlldy5nZXRJbnQxNiAodGhpcy5wb3NpdGlvbiwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkVW5zaWduZWRJbnRlZ2VyMTYgKClcbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmRhdGFWaWV3LmdldFVpbnQxNiAodGhpcy5wb3NpdGlvbiwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgMjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkSW50ZWdlcjMyICgpXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kYXRhVmlldy5nZXRJbnQzMiAodGhpcy5wb3NpdGlvbiwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgNDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkVW5zaWduZWRJbnRlZ2VyMzIgKClcbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmRhdGFWaWV3LmdldFVpbnQzMiAodGhpcy5wb3NpdGlvbiwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgNDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkRmxvYXQzMiAoKVxuICAgIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQzMiAodGhpcy5wb3NpdGlvbiwgdGhpcy5pc0xpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgNDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkRG91YmxlNjQgKClcbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmRhdGFWaWV3LmdldEZsb2F0NjQgKHRoaXMucG9zaXRpb24sIHRoaXMuaXNMaXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiArIDg7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmQyRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkMmQuanMnO1xuaW1wb3J0IHsgQXJyYXlUb0Nvb3JkM0QsIENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERlZ1JhZCwgRGlyZWN0aW9uLCBJc05lZ2F0aXZlIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vZ2VvbWV0cnkvbWF0cml4LmpzJztcbmltcG9ydCB7IEFycmF5VG9RdWF0ZXJuaW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvcXVhdGVybmlvbi5qcyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybWF0aW9uLmpzJztcbmltcG9ydCB7IEJpbmFyeVJlYWRlciB9IGZyb20gJy4uL2lvL2JpbmFyeXJlYWRlci5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvciwgQ29sb3JDb21wb25lbnRGcm9tRmxvYXQgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5pbXBvcnQgeyBQaG9uZ01hdGVyaWFsLCBUZXh0dXJlTWFwIH0gZnJvbSAnLi4vbW9kZWwvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2guanMnO1xuaW1wb3J0IHsgRmxpcE1lc2hUcmlhbmdsZXNPcmllbnRhdGlvbiwgVHJhbnNmb3JtTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2h1dGlscy5qcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vbW9kZWwvbm9kZS5qcyc7XG5pbXBvcnQgeyBUcmlhbmdsZSB9IGZyb20gJy4uL21vZGVsL3RyaWFuZ2xlLmpzJztcbmltcG9ydCB7IEltcG9ydGVyQmFzZSB9IGZyb20gJy4vaW1wb3J0ZXJiYXNlLmpzJztcbmltcG9ydCB7IFVwZGF0ZU1hdGVyaWFsVHJhbnNwYXJlbmN5IH0gZnJvbSAnLi9pbXBvcnRlcnV0aWxzLmpzJztcblxuY29uc3QgQ0hVTkszRFMgPVxue1xuICAgIE1BSU4zRFMgOiAweDRENEQsXG4gICAgRURJVDNEUyA6IDB4M0QzRCxcbiAgICBFRElUX01BVEVSSUFMIDogMHhBRkZGLFxuICAgIE1BVF9OQU1FIDogMHhBMDAwLFxuICAgIE1BVF9BTUJJRU5UIDogMHhBMDEwLFxuICAgIE1BVF9ESUZGVVNFIDogMHhBMDIwLFxuICAgIE1BVF9TUEVDVUxBUiA6IDB4QTAzMCxcbiAgICBNQVRfU0hJTklORVNTIDogMHhBMDQwLFxuICAgIE1BVF9TSElOSU5FU1NfU1RSRU5HVEggOiAweEEwNDEsXG4gICAgTUFUX1RSQU5TUEFSRU5DWSA6IDB4QTA1MCxcbiAgICBNQVRfQ09MT1JfRiA6IDB4MDAxMCxcbiAgICBNQVRfQ09MT1IgOiAweDAwMTEsXG4gICAgTUFUX0xJTl9DT0xPUiA6IDB4MDAxMixcbiAgICBNQVRfTElOX0NPTE9SX0YgOiAweDAwMTMsXG4gICAgTUFUX1RFWE1BUCA6IDB4QTIwMCxcbiAgICBNQVRfVEVYTUFQX05BTUUgOiAweEEzMDAsXG4gICAgTUFUX1RFWE1BUF9VT0ZGU0VUIDogMHhBMzU4LFxuICAgIE1BVF9URVhNQVBfVk9GRlNFVCA6IDB4QTM1QSxcbiAgICBNQVRfVEVYTUFQX1VTQ0FMRSA6IDB4QTM1NCxcbiAgICBNQVRfVEVYTUFQX1ZTQ0FMRSA6IDB4QTM1NixcbiAgICBNQVRfVEVYTUFQX1JPVEFUSU9OIDogMHhBMzVDLFxuICAgIFBFUkNFTlRBR0UgOiAweDAwMzAsXG4gICAgUEVSQ0VOVEFHRV9GIDogMHgwMDMxLFxuICAgIEVESVRfT0JKRUNUIDogMHg0MDAwLFxuICAgIE9CSl9UUklNRVNIIDogMHg0MTAwLFxuICAgIE9CSl9MSUdIVCA6IDB4NDYwMCxcbiAgICBPQkpfQ0FNRVJBIDogMHg0NzAwLFxuICAgIFRSSV9WRVJURVggOiAweDQxMTAsXG4gICAgVFJJX1RFWFZFUlRFWCA6IDB4NDE0MCxcbiAgICBUUklfRkFDRSA6IDB4NDEyMCxcbiAgICBUUklfVFJBTlNGT1JNQVRJT04gOiAweDQxNjAsXG4gICAgVFJJX01BVEVSSUFMIDogMHg0MTMwLFxuICAgIFRSSV9TTU9PVEggOiAweDQxNTAsXG4gICAgS0YzRFMgOiAweEIwMDAsXG4gICAgT0JKRUNUX05PREUgOiAweEIwMDIsXG4gICAgT0JKRUNUX0hJRVJBUkNIWSA6IDB4QjAxMCxcbiAgICBPQkpFQ1RfSU5TVEFOQ0VfTkFNRSA6IDB4QjAxMSxcbiAgICBPQkpFQ1RfUElWT1QgOiAweEIwMTMsXG4gICAgT0JKRUNUX1BPU0lUSU9OIDogMHhCMDIwLFxuICAgIE9CSkVDVF9ST1RBVElPTiA6IDB4QjAyMSxcbiAgICBPQkpFQ1RfU0NBTEUgOiAweEIwMjIsXG4gICAgT0JKRUNUX0lEIDogMHhCMDMwXG59O1xuXG5jbGFzcyBJbXBvcnRlcjNkc05vZGVcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5pZCA9IC0xO1xuICAgICAgICB0aGlzLm5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5mbGFncyA9IC0xO1xuICAgICAgICB0aGlzLnBhcmVudElkID0gLTE7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VOYW1lID0gJyc7XG4gICAgICAgIHRoaXMucGl2b3QgPSBbMC4wLCAwLjAsIDAuMF07XG4gICAgICAgIHRoaXMucG9zaXRpb25zID0gW107XG4gICAgICAgIHRoaXMucm90YXRpb25zID0gW107XG4gICAgICAgIHRoaXMuc2NhbGVzID0gW107XG4gICAgfVxufVxuXG5jbGFzcyBJbXBvcnRlcjNkc05vZGVMaXN0XG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ub2RlSWRUb05vZGUgPSBuZXcgTWFwICgpO1xuICAgIH1cblxuICAgIElzRW1wdHkgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBBZGROb2RlIChub2RlKVxuICAgIHtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoIChub2RlKTtcbiAgICAgICAgdGhpcy5ub2RlSWRUb05vZGUuc2V0IChub2RlLm5vZGVJZCwgbm9kZSk7XG4gICAgfVxuXG4gICAgR2V0Tm9kZXMgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyM2RzIGV4dGVuZHMgSW1wb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJzNkcyc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWjtcbiAgICB9XG5cbiAgICBDbGVhckNvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxOYW1lVG9JbmRleCA9IG51bGw7XG4gICAgICAgIHRoaXMubWVzaE5hbWVUb0luZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub2RlTGlzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgUmVzZXRDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZVRvSW5kZXggPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLm1lc2hOYW1lVG9JbmRleCA9IG5ldyBNYXAgKCk7XG4gICAgICAgIHRoaXMubm9kZUxpc3QgPSBuZXcgSW1wb3J0ZXIzZHNOb2RlTGlzdCAoKTtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICB0aGlzLlByb2Nlc3NCaW5hcnkgKGZpbGVDb250ZW50KTtcbiAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgfVxuXG4gICAgUHJvY2Vzc0JpbmFyeSAoZmlsZUNvbnRlbnQpXG4gICAge1xuICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEJpbmFyeVJlYWRlciAoZmlsZUNvbnRlbnQsIHRydWUpO1xuICAgICAgICBsZXQgZW5kQnl0ZSA9IHJlYWRlci5HZXRCeXRlTGVuZ3RoICgpO1xuICAgICAgICB0aGlzLlJlYWRDaHVua3MgKHJlYWRlciwgZW5kQnl0ZSwgKGNodW5rSWQsIGNodW5rTGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuTUFJTjNEUykge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVhZE1haW5DaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgUmVhZE1haW5DaHVuayAocmVhZGVyLCBsZW5ndGgpXG4gICAge1xuICAgICAgICBsZXQgZW5kQnl0ZSA9IHRoaXMuR2V0Q2h1bmtFbmQgKHJlYWRlciwgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5SZWFkQ2h1bmtzIChyZWFkZXIsIGVuZEJ5dGUsIChjaHVua0lkLCBjaHVua0xlbmd0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLkVESVQzRFMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRFZGl0b3JDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLktGM0RTKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5SZWFkS2V5RnJhbWVDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuQnVpbGROb2RlSGllcmFyY2h5ICgpO1xuICAgIH1cblxuICAgIFJlYWRFZGl0b3JDaHVuayAocmVhZGVyLCBsZW5ndGgpXG4gICAge1xuICAgICAgICBsZXQgZW5kQnl0ZSA9IHRoaXMuR2V0Q2h1bmtFbmQgKHJlYWRlciwgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5SZWFkQ2h1bmtzIChyZWFkZXIsIGVuZEJ5dGUsIChjaHVua0lkLCBjaHVua0xlbmd0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLkVESVRfTUFURVJJQUwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRNYXRlcmlhbENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuRURJVF9PQkpFQ1QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRPYmplY3RDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgUmVhZE1hdGVyaWFsQ2h1bmsgKHJlYWRlciwgbGVuZ3RoKVxuICAgIHtcbiAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFBob25nTWF0ZXJpYWwgKCk7XG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICBsZXQgc2hpbmluZXNzID0gbnVsbDtcbiAgICAgICAgbGV0IHNoaW5pbmVzc1N0cmVuZ3RoID0gbnVsbDtcbiAgICAgICAgdGhpcy5SZWFkQ2h1bmtzIChyZWFkZXIsIGVuZEJ5dGUsIChjaHVua0lkLCBjaHVua0xlbmd0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9OQU1FKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IHRoaXMuUmVhZE5hbWUgKHJlYWRlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9BTUJJRU5UKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuYW1iaWVudCA9IHRoaXMuUmVhZENvbG9yQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5NQVRfRElGRlVTRSkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmNvbG9yID0gdGhpcy5SZWFkQ29sb3JDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9TUEVDVUxBUikge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyID0gdGhpcy5SZWFkQ29sb3JDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9TSElOSU5FU1MpIHtcbiAgICAgICAgICAgICAgICBzaGluaW5lc3MgPSB0aGlzLlJlYWRQZXJjZW50YWdlQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5NQVRfU0hJTklORVNTX1NUUkVOR1RIKSB7XG4gICAgICAgICAgICAgICAgc2hpbmluZXNzU3RyZW5ndGggPSB0aGlzLlJlYWRQZXJjZW50YWdlQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5NQVRfVFJBTlNQQVJFTkNZKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IDEuMCAtIHRoaXMuUmVhZFBlcmNlbnRhZ2VDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICAgICAgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgKG1hdGVyaWFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuTUFUX1RFWE1BUCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmRpZmZ1c2VNYXAgPSB0aGlzLlJlYWRUZXh0dXJlTWFwQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgICAgIFVwZGF0ZU1hdGVyaWFsVHJhbnNwYXJlbmN5IChtYXRlcmlhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNoaW5pbmVzcyAhPT0gbnVsbCAmJiBzaGluaW5lc3NTdHJlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWwuc2hpbmluZXNzID0gc2hpbmluZXNzICogc2hpbmluZXNzU3RyZW5ndGggLyAxMC4wO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXRlcmlhbEluZGV4ID0gdGhpcy5tb2RlbC5BZGRNYXRlcmlhbCAobWF0ZXJpYWwpO1xuICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZVRvSW5kZXguc2V0IChtYXRlcmlhbC5uYW1lLCBtYXRlcmlhbEluZGV4KTtcbiAgICB9XG5cbiAgICBSZWFkVGV4dHVyZU1hcENodW5rIChyZWFkZXIsIGxlbmd0aClcbiAgICB7XG4gICAgICAgIGxldCB0ZXh0dXJlID0gbmV3IFRleHR1cmVNYXAgKCk7XG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLlJlYWRDaHVua3MgKHJlYWRlciwgZW5kQnl0ZSwgKGNodW5rSWQsIGNodW5rTGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuTUFUX1RFWE1BUF9OQU1FKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHR1cmVOYW1lID0gdGhpcy5SZWFkTmFtZSAocmVhZGVyKTtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZUJ1ZmZlciA9IHRoaXMuY2FsbGJhY2tzLmdldEZpbGVCdWZmZXIgKHRleHR1cmVOYW1lKTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlTmFtZTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmJ1ZmZlciA9IHRleHR1cmVCdWZmZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9URVhNQVBfVU9GRlNFVCkge1xuICAgICAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LnggPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9URVhNQVBfVk9GRlNFVCkge1xuICAgICAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LnkgPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9URVhNQVBfVVNDQUxFKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5zY2FsZS54ID0gcmVhZGVyLlJlYWRGbG9hdDMyICgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5NQVRfVEVYTUFQX1ZTQ0FMRSkge1xuICAgICAgICAgICAgICAgIHRleHR1cmUuc2NhbGUueSA9IHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuTUFUX1RFWE1BUF9ST1RBVElPTikge1xuICAgICAgICAgICAgICAgIHRleHR1cmUucm90YXRpb24gPSByZWFkZXIuUmVhZEZsb2F0MzIgKCkgKiBEZWdSYWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cblxuICAgIFJlYWRDb2xvckNodW5rIChyZWFkZXIsIGxlbmd0aClcbiAgICB7XG4gICAgICAgIGxldCBjb2xvciA9IG5ldyBSR0JDb2xvciAoMCwgMCwgMCk7XG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICBsZXQgaGFzTGluQ29sb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5SZWFkQ2h1bmtzIChyZWFkZXIsIGVuZEJ5dGUsIChjaHVua0lkLCBjaHVua0xlbmd0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9DT0xPUikge1xuICAgICAgICAgICAgICAgIGlmICghaGFzTGluQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IuciA9IHJlYWRlci5SZWFkVW5zaWduZWRDaGFyYWN0ZXI4ICgpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvci5nID0gcmVhZGVyLlJlYWRVbnNpZ25lZENoYXJhY3RlcjggKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLmIgPSByZWFkZXIuUmVhZFVuc2lnbmVkQ2hhcmFjdGVyOCAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9MSU5fQ09MT1IpIHtcbiAgICAgICAgICAgICAgICBjb2xvci5yID0gcmVhZGVyLlJlYWRVbnNpZ25lZENoYXJhY3RlcjggKCk7XG4gICAgICAgICAgICAgICAgY29sb3IuZyA9IHJlYWRlci5SZWFkVW5zaWduZWRDaGFyYWN0ZXI4ICgpO1xuICAgICAgICAgICAgICAgIGNvbG9yLmIgPSByZWFkZXIuUmVhZFVuc2lnbmVkQ2hhcmFjdGVyOCAoKTtcbiAgICAgICAgICAgICAgICBoYXNMaW5Db2xvciA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk1BVF9DT0xPUl9GKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNMaW5Db2xvcikge1xuICAgICAgICAgICAgICAgICAgICBjb2xvci5yID0gQ29sb3JDb21wb25lbnRGcm9tRmxvYXQgKHJlYWRlci5SZWFkRmxvYXQzMiAoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLmcgPSBDb2xvckNvbXBvbmVudEZyb21GbG9hdCAocmVhZGVyLlJlYWRGbG9hdDMyICgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IuYiA9IENvbG9yQ29tcG9uZW50RnJvbUZsb2F0IChyZWFkZXIuUmVhZEZsb2F0MzIgKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuTUFUX0xJTl9DT0xPUl9GKSB7XG4gICAgICAgICAgICAgICAgY29sb3IuciA9IENvbG9yQ29tcG9uZW50RnJvbUZsb2F0IChyZWFkZXIuUmVhZEZsb2F0MzIgKCkpO1xuICAgICAgICAgICAgICAgIGNvbG9yLmcgPSBDb2xvckNvbXBvbmVudEZyb21GbG9hdCAocmVhZGVyLlJlYWRGbG9hdDMyICgpKTtcbiAgICAgICAgICAgICAgICBjb2xvci5iID0gQ29sb3JDb21wb25lbnRGcm9tRmxvYXQgKHJlYWRlci5SZWFkRmxvYXQzMiAoKSk7XG4gICAgICAgICAgICAgICAgaGFzTGluQ29sb3IgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNraXBDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuXG4gICAgUmVhZFBlcmNlbnRhZ2VDaHVuayAocmVhZGVyLCBsZW5ndGgpXG4gICAge1xuICAgICAgICBsZXQgcGVyY2VudGFnZSA9IDAuMDtcbiAgICAgICAgbGV0IGVuZEJ5dGUgPSB0aGlzLkdldENodW5rRW5kIChyZWFkZXIsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuUmVhZENodW5rcyAocmVhZGVyLCBlbmRCeXRlLCAoY2h1bmtJZCwgY2h1bmtMZW5ndGgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5QRVJDRU5UQUdFKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMTYgKCkgLyAxMDAuMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuUEVSQ0VOVEFHRV9GKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5Ta2lwQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBlcmNlbnRhZ2U7XG4gICAgfVxuXG4gICAgUmVhZE9iamVjdENodW5rIChyZWFkZXIsIGxlbmd0aClcbiAgICB7XG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICBsZXQgb2JqZWN0TmFtZSA9IHRoaXMuUmVhZE5hbWUgKHJlYWRlcik7XG4gICAgICAgIHRoaXMuUmVhZENodW5rcyAocmVhZGVyLCBlbmRCeXRlLCAoY2h1bmtJZCwgY2h1bmtMZW5ndGgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5PQkpfVFJJTUVTSCkge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVhZE1lc2hDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCwgb2JqZWN0TmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgUmVhZE1lc2hDaHVuayAocmVhZGVyLCBsZW5ndGgsIG9iamVjdE5hbWUpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBBcHBseU1lc2hUcmFuc2Zvcm1hdGlvbiAobWVzaCwgbWVzaE1hdHJpeClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFtZXNoTWF0cml4LklzVmFsaWQgKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkZXRlcm1pbmFudCA9IG1lc2hNYXRyaXguRGV0ZXJtaW5hbnQgKCk7XG4gICAgICAgICAgICBsZXQgbWlycm9yQnlYID0gSXNOZWdhdGl2ZSAoZGV0ZXJtaW5hbnQpO1xuICAgICAgICAgICAgaWYgKG1pcnJvckJ5WCkge1xuICAgICAgICAgICAgICAgIGxldCBzY2FsZU1hdHJpeCA9IG5ldyBNYXRyaXggKCkuQ3JlYXRlU2NhbGUgKC0xLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgICAgICAgICBtZXNoTWF0cml4ID0gc2NhbGVNYXRyaXguTXVsdGlwbHlNYXRyaXggKG1lc2hNYXRyaXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaW52TWVzaE1hdHJpeCA9IG1lc2hNYXRyaXguSW52ZXJ0ICgpO1xuICAgICAgICAgICAgaWYgKGludk1lc2hNYXRyaXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbiAoaW52TWVzaE1hdHJpeCk7XG4gICAgICAgICAgICBUcmFuc2Zvcm1NZXNoIChtZXNoLCB0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBpZiAobWlycm9yQnlYKSB7XG4gICAgICAgICAgICAgICAgRmxpcE1lc2hUcmlhbmdsZXNPcmllbnRhdGlvbiAobWVzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWVzaCA9IG5ldyBNZXNoICgpO1xuICAgICAgICBtZXNoLlNldE5hbWUgKG9iamVjdE5hbWUpO1xuXG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICBsZXQgbWF0cml4RWxlbWVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLlJlYWRDaHVua3MgKHJlYWRlciwgZW5kQnl0ZSwgKGNodW5rSWQsIGNodW5rTGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuVFJJX1ZFUlRFWCkge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVhZFZlcnRpY2VzQ2h1bmsgKG1lc2gsIHJlYWRlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLlRSSV9URVhWRVJURVgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRUZXh0dXJlVmVydGljZXNDaHVuayAobWVzaCwgcmVhZGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuVFJJX0ZBQ0UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRGYWNlc0NodW5rIChtZXNoLCByZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuVFJJX1RSQU5TRk9STUFUSU9OKSB7XG4gICAgICAgICAgICAgICAgbWF0cml4RWxlbWVudHMgPSB0aGlzLlJlYWRUcmFuc2Zvcm1hdGlvbkNodW5rIChyZWFkZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNraXBDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtZXNoLlZlcnRleENvdW50ICgpID09PSBtZXNoLlRleHR1cmVVVkNvdW50ICgpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2guVHJpYW5nbGVDb3VudCAoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAoaSk7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGUuU2V0VGV4dHVyZVVWcyAoXG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnYwLFxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS52MSxcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUudjJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1lc2hNYXRyaXggPSBuZXcgTWF0cml4IChtYXRyaXhFbGVtZW50cyk7XG4gICAgICAgIEFwcGx5TWVzaFRyYW5zZm9ybWF0aW9uIChtZXNoLCBtZXNoTWF0cml4KTtcblxuICAgICAgICBsZXQgbWVzaEluZGV4ID0gdGhpcy5tb2RlbC5BZGRNZXNoIChtZXNoKTtcbiAgICAgICAgdGhpcy5tZXNoTmFtZVRvSW5kZXguc2V0IChtZXNoLkdldE5hbWUgKCksIG1lc2hJbmRleCk7XG4gICAgfVxuXG4gICAgUmVhZFZlcnRpY2VzQ2h1bmsgKG1lc2gsIHJlYWRlcilcbiAgICB7XG4gICAgICAgIGxldCB2ZXJ0ZXhDb3VudCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHggPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICBsZXQgeSA9IHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgIGxldCB6ID0gcmVhZGVyLlJlYWRGbG9hdDMyICgpO1xuICAgICAgICAgICAgbWVzaC5BZGRWZXJ0ZXggKG5ldyBDb29yZDNEICh4LCB5LCB6KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBSZWFkVGV4dHVyZVZlcnRpY2VzQ2h1bmsgKG1lc2gsIHJlYWRlcilcbiAgICB7XG4gICAgICAgIGxldCB0ZXhWZXJ0ZXhDb3VudCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4VmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHggPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICBsZXQgeSA9IHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgIG1lc2guQWRkVGV4dHVyZVVWIChuZXcgQ29vcmQyRCAoeCwgeSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUmVhZEZhY2VzQ2h1bmsgKG1lc2gsIHJlYWRlciwgbGVuZ3RoKVxuICAgIHtcbiAgICAgICAgbGV0IGVuZEJ5dGUgPSB0aGlzLkdldENodW5rRW5kIChyZWFkZXIsIGxlbmd0aCk7XG4gICAgICAgIGxldCBmYWNlQ291bnQgPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjE2ICgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2VDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdjAgPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjE2ICgpO1xuICAgICAgICAgICAgbGV0IHYxID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgICAgIGxldCB2MiA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgICAgICByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjE2ICgpOyAvLyBmbGFnc1xuICAgICAgICAgICAgbWVzaC5BZGRUcmlhbmdsZSAobmV3IFRyaWFuZ2xlICh2MCwgdjEsIHYyKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLlJlYWRDaHVua3MgKHJlYWRlciwgZW5kQnl0ZSwgKGNodW5rSWQsIGNodW5rTGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuVFJJX01BVEVSSUFMKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5SZWFkRmFjZU1hdGVyaWFsc0NodW5rIChtZXNoLCByZWFkZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5UUklfU01PT1RIKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5SZWFkRmFjZVNtb290aGluZ0dyb3Vwc0NodW5rIChtZXNoLCBmYWNlQ291bnQsIHJlYWRlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2tpcENodW5rIChyZWFkZXIsIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgUmVhZEZhY2VNYXRlcmlhbHNDaHVuayAobWVzaCwgcmVhZGVyKVxuICAgIHtcbiAgICAgICAgbGV0IG1hdGVyaWFsTmFtZSA9IHRoaXMuUmVhZE5hbWUgKHJlYWRlcik7XG4gICAgICAgIGxldCBtYXRlcmlhbEluZGV4ID0gdGhpcy5tYXRlcmlhbE5hbWVUb0luZGV4LmdldCAobWF0ZXJpYWxOYW1lKTtcbiAgICAgICAgbGV0IGZhY2VDb3VudCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBmYWNlSW5kZXggPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjE2ICgpO1xuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAoZmFjZUluZGV4KTtcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZS5tYXQgPSBtYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgUmVhZEZhY2VTbW9vdGhpbmdHcm91cHNDaHVuayAobWVzaCwgZmFjZUNvdW50LCByZWFkZXIpXG4gICAge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2VDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc21vb3RoaW5nR3JvdXAgPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjMyICgpO1xuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAoaSk7XG4gICAgICAgICAgICB0cmlhbmdsZS5jdXJ2ZSA9IHNtb290aGluZ0dyb3VwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUmVhZFRyYW5zZm9ybWF0aW9uQ2h1bmsgKHJlYWRlcilcbiAgICB7XG4gICAgICAgIGxldCBtYXRyaXggPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgICAgICAgICAgbWF0cml4LnB1c2ggKHJlYWRlci5SZWFkRmxvYXQzMiAoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA8IDMpIHtcbiAgICAgICAgICAgICAgICBtYXRyaXgucHVzaCAoMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXNoICgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cblxuICAgIFJlYWRLZXlGcmFtZUNodW5rIChyZWFkZXIsIGxlbmd0aClcbiAgICB7XG4gICAgICAgIGxldCBlbmRCeXRlID0gdGhpcy5HZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLlJlYWRDaHVua3MgKHJlYWRlciwgZW5kQnl0ZSwgKGNodW5rSWQsIGNodW5rTGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuT0JKRUNUX05PREUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRPYmplY3ROb2RlQ2h1bmsgKHJlYWRlciwgY2h1bmtMZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNraXBDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEJ1aWxkTm9kZUhpZXJhcmNoeSAoKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gR2V0Tm9kZVRyYW5zZm9ybWF0aW9uIChub2RlM2RzLCBpc01lc2hOb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICBmdW5jdGlvbiBHZXROb2RlUG9zaXRpb24gKG5vZGUzZHMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUzZHMucG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzAuMCwgMC4wLCAwLjBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTNkcy5wb3NpdGlvbnNbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdldE5vZGVSb3RhdGlvbiAobm9kZTNkcylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBHZXRRdWF0ZXJuaW9uRnJvbUF4aXNBbmRBbmdsZSAoYXhpc0FuZ2xlKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFswLjAsIDAuMCwgMC4wLCAxLjBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gTWF0aC5zcXJ0IChheGlzQW5nbGVbMF0gKiBheGlzQW5nbGVbMF0gKyBheGlzQW5nbGVbMV0gKiBheGlzQW5nbGVbMV0gKyBheGlzQW5nbGVbMl0gKiBheGlzQW5nbGVbMl0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb21lZ2EgPSBheGlzQW5nbGVbM10gKiAtMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpID0gTWF0aC5zaW4gKG9tZWdhKSAvIGxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtzaSAqIGF4aXNBbmdsZVswXSwgc2kgKiBheGlzQW5nbGVbMV0sIHNpICogYXhpc0FuZ2xlWzJdLCBNYXRoLmNvcyAob21lZ2EpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChub2RlM2RzLnJvdGF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFswLjAsIDAuMCwgMC4wLCAxLjBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IG5vZGUzZHMucm90YXRpb25zWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBHZXRRdWF0ZXJuaW9uRnJvbUF4aXNBbmRBbmdsZSAocm90YXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBHZXROb2RlU2NhbGUgKG5vZGUzZHMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUzZHMuc2NhbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzEuMCwgMS4wLCAxLjBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTNkcy5zY2FsZXNbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4ICgpO1xuICAgICAgICAgICAgbWF0cml4LkNvbXBvc2VUUlMgKFxuICAgICAgICAgICAgICAgIEFycmF5VG9Db29yZDNEIChHZXROb2RlUG9zaXRpb24gKG5vZGUzZHMpKSxcbiAgICAgICAgICAgICAgICBBcnJheVRvUXVhdGVybmlvbiAoR2V0Tm9kZVJvdGF0aW9uIChub2RlM2RzKSksXG4gICAgICAgICAgICAgICAgQXJyYXlUb0Nvb3JkM0QgKEdldE5vZGVTY2FsZSAobm9kZTNkcykpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoaXNNZXNoTm9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBwaXZvdFBvaW50ID0gbm9kZTNkcy5waXZvdDtcbiAgICAgICAgICAgICAgICBsZXQgcGl2b3RNYXRyaXggPSBuZXcgTWF0cml4ICgpLkNyZWF0ZVRyYW5zbGF0aW9uICgtcGl2b3RQb2ludFswXSwgLXBpdm90UG9pbnRbMV0sIC1waXZvdFBvaW50WzJdKTtcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBwaXZvdE1hdHJpeC5NdWx0aXBseU1hdHJpeCAobWF0cml4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbiAobWF0cml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByb290Tm9kZSA9IHRoaXMubW9kZWwuR2V0Um9vdE5vZGUgKCk7XG4gICAgICAgIGlmICh0aGlzLm5vZGVMaXN0LklzRW1wdHkgKCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG1lc2hJbmRleCA9IDA7IG1lc2hJbmRleCA8IHRoaXMubW9kZWwuTWVzaENvdW50ICgpOyBtZXNoSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIHJvb3ROb2RlLkFkZE1lc2hJbmRleCAobWVzaEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub2RlSWRUb01vZGVsTm9kZSA9IG5ldyBNYXAgKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBub2RlM2RzIG9mIHRoaXMubm9kZUxpc3QuR2V0Tm9kZXMgKCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IG5ldyBOb2RlICgpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlM2RzLm5hbWUubGVuZ3RoID4gMCAmJiBub2RlM2RzLm5hbWUgIT09ICckJCREVU1NWScpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5TZXROYW1lIChub2RlM2RzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZTNkcy5pbnN0YW5jZU5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5TZXROYW1lIChub2RlLkdldE5hbWUgKCkgKyAnICcgKyBub2RlM2RzLmluc3RhbmNlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUzZHMucGFyZW50SWQgPT09IDY1NTM1IHx8ICFub2RlSWRUb01vZGVsTm9kZS5oYXMgKG5vZGUzZHMucGFyZW50SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3ROb2RlLkFkZENoaWxkTm9kZSAobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudE5vZGUgPSBub2RlSWRUb01vZGVsTm9kZS5nZXQgKG5vZGUzZHMucGFyZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLkFkZENoaWxkTm9kZSAobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGVJZFRvTW9kZWxOb2RlLnNldCAobm9kZTNkcy5pZCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgbGV0IGlzTWVzaE5vZGUgPSB0aGlzLm1lc2hOYW1lVG9JbmRleC5oYXMgKG5vZGUzZHMubmFtZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5TZXRUcmFuc2Zvcm1hdGlvbiAoR2V0Tm9kZVRyYW5zZm9ybWF0aW9uIChub2RlM2RzLCBpc01lc2hOb2RlKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTWVzaE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5BZGRNZXNoSW5kZXggKHRoaXMubWVzaE5hbWVUb0luZGV4LmdldCAobm9kZTNkcy5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgUmVhZE9iamVjdE5vZGVDaHVuayAocmVhZGVyLCBsZW5ndGgpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBSZWFkVHJhY2tWZWN0b3IgKG9iaiwgcmVhZGVyLCB0eXBlKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgICAgICByZWFkZXIuU2tpcCAoMTApO1xuXG4gICAgICAgICAgICBsZXQga2V5TnVtID0gcmVhZGVyLlJlYWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleU51bTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLlJlYWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgICAgICAgICAgbGV0IGZsYWdzID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLlJlYWRGbG9hdDMyICgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gQ0hVTkszRFMuT0JKRUNUX1JPVEFUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXAgPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBvYmouUmVhZFZlY3RvciAocmVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFszXSA9IHRtcDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gb2JqLlJlYWRWZWN0b3IgKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoIChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub2RlM2RzID0gbmV3IEltcG9ydGVyM2RzTm9kZSAoKTtcbiAgICAgICAgbGV0IGVuZEJ5dGUgPSB0aGlzLkdldENodW5rRW5kIChyZWFkZXIsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuUmVhZENodW5rcyAocmVhZGVyLCBlbmRCeXRlLCAoY2h1bmtJZCwgY2h1bmtMZW5ndGgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaHVua0lkID09PSBDSFVOSzNEUy5PQkpFQ1RfSElFUkFSQ0hZKSB7XG4gICAgICAgICAgICAgICAgbm9kZTNkcy5uYW1lID0gdGhpcy5SZWFkTmFtZSAocmVhZGVyKTtcbiAgICAgICAgICAgICAgICBub2RlM2RzLmZsYWdzID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIzMiAoKTtcbiAgICAgICAgICAgICAgICBub2RlM2RzLnBhcmVudElkID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtJZCA9PT0gQ0hVTkszRFMuT0JKRUNUX0lOU1RBTkNFX05BTUUpIHtcbiAgICAgICAgICAgICAgICBub2RlM2RzLmluc3RhbmNlTmFtZSA9IHRoaXMuUmVhZE5hbWUgKHJlYWRlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk9CSkVDVF9QSVZPVCkge1xuICAgICAgICAgICAgICAgIG5vZGUzZHMucGl2b3QgPSB0aGlzLlJlYWRWZWN0b3IgKHJlYWRlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk9CSkVDVF9QT1NJVElPTikge1xuICAgICAgICAgICAgICAgIG5vZGUzZHMucG9zaXRpb25zID0gUmVhZFRyYWNrVmVjdG9yICh0aGlzLCByZWFkZXIsIENIVU5LM0RTLk9CSkVDVF9QT1NJVElPTik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk9CSkVDVF9ST1RBVElPTikge1xuICAgICAgICAgICAgICAgIG5vZGUzZHMucm90YXRpb25zID0gUmVhZFRyYWNrVmVjdG9yICh0aGlzLCByZWFkZXIsIENIVU5LM0RTLk9CSkVDVF9ST1RBVElPTik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk9CSkVDVF9TQ0FMRSkge1xuICAgICAgICAgICAgICAgIG5vZGUzZHMuc2NhbGVzID0gUmVhZFRyYWNrVmVjdG9yICh0aGlzLCByZWFkZXIsIENIVU5LM0RTLk9CSkVDVF9TQ0FMRSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rSWQgPT09IENIVU5LM0RTLk9CSkVDVF9JRCkge1xuICAgICAgICAgICAgICAgIG5vZGUzZHMuaWQgPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjE2ICgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNraXBDaHVuayAocmVhZGVyLCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubm9kZUxpc3QuQWRkTm9kZSAobm9kZTNkcyk7XG4gICAgfVxuXG4gICAgUmVhZE5hbWUgKHJlYWRlcilcbiAgICB7XG4gICAgICAgIGxldCBuYW1lID0gJyc7XG4gICAgICAgIGxldCBjaGFyID0gMDtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgd2hpbGUgKGNvdW50IDwgNjQpIHtcbiAgICAgICAgICAgIGNoYXIgPSByZWFkZXIuUmVhZENoYXJhY3RlcjggKCk7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmFtZSA9IG5hbWUgKyBTdHJpbmcuZnJvbUNoYXJDb2RlIChjaGFyKTtcbiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIFJlYWRWZWN0b3IgKHJlYWRlcilcbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXG4gICAgICAgICAgICByZWFkZXIuUmVhZEZsb2F0MzIgKCksXG4gICAgICAgICAgICByZWFkZXIuUmVhZEZsb2F0MzIgKCksXG4gICAgICAgICAgICByZWFkZXIuUmVhZEZsb2F0MzIgKClcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBSZWFkQ2h1bmtzIChyZWFkZXIsIGVuZEJ5dGUsIG9uQ2h1bmspXG4gICAge1xuICAgICAgICB3aGlsZSAocmVhZGVyLkdldFBvc2l0aW9uICgpIDw9IGVuZEJ5dGUgLSA2KSB7XG4gICAgICAgIGxldCBjaHVua0lkID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgICAgIGxldCBjaHVua0xlbmd0aCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgICAgICBvbkNodW5rIChjaHVua0lkLCBjaHVua0xlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBHZXRDaHVua0VuZCAocmVhZGVyLCBsZW5ndGgpXG4gICAge1xuICAgICAgICByZXR1cm4gcmVhZGVyLkdldFBvc2l0aW9uICgpICsgbGVuZ3RoIC0gNjtcbiAgICB9XG5cbiAgICBTa2lwQ2h1bmsgKHJlYWRlciwgbGVuZ3RoKVxuICAgIHtcbiAgICAgICAgcmVhZGVyLlNraXAgKGxlbmd0aCAtIDYpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkMkQgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDJkLmpzJztcbmltcG9ydCB7IEFycmF5VG9Db29yZDNELCBDb29yZDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBDb29yZDREIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQ0ZC5qcyc7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXguanMnO1xuaW1wb3J0IHsgQXJyYXlUb1F1YXRlcm5pb24gfSBmcm9tICcuLi9nZW9tZXRyeS9xdWF0ZXJuaW9uLmpzJztcbmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtYXRpb24uanMnO1xuaW1wb3J0IHsgQmluYXJ5UmVhZGVyIH0gZnJvbSAnLi4vaW8vYmluYXJ5cmVhZGVyLmpzJztcbmltcG9ydCB7IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nLCBCYXNlNjREYXRhVVJJVG9BcnJheUJ1ZmZlciwgR2V0RmlsZUV4dGVuc2lvbkZyb21NaW1lVHlwZSB9IGZyb20gJy4uL2lvL2J1ZmZlcnV0aWxzLmpzJztcbmltcG9ydCB7IExvYWRFeHRlcm5hbExpYnJhcnkgfSBmcm9tICcuLi9pby9leHRlcm5hbGxpYnMuanMnO1xuaW1wb3J0IHsgUkdCQ29sb3IsIENvbG9yQ29tcG9uZW50RnJvbUZsb2F0LCBSR0JDb2xvckZyb21GbG9hdENvbXBvbmVudHMsIExpbmVhclRvU1JHQiB9IGZyb20gJy4uL21vZGVsL2NvbG9yLmpzJztcbmltcG9ydCB7IFBob25nTWF0ZXJpYWwsIFBoeXNpY2FsTWF0ZXJpYWwsIFRleHR1cmVNYXAgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi4vbW9kZWwvbWVzaC5qcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vbW9kZWwvbm9kZS5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eSwgUHJvcGVydHlHcm91cCwgUHJvcGVydHlUeXBlIH0gZnJvbSAnLi4vbW9kZWwvcHJvcGVydHkuanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tb2RlbC90cmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5cbmNvbnN0IEdsdGZDb21wb25lbnRUeXBlID1cbntcbiAgICBCWVRFIDogNTEyMCxcbiAgICBVTlNJR05FRF9CWVRFIDogNTEyMSxcbiAgICBTSE9SVCA6IDUxMjIsXG4gICAgVU5TSUdORURfU0hPUlQgOiA1MTIzLFxuICAgIFVOU0lHTkVEX0lOVCA6IDUxMjUsXG4gICAgRkxPQVQgOiA1MTI2XG59O1xuXG5jb25zdCBHbHRmRGF0YVR5cGUgPVxue1xuICAgIFNDQUxBUiA6IDAsXG4gICAgVkVDMiA6IDEsXG4gICAgVkVDMyA6IDIsXG4gICAgVkVDNCA6IDMsXG4gICAgTUFUMiA6IDQsXG4gICAgTUFUMyAgOiA1LFxuICAgIE1BVDQgIDogNlxufTtcblxuY29uc3QgR2x0ZlJlbmRlck1vZGUgPVxue1xuICAgIFBPSU5UUyA6IDAsXG4gICAgTElORVMgOiAxLFxuICAgIExJTkVfTE9PUCA6IDIsXG4gICAgTElORV9TVFJJUCA6IDMsXG4gICAgVFJJQU5HTEVTIDogNCxcbiAgICBUUklBTkdMRV9TVFJJUCAgOiA1LFxuICAgIFRSSUFOR0xFX0ZBTiA6IDZcbn07XG5cbmNvbnN0IEdsdGZDb25zdGFudHMgPVxue1xuICAgIEdMVEZfU1RSSU5HIDogMHg0NjU0NkM2NyxcbiAgICBKU09OX0NIVU5LX1RZUEUgOiAweDRFNEY1MzRBLFxuICAgIEJJTkFSWV9DSFVOS19UWVBFIDogMHgwMDRFNDk0MlxufTtcblxuZnVuY3Rpb24gR2V0R2x0ZkNvbG9yIChjb2xvcilcbntcbiAgICByZXR1cm4gUkdCQ29sb3JGcm9tRmxvYXRDb21wb25lbnRzIChcbiAgICAgICAgTGluZWFyVG9TUkdCIChjb2xvclswXSksXG4gICAgICAgIExpbmVhclRvU1JHQiAoY29sb3JbMV0pLFxuICAgICAgICBMaW5lYXJUb1NSR0IgKGNvbG9yWzJdKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIEdldEdsdGZWZXJ0ZXhDb2xvciAoY29sb3IsIGNvbXBvbmVudFR5cGUpXG57XG4gICAgZnVuY3Rpb24gR2V0Q29sb3JDb21wb25lbnQgKGNvbXBvbmVudCwgY29tcG9uZW50VHlwZSlcbiAgICB7XG4gICAgICAgIGxldCBub3JtYWxpemVkID0gY29tcG9uZW50O1xuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA9PT0gR2x0ZkNvbXBvbmVudFR5cGUuVU5TSUdORURfQllURSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZCAvPSAyNTUuMDtcbiAgICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5VTlNJR05FRF9TSE9SVCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZCAvPSA2NTUzNS4wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb2xvckNvbXBvbmVudEZyb21GbG9hdCAoTGluZWFyVG9TUkdCIChub3JtYWxpemVkKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSR0JDb2xvciAoXG4gICAgICAgIEdldENvbG9yQ29tcG9uZW50IChjb2xvclswXSwgY29tcG9uZW50VHlwZSksXG4gICAgICAgIEdldENvbG9yQ29tcG9uZW50IChjb2xvclsxXSwgY29tcG9uZW50VHlwZSksXG4gICAgICAgIEdldENvbG9yQ29tcG9uZW50IChjb2xvclsyXSwgY29tcG9uZW50VHlwZSlcbiAgICApO1xufVxuXG5jbGFzcyBHbHRmQnVmZmVyUmVhZGVyXG57XG4gICAgY29uc3RydWN0b3IgKGJ1ZmZlcilcbiAgICB7XG4gICAgICAgIHRoaXMucmVhZGVyID0gbmV3IEJpbmFyeVJlYWRlciAoYnVmZmVyLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRUeXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kYXRhVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnl0ZVN0cmlkZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGF0YUNvdW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zcGFyc2VSZWFkZXIgPSBudWxsO1xuICAgIH1cblxuICAgIFNldENvbXBvbmVudFR5cGUgKGNvbXBvbmVudFR5cGUpXG4gICAge1xuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGUgPSBjb21wb25lbnRUeXBlO1xuICAgIH1cblxuICAgIFNldERhdGFUeXBlIChkYXRhVHlwZSlcbiAgICB7XG4gICAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ1NDQUxBUicpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBHbHRmRGF0YVR5cGUuU0NBTEFSO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnVkVDMicpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBHbHRmRGF0YVR5cGUuVkVDMjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ1ZFQzMnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFUeXBlID0gR2x0ZkRhdGFUeXBlLlZFQzM7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICdWRUM0Jykge1xuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZSA9IEdsdGZEYXRhVHlwZS5WRUM0O1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnTUFUMicpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBHbHRmRGF0YVR5cGUuTUFUMjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ01BVDMnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFUeXBlID0gR2x0ZkRhdGFUeXBlLk1BVDM7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICdNQVQ0Jykge1xuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZSA9IEdsdGZEYXRhVHlwZS5NQVQ0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgU2V0Qnl0ZVN0cmlkZSAoYnl0ZVN0cmlkZSlcbiAgICB7XG4gICAgICAgIHRoaXMuYnl0ZVN0cmlkZSA9IGJ5dGVTdHJpZGU7XG4gICAgfVxuXG4gICAgU2V0RGF0YUNvdW50IChkYXRhQ291bnQpXG4gICAge1xuICAgICAgICB0aGlzLmRhdGFDb3VudCA9IGRhdGFDb3VudDtcbiAgICB9XG5cbiAgICBTZXRTcGFyc2VSZWFkZXIgKGluZGV4UmVhZGVyLCB2YWx1ZVJlYWRlcilcbiAgICB7XG4gICAgICAgIHRoaXMuc3BhcnNlUmVhZGVyID0ge1xuICAgICAgICAgICAgaW5kZXhSZWFkZXIgOiBpbmRleFJlYWRlcixcbiAgICAgICAgICAgIHZhbHVlUmVhZGVyIDogdmFsdWVSZWFkZXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBSZWFkQXJyYXlCdWZmZXIgKGJ5dGVMZW5ndGgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkZXIuUmVhZEFycmF5QnVmZmVyIChieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICBHZXREYXRhQ291bnQgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFDb3VudDtcbiAgICB9XG5cbiAgICBSZWFkRGF0YSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRhdGFUeXBlID09PSBHbHRmRGF0YVR5cGUuU0NBTEFSKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMuUmVhZENvbXBvbmVudCAoKTtcbiAgICAgICAgICAgIHRoaXMuU2tpcEJ5dGVzQnlTdHJpZGUgKDEpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhVHlwZSA9PT0gR2x0ZkRhdGFUeXBlLlZFQzIpIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5SZWFkQ29tcG9uZW50ICgpO1xuICAgICAgICAgICAgbGV0IHkgPSB0aGlzLlJlYWRDb21wb25lbnQgKCk7XG4gICAgICAgICAgICB0aGlzLlNraXBCeXRlc0J5U3RyaWRlICgyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29vcmQyRCAoeCwgeSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhVHlwZSA9PT0gR2x0ZkRhdGFUeXBlLlZFQzMpIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5SZWFkQ29tcG9uZW50ICgpO1xuICAgICAgICAgICAgbGV0IHkgPSB0aGlzLlJlYWRDb21wb25lbnQgKCk7XG4gICAgICAgICAgICBsZXQgeiA9IHRoaXMuUmVhZENvbXBvbmVudCAoKTtcbiAgICAgICAgICAgIHRoaXMuU2tpcEJ5dGVzQnlTdHJpZGUgKDMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb29yZDNEICh4LCB5LCB6KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGFUeXBlID09PSBHbHRmRGF0YVR5cGUuVkVDNCkge1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLlJlYWRDb21wb25lbnQgKCk7XG4gICAgICAgICAgICBsZXQgeSA9IHRoaXMuUmVhZENvbXBvbmVudCAoKTtcbiAgICAgICAgICAgIGxldCB6ID0gdGhpcy5SZWFkQ29tcG9uZW50ICgpO1xuICAgICAgICAgICAgbGV0IHcgPSB0aGlzLlJlYWRDb21wb25lbnQgKCk7XG4gICAgICAgICAgICB0aGlzLlNraXBCeXRlc0J5U3RyaWRlICg0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29vcmQ0RCAoeCwgeSwgeiwgdyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgRW51bWVyYXRlRGF0YSAob25EYXRhKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuc3BhcnNlUmVhZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBvbkRhdGEgKHRoaXMuUmVhZERhdGEgKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNwYXJzZURhdGEgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcGFyc2VSZWFkZXIuaW5kZXhSZWFkZXIuR2V0RGF0YUNvdW50ICgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnNwYXJzZVJlYWRlci5pbmRleFJlYWRlci5SZWFkRGF0YSAoKTtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnNwYXJzZVJlYWRlci52YWx1ZVJlYWRlci5SZWFkRGF0YSAoKTtcbiAgICAgICAgICAgICAgICBzcGFyc2VEYXRhLnB1c2ggKHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggOiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNwYXJzZUluZGV4ID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5SZWFkRGF0YSAoKTtcbiAgICAgICAgICAgICAgICBpZiAoc3BhcnNlSW5kZXggPCBzcGFyc2VEYXRhLmxlbmd0aCAmJiBzcGFyc2VEYXRhW3NwYXJzZUluZGV4XS5pbmRleCA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICBvbkRhdGEgKHNwYXJzZURhdGFbc3BhcnNlSW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgc3BhcnNlSW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbkRhdGEgKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFNraXBCeXRlcyAoYnl0ZXMpXG4gICAge1xuICAgICAgICB0aGlzLnJlYWRlci5Ta2lwIChieXRlcyk7XG4gICAgfVxuXG4gICAgUmVhZENvbXBvbmVudCAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gR2x0ZkNvbXBvbmVudFR5cGUuQllURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRDaGFyYWN0ZXI4ICgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gR2x0ZkNvbXBvbmVudFR5cGUuVU5TSUdORURfQllURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRVbnNpZ25lZENoYXJhY3RlcjggKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5TSE9SVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5VTlNJR05FRF9TSE9SVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudFR5cGUgPT09IEdsdGZDb21wb25lbnRUeXBlLlVOU0lHTkVEX0lOVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5GTE9BVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLlJlYWRGbG9hdDMyICgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIFNraXBCeXRlc0J5U3RyaWRlIChjb21wb25lbnRDb3VudClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmJ5dGVTdHJpZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVhZEJ5dGVzID0gY29tcG9uZW50Q291bnQgKiB0aGlzLkdldENvbXBvbmVudFNpemUgKCk7XG4gICAgICAgIHRoaXMucmVhZGVyLlNraXAgKHRoaXMuYnl0ZVN0cmlkZSAtIHJlYWRCeXRlcyk7XG4gICAgfVxuXG4gICAgR2V0Q29tcG9uZW50U2l6ZSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gR2x0ZkNvbXBvbmVudFR5cGUuQllURSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5VTlNJR05FRF9CWVRFKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudFR5cGUgPT09IEdsdGZDb21wb25lbnRUeXBlLlNIT1JUKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudFR5cGUgPT09IEdsdGZDb21wb25lbnRUeXBlLlVOU0lHTkVEX1NIT1JUKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudFR5cGUgPT09IEdsdGZDb21wb25lbnRUeXBlLlVOU0lHTkVEX0lOVCkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnRUeXBlID09PSBHbHRmQ29tcG9uZW50VHlwZS5GTE9BVCkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuXG5jbGFzcyBHbHRmRXh0ZW5zaW9uc1xue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLnN1cHBvcnRlZEV4dGVuc2lvbnMgPSBbXG4gICAgICAgICAgICAnS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb24nLFxuICAgICAgICAgICAgJ0tIUl9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzJyxcbiAgICAgICAgICAgICdLSFJfdGV4dHVyZV90cmFuc2Zvcm0nLFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRyYWNvID0gbnVsbDtcbiAgICB9XG5cbiAgICBMb2FkTGlicmFyaWVzIChleHRlbnNpb25zUmVxdWlyZWQsIGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIGlmIChleHRlbnNpb25zUmVxdWlyZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2tzLm9uU3VjY2VzcyAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFjbyA9PT0gbnVsbCAmJiBleHRlbnNpb25zUmVxdWlyZWQuaW5kZXhPZiAoJ0tIUl9kcmFjb19tZXNoX2NvbXByZXNzaW9uJykgIT09IC0xKSB7XG5cdFx0XHRMb2FkRXh0ZXJuYWxMaWJyYXJ5ICgnbG9hZGVycy9kcmFjb19kZWNvZGVyLmpzJykudGhlbiAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIERyYWNvRGVjb2Rlck1vZHVsZSAoKS50aGVuICgoZHJhY28pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFjbyA9IGRyYWNvO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25TdWNjZXNzICgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2ggKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvciAoJ0ZhaWxlZCB0byBsb2FkIGRyYWNvIGRlY29kZXIuJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vblN1Y2Nlc3MgKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBHZXRVbnN1cHBvcnRlZEV4dGVuc2lvbnMgKGV4dGVuc2lvbnNSZXF1aXJlZClcbiAgICB7XG4gICAgICAgIGxldCB1bnN1cHBvcnRlZEV4dGVuc2lvbnMgPSBbXTtcbiAgICAgICAgaWYgKGV4dGVuc2lvbnNSZXF1aXJlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5zdXBwb3J0ZWRFeHRlbnNpb25zO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXh0ZW5zaW9uc1JlcXVpcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmVxdWlyZWRFeHRlbnNpb24gPSBleHRlbnNpb25zUmVxdWlyZWRbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zLmluZGV4T2YgKHJlcXVpcmVkRXh0ZW5zaW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZEV4dGVuc2lvbnMucHVzaCAocmVxdWlyZWRFeHRlbnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bnN1cHBvcnRlZEV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgUHJvY2Vzc01hdGVyaWFsIChnbHRmTWF0ZXJpYWwsIG1hdGVyaWFsLCBpbXBvclRleHR1cmVGbilcbiAgICB7XG4gICAgICAgIGlmIChnbHRmTWF0ZXJpYWwuZXh0ZW5zaW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBraHJTcGVjdWxhckdsb3NzaW5lc3MgPSBnbHRmTWF0ZXJpYWwuZXh0ZW5zaW9ucy5LSFJfbWF0ZXJpYWxzX3BiclNwZWN1bGFyR2xvc3NpbmVzcztcbiAgICAgICAgaWYgKGtoclNwZWN1bGFyR2xvc3NpbmVzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwaG9uZ01hdGVyaWFsID0gbmV3IFBob25nTWF0ZXJpYWwgKCk7XG4gICAgICAgIGxldCBkaWZmdXNlQ29sb3IgPSBraHJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjtcbiAgICAgICAgaWYgKGRpZmZ1c2VDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwaG9uZ01hdGVyaWFsLmNvbG9yID0gR2V0R2x0ZkNvbG9yIChkaWZmdXNlQ29sb3IpO1xuICAgICAgICAgICAgcGhvbmdNYXRlcmlhbC5vcGFjaXR5ID0gZGlmZnVzZUNvbG9yWzNdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkaWZmdXNlVGV4dHVyZSA9IGtoclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZTtcbiAgICAgICAgaWYgKGRpZmZ1c2VUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBob25nTWF0ZXJpYWwuZGlmZnVzZU1hcCA9IGltcG9yVGV4dHVyZUZuIChkaWZmdXNlVGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNwZWN1bGFyQ29sb3IgPSBraHJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3I7XG4gICAgICAgIGlmIChzcGVjdWxhckNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBob25nTWF0ZXJpYWwuc3BlY3VsYXIgPSBHZXRHbHRmQ29sb3IgKHNwZWN1bGFyQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzcGVjdWxhclRleHR1cmUgPSBraHJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZTtcbiAgICAgICAgaWYgKHNwZWN1bGFyVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwaG9uZ01hdGVyaWFsLnNwZWN1bGFyTWFwID0gaW1wb3JUZXh0dXJlRm4gKHNwZWN1bGFyVGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGdsb3NzaW5lc3MgPSBraHJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvcjtcbiAgICAgICAgaWYgKGdsb3NzaW5lc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGhvbmdNYXRlcmlhbC5zaGluaW5lc3MgPSBnbG9zc2luZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBob25nTWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgUHJvY2Vzc1RleHR1cmUgKGdsdGZUZXh0dXJlLCB0ZXh0dXJlKVxuICAgIHtcbiAgICAgICAgaWYgKGdsdGZUZXh0dXJlLmV4dGVuc2lvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBraHJUZXh0dXJlVHJhbnNmb3JtID0gZ2x0ZlRleHR1cmUuZXh0ZW5zaW9ucy5LSFJfdGV4dHVyZV90cmFuc2Zvcm07XG4gICAgICAgIGlmIChraHJUZXh0dXJlVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChraHJUZXh0dXJlVHJhbnNmb3JtLm9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5vZmZzZXQueCA9IGtoclRleHR1cmVUcmFuc2Zvcm0ub2Zmc2V0WzBdO1xuICAgICAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LnkgPSAta2hyVGV4dHVyZVRyYW5zZm9ybS5vZmZzZXRbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2hyVGV4dHVyZVRyYW5zZm9ybS5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5zY2FsZS54ID0ga2hyVGV4dHVyZVRyYW5zZm9ybS5zY2FsZVswXTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnNjYWxlLnkgPSBraHJUZXh0dXJlVHJhbnNmb3JtLnNjYWxlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtoclRleHR1cmVUcmFuc2Zvcm0ucm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRleHR1cmUucm90YXRpb24gPSAta2hyVGV4dHVyZVRyYW5zZm9ybS5yb3RhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFByb2Nlc3NQcmltaXRpdmUgKGltcG9ydGVyLCBnbHRmLCBwcmltaXRpdmUsIG1lc2gpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBFbnVtZXJhdGVDb21wb25lbnRzIChkcmFjbywgZGVjb2RlciwgZHJhY29NZXNoLCBhdHRyaWJ1dGVJZCwgcHJvY2Vzc29yKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgYXR0cmlidXRlID0gZGVjb2Rlci5HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkIChkcmFjb01lc2gsIGF0dHJpYnV0ZUlkKTtcbiAgICAgICAgICAgIGxldCBudW1Db21wb25lbnRzID0gYXR0cmlidXRlLm51bV9jb21wb25lbnRzICgpO1xuICAgICAgICAgICAgbGV0IG51bVBvaW50cyA9IGRyYWNvTWVzaC5udW1fcG9pbnRzICgpO1xuICAgICAgICAgICAgbGV0IG51bVZhbHVlcyA9IG51bVBvaW50cyAqIG51bUNvbXBvbmVudHM7XG4gICAgICAgICAgICBsZXQgZGF0YVNpemUgPSBudW1WYWx1ZXMgKiA0O1xuICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVB0ciA9IGRyYWNvLl9tYWxsb2MgKGRhdGFTaXplKTtcbiAgICAgICAgICAgIGRlY29kZXIuR2V0QXR0cmlidXRlRGF0YUFycmF5Rm9yQWxsUG9pbnRzIChkcmFjb01lc2gsIGF0dHJpYnV0ZSwgZHJhY28uRFRfRkxPQVQzMiwgZGF0YVNpemUsIGF0dHJpYnV0ZVB0cik7XG4gICAgICAgICAgICBsZXQgYXR0cmlidXRlQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5IChkcmFjby5IRUFQRjMyLmJ1ZmZlciwgYXR0cmlidXRlUHRyLCBudW1WYWx1ZXMpLnNsaWNlICgpO1xuICAgICAgICAgICAgaWYgKG51bUNvbXBvbmVudHMgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NvciAobmV3IENvb3JkMkQgKFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlQXJyYXlbaSArIDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlQXJyYXlbaSArIDFdXG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtQ29tcG9uZW50cyA9PT0gMykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlQXJyYXkubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yIChuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVBcnJheVtpICsgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVBcnJheVtpICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVBcnJheVtpICsgMl1cbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1Db21wb25lbnRzID09PSA0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzb3IgKG5ldyBDb29yZDREIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUFycmF5W2kgKyAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUFycmF5W2kgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUFycmF5W2kgKyAyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUFycmF5W2kgKyAzXVxuICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkcmFjby5fZnJlZSAoYXR0cmlidXRlUHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRyYWNvID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpbWl0aXZlLmV4dGVuc2lvbnMgPT09IHVuZGVmaW5lZCB8fCBwcmltaXRpdmUuZXh0ZW5zaW9ucy5LSFJfZHJhY29fbWVzaF9jb21wcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGVjb2RlciA9IG5ldyB0aGlzLmRyYWNvLkRlY29kZXIgKCk7XG4gICAgICAgIGxldCBkZWNvZGVyQnVmZmVyID0gbmV3IHRoaXMuZHJhY28uRGVjb2RlckJ1ZmZlciAoKTtcblxuICAgICAgICBsZXQgZXh0ZW5zaW9uUGFyYW1zID0gcHJpbWl0aXZlLmV4dGVuc2lvbnMuS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb247XG4gICAgICAgIGxldCBjb21wcmVzc2VkQnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3NbZXh0ZW5zaW9uUGFyYW1zLmJ1ZmZlclZpZXddO1xuICAgICAgICBsZXQgY29tcHJlc3NlZFJlYWRlciA9IGltcG9ydGVyLkdldFJlYWRlckZyb21CdWZmZXJWaWV3IChjb21wcmVzc2VkQnVmZmVyVmlldyk7XG4gICAgICAgIGxldCBjb21wcmVzc2VkQXJyYXlCdWZmZXIgPSBjb21wcmVzc2VkUmVhZGVyLlJlYWRBcnJheUJ1ZmZlciAoY29tcHJlc3NlZEJ1ZmZlclZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGRlY29kZXJCdWZmZXIuSW5pdCAobmV3IEludDhBcnJheSAoY29tcHJlc3NlZEFycmF5QnVmZmVyKSwgY29tcHJlc3NlZEFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICBsZXQgZ2VvbWV0cnlUeXBlID0gZGVjb2Rlci5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlIChkZWNvZGVyQnVmZmVyKTtcbiAgICAgICAgaWYgKGdlb21ldHJ5VHlwZSAhPT0gdGhpcy5kcmFjby5UUklBTkdVTEFSX01FU0gpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRyYWNvTWVzaCA9IG5ldyB0aGlzLmRyYWNvLk1lc2ggKCk7XG4gICAgICAgIGxldCBkZWNvZGluZ1N0YXR1cyA9IGRlY29kZXIuRGVjb2RlQnVmZmVyVG9NZXNoIChkZWNvZGVyQnVmZmVyLCBkcmFjb01lc2gpO1xuICAgICAgICBpZiAoIWRlY29kaW5nU3RhdHVzLm9rICgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoYXNWZXJ0aWNlcyA9IChleHRlbnNpb25QYXJhbXMuYXR0cmlidXRlcy5QT1NJVElPTiAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgbGV0IGhhc1ZlcnRleENvbG9ycyA9IGZhbHNlO1xuICAgICAgICBsZXQgaGFzTm9ybWFscyA9IChleHRlbnNpb25QYXJhbXMuYXR0cmlidXRlcy5OT1JNQUwgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGxldCBoYXNVVnMgPSAoZXh0ZW5zaW9uUGFyYW1zLmF0dHJpYnV0ZXMuVEVYQ09PUkRfMCAhPT0gdW5kZWZpbmVkKTtcblxuICAgICAgICBpZiAoIWhhc1ZlcnRpY2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2ZXJ0ZXhPZmZzZXQgPSBtZXNoLlZlcnRleENvdW50ICgpO1xuICAgICAgICBsZXQgdmVydGV4Q29sb3JPZmZzZXQgPSBtZXNoLlZlcnRleENvbG9yQ291bnQgKCk7XG4gICAgICAgIGxldCBub3JtYWxPZmZzZXQgPSBtZXNoLk5vcm1hbENvdW50ICgpO1xuICAgICAgICBsZXQgdXZPZmZzZXQgPSBtZXNoLlRleHR1cmVVVkNvdW50ICgpO1xuXG4gICAgICAgIEVudW1lcmF0ZUNvbXBvbmVudHMgKHRoaXMuZHJhY28sIGRlY29kZXIsIGRyYWNvTWVzaCwgZXh0ZW5zaW9uUGFyYW1zLmF0dHJpYnV0ZXMuUE9TSVRJT04sICh2ZXJ0ZXgpID0+IHtcbiAgICAgICAgICAgIG1lc2guQWRkVmVydGV4ICh2ZXJ0ZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaGFzTm9ybWFscykge1xuICAgICAgICAgICAgRW51bWVyYXRlQ29tcG9uZW50cyAodGhpcy5kcmFjbywgZGVjb2RlciwgZHJhY29NZXNoLCBleHRlbnNpb25QYXJhbXMuYXR0cmlidXRlcy5OT1JNQUwsIChub3JtYWwpID0+IHtcbiAgICAgICAgICAgICAgICBtZXNoLkFkZE5vcm1hbCAobm9ybWFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1VWcykge1xuICAgICAgICAgICAgRW51bWVyYXRlQ29tcG9uZW50cyAodGhpcy5kcmFjbywgZGVjb2RlciwgZHJhY29NZXNoLCBleHRlbnNpb25QYXJhbXMuYXR0cmlidXRlcy5URVhDT09SRF8wLCAodXYpID0+IHtcbiAgICAgICAgICAgICAgICB1di55ID0gLXV2Lnk7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGRUZXh0dXJlVVYgKHV2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZhY2VDb3VudCA9IGRyYWNvTWVzaC5udW1fZmFjZXMgKCk7XG4gICAgICAgIGxldCBpbmRleENvdW50ID0gZmFjZUNvdW50ICogMztcbiAgICAgICAgbGV0IGluZGV4RGF0YVNpemUgPSBpbmRleENvdW50ICogNDtcbiAgICAgICAgbGV0IGluZGV4RGF0YVB0ciA9IHRoaXMuZHJhY28uX21hbGxvYyAoaW5kZXhEYXRhU2l6ZSk7XG4gICAgICAgIGRlY29kZXIuR2V0VHJpYW5nbGVzVUludDMyQXJyYXkgKGRyYWNvTWVzaCwgaW5kZXhEYXRhU2l6ZSwgaW5kZXhEYXRhUHRyKTtcbiAgICAgICAgbGV0IGluZGV4QXJyYXkgPSBuZXcgVWludDMyQXJyYXkgKHRoaXMuZHJhY28uSEVBUFUzMi5idWZmZXIsIGluZGV4RGF0YVB0ciwgaW5kZXhDb3VudCkuc2xpY2UgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhBcnJheS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgbGV0IHYwID0gaW5kZXhBcnJheVtpXTtcbiAgICAgICAgICAgIGxldCB2MSA9IGluZGV4QXJyYXlbaSArIDFdO1xuICAgICAgICAgICAgbGV0IHYyID0gaW5kZXhBcnJheVtpICsgMl07XG4gICAgICAgICAgICBpbXBvcnRlci5BZGRUcmlhbmdsZSAocHJpbWl0aXZlLCBtZXNoLCB2MCwgdjEsIHYyLCBoYXNWZXJ0ZXhDb2xvcnMsIGhhc05vcm1hbHMsIGhhc1VWcywgdmVydGV4T2Zmc2V0LCB2ZXJ0ZXhDb2xvck9mZnNldCwgbm9ybWFsT2Zmc2V0LCB1dk9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmFjby5fZnJlZSAoaW5kZXhEYXRhUHRyKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlckdsdGYgZXh0ZW5kcyBJbXBvcnRlckJhc2VcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMuZ2x0ZkV4dGVuc2lvbnMgPSBuZXcgR2x0ZkV4dGVuc2lvbnMgKCk7XG4gICAgfVxuXG4gICAgQ2FuSW1wb3J0RXh0ZW5zaW9uIChleHRlbnNpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uID09PSAnZ2x0ZicgfHwgZXh0ZW5zaW9uID09PSAnZ2xiJztcbiAgICB9XG5cbiAgICBHZXRVcERpcmVjdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIERpcmVjdGlvbi5ZO1xuICAgIH1cblxuICAgIENsZWFyQ29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5idWZmZXJDb250ZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW1hZ2VJbmRleFRvVGV4dHVyZVBhcmFtcyA9IG51bGw7XG4gICAgfVxuXG4gICAgUmVzZXRDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLmJ1ZmZlckNvbnRlbnRzID0gW107XG4gICAgICAgIHRoaXMuaW1hZ2VJbmRleFRvVGV4dHVyZVBhcmFtcyA9IG5ldyBNYXAgKCk7XG4gICAgfVxuXG4gICAgSW1wb3J0Q29udGVudCAoZmlsZUNvbnRlbnQsIG9uRmluaXNoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5zaW9uID09PSAnZ2x0ZicpIHtcbiAgICAgICAgICAgIHRoaXMuUHJvY2Vzc0dsdGYgKGZpbGVDb250ZW50LCBvbkZpbmlzaCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5leHRlbnNpb24gPT09ICdnbGInKSB7XG4gICAgICAgICAgICB0aGlzLlByb2Nlc3NCaW5hcnlHbHRmIChmaWxlQ29udGVudCwgb25GaW5pc2gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUHJvY2Vzc0dsdGYgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGxldCB0ZXh0Q29udGVudCA9IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIChmaWxlQ29udGVudCk7XG4gICAgICAgIGxldCBnbHRmID0gSlNPTi5wYXJzZSAodGV4dENvbnRlbnQpO1xuICAgICAgICBpZiAoZ2x0Zi5hc3NldC52ZXJzaW9uICE9PSAnMi4wJykge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ludmFsaWQgZ2xURiB2ZXJzaW9uLicpO1xuICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdsdGYuYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICBsZXQgZ2x0ZkJ1ZmZlciA9IGdsdGYuYnVmZmVyc1tpXTtcbiAgICAgICAgICAgIGxldCBiYXNlNjRCdWZmZXIgPSBCYXNlNjREYXRhVVJJVG9BcnJheUJ1ZmZlciAoZ2x0ZkJ1ZmZlci51cmkpO1xuICAgICAgICAgICAgaWYgKGJhc2U2NEJ1ZmZlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJhc2U2NEJ1ZmZlci5idWZmZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBmaWxlQnVmZmVyID0gdGhpcy5jYWxsYmFja3MuZ2V0RmlsZUJ1ZmZlciAoZ2x0ZkJ1ZmZlci51cmkpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlQnVmZmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGZpbGVCdWZmZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdPbmUgb2YgdGhlIHJlcXVlc3RlZCBidWZmZXJzIGlzIG1pc3NpbmcuJyk7XG4gICAgICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5idWZmZXJDb250ZW50cy5wdXNoIChidWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5Qcm9jZXNzTWFpbkZpbGUgKGdsdGYsIG9uRmluaXNoKTtcbiAgICB9XG5cbiAgICBQcm9jZXNzQmluYXJ5R2x0ZiAoZmlsZUNvbnRlbnQsIG9uRmluaXNoKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gUmVhZENodW5rIChyZWFkZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBsZW5ndGggPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjMyICgpO1xuICAgICAgICAgICAgbGV0IHR5cGUgPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjMyICgpO1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IHJlYWRlci5SZWFkQXJyYXlCdWZmZXIgKGxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGUgOiB0eXBlLFxuICAgICAgICAgICAgICAgIGJ1ZmZlciA6IGJ1ZmZlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgQmluYXJ5UmVhZGVyIChmaWxlQ29udGVudCwgdHJ1ZSk7XG4gICAgICAgIGxldCBtYWdpYyA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgIGlmIChtYWdpYyAhPT0gR2x0ZkNvbnN0YW50cy5HTFRGX1NUUklORykge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ludmFsaWQgZ2xURiBmaWxlLicpO1xuICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZlcnNpb24gPSByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjMyICgpO1xuICAgICAgICBpZiAodmVyc2lvbiAhPT0gMikge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ludmFsaWQgZ2xURiB2ZXJzaW9uLicpO1xuICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlbmd0aCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHJlYWRlci5HZXRCeXRlTGVuZ3RoICgpKSB7XG4gICAgICAgICAgICB0aGlzLlNldEVycm9yICgnSW52YWxpZCBnbFRGIGZpbGUuJyk7XG4gICAgICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBnbHRmVGV4dENvbnRlbnQgPSBudWxsO1xuICAgICAgICB3aGlsZSAoIXJlYWRlci5FbmQgKCkpIHtcbiAgICAgICAgICAgIGxldCBjaHVuayA9IFJlYWRDaHVuayAocmVhZGVyKTtcbiAgICAgICAgICAgIGlmIChjaHVuay50eXBlID09PSBHbHRmQ29uc3RhbnRzLkpTT05fQ0hVTktfVFlQRSkge1xuICAgICAgICAgICAgICAgIGdsdGZUZXh0Q29udGVudCA9IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIChjaHVuay5idWZmZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVuay50eXBlID09PSBHbHRmQ29uc3RhbnRzLkJJTkFSWV9DSFVOS19UWVBFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJDb250ZW50cy5wdXNoIChjaHVuay5idWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsdGZUZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGdsdGYgPSBKU09OLnBhcnNlIChnbHRmVGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5Qcm9jZXNzTWFpbkZpbGUgKGdsdGYsIG9uRmluaXNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFByb2Nlc3NNYWluRmlsZSAoZ2x0Ziwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBsZXQgdW5zdXBwb3J0ZWRFeHRlbnNpb25zID0gdGhpcy5nbHRmRXh0ZW5zaW9ucy5HZXRVbnN1cHBvcnRlZEV4dGVuc2lvbnMgKGdsdGYuZXh0ZW5zaW9uc1JlcXVpcmVkKTtcbiAgICAgICAgaWYgKHVuc3VwcG9ydGVkRXh0ZW5zaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLlNldEVycm9yICgnVW5zdXBwb3J0ZWQgZXh0ZW5zaW9uOiAnICsgdW5zdXBwb3J0ZWRFeHRlbnNpb25zLmpvaW4gKCcsICcpICsgJy4nKTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbHRmRXh0ZW5zaW9ucy5Mb2FkTGlicmFyaWVzIChnbHRmLmV4dGVuc2lvbnNSZXF1aXJlZCwge1xuICAgICAgICAgICAgb25TdWNjZXNzIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuSW1wb3J0TW9kZWwgKGdsdGYpO1xuICAgICAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRXJyb3IgOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBJbXBvcnRNb2RlbCAoZ2x0ZilcbiAgICB7XG4gICAgICAgIGxldCBtYXRlcmlhbHMgPSBnbHRmLm1hdGVyaWFscztcbiAgICAgICAgaWYgKG1hdGVyaWFscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBtYXRlcmlhbCBvZiBtYXRlcmlhbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkltcG9ydE1hdGVyaWFsIChnbHRmLCBtYXRlcmlhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWVzaGVzID0gZ2x0Zi5tZXNoZXM7XG4gICAgICAgIGlmIChtZXNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgbWVzaCBvZiBtZXNoZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkltcG9ydE1lc2ggKGdsdGYsIG1lc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5JbXBvcnRQcm9wZXJ0aWVzICh0aGlzLm1vZGVsLCBnbHRmLmFzc2V0LCAnQXNzZXQgcHJvcGVydGllcycpO1xuICAgICAgICB0aGlzLkltcG9ydFNjZW5lIChnbHRmKTtcbiAgICB9XG5cbiAgICBJbXBvcnRQcm9wZXJ0aWVzIChtb2RlbE9iamVjdCwgZ2x0Zk9iamVjdCwgcHJvcGVydHlHcm91cE5hbWUpXG4gICAge1xuICAgICAgICBpZiAoZ2x0Zk9iamVjdCA9PT0gdW5kZWZpbmVkIHx8IGdsdGZPYmplY3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcm9wZXJ0eUdyb3VwID0gbmV3IFByb3BlcnR5R3JvdXAgKHByb3BlcnR5R3JvdXBOYW1lKTtcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIGluIGdsdGZPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwgKGdsdGZPYmplY3QsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZ2x0Zk9iamVjdFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHlWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5UZXh0LCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BlcnR5VmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyIChwcm9wZXJ0eVZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5JbnRlZ2VyLCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5OdW1iZXIsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5R3JvdXAuQWRkUHJvcGVydHkgKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcGVydHlHcm91cC5Qcm9wZXJ0eUNvdW50ICgpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbE9iamVjdC5BZGRQcm9wZXJ0eUdyb3VwIChwcm9wZXJ0eUdyb3VwKTtcbiAgICB9XG5cbiAgICBHZXREZWZhdWx0U2NlbmUgKGdsdGYpXG4gICAge1xuICAgICAgICBsZXQgZGVmYXVsdFNjZW5lSW5kZXggPSBnbHRmLnNjZW5lIHx8IDA7XG4gICAgICAgIGlmIChkZWZhdWx0U2NlbmVJbmRleCA+PSBnbHRmLnNjZW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbHRmLnNjZW5lc1tkZWZhdWx0U2NlbmVJbmRleF07XG4gICAgfVxuXG4gICAgSW1wb3J0TWF0ZXJpYWwgKGdsdGYsIGdsdGZNYXRlcmlhbClcbiAgICB7XG4gICAgICAgIGxldCBtYXRlcmlhbCA9IG5ldyBQaHlzaWNhbE1hdGVyaWFsICgpO1xuICAgICAgICBpZiAoZ2x0Zk1hdGVyaWFsLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IGdsdGZNYXRlcmlhbC5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0ZXJpYWwuY29sb3IgPSBHZXRHbHRmQ29sb3IgKFsxLjAsIDEuMCwgMS4wXSk7XG4gICAgICAgIGlmIChnbHRmTWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGJhc2VDb2xvciA9IGdsdGZNYXRlcmlhbC5wYnJNZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7XG4gICAgICAgICAgICBpZiAoYmFzZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5jb2xvciA9IEdldEdsdGZDb2xvciAoYmFzZUNvbG9yKTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5vcGFjaXR5ID0gYmFzZUNvbG9yWzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1ldGFsbGljRmFjdG9yID0gZ2x0Zk1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yO1xuICAgICAgICAgICAgaWYgKG1ldGFsbGljRmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5tZXRhbG5lc3MgPSBtZXRhbGxpY0ZhY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByb3VnaG5lc3NGYWN0b3IgPSBnbHRmTWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yO1xuICAgICAgICAgICAgaWYgKHJvdWdobmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzID0gcm91Z2huZXNzRmFjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVtaXNzaXZlQ29sb3IgPSBnbHRmTWF0ZXJpYWwuZW1pc3NpdmVGYWN0b3I7XG4gICAgICAgICAgICBpZiAoZW1pc3NpdmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmUgPSBHZXRHbHRmQ29sb3IgKGVtaXNzaXZlQ29sb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbC5kaWZmdXNlTWFwID0gdGhpcy5JbXBvcnRUZXh0dXJlIChnbHRmLCBnbHRmTWF0ZXJpYWwucGJyTWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSk7XG4gICAgICAgICAgICBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSB0aGlzLkltcG9ydFRleHR1cmUgKGdsdGYsIGdsdGZNYXRlcmlhbC5wYnJNZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUpO1xuICAgICAgICAgICAgbWF0ZXJpYWwubm9ybWFsTWFwID0gdGhpcy5JbXBvcnRUZXh0dXJlIChnbHRmLCBnbHRmTWF0ZXJpYWwubm9ybWFsVGV4dHVyZSk7XG4gICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IHRoaXMuSW1wb3J0VGV4dHVyZSAoZ2x0ZiwgZ2x0Zk1hdGVyaWFsLmVtaXNzaXZlVGV4dHVyZSk7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuZGlmZnVzZU1hcCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLm11bHRpcGx5RGlmZnVzZU1hcCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBhbHBoYU1vZGUgPSBnbHRmTWF0ZXJpYWwuYWxwaGFNb2RlO1xuICAgICAgICAgICAgaWYgKGFscGhhTW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhTW9kZSA9PT0gJ0JMRU5EJykge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHBoYU1vZGUgPT09ICdNQVNLJykge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFscGhhVGVzdCA9IGdsdGZNYXRlcmlhbC5hbHBoYUN1dG9mZiB8fCAwLjU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld01hdGVyaWFsID0gdGhpcy5nbHRmRXh0ZW5zaW9ucy5Qcm9jZXNzTWF0ZXJpYWwgKGdsdGZNYXRlcmlhbCwgbWF0ZXJpYWwsICh0ZXh0dXJlUmVmKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5JbXBvcnRUZXh0dXJlIChnbHRmLCB0ZXh0dXJlUmVmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdNYXRlcmlhbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXdNYXRlcmlhbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsLkFkZE1hdGVyaWFsIChtYXRlcmlhbCk7XG4gICAgfVxuXG4gICAgSW1wb3J0VGV4dHVyZSAoZ2x0ZiwgZ2x0ZlRleHR1cmVSZWYpXG4gICAge1xuICAgICAgICBpZiAoZ2x0ZlRleHR1cmVSZWYgPT09IHVuZGVmaW5lZCB8fCBnbHRmVGV4dHVyZVJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGV4dHVyZSA9IG5ldyBUZXh0dXJlTWFwICgpO1xuICAgICAgICBsZXQgZ2x0ZlRleHR1cmUgPSBnbHRmLnRleHR1cmVzW2dsdGZUZXh0dXJlUmVmLmluZGV4XTtcbiAgICAgICAgbGV0IGdsdGZJbWFnZUluZGV4ID0gZ2x0ZlRleHR1cmUuc291cmNlO1xuICAgICAgICBsZXQgZ2x0ZkltYWdlID0gZ2x0Zi5pbWFnZXNbZ2x0ZkltYWdlSW5kZXhdO1xuXG4gICAgICAgIGxldCB0ZXh0dXJlUGFyYW1zID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VJbmRleFRvVGV4dHVyZVBhcmFtcy5oYXMgKGdsdGZJbWFnZUluZGV4KSkge1xuICAgICAgICAgICAgdGV4dHVyZVBhcmFtcyA9IHRoaXMuaW1hZ2VJbmRleFRvVGV4dHVyZVBhcmFtcy5nZXQgKGdsdGZJbWFnZUluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHR1cmVQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgbWltZVR5cGUgOiBudWxsLFxuICAgICAgICAgICAgICAgIGJ1ZmZlciA6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgdGV4dHVyZUluZGV4U3RyaW5nID0gZ2x0ZkltYWdlSW5kZXgudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBpZiAoZ2x0ZkltYWdlLnVyaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJhc2U2NEJ1ZmZlciA9IEJhc2U2NERhdGFVUklUb0FycmF5QnVmZmVyIChnbHRmSW1hZ2UudXJpKTtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZTY0QnVmZmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVQYXJhbXMubmFtZSA9ICdFbWJlZGRlZF8nICsgdGV4dHVyZUluZGV4U3RyaW5nICsgJy4nICsgR2V0RmlsZUV4dGVuc2lvbkZyb21NaW1lVHlwZSAoYmFzZTY0QnVmZmVyLm1pbWVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVBhcmFtcy5taW1lVHlwZSA9IGJhc2U2NEJ1ZmZlci5taW1lVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVBhcmFtcy5idWZmZXIgPSBiYXNlNjRCdWZmZXIuYnVmZmVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gdGhpcy5jYWxsYmFja3MuZ2V0RmlsZUJ1ZmZlciAoZ2x0ZkltYWdlLnVyaSk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVQYXJhbXMubmFtZSA9IGdsdGZJbWFnZS51cmk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVQYXJhbXMuYnVmZmVyID0gdGV4dHVyZUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdsdGZJbWFnZS5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3NbZ2x0ZkltYWdlLmJ1ZmZlclZpZXddO1xuICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSB0aGlzLkdldFJlYWRlckZyb21CdWZmZXJWaWV3IChidWZmZXJWaWV3KTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBidWZmZXIgPSByZWFkZXIuUmVhZEFycmF5QnVmZmVyIChidWZmZXJWaWV3LmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlUGFyYW1zLm5hbWUgPSAnQmluYXJ5XycgKyB0ZXh0dXJlSW5kZXhTdHJpbmcgKyAnLicgKyBHZXRGaWxlRXh0ZW5zaW9uRnJvbU1pbWVUeXBlIChnbHRmSW1hZ2UubWltZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlUGFyYW1zLm1pbWVUeXBlID0gZ2x0ZkltYWdlLm1pbWVUeXBlO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlUGFyYW1zLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmltYWdlSW5kZXhUb1RleHR1cmVQYXJhbXMuc2V0IChnbHRmSW1hZ2VJbmRleCwgdGV4dHVyZVBhcmFtcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlUGFyYW1zLm5hbWU7XG4gICAgICAgIHRleHR1cmUubWltZVR5cGUgPSB0ZXh0dXJlUGFyYW1zLm1pbWVUeXBlO1xuICAgICAgICB0ZXh0dXJlLmJ1ZmZlciA9IHRleHR1cmVQYXJhbXMuYnVmZmVyO1xuXG4gICAgICAgIHRoaXMuZ2x0ZkV4dGVuc2lvbnMuUHJvY2Vzc1RleHR1cmUgKGdsdGZUZXh0dXJlUmVmLCB0ZXh0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfVxuXG4gICAgSW1wb3J0TWVzaCAoZ2x0ZiwgZ2x0Zk1lc2gpXG4gICAge1xuICAgICAgICBsZXQgbWVzaCA9IG5ldyBNZXNoICgpO1xuXG4gICAgICAgIHRoaXMubW9kZWwuQWRkTWVzaCAobWVzaCk7XG4gICAgICAgIGlmIChnbHRmTWVzaC5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc2guU2V0TmFtZSAoZ2x0Zk1lc2gubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdsdGZNZXNoLnByaW1pdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmltaXRpdmUgPSBnbHRmTWVzaC5wcmltaXRpdmVzW2ldO1xuICAgICAgICAgICAgdGhpcy5JbXBvcnRQcmltaXRpdmUgKGdsdGYsIHByaW1pdGl2ZSwgbWVzaCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkltcG9ydFByb3BlcnRpZXMgKG1lc2gsIGdsdGZNZXNoLmV4dHJhcywgJ01lc2ggcHJvcGVydGllcycpO1xuICAgIH1cblxuICAgIEltcG9ydFByaW1pdGl2ZSAoZ2x0ZiwgcHJpbWl0aXZlLCBtZXNoKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gSGFzQXR0cmlidXRlIChnbHRmLCBwcmltaXRpdmUsIGF0dHJpYnV0ZU5hbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBhY2Nlc3NvckluZGV4ID0gcHJpbWl0aXZlLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG4gICAgICAgICAgICBpZiAoYWNjZXNzb3JJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGFjY2Vzc29yID0gZ2x0Zi5hY2Nlc3NvcnNbYWNjZXNzb3JJbmRleF07XG4gICAgICAgICAgICBpZiAoYWNjZXNzb3IgPT09IHVuZGVmaW5lZCB8fCBhY2Nlc3Nvci5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZ2x0ZkV4dGVuc2lvbnMuUHJvY2Vzc1ByaW1pdGl2ZSAodGhpcywgZ2x0ZiwgcHJpbWl0aXZlLCBtZXNoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByaW1pdGl2ZS5hdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoYXNWZXJ0aWNlcyA9IEhhc0F0dHJpYnV0ZSAoZ2x0ZiwgcHJpbWl0aXZlLCAnUE9TSVRJT04nKTtcbiAgICAgICAgbGV0IGhhc1ZlcnRleENvbG9ycyA9IEhhc0F0dHJpYnV0ZSAoZ2x0ZiwgcHJpbWl0aXZlLCAnQ09MT1JfMCcpO1xuICAgICAgICBsZXQgaGFzTm9ybWFscyA9IEhhc0F0dHJpYnV0ZSAoZ2x0ZiwgcHJpbWl0aXZlLCAnTk9STUFMJyk7XG4gICAgICAgIGxldCBoYXNVVnMgPSBIYXNBdHRyaWJ1dGUgKGdsdGYsIHByaW1pdGl2ZSwgJ1RFWENPT1JEXzAnKTtcbiAgICAgICAgbGV0IGhhc0luZGljZXMgPSAocHJpbWl0aXZlLmluZGljZXMgIT09IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgbGV0IG1vZGUgPSBHbHRmUmVuZGVyTW9kZS5UUklBTkdMRVM7XG4gICAgICAgIGlmIChwcmltaXRpdmUubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtb2RlID0gcHJpbWl0aXZlLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGUgIT09IEdsdGZSZW5kZXJNb2RlLlRSSUFOR0xFUyAmJiBtb2RlICE9PSBHbHRmUmVuZGVyTW9kZS5UUklBTkdMRV9TVFJJUCAmJiBtb2RlICE9PSBHbHRmUmVuZGVyTW9kZS5UUklBTkdMRV9GQU4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2ZXJ0ZXhPZmZzZXQgPSBtZXNoLlZlcnRleENvdW50ICgpO1xuICAgICAgICBsZXQgdmVydGV4Q29sb3JPZmZzZXQgPSBtZXNoLlZlcnRleENvbG9yQ291bnQgKCk7XG4gICAgICAgIGxldCBub3JtYWxPZmZzZXQgPSBtZXNoLk5vcm1hbENvdW50ICgpO1xuICAgICAgICBsZXQgdXZPZmZzZXQgPSBtZXNoLlRleHR1cmVVVkNvdW50ICgpO1xuXG4gICAgICAgIGlmIChoYXNWZXJ0aWNlcykge1xuICAgICAgICAgICAgbGV0IGFjY2Vzc29yID0gZ2x0Zi5hY2Nlc3NvcnNbcHJpbWl0aXZlLmF0dHJpYnV0ZXMuUE9TSVRJT05dO1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IHRoaXMuR2V0UmVhZGVyRnJvbUFjY2Vzc29yIChnbHRmLCBhY2Nlc3Nvcik7XG4gICAgICAgICAgICBpZiAocmVhZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLkVudW1lcmF0ZURhdGEgKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGRWZXJ0ZXggKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmVydGV4Q291bnQgPSBtZXNoLlZlcnRleENvdW50ICgpIC0gdmVydGV4T2Zmc2V0O1xuXG4gICAgICAgIGlmIChoYXNWZXJ0ZXhDb2xvcnMpIHtcbiAgICAgICAgICAgIGxldCBhY2Nlc3NvciA9IGdsdGYuYWNjZXNzb3JzW3ByaW1pdGl2ZS5hdHRyaWJ1dGVzLkNPTE9SXzBdO1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IHRoaXMuR2V0UmVhZGVyRnJvbUFjY2Vzc29yIChnbHRmLCBhY2Nlc3Nvcik7XG4gICAgICAgICAgICBpZiAocmVhZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLkVudW1lcmF0ZURhdGEgKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gR2V0R2x0ZlZlcnRleENvbG9yIChbZGF0YS54LCBkYXRhLnksIGRhdGEuel0sIHJlYWRlci5jb21wb25lbnRUeXBlKTtcbiAgICAgICAgICAgICAgICBtZXNoLkFkZFZlcnRleENvbG9yIChjb2xvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChtZXNoLlZlcnRleENvbG9yQ291bnQgKCkgLSB2ZXJ0ZXhDb2xvck9mZnNldCAhPT0gdmVydGV4Q291bnQpIHtcbiAgICAgICAgICAgICAgICBoYXNWZXJ0ZXhDb2xvcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNOb3JtYWxzKSB7XG4gICAgICAgICAgICBsZXQgYWNjZXNzb3IgPSBnbHRmLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5OT1JNQUxdO1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IHRoaXMuR2V0UmVhZGVyRnJvbUFjY2Vzc29yIChnbHRmLCBhY2Nlc3Nvcik7XG4gICAgICAgICAgICBpZiAocmVhZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZGVyLkVudW1lcmF0ZURhdGEgKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGROb3JtYWwgKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobWVzaC5Ob3JtYWxDb3VudCAoKSAtIG5vcm1hbE9mZnNldCAhPT0gdmVydGV4Q291bnQpIHtcbiAgICAgICAgICAgICAgICBoYXNOb3JtYWxzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVVZzKSB7XG4gICAgICAgICAgICBsZXQgYWNjZXNzb3IgPSBnbHRmLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlcy5URVhDT09SRF8wXTtcbiAgICAgICAgICAgIGxldCByZWFkZXIgPSB0aGlzLkdldFJlYWRlckZyb21BY2Nlc3NvciAoZ2x0ZiwgYWNjZXNzb3IpO1xuICAgICAgICAgICAgaWYgKHJlYWRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5FbnVtZXJhdGVEYXRhICgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGRhdGEueSA9IC1kYXRhLnk7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGRUZXh0dXJlVVYgKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobWVzaC5UZXh0dXJlVVZDb3VudCAoKSAtIHV2T2Zmc2V0ICE9PSB2ZXJ0ZXhDb3VudCkge1xuICAgICAgICAgICAgICAgIGhhc1VWcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHZlcnRleEluZGljZXMgPSBbXTtcbiAgICAgICAgaWYgKGhhc0luZGljZXMpIHtcbiAgICAgICAgICAgIGxldCBhY2Nlc3NvciA9IGdsdGYuYWNjZXNzb3JzW3ByaW1pdGl2ZS5pbmRpY2VzXTtcbiAgICAgICAgICAgIGxldCByZWFkZXIgPSB0aGlzLkdldFJlYWRlckZyb21BY2Nlc3NvciAoZ2x0ZiwgYWNjZXNzb3IpO1xuICAgICAgICAgICAgaWYgKHJlYWRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRlci5FbnVtZXJhdGVEYXRhICgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHZlcnRleEluZGljZXMucHVzaCAoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwcmltaXRpdmVWZXJ0ZXhDb3VudCA9IG1lc2guVmVydGV4Q291bnQgKCkgLSB2ZXJ0ZXhPZmZzZXQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByaW1pdGl2ZVZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhJbmRpY2VzLnB1c2ggKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGUgPT09IEdsdGZSZW5kZXJNb2RlLlRSSUFOR0xFUykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHYwID0gdmVydGV4SW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdjEgPSB2ZXJ0ZXhJbmRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBsZXQgdjIgPSB2ZXJ0ZXhJbmRpY2VzW2kgKyAyXTtcbiAgICAgICAgICAgICAgICB0aGlzLkFkZFRyaWFuZ2xlIChwcmltaXRpdmUsIG1lc2gsIHYwLCB2MSwgdjIsIGhhc1ZlcnRleENvbG9ycywgaGFzTm9ybWFscywgaGFzVVZzLCB2ZXJ0ZXhPZmZzZXQsIHZlcnRleENvbG9yT2Zmc2V0LCBub3JtYWxPZmZzZXQsIHV2T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBHbHRmUmVuZGVyTW9kZS5UUklBTkdMRV9TVFJJUCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB2MCA9IHZlcnRleEluZGljZXNbaV07XG4gICAgICAgICAgICAgICAgbGV0IHYxID0gdmVydGV4SW5kaWNlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgbGV0IHYyID0gdmVydGV4SW5kaWNlc1tpICsgMl07XG4gICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXAgPSB2MTtcbiAgICAgICAgICAgICAgICAgICAgdjEgPSB2MjtcbiAgICAgICAgICAgICAgICAgICAgdjIgPSB0bXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuQWRkVHJpYW5nbGUgKHByaW1pdGl2ZSwgbWVzaCwgdjAsIHYxLCB2MiwgaGFzVmVydGV4Q29sb3JzLCBoYXNOb3JtYWxzLCBoYXNVVnMsIHZlcnRleE9mZnNldCwgdmVydGV4Q29sb3JPZmZzZXQsIG5vcm1hbE9mZnNldCwgdXZPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IEdsdGZSZW5kZXJNb2RlLlRSSUFOR0xFX0ZBTikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB2MCA9IHZlcnRleEluZGljZXNbMF07XG4gICAgICAgICAgICAgICAgbGV0IHYxID0gdmVydGV4SW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdjIgPSB2ZXJ0ZXhJbmRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB0aGlzLkFkZFRyaWFuZ2xlIChwcmltaXRpdmUsIG1lc2gsIHYwLCB2MSwgdjIsIGhhc1ZlcnRleENvbG9ycywgaGFzTm9ybWFscywgaGFzVVZzLCB2ZXJ0ZXhPZmZzZXQsIHZlcnRleENvbG9yT2Zmc2V0LCBub3JtYWxPZmZzZXQsIHV2T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEFkZFRyaWFuZ2xlIChwcmltaXRpdmUsIG1lc2gsIHYwLCB2MSwgdjIsIGhhc1ZlcnRleENvbG9ycywgaGFzTm9ybWFscywgaGFzVVZzLCB2ZXJ0ZXhPZmZzZXQsIHZlcnRleENvbG9yT2Zmc2V0LCBub3JtYWxPZmZzZXQsIHV2T2Zmc2V0KVxuICAgIHtcbiAgICAgICAgbGV0IHRyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlIChcbiAgICAgICAgICAgIHZlcnRleE9mZnNldCArIHYwLFxuICAgICAgICAgICAgdmVydGV4T2Zmc2V0ICsgdjEsXG4gICAgICAgICAgICB2ZXJ0ZXhPZmZzZXQgKyB2MlxuICAgICAgICApO1xuICAgICAgICBpZiAoaGFzVmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXRWZXJ0ZXhDb2xvcnMgKFxuICAgICAgICAgICAgICAgIHZlcnRleENvbG9yT2Zmc2V0ICsgdjAsXG4gICAgICAgICAgICAgICAgdmVydGV4Q29sb3JPZmZzZXQgKyB2MSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhDb2xvck9mZnNldCArIHYyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNOb3JtYWxzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXROb3JtYWxzIChcbiAgICAgICAgICAgICAgICBub3JtYWxPZmZzZXQgKyB2MCxcbiAgICAgICAgICAgICAgICBub3JtYWxPZmZzZXQgKyB2MSxcbiAgICAgICAgICAgICAgICBub3JtYWxPZmZzZXQgKyB2MlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzVVZzKSB7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXRUZXh0dXJlVVZzIChcbiAgICAgICAgICAgICAgICB1dk9mZnNldCArIHYwLFxuICAgICAgICAgICAgICAgIHV2T2Zmc2V0ICsgdjEsXG4gICAgICAgICAgICAgICAgdXZPZmZzZXQgKyB2MlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpbWl0aXZlLm1hdGVyaWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyaWFuZ2xlLm1hdCA9IHByaW1pdGl2ZS5tYXRlcmlhbDtcbiAgICAgICAgfVxuICAgICAgICBtZXNoLkFkZFRyaWFuZ2xlICh0cmlhbmdsZSk7XG4gICAgfVxuXG4gICAgSW1wb3J0U2NlbmUgKGdsdGYpXG4gICAge1xuICAgICAgICBsZXQgc2NlbmUgPSB0aGlzLkdldERlZmF1bHRTY2VuZSAoZ2x0Zik7XG4gICAgICAgIGlmIChzY2VuZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJvb3ROb2RlID0gdGhpcy5tb2RlbC5HZXRSb290Tm9kZSAoKTtcbiAgICAgICAgZm9yIChsZXQgbm9kZUluZGV4IG9mIHNjZW5lLm5vZGVzKSB7XG4gICAgICAgICAgICBsZXQgZ2x0Zk5vZGUgPSBnbHRmLm5vZGVzW25vZGVJbmRleF07XG4gICAgICAgICAgICB0aGlzLkltcG9ydE5vZGUgKGdsdGYsIGdsdGZOb2RlLCByb290Tm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkltcG9ydFByb3BlcnRpZXMgKHRoaXMubW9kZWwsIHNjZW5lLmV4dHJhcywgJ1NjZW5lIHByb3BlcnRpZXMnKTtcbiAgICB9XG5cbiAgICBJbXBvcnROb2RlIChnbHRmLCBnbHRmTm9kZSwgcGFyZW50Tm9kZSlcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIEdldE5vZGVUcmFuc2Zvcm1hdGlvbiAoZ2x0Zk5vZGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4ICgpLkNyZWF0ZUlkZW50aXR5ICgpO1xuICAgICAgICAgICAgaWYgKGdsdGZOb2RlLm1hdHJpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF0cml4LlNldCAoZ2x0Zk5vZGUubWF0cml4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zbGF0aW9uID0gWzAuMCwgMC4wLCAwLjBdO1xuICAgICAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IFswLjAsIDAuMCwgMC4wLCAxLjBdO1xuICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IFsxLjAsIDEuMCwgMS4wXTtcbiAgICAgICAgICAgICAgICBpZiAoZ2x0Zk5vZGUudHJhbnNsYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGdsdGZOb2RlLnRyYW5zbGF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2x0Zk5vZGUucm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGdsdGZOb2RlLnJvdGF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2x0Zk5vZGUuc2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IGdsdGZOb2RlLnNjYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXRyaXguQ29tcG9zZVRSUyAoXG4gICAgICAgICAgICAgICAgICAgIEFycmF5VG9Db29yZDNEICh0cmFuc2xhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIEFycmF5VG9RdWF0ZXJuaW9uIChyb3RhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIEFycmF5VG9Db29yZDNEIChzY2FsZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbiAobWF0cml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbHRmTm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkICYmIGdsdGZOb2RlLm1lc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5vZGUgPSBuZXcgTm9kZSAoKTtcbiAgICAgICAgaWYgKGdsdGZOb2RlLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbm9kZS5TZXROYW1lIChnbHRmTm9kZS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLlNldFRyYW5zZm9ybWF0aW9uIChHZXROb2RlVHJhbnNmb3JtYXRpb24gKGdsdGZOb2RlKSk7XG4gICAgICAgIHBhcmVudE5vZGUuQWRkQ2hpbGROb2RlIChub2RlKTtcblxuICAgICAgICBpZiAoZ2x0Zk5vZGUuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGRJbmRleCBvZiBnbHRmTm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZEdsdGZOb2RlID0gZ2x0Zi5ub2Rlc1tjaGlsZEluZGV4XTtcbiAgICAgICAgICAgICAgICB0aGlzLkltcG9ydE5vZGUgKGdsdGYsIGNoaWxkR2x0Zk5vZGUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsdGZOb2RlLm1lc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IG1lc2ggPSB0aGlzLm1vZGVsLkdldE1lc2ggKGdsdGZOb2RlLm1lc2gpO1xuICAgICAgICAgICAgdGhpcy5JbXBvcnRQcm9wZXJ0aWVzIChtZXNoLCBnbHRmTm9kZS5leHRyYXMsICdOb2RlIHByb3BlcnRpZXMnKTtcbiAgICAgICAgICAgIG5vZGUuQWRkTWVzaEluZGV4IChnbHRmTm9kZS5tZXNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEdldFJlYWRlckZyb21CdWZmZXJWaWV3IChidWZmZXJWaWV3KVxuICAgIHtcbiAgICAgICAgbGV0IGJ1ZmZlckluZGV4ID0gYnVmZmVyVmlldy5idWZmZXIgfHwgMDtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyQ29udGVudHNbYnVmZmVySW5kZXhdO1xuICAgICAgICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQgfHwgYnVmZmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgR2x0ZkJ1ZmZlclJlYWRlciAoYnVmZmVyKTtcbiAgICAgICAgcmVhZGVyLlNraXBCeXRlcyAoYnVmZmVyVmlldy5ieXRlT2Zmc2V0IHx8IDApO1xuICAgICAgICBsZXQgYnl0ZVN0cmlkZSA9IGJ1ZmZlclZpZXcuYnl0ZVN0cmlkZTtcbiAgICAgICAgaWYgKGJ5dGVTdHJpZGUgIT09IHVuZGVmaW5lZCAmJiBieXRlU3RyaWRlICE9PSAwKSB7XG4gICAgICAgICAgICByZWFkZXIuU2V0Qnl0ZVN0cmlkZSAoYnl0ZVN0cmlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVhZGVyO1xuICAgIH1cblxuICAgIEdldFJlYWRlckZyb21BY2Nlc3NvciAoZ2x0ZiwgYWNjZXNzb3IpXG4gICAge1xuICAgICAgICBsZXQgYnVmZmVyVmlld0luZGV4ID0gYWNjZXNzb3IuYnVmZmVyVmlldyB8fCAwO1xuICAgICAgICBsZXQgYnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3NbYnVmZmVyVmlld0luZGV4XTtcbiAgICAgICAgbGV0IHJlYWRlciA9IHRoaXMuR2V0UmVhZGVyRnJvbUJ1ZmZlclZpZXcgKGJ1ZmZlclZpZXcpO1xuICAgICAgICBpZiAocmVhZGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlYWRlci5TZXRDb21wb25lbnRUeXBlIChhY2Nlc3Nvci5jb21wb25lbnRUeXBlKTtcbiAgICAgICAgcmVhZGVyLlNldERhdGFUeXBlIChhY2Nlc3Nvci50eXBlKTtcbiAgICAgICAgcmVhZGVyLlNldERhdGFDb3VudCAoYWNjZXNzb3IuY291bnQpO1xuICAgICAgICByZWFkZXIuU2tpcEJ5dGVzIChhY2Nlc3Nvci5ieXRlT2Zmc2V0IHx8IDApO1xuXG4gICAgICAgIGlmIChhY2Nlc3Nvci5zcGFyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGluZGV4UmVhZGVyID0gdGhpcy5HZXRSZWFkZXJGcm9tU3BhcnNlQWNjZXNzb3IgKGdsdGYsIGFjY2Vzc29yLnNwYXJzZS5pbmRpY2VzLCBhY2Nlc3Nvci5zcGFyc2UuaW5kaWNlcy5jb21wb25lbnRUeXBlLCAnU0NBTEFSJywgYWNjZXNzb3Iuc3BhcnNlLmNvdW50KTtcbiAgICAgICAgICAgIGxldCB2YWx1ZVJlYWRlciA9IHRoaXMuR2V0UmVhZGVyRnJvbVNwYXJzZUFjY2Vzc29yIChnbHRmLCBhY2Nlc3Nvci5zcGFyc2UudmFsdWVzLCBhY2Nlc3Nvci5jb21wb25lbnRUeXBlLCBhY2Nlc3Nvci50eXBlLCBhY2Nlc3Nvci5zcGFyc2UuY291bnQpO1xuICAgICAgICAgICAgaWYgKGluZGV4UmVhZGVyICE9PSBudWxsICYmIHZhbHVlUmVhZGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLlNldFNwYXJzZVJlYWRlciAoaW5kZXhSZWFkZXIsIHZhbHVlUmVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhZGVyO1xuICAgIH1cblxuICAgIEdldFJlYWRlckZyb21TcGFyc2VBY2Nlc3NvciAoZ2x0Ziwgc3BhcnNlQWNjZXNzb3IsIGNvbXBvbmVudFR5cGUsIHR5cGUsIGNvdW50KVxuICAgIHtcbiAgICAgICAgaWYgKHNwYXJzZUFjY2Vzc29yLmJ1ZmZlclZpZXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3Nbc3BhcnNlQWNjZXNzb3IuYnVmZmVyVmlld107XG4gICAgICAgIGxldCByZWFkZXIgPSB0aGlzLkdldFJlYWRlckZyb21CdWZmZXJWaWV3IChidWZmZXJWaWV3KTtcbiAgICAgICAgaWYgKHJlYWRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZWFkZXIuU2V0Q29tcG9uZW50VHlwZSAoY29tcG9uZW50VHlwZSk7XG4gICAgICAgIHJlYWRlci5TZXREYXRhVHlwZSAodHlwZSk7XG4gICAgICAgIHJlYWRlci5TZXREYXRhQ291bnQgKGNvdW50KTtcbiAgICAgICAgcmVhZGVyLlNraXBCeXRlcyAoc3BhcnNlQWNjZXNzb3IuYnl0ZU9mZnNldCB8fCAwKTtcbiAgICAgICAgcmV0dXJuIHJlYWRlcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb29yZDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXguanMnO1xuaW1wb3J0IHsgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyc7XG5pbXBvcnQgeyBMb2FkRXh0ZXJuYWxMaWJyYXJ5IH0gZnJvbSAnLi4vaW8vZXh0ZXJuYWxsaWJzLmpzJztcbmltcG9ydCB7IFJHQkNvbG9yRnJvbUZsb2F0Q29tcG9uZW50cyB9IGZyb20gJy4uL21vZGVsL2NvbG9yLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9tb2RlbC9tZXNoLmpzJztcbmltcG9ydCB7IFByb3BlcnR5LCBQcm9wZXJ0eUdyb3VwLCBQcm9wZXJ0eVR5cGUgfSBmcm9tICcuLi9tb2RlbC9wcm9wZXJ0eS5qcyc7XG5pbXBvcnQgeyBUcmlhbmdsZSB9IGZyb20gJy4uL21vZGVsL3RyaWFuZ2xlLmpzJztcbmltcG9ydCB7IEltcG9ydGVyQmFzZSB9IGZyb20gJy4vaW1wb3J0ZXJiYXNlLmpzJztcbmltcG9ydCB7IENvbG9yVG9NYXRlcmlhbENvbnZlcnRlciB9IGZyb20gJy4vaW1wb3J0ZXJ1dGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlcklmYyBleHRlbmRzIEltcG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy5pZmMgPSBudWxsO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ2lmYyc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWTtcbiAgICB9XG5cbiAgICBDbGVhckNvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZXhwcmVzc0lEVG9NZXNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb2xvclRvTWF0ZXJpYWwgPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5leHByZXNzSURUb01lc2ggPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLmNvbG9yVG9NYXRlcmlhbCA9IG5ldyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgKHRoaXMubW9kZWwpO1xuICAgIH1cblxuICAgIEltcG9ydENvbnRlbnQgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmlmYyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgTG9hZEV4dGVybmFsTGlicmFyeSAoJ2xvYWRlcnMvd2ViLWlmYy1hcGktYnJvd3Nlci5qcycpLnRoZW4gKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlmYyA9IG5ldyBXZWJJRkMuSWZjQVBJICgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaWZjLkluaXQgKCkudGhlbiAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkltcG9ydElmY0NvbnRlbnQgKGZpbGVDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaCAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdGYWlsZWQgdG8gbG9hZCB3ZWItaWZjLicpO1xuICAgICAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLkltcG9ydElmY0NvbnRlbnQgKGZpbGVDb250ZW50KTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSW1wb3J0SWZjQ29udGVudCAoZmlsZUNvbnRlbnQpXG4gICAge1xuICAgICAgICBjb25zdCBmaWxlQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGZpbGVDb250ZW50KTtcbiAgICAgICAgY29uc3QgbW9kZWxJRCA9IHRoaXMuaWZjLk9wZW5Nb2RlbCAoZmlsZUJ1ZmZlciwge1xuICAgICAgICAgICAgQ09PUkRJTkFURV9UT19PUklHSU4gOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpZmNNZXNoZXMgPSB0aGlzLmlmYy5Mb2FkQWxsR2VvbWV0cnkgKG1vZGVsSUQpO1xuICAgICAgICBmb3IgKGxldCBtZXNoSW5kZXggPSAwOyBtZXNoSW5kZXggPCBpZmNNZXNoZXMuc2l6ZSAoKTsgbWVzaEluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlmY01lc2ggPSBpZmNNZXNoZXMuZ2V0IChtZXNoSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGlmY01lc2guZ2VvbWV0cmllcy5zaXplICgpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuSW1wb3J0SWZjTWVzaCAobW9kZWxJRCwgaWZjTWVzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5JbXBvcnRQcm9wZXJ0aWVzIChtb2RlbElEKTtcbiAgICAgICAgdGhpcy5pZmMuQ2xvc2VNb2RlbCAobW9kZWxJRCk7XG4gICAgfVxuXG4gICAgSW1wb3J0SWZjTWVzaCAobW9kZWxJRCwgaWZjTWVzaClcbiAgICB7XG4gICAgICAgIGxldCBtZXNoID0gbmV3IE1lc2ggKCk7XG4gICAgICAgIG1lc2guU2V0TmFtZSAoJ01lc2ggJyArIGlmY01lc2guZXhwcmVzc0lELnRvU3RyaW5nICgpKTtcblxuICAgICAgICBsZXQgdmVydGV4T2Zmc2V0ID0gMDtcbiAgICAgICAgY29uc3QgaWZjR2VvbWV0cmllcyA9IGlmY01lc2guZ2VvbWV0cmllcztcbiAgICAgICAgZm9yIChsZXQgZ2VvbWV0cnlJbmRleCA9IDA7IGdlb21ldHJ5SW5kZXggPCBpZmNHZW9tZXRyaWVzLnNpemUgKCk7IGdlb21ldHJ5SW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgaWZjR2VvbWV0cnkgPSBpZmNHZW9tZXRyaWVzLmdldCAoZ2VvbWV0cnlJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpZmNHZW9tZXRyeURhdGEgPSB0aGlzLmlmYy5HZXRHZW9tZXRyeSAobW9kZWxJRCwgaWZjR2VvbWV0cnkuZ2VvbWV0cnlFeHByZXNzSUQpO1xuICAgICAgICAgICAgY29uc3QgaWZjVmVydGljZXMgPSB0aGlzLmlmYy5HZXRWZXJ0ZXhBcnJheSAoaWZjR2VvbWV0cnlEYXRhLkdldFZlcnRleERhdGEgKCksIGlmY0dlb21ldHJ5RGF0YS5HZXRWZXJ0ZXhEYXRhU2l6ZSAoKSk7XG4gICAgICAgICAgICBjb25zdCBpZmNJbmRpY2VzID0gdGhpcy5pZmMuR2V0SW5kZXhBcnJheSAoaWZjR2VvbWV0cnlEYXRhLkdldEluZGV4RGF0YSAoKSwgaWZjR2VvbWV0cnlEYXRhLkdldEluZGV4RGF0YVNpemUgKCkpO1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMuR2V0TWF0ZXJpYWxJbmRleEJ5Q29sb3IgKGlmY0dlb21ldHJ5LmNvbG9yKTtcbiAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXggKGlmY0dlb21ldHJ5LmZsYXRUcmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbiAobWF0cml4KTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZmNWZXJ0aWNlcy5sZW5ndGg7IGkgKz0gNikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBpZmNWZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gaWZjVmVydGljZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHogPSBpZmNWZXJ0aWNlc1tpICsgMl07XG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmQgPSBuZXcgQ29vcmQzRCAoeCwgeSwgeik7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1hdGlvbi5UcmFuc2Zvcm1Db29yZDNEIChjb29yZCk7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGRWZXJ0ZXggKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE86IG5vcm1hbHNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWZjSW5kaWNlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gaWZjSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGlmY0luZGljZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYyID0gaWZjSW5kaWNlc1tpICsgMl07XG4gICAgICAgICAgICAgICAgY29uc3QgdHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUgKFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhPZmZzZXQgKyB2MCxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4T2Zmc2V0ICsgdjEsXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleE9mZnNldCArIHYyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZS5TZXRNYXRlcmlhbCAobWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgbWVzaC5BZGRUcmlhbmdsZSAodHJpYW5nbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmVydGV4T2Zmc2V0ICs9IGlmY1ZlcnRpY2VzLmxlbmd0aCAvIDY7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV4cHJlc3NJRFRvTWVzaC5zZXQgKGlmY01lc2guZXhwcmVzc0lELCBtZXNoKTtcbiAgICAgICAgdGhpcy5tb2RlbC5BZGRNZXNoVG9Sb290Tm9kZSAobWVzaCk7XG4gICAgfVxuXG4gICAgSW1wb3J0UHJvcGVydGllcyAobW9kZWxJRClcbiAgICB7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gdGhpcy5pZmMuR2V0TGluZUlEc1dpdGhUeXBlIChtb2RlbElELCBXZWJJRkMuSUZDUkVMREVGSU5FU0JZUFJPUEVSVElFUyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMuc2l6ZSAoKTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWxJRCA9IGxpbmVzLmdldCAoaSk7XG4gICAgICAgICAgICBjb25zdCByZWwgPSB0aGlzLmlmYy5HZXRMaW5lIChtb2RlbElELCByZWxJRCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSAocmVsLlJlbGF0aW5nUHJvcGVydHlEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVsLlJlbGF0ZWRPYmplY3RzLmZvckVhY2ggKChvYmplY3RSZWxJRCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5leHByZXNzSURUb01lc2guaGFzIChvYmplY3RSZWxJRC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuZXhwcmVzc0lEVG9NZXNoLmdldCAob2JqZWN0UmVsSUQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9wU2V0T3duZXIgPSB0aGlzLmlmYy5HZXRMaW5lIChtb2RlbElELCBvYmplY3RSZWxJRC52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wU2V0T3duZXIudHlwZSA9PT0gV2ViSUZDLklGQ0JVSUxESU5HKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5tb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwcm9wU2V0RGVmID0gcmVsLlJlbGF0aW5nUHJvcGVydHlEZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIGxldCBwcm9wU2V0ID0gdGhpcy5pZmMuR2V0TGluZSAobW9kZWxJRCwgcHJvcFNldERlZi52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wU2V0IHx8ICFwcm9wU2V0Lkhhc1Byb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlHcm91cCA9IG5ldyBQcm9wZXJ0eUdyb3VwIChwcm9wU2V0Lk5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgIHByb3BTZXQuSGFzUHJvcGVydGllcy5mb3JFYWNoICgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAhcHJvcGVydHkuTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvcGVydHkuTm9taW5hbFZhbHVlIHx8ICFwcm9wZXJ0eS5Ob21pbmFsVmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkudHlwZSAhPT0gV2ViSUZDLklGQ1BST1BFUlRZU0lOR0xFVkFMVUUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlOYW1lID0gdGhpcy5HZXRJRkNTdHJpbmcgKHByb3BlcnR5Lk5hbWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbVByb3BlcnR5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0clZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eS5Ob21pbmFsVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjVGV4dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNMYWJlbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNJZGVudGlmaWVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgV2ViSUZDLklGQ0xBQkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLlRleHQsIHByb3BlcnR5TmFtZSwgdGhpcy5HZXRJRkNTdHJpbmcgKHByb3BlcnR5Lk5vbWluYWxWYWx1ZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjQm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNMb2dpY2FsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJWYWx1ZSA9ICdVbmtub3duJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkuTm9taW5hbFZhbHVlLnZhbHVlID09PSAnVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyVmFsdWUgPSAnVHJ1ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eS5Ob21pbmFsVmFsdWUudmFsdWUgPT09ICdGJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJWYWx1ZSA9ICdGYWxzZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLlRleHQsIHByb3BlcnR5TmFtZSwgc3RyVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjSW50ZWdlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNDb3VudE1lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLkludGVnZXIsIHByb3BlcnR5TmFtZSwgcHJvcGVydHkuTm9taW5hbFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lmY1JlYWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjTGVuZ3RoTWVhc3VyZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNQb3NpdGl2ZUxlbmd0aE1lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjQXJlYU1lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjVm9sdW1lTWVhc3VyZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJZmNSYXRpb01lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjUG9zaXRpdmVSQVRJT01lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjTWFzc01lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjTWFzc1Blckxlbmd0aE1lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjUGxhbmVBbmdsZU1lYXN1cmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSWZjVGhlcm1hbFRyYW5zbWl0dGFuY2VNZWFzdXJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtUHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5OdW1iZXIsIHByb3BlcnR5TmFtZSwgcHJvcGVydHkuTm9taW5hbFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ET1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIChwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1Qcm9wZXJ0eSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlHcm91cC5BZGRQcm9wZXJ0eSAoZWxlbVByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eUdyb3VwLlByb3BlcnR5Q291bnQgKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuQWRkUHJvcGVydHlHcm91cCAocHJvcGVydHlHcm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBHZXRNYXRlcmlhbEluZGV4QnlDb2xvciAoaWZjQ29sb3IpXG4gICAge1xuICAgICAgICBjb25zdCBjb2xvciA9IFJHQkNvbG9yRnJvbUZsb2F0Q29tcG9uZW50cyAoaWZjQ29sb3IueCwgaWZjQ29sb3IueSwgaWZjQ29sb3Iueik7XG4gICAgICAgIGNvbnN0IGFscGhhID0gcGFyc2VJbnQgKGlmY0NvbG9yLncgKiAyNTUuMCwgMTApO1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvTWF0ZXJpYWwuR2V0TWF0ZXJpYWxJbmRleCAoY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgYWxwaGEpO1xuICAgIH1cblxuICAgIEdldElGQ1N0cmluZyAoaWZjU3RyaW5nKVxuICAgIHtcbiAgICAgICAgbGV0IGRlY29kZWQgPSB0aGlzLkRlY29kZUlGQ1N0cmluZyAoaWZjU3RyaW5nKTtcbiAgICAgICAgaWYgKGRlY29kZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWNvZGVkID0gJy0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvZGVkO1xuICAgIH1cblxuICAgIERlY29kZUlGQ1N0cmluZyAoaWZjU3RyaW5nKVxuICAgIHtcbiAgICAgICAgLy8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL3RvbXZhbmRpZy93ZWItaWZjL2lzc3Vlcy81OFxuICAgICAgICBjb25zdCBpZmNVbmljb2RlUmVnRXggPSAvXFxcXFgyXFxcXCguKj8pXFxcXFgwXFxcXC91aWc7XG4gICAgICAgIGxldCByZXN1bHRTdHJpbmcgPSBpZmNTdHJpbmc7XG4gICAgICAgIGxldCBtYXRjaCA9IGlmY1VuaWNvZGVSZWdFeC5leGVjIChpZmNTdHJpbmcpO1xuICAgICAgICB3aGlsZSAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHVuaWNvZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSAocGFyc2VJbnQgKG1hdGNoWzFdLCAxNikpO1xuICAgICAgICAgICAgcmVzdWx0U3RyaW5nID0gcmVzdWx0U3RyaW5nLnJlcGxhY2UgKG1hdGNoWzBdLCB1bmljb2RlQ2hhcik7XG4gICAgICAgICAgICBtYXRjaCA9IGlmY1VuaWNvZGVSZWdFeC5leGVjIChpZmNTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRTdHJpbmc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmQyRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkMmQuanMnO1xuaW1wb3J0IHsgQ29vcmQzRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkM2QuanMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgQXJyYXlCdWZmZXJUb1V0ZjhTdHJpbmcgfSBmcm9tICcuLi9pby9idWZmZXJ1dGlscy5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvciwgUkdCQ29sb3JGcm9tRmxvYXRDb21wb25lbnRzIH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgUGhvbmdNYXRlcmlhbCwgVGV4dHVyZU1hcCB9IGZyb20gJy4uL21vZGVsL21hdGVyaWFsLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9tb2RlbC9tZXNoLmpzJztcbmltcG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi4vbW9kZWwvdHJpYW5nbGUuanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXJCYXNlIH0gZnJvbSAnLi9pbXBvcnRlcmJhc2UuanMnO1xuaW1wb3J0IHsgTmFtZUZyb21MaW5lLCBQYXJhbWV0ZXJzRnJvbUxpbmUsIFJlYWRMaW5lcywgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgfSBmcm9tICcuL2ltcG9ydGVydXRpbHMuanMnO1xuXG5jbGFzcyBPYmpNZXNoQ29udmVydGVyXG57XG4gICAgY29uc3RydWN0b3IgKG1lc2gpXG4gICAge1xuICAgICAgICB0aGlzLm1lc2ggPSBtZXNoO1xuICAgICAgICB0aGlzLmdsb2JhbFRvTWVzaFZlcnRpY2VzID0gbmV3IE1hcCAoKTtcbiAgICAgICAgdGhpcy5nbG9iYWxUb01lc2hWZXJ0ZXhDb2xvcnMgPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLmdsb2JhbFRvTWVzaE5vcm1hbHMgPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLmdsb2JhbFRvTWVzaFV2cyA9IG5ldyBNYXAgKCk7XG4gICAgfVxuXG4gICAgQWRkVmVydGV4IChnbG9iYWxJbmRleCwgZ2xvYmFsVmVydGljZXMpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5HZXRMb2NhbEluZGV4IChnbG9iYWxJbmRleCwgZ2xvYmFsVmVydGljZXMsIHRoaXMuZ2xvYmFsVG9NZXNoVmVydGljZXMsICh2YWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc2guQWRkVmVydGV4IChuZXcgQ29vcmQzRCAodmFsLngsIHZhbC55LCB2YWwueikpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBBZGRWZXJ0ZXhDb2xvciAoZ2xvYmFsSW5kZXgsIGdsb2JhbFZlcnRleENvbG9ycylcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLkdldExvY2FsSW5kZXggKGdsb2JhbEluZGV4LCBnbG9iYWxWZXJ0ZXhDb2xvcnMsIHRoaXMuZ2xvYmFsVG9NZXNoVmVydGV4Q29sb3JzLCAodmFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNoLkFkZFZlcnRleENvbG9yIChuZXcgUkdCQ29sb3IgKHZhbC5yLCB2YWwuZywgdmFsLmIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQWRkTm9ybWFsIChnbG9iYWxJbmRleCwgZ2xvYmFsTm9ybWFscylcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLkdldExvY2FsSW5kZXggKGdsb2JhbEluZGV4LCBnbG9iYWxOb3JtYWxzLCB0aGlzLmdsb2JhbFRvTWVzaE5vcm1hbHMsICh2YWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc2guQWRkTm9ybWFsIChuZXcgQ29vcmQzRCAodmFsLngsIHZhbC55LCB2YWwueikpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBBZGRVViAoZ2xvYmFsSW5kZXgsIGdsb2JhbFV2cylcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLkdldExvY2FsSW5kZXggKGdsb2JhbEluZGV4LCBnbG9iYWxVdnMsIHRoaXMuZ2xvYmFsVG9NZXNoVXZzLCAodmFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNoLkFkZFRleHR1cmVVViAobmV3IENvb3JkMkQgKHZhbC54LCB2YWwueSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBBZGRUcmlhbmdsZSAodHJpYW5nbGUpXG4gICAge1xuICAgICAgICB0aGlzLm1lc2guQWRkVHJpYW5nbGUgKHRyaWFuZ2xlKTtcbiAgICB9XG5cbiAgICBHZXRMb2NhbEluZGV4IChnbG9iYWxJbmRleCwgZ2xvYmFsVmFsdWVBcnJheSwgZ2xvYmFsVG9NZXNoSW5kaWNlcywgdmFsdWVBZGRlckZ1bmMpXG4gICAge1xuICAgICAgICBpZiAoaXNOYU4gKGdsb2JhbEluZGV4KSB8fCBnbG9iYWxJbmRleCA8IDAgfHwgZ2xvYmFsSW5kZXggPj0gZ2xvYmFsVmFsdWVBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnbG9iYWxUb01lc2hJbmRpY2VzLmhhcyAoZ2xvYmFsSW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsVG9NZXNoSW5kaWNlcy5nZXQgKGdsb2JhbEluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBnbG9iYWxWYWx1ZSA9IGdsb2JhbFZhbHVlQXJyYXlbZ2xvYmFsSW5kZXhdO1xuICAgICAgICAgICAgbGV0IGxvY2FsSW5kZXggPSB2YWx1ZUFkZGVyRnVuYyAoZ2xvYmFsVmFsdWUpO1xuICAgICAgICAgICAgZ2xvYmFsVG9NZXNoSW5kaWNlcy5zZXQgKGdsb2JhbEluZGV4LCBsb2NhbEluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbEluZGV4O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBDcmVhdGVDb2xvciAociwgZywgYilcbntcbiAgICByZXR1cm4gUkdCQ29sb3JGcm9tRmxvYXRDb21wb25lbnRzIChcbiAgICAgICAgcGFyc2VGbG9hdCAociksXG4gICAgICAgIHBhcnNlRmxvYXQgKGcpLFxuICAgICAgICBwYXJzZUZsb2F0IChiKVxuICAgICk7XG59XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlck9iaiBleHRlbmRzIEltcG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdvYmonO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlk7XG4gICAgfVxuXG4gICAgQ2xlYXJDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLmdsb2JhbFZlcnRpY2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbG9iYWxWZXJ0ZXhDb2xvcnMgPSBudWxsO1xuICAgICAgICB0aGlzLmdsb2JhbE5vcm1hbHMgPSBudWxsO1xuICAgICAgICB0aGlzLmdsb2JhbFV2cyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWxJbmRleCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tZXNoTmFtZVRvQ29udmVydGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVUb0luZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBSZXNldENvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZ2xvYmFsVmVydGljZXMgPSBbXTtcbiAgICAgICAgdGhpcy5nbG9iYWxWZXJ0ZXhDb2xvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5nbG9iYWxOb3JtYWxzID0gW107XG4gICAgICAgIHRoaXMuZ2xvYmFsVXZzID0gW107XG5cbiAgICAgICAgdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWxJbmRleCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tZXNoTmFtZVRvQ29udmVydGVyID0gbmV3IE1hcCAoKTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVUb0luZGV4ID0gbmV3IE1hcCAoKTtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBsZXQgdGV4dENvbnRlbnQgPSBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyAoZmlsZUNvbnRlbnQpO1xuICAgICAgICBSZWFkTGluZXMgKHRleHRDb250ZW50LCAobGluZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLldhc0Vycm9yICgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5Qcm9jZXNzTGluZSAobGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICB9XG5cbiAgICBQcm9jZXNzTGluZSAobGluZSlcbiAgICB7XG4gICAgICAgIGlmIChsaW5lWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0gUGFyYW1ldGVyc0Zyb21MaW5lIChsaW5lLCAnIycpO1xuICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXl3b3JkID0gcGFyYW1ldGVyc1swXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgcGFyYW1ldGVycy5zaGlmdCAoKTtcblxuICAgICAgICBpZiAodGhpcy5Qcm9jZXNzTWVzaFBhcmFtZXRlciAoa2V5d29yZCwgcGFyYW1ldGVycywgbGluZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLlByb2Nlc3NNYXRlcmlhbFBhcmFtZXRlciAoa2V5d29yZCwgcGFyYW1ldGVycywgbGluZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEFkZE5ld01lc2ggKG5hbWUpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5tZXNoTmFtZVRvQ29udmVydGVyLmhhcyAobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1lc2hDb252ZXJ0ZXIgPSB0aGlzLm1lc2hOYW1lVG9Db252ZXJ0ZXIuZ2V0IChuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBtZXNoID0gbmV3IE1lc2ggKCk7XG4gICAgICAgICAgICBtZXNoLlNldE5hbWUgKG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5BZGRNZXNoVG9Sb290Tm9kZSAobWVzaCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyID0gbmV3IE9iak1lc2hDb252ZXJ0ZXIgKG1lc2gpO1xuICAgICAgICAgICAgdGhpcy5tZXNoTmFtZVRvQ29udmVydGVyLnNldCAobmFtZSwgdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcm9jZXNzTWVzaFBhcmFtZXRlciAoa2V5d29yZCwgcGFyYW1ldGVycywgbGluZSlcbiAgICB7XG4gICAgICAgIGlmIChrZXl3b3JkID09PSAnZycgfHwga2V5d29yZCA9PT0gJ28nKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuYW1lID0gTmFtZUZyb21MaW5lIChsaW5lLCBrZXl3b3JkLmxlbmd0aCwgJyMnKTtcbiAgICAgICAgICAgIHRoaXMuQWRkTmV3TWVzaCAobmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXl3b3JkID09PSAndicpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsVmVydGljZXMucHVzaCAobmV3IENvb3JkM0QgKFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pLFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMV0pLFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMl0pXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA+PSA2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxWZXJ0ZXhDb2xvcnMucHVzaCAoQ3JlYXRlQ29sb3IgKHBhcmFtZXRlcnNbM10sIHBhcmFtZXRlcnNbNF0sIHBhcmFtZXRlcnNbNV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICd2bicpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTm9ybWFscy5wdXNoIChuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1swXSksXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1sxXSksXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1syXSlcbiAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZCA9PT0gJ3Z0Jykge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbG9iYWxVdnMucHVzaCAobmV3IENvb3JkMkQgKFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pLFxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMV0pXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICdmJykge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5Qcm9jZXNzRmFjZSAocGFyYW1ldGVycyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBQcm9jZXNzTWF0ZXJpYWxQYXJhbWV0ZXIgKGtleXdvcmQsIHBhcmFtZXRlcnMsIGxpbmUpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBFeHRyYWN0VGV4dHVyZVBhcmFtZXRlcnMgKHBhcmFtZXRlcnMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlUGFyYW1ldGVycyA9IG5ldyBNYXAgKCk7XG4gICAgICAgICAgICBsZXQgbGFzdFBhcmFtZXRlciA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlci5zdGFydHNXaXRoICgnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXJhbWV0ZXIgPSBwYXJhbWV0ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVQYXJhbWV0ZXJzLnNldCAobGFzdFBhcmFtZXRlciwgW10pO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQYXJhbWV0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVBhcmFtZXRlcnMuZ2V0IChsYXN0UGFyYW1ldGVyKS5wdXNoIChwYXJhbWV0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlUGFyYW1ldGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVRleHR1cmUgKHBhcmFtZXRlcnMsIGNhbGxiYWNrcylcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHRleHR1cmUgPSBuZXcgVGV4dHVyZU1hcCAoKTtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlTmFtZSA9IHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlQnVmZmVyID0gY2FsbGJhY2tzLmdldEZpbGVCdWZmZXIgKHRleHR1cmVOYW1lKTtcbiAgICAgICAgICAgIHRleHR1cmUubmFtZSA9IHRleHR1cmVOYW1lO1xuICAgICAgICAgICAgdGV4dHVyZS5idWZmZXIgPSB0ZXh0dXJlQnVmZmVyO1xuXG4gICAgICAgICAgICBsZXQgdGV4dHVyZVBhcmFtZXRlcnMgPSBFeHRyYWN0VGV4dHVyZVBhcmFtZXRlcnMgKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgaWYgKHRleHR1cmVQYXJhbWV0ZXJzLmhhcyAoJy1vJykpIHtcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0UGFyYW1ldGVycyA9IHRleHR1cmVQYXJhbWV0ZXJzLmdldCAoJy1vJyk7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm9mZnNldC54ID0gcGFyc2VGbG9hdCAob2Zmc2V0UGFyYW1ldGVyc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXRQYXJhbWV0ZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5vZmZzZXQueSA9IHBhcnNlRmxvYXQgKG9mZnNldFBhcmFtZXRlcnNbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRleHR1cmVQYXJhbWV0ZXJzLmhhcyAoJy1zJykpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGVQYXJhbWV0ZXJzID0gdGV4dHVyZVBhcmFtZXRlcnMuZ2V0ICgnLXMnKTtcbiAgICAgICAgICAgICAgICBpZiAoc2NhbGVQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5zY2FsZS54ID0gcGFyc2VGbG9hdCAoc2NhbGVQYXJhbWV0ZXJzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNjYWxlUGFyYW1ldGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUuc2NhbGUueSA9IHBhcnNlRmxvYXQgKHNjYWxlUGFyYW1ldGVyc1sxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXl3b3JkID09PSAnbmV3bXRsJykge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IG5ldyBQaG9uZ01hdGVyaWFsICgpO1xuICAgICAgICAgICAgbGV0IG1hdGVyaWFsTmFtZSA9IE5hbWVGcm9tTGluZSAobGluZSwga2V5d29yZC5sZW5ndGgsICcjJyk7XG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWxJbmRleCA9IHRoaXMubW9kZWwuQWRkTWF0ZXJpYWwgKG1hdGVyaWFsKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLm5hbWUgPSBtYXRlcmlhbE5hbWU7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVUb0luZGV4LnNldCAobWF0ZXJpYWxOYW1lLCBtYXRlcmlhbEluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICd1c2VtdGwnKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1hdGVyaWFsTmFtZSA9IE5hbWVGcm9tTGluZSAobGluZSwga2V5d29yZC5sZW5ndGgsICcjJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXRlcmlhbE5hbWVUb0luZGV4LmhhcyAobWF0ZXJpYWxOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsSW5kZXggPSB0aGlzLm1hdGVyaWFsTmFtZVRvSW5kZXguZ2V0IChtYXRlcmlhbE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZCA9PT0gJ210bGxpYicpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpbGVOYW1lID0gTmFtZUZyb21MaW5lIChsaW5lLCBrZXl3b3JkLmxlbmd0aCwgJyMnKTtcbiAgICAgICAgICAgIGxldCBmaWxlQnVmZmVyID0gdGhpcy5jYWxsYmFja3MuZ2V0RmlsZUJ1ZmZlciAoZmlsZU5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpbGVCdWZmZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dENvbnRlbnQgPSBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyAoZmlsZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgUmVhZExpbmVzICh0ZXh0Q29udGVudCwgKGxpbmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLldhc0Vycm9yICgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlByb2Nlc3NMaW5lIChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZCA9PT0gJ21hcF9rZCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXRlcmlhbCA9PT0gbnVsbCB8fCBwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuZGlmZnVzZU1hcCA9IENyZWF0ZVRleHR1cmUgKHBhcmFtZXRlcnMsIHRoaXMuY2FsbGJhY2tzKTtcbiAgICAgICAgICAgIFVwZGF0ZU1hdGVyaWFsVHJhbnNwYXJlbmN5ICh0aGlzLmN1cnJlbnRNYXRlcmlhbCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXl3b3JkID09PSAnbWFwX2tzJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hdGVyaWFsID09PSBudWxsIHx8IHBhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5zcGVjdWxhck1hcCA9IENyZWF0ZVRleHR1cmUgKHBhcmFtZXRlcnMsIHRoaXMuY2FsbGJhY2tzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICdtYXBfYnVtcCcgfHwga2V5d29yZCA9PT0gJ2J1bXAnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWF0ZXJpYWwgPT09IG51bGwgfHwgcGFyYW1ldGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLmJ1bXBNYXAgPSBDcmVhdGVUZXh0dXJlIChwYXJhbWV0ZXJzLCB0aGlzLmNhbGxiYWNrcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXl3b3JkID09PSAna2EnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWF0ZXJpYWwgPT09IG51bGwgfHwgcGFyYW1ldGVycy5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5hbWJpZW50ID0gQ3JlYXRlQ29sb3IgKHBhcmFtZXRlcnNbMF0sIHBhcmFtZXRlcnNbMV0sIHBhcmFtZXRlcnNbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZCA9PT0gJ2tkJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hdGVyaWFsID09PSBudWxsIHx8IHBhcmFtZXRlcnMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuY29sb3IgPSBDcmVhdGVDb2xvciAocGFyYW1ldGVyc1swXSwgcGFyYW1ldGVyc1sxXSwgcGFyYW1ldGVyc1syXSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXl3b3JkID09PSAna3MnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWF0ZXJpYWwgPT09IG51bGwgfHwgcGFyYW1ldGVycy5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5zcGVjdWxhciA9IENyZWF0ZUNvbG9yIChwYXJhbWV0ZXJzWzBdLCBwYXJhbWV0ZXJzWzFdLCBwYXJhbWV0ZXJzWzJdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICducycpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXRlcmlhbCA9PT0gbnVsbCB8fCBwYXJhbWV0ZXJzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLnNoaW5pbmVzcyA9IHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pIC8gMTAwMC4wO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZCA9PT0gJ3RyJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hdGVyaWFsID09PSBudWxsIHx8IHBhcmFtZXRlcnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwub3BhY2l0eSA9IDEuMCAtIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pO1xuICAgICAgICAgICAgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgKHRoaXMuY3VycmVudE1hdGVyaWFsKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmQgPT09ICdkJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hdGVyaWFsID09PSBudWxsIHx8IHBhcmFtZXRlcnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwub3BhY2l0eSA9IHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pO1xuICAgICAgICAgICAgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgKHRoaXMuY3VycmVudE1hdGVyaWFsKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIFByb2Nlc3NGYWNlIChwYXJhbWV0ZXJzKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gR2V0UmVsYXRpdmVJbmRleCAoaW5kZXgsIGNvdW50KVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ICsgaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmVydGljZXMgPSBbXTtcbiAgICAgICAgbGV0IGNvbG9ycyA9IFtdO1xuICAgICAgICBsZXQgbm9ybWFscyA9IFtdO1xuICAgICAgICBsZXQgdXZzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmVydGV4UGFyYW1zID0gcGFyYW1ldGVyc1tpXS5zcGxpdCAoJy8nKTtcbiAgICAgICAgICAgIHZlcnRpY2VzLnB1c2ggKEdldFJlbGF0aXZlSW5kZXggKHBhcnNlSW50ICh2ZXJ0ZXhQYXJhbXNbMF0sIDEwKSwgdGhpcy5nbG9iYWxWZXJ0aWNlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbFZlcnRpY2VzLmxlbmd0aCA9PT0gdGhpcy5nbG9iYWxWZXJ0ZXhDb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29sb3JzLnB1c2ggKEdldFJlbGF0aXZlSW5kZXggKHBhcnNlSW50ICh2ZXJ0ZXhQYXJhbXNbMF0sIDEwKSwgdGhpcy5nbG9iYWxWZXJ0aWNlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2ZXJ0ZXhQYXJhbXMubGVuZ3RoID4gMSAmJiB2ZXJ0ZXhQYXJhbXNbMV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHV2cy5wdXNoIChHZXRSZWxhdGl2ZUluZGV4IChwYXJzZUludCAodmVydGV4UGFyYW1zWzFdLCAxMCksIHRoaXMuZ2xvYmFsVXZzLmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlcnRleFBhcmFtcy5sZW5ndGggPiAyICYmIHZlcnRleFBhcmFtc1syXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFscy5wdXNoIChHZXRSZWxhdGl2ZUluZGV4IChwYXJzZUludCAodmVydGV4UGFyYW1zWzJdLCAxMCksIHRoaXMuZ2xvYmFsTm9ybWFscy5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLkFkZE5ld01lc2ggKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdjAgPSB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyLkFkZFZlcnRleCAodmVydGljZXNbMF0sIHRoaXMuZ2xvYmFsVmVydGljZXMpO1xuICAgICAgICAgICAgbGV0IHYxID0gdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlci5BZGRWZXJ0ZXggKHZlcnRpY2VzW2kgKyAxXSwgdGhpcy5nbG9iYWxWZXJ0aWNlcyk7XG4gICAgICAgICAgICBsZXQgdjIgPSB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyLkFkZFZlcnRleCAodmVydGljZXNbaSArIDJdLCB0aGlzLmdsb2JhbFZlcnRpY2VzKTtcbiAgICAgICAgICAgIGlmICh2MCA9PT0gbnVsbCB8fCB2MSA9PT0gbnVsbCB8fCB2MiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdJbnZhbGlkIHZlcnRleCBpbmRleC4nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlICh2MCwgdjEsIHYyKTtcblxuICAgICAgICAgICAgaWYgKGNvbG9ycy5sZW5ndGggPT09IHZlcnRpY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBjMCA9IHRoaXMuY3VycmVudE1lc2hDb252ZXJ0ZXIuQWRkVmVydGV4Q29sb3IgKGNvbG9yc1swXSwgdGhpcy5nbG9iYWxWZXJ0ZXhDb2xvcnMpO1xuICAgICAgICAgICAgICAgIGxldCBjMSA9IHRoaXMuY3VycmVudE1lc2hDb252ZXJ0ZXIuQWRkVmVydGV4Q29sb3IgKGNvbG9yc1tpICsgMV0sIHRoaXMuZ2xvYmFsVmVydGV4Q29sb3JzKTtcbiAgICAgICAgICAgICAgICBsZXQgYzIgPSB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyLkFkZFZlcnRleENvbG9yIChjb2xvcnNbaSArIDJdLCB0aGlzLmdsb2JhbFZlcnRleENvbG9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKGMwID09PSBudWxsIHx8IGMxID09PSBudWxsIHx8IGMyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdJbnZhbGlkIHZlcnRleCBjb2xvciBpbmRleC4nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlLlNldFZlcnRleENvbG9ycyAoYzAsIGMxLCBjMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub3JtYWxzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IG4wID0gdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlci5BZGROb3JtYWwgKG5vcm1hbHNbMF0sIHRoaXMuZ2xvYmFsTm9ybWFscyk7XG4gICAgICAgICAgICAgICAgbGV0IG4xID0gdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlci5BZGROb3JtYWwgKG5vcm1hbHNbaSArIDFdLCB0aGlzLmdsb2JhbE5vcm1hbHMpO1xuICAgICAgICAgICAgICAgIGxldCBuMiA9IHRoaXMuY3VycmVudE1lc2hDb252ZXJ0ZXIuQWRkTm9ybWFsIChub3JtYWxzW2kgKyAyXSwgdGhpcy5nbG9iYWxOb3JtYWxzKTtcbiAgICAgICAgICAgICAgICBpZiAobjAgPT09IG51bGwgfHwgbjEgPT09IG51bGwgfHwgbjIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ludmFsaWQgbm9ybWFsIGluZGV4LicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJpYW5nbGUuU2V0Tm9ybWFscyAobjAsIG4xLCBuMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1dnMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgdTAgPSB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyLkFkZFVWICh1dnNbMF0sIHRoaXMuZ2xvYmFsVXZzKTtcbiAgICAgICAgICAgICAgICBsZXQgdTEgPSB0aGlzLmN1cnJlbnRNZXNoQ29udmVydGVyLkFkZFVWICh1dnNbaSArIDFdLCB0aGlzLmdsb2JhbFV2cyk7XG4gICAgICAgICAgICAgICAgbGV0IHUyID0gdGhpcy5jdXJyZW50TWVzaENvbnZlcnRlci5BZGRVViAodXZzW2kgKyAyXSwgdGhpcy5nbG9iYWxVdnMpO1xuICAgICAgICAgICAgICAgIGlmICh1MCA9PT0gbnVsbCB8fCB1MSA9PT0gbnVsbCB8fCB1MiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldEVycm9yICgnSW52YWxpZCB1diBpbmRleC4nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlLlNldFRleHR1cmVVVnMgKHUwLCB1MSwgdTIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWF0ZXJpYWxJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlLm1hdCA9IHRoaXMuY3VycmVudE1hdGVyaWFsSW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1lc2hDb252ZXJ0ZXIuQWRkVHJpYW5nbGUgKHRyaWFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIH0gZnJvbSAnLi4vaW8vYnVmZmVydXRpbHMuanMnO1xuaW1wb3J0IHsgUkdCQ29sb3IsIENvbG9yQ29tcG9uZW50RnJvbUZsb2F0IH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2guanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tb2RlbC90cmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5pbXBvcnQgeyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIsIFBhcmFtZXRlcnNGcm9tTGluZSwgUmVhZExpbmVzIH0gZnJvbSAnLi9pbXBvcnRlcnV0aWxzLmpzJztcblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyT2ZmIGV4dGVuZHMgSW1wb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ29mZic7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWTtcbiAgICB9XG5cbiAgICBDbGVhckNvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWVzaCA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb2xvclRvTWF0ZXJpYWwgPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2ggKCk7XG4gICAgICAgIHRoaXMubW9kZWwuQWRkTWVzaFRvUm9vdE5vZGUgKHRoaXMubWVzaCk7XG4gICAgICAgIHRoaXMuc3RhdHVzID0ge1xuICAgICAgICAgICAgdmVydGV4Q291bnQgOiAwLFxuICAgICAgICAgICAgZmFjZUNvdW50IDogMCxcbiAgICAgICAgICAgIGZvdW5kVmVydGV4IDogMCxcbiAgICAgICAgICAgIGZvdW5kRmFjZSA6IDBcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2xvclRvTWF0ZXJpYWwgPSBuZXcgQ29sb3JUb01hdGVyaWFsQ29udmVydGVyICh0aGlzLm1vZGVsKTtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBsZXQgdGV4dENvbnRlbnQgPSBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyAoZmlsZUNvbnRlbnQpO1xuICAgICAgICBSZWFkTGluZXMgKHRleHRDb250ZW50LCAobGluZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLldhc0Vycm9yICgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5Qcm9jZXNzTGluZSAobGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICB9XG5cbiAgICBQcm9jZXNzTGluZSAobGluZSlcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZUNvbG9yQ29tcG9uZW50IChzdHIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChzdHIuaW5kZXhPZiAoJy4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JDb21wb25lbnRGcm9tRmxvYXQgKHBhcnNlRmxvYXQgKHN0cikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQgKHN0ciwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbmVbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSBQYXJhbWV0ZXJzRnJvbUxpbmUgKGxpbmUsICcjJyk7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtZXRlcnNbMF0gPT09ICdPRkYnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMudmVydGV4Q291bnQgPT09IDAgJiYgdGhpcy5zdGF0dXMuZmFjZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMudmVydGV4Q291bnQgPSBwYXJzZUludCAocGFyYW1ldGVyc1swXSwgMTApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzLmZhY2VDb3VudCA9IHBhcnNlSW50IChwYXJhbWV0ZXJzWzFdLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMuZm91bmRWZXJ0ZXggPCB0aGlzLnN0YXR1cy52ZXJ0ZXhDb3VudCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc2guQWRkVmVydGV4IChuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMF0pLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0IChwYXJhbWV0ZXJzWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1syXSlcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5mb3VuZFZlcnRleCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID49IDYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc2guQWRkVmVydGV4Q29sb3IgKG5ldyBSR0JDb2xvciAoXG4gICAgICAgICAgICAgICAgICAgIENyZWF0ZUNvbG9yQ29tcG9uZW50IChwYXJhbWV0ZXJzWzNdKSxcbiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlQ29sb3JDb21wb25lbnQgKHBhcmFtZXRlcnNbNF0pLFxuICAgICAgICAgICAgICAgICAgICBDcmVhdGVDb2xvckNvbXBvbmVudCAocGFyYW1ldGVyc1s1XSlcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoYXNWZXJ0ZXhDb2xvcnMgPSAodGhpcy5tZXNoLlZlcnRleENvdW50ICgpID09PXRoaXMubWVzaC5WZXJ0ZXhDb2xvckNvdW50ICgpKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzLmZvdW5kRmFjZSA8IHRoaXMuc3RhdHVzLmZhY2VDb3VudCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID49IDQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmVydGV4Q291bnQgPSBwYXJzZUludCAocGFyYW1ldGVyc1swXSwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA8IHZlcnRleENvdW50ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBtYXRlcmlhbEluZGV4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1ZlcnRleENvbG9ycyAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA+PSB2ZXJ0ZXhDb3VudCArIDQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gbmV3IFJHQkNvbG9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0ZUNvbG9yQ29tcG9uZW50IChwYXJhbWV0ZXJzW3ZlcnRleENvdW50ICsgMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlQ29sb3JDb21wb25lbnQgKHBhcmFtZXRlcnNbdmVydGV4Q291bnQgKyAyXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGVDb2xvckNvbXBvbmVudCAocGFyYW1ldGVyc1t2ZXJ0ZXhDb3VudCArIDNdKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGV4ID0gdGhpcy5jb2xvclRvTWF0ZXJpYWwuR2V0TWF0ZXJpYWxJbmRleCAoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQgLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYwID0gcGFyc2VJbnQgKHBhcmFtZXRlcnNbMV0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSBwYXJzZUludCAocGFyYW1ldGVyc1tpICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSBwYXJzZUludCAocGFyYW1ldGVyc1tpICsgM10pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUgKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzVmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5TZXRWZXJ0ZXhDb2xvcnMgKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUuU2V0TWF0ZXJpYWwgKG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzaC5BZGRUcmlhbmdsZSAodHJpYW5nbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5mb3VuZEZhY2UgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEJpbmFyeVJlYWRlciB9IGZyb20gJy4uL2lvL2JpbmFyeXJlYWRlci5qcyc7XG5pbXBvcnQgeyBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyB9IGZyb20gJy4uL2lvL2J1ZmZlcnV0aWxzLmpzJztcbmltcG9ydCB7IFJHQkNvbG9yLCBJbnRlZ2VyVG9IZXhTdHJpbmcgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5pbXBvcnQgeyBQaG9uZ01hdGVyaWFsIH0gZnJvbSAnLi4vbW9kZWwvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2guanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tb2RlbC90cmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5pbXBvcnQgeyBQYXJhbWV0ZXJzRnJvbUxpbmUsIFJlYWRMaW5lcywgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgfSBmcm9tICcuL2ltcG9ydGVydXRpbHMuanMnO1xuXG5jb25zdCBQbHlIZWFkZXJDaGVja1Jlc3VsdCA9XG57XG4gICAgT2sgOiAxLFxuICAgIE5vVmVydGljZXMgOiAyLFxuICAgIE5vRmFjZXMgOiAzLFxuICAgIFVua25vd25FcnJvciA6IDRcbn07XG5cbmNsYXNzIFBseUhlYWRlclxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLmZvcm1hdCA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB9XG5cbiAgICBTZXRGb3JtYXQgKGZvcm1hdClcbiAgICB7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cblxuICAgIEFkZEVsZW1lbnQgKG5hbWUsIGNvdW50KVxuICAgIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5wdXNoICh7XG4gICAgICAgICAgICBuYW1lIDogbmFtZSxcbiAgICAgICAgICAgIGNvdW50IDogY291bnQsXG4gICAgICAgICAgICBmb3JtYXQgOiBbXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBHZXRFbGVtZW50cyAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gICAgfVxuXG4gICAgQWRkU2luZ2xlRm9ybWF0IChlbGVtVHlwZSwgbmFtZSlcbiAgICB7XG4gICAgICAgIGxldCBsYXN0RWxlbWVudCA9IHRoaXMuZWxlbWVudHNbdGhpcy5lbGVtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgbGFzdEVsZW1lbnQuZm9ybWF0LnB1c2ggKHtcbiAgICAgICAgICAgIG5hbWUgOiBuYW1lLFxuICAgICAgICAgICAgaXNTaW5nbGUgOiB0cnVlLFxuICAgICAgICAgICAgZWxlbVR5cGUgOiBlbGVtVHlwZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBBZGRMaXN0Rm9ybWF0IChjb3VudFR5cGUsIGVsZW1UeXBlLCBuYW1lKVxuICAgIHtcbiAgICAgICAgbGV0IGxhc3RFbGVtZW50ID0gdGhpcy5lbGVtZW50c1t0aGlzLmVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsYXN0RWxlbWVudC5mb3JtYXQucHVzaCAoe1xuICAgICAgICAgICAgbmFtZSA6IG5hbWUsXG4gICAgICAgICAgICBpc1NpbmdsZSA6IGZhbHNlLFxuICAgICAgICAgICAgY291bnRUeXBlIDogY291bnRUeXBlLFxuICAgICAgICAgICAgZWxlbVR5cGUgOiBlbGVtVHlwZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBHZXRFbGVtZW50IChuYW1lKVxuICAgIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgQ2hlY2sgKClcbiAgICB7XG4gICAgICAgIGxldCB2ZXJ0ZXggPSB0aGlzLkdldEVsZW1lbnQgKCd2ZXJ0ZXgnKTtcbiAgICAgICAgaWYgKHZlcnRleCA9PT0gbnVsbCB8fCB2ZXJ0ZXgubGVuZ3RoID09PSAwIHx8IHZlcnRleC5mb3JtYXQubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgcmV0dXJuIFBseUhlYWRlckNoZWNrUmVzdWx0Lk5vVmVydGljZXM7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmFjZSA9IHRoaXMuR2V0RWxlbWVudCAoJ2ZhY2UnKTtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09PSAnYXNjaWknKSB7XG4gICAgICAgICAgICBpZiAoZmFjZSA9PT0gbnVsbCB8fCBmYWNlLmNvdW50ID09PSAwIHx8IGZhY2UuZm9ybWF0Lmxlbmd0aCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGx5SGVhZGVyQ2hlY2tSZXN1bHQuTm9GYWNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZvcm1hdCA9PT0gJ2JpbmFyeV9saXR0bGVfZW5kaWFuJyB8fCB0aGlzLmZvcm1hdCA9PT0gJ2JpbmFyeV9iaWdfZW5kaWFuJykge1xuICAgICAgICAgICAgbGV0IHRyaVN0cmlwcyA9IHRoaXMuR2V0RWxlbWVudCAoJ3RyaXN0cmlwcycpO1xuICAgICAgICAgICAgbGV0IGhhc0ZhY2VzID0gKGZhY2UgIT09IG51bGwgJiYgZmFjZS5jb3VudCA+IDAgJiYgZmFjZS5mb3JtYXQubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICBsZXQgaGFzVHJpU3RyaXBzID0gKHRyaVN0cmlwcyAhPT0gbnVsbCAmJiB0cmlTdHJpcHMuY291bnQgPiAwICYmIHRyaVN0cmlwcy5mb3JtYXQubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICBpZiAoIWhhc0ZhY2VzICYmICFoYXNUcmlTdHJpcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGx5SGVhZGVyQ2hlY2tSZXN1bHQuTm9GYWNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQbHlIZWFkZXJDaGVja1Jlc3VsdC5Vbmtub3duRXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUGx5SGVhZGVyQ2hlY2tSZXN1bHQuT2s7XG4gICAgfVxufVxuXG5jbGFzcyBQbHlNYXRlcmlhbEhhbmRsZXJcbntcbiAgICBjb25zdHJ1Y3RvciAobW9kZWwpXG4gICAge1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuY29sb3JUb01hdGVyaWFsID0gbmV3IE1hcCAoKTtcbiAgICB9XG5cbiAgICBHZXRNYXRlcmlhbEluZGV4QnlDb2xvciAoY29sb3IpXG4gICAge1xuICAgICAgICBsZXQgbWF0ZXJpYWxOYW1lID0gJ0NvbG9yICcgK1xuICAgICAgICAgICAgSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvclswXSkgK1xuICAgICAgICAgICAgSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvclsxXSkgK1xuICAgICAgICAgICAgSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvclsyXSkgK1xuICAgICAgICAgICAgSW50ZWdlclRvSGV4U3RyaW5nIChjb2xvclszXSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29sb3JUb01hdGVyaWFsLmhhcyAobWF0ZXJpYWxOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb01hdGVyaWFsLmdldCAobWF0ZXJpYWxOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IG5ldyBQaG9uZ01hdGVyaWFsICgpO1xuICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IG1hdGVyaWFsTmFtZTtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvbG9yID0gbmV3IFJHQkNvbG9yIChjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBjb2xvclszXSAvIDI1NS4wO1xuICAgICAgICAgICAgVXBkYXRlTWF0ZXJpYWxUcmFuc3BhcmVuY3kgKG1hdGVyaWFsKTtcbiAgICAgICAgICAgIGxldCBtYXRlcmlhbEluZGV4ID0gdGhpcy5tb2RlbC5BZGRNYXRlcmlhbCAobWF0ZXJpYWwpO1xuICAgICAgICAgICAgdGhpcy5jb2xvclRvTWF0ZXJpYWwuc2V0IChtYXRlcmlhbE5hbWUsIG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsSW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlclBseSBleHRlbmRzIEltcG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdwbHknO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlk7XG4gICAgfVxuXG4gICAgQ2xlYXJDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLm1lc2ggPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2ggKCk7XG4gICAgICAgIHRoaXMubW9kZWwuQWRkTWVzaFRvUm9vdE5vZGUgKHRoaXMubWVzaCk7XG4gICAgfVxuXG4gICAgSW1wb3J0Q29udGVudCAoZmlsZUNvbnRlbnQsIG9uRmluaXNoKVxuICAgIHtcbiAgICAgICAgbGV0IGhlYWRlclN0cmluZyA9IHRoaXMuR2V0SGVhZGVyQ29udGVudCAoZmlsZUNvbnRlbnQpO1xuICAgICAgICBsZXQgaGVhZGVyID0gdGhpcy5SZWFkSGVhZGVyIChoZWFkZXJTdHJpbmcpO1xuICAgICAgICBsZXQgY2hlY2tSZXN1bHQgPSBoZWFkZXIuQ2hlY2sgKCk7XG4gICAgICAgIGlmIChjaGVja1Jlc3VsdCA9PT0gUGx5SGVhZGVyQ2hlY2tSZXN1bHQuT2spIHtcbiAgICAgICAgICAgIGlmIChoZWFkZXIuZm9ybWF0ID09PSAnYXNjaWknKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRTdHJpbmcgPSBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyAoZmlsZUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnRTdHJpbmcgPSBjb250ZW50U3RyaW5nLnN1YnN0cmluZyAoaGVhZGVyU3RyaW5nLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5SZWFkQXNjaWlDb250ZW50IChoZWFkZXIsIGNvbnRlbnRTdHJpbmcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIuZm9ybWF0ID09PSAnYmluYXJ5X2xpdHRsZV9lbmRpYW4nIHx8IGhlYWRlci5mb3JtYXQgPT09ICdiaW5hcnlfYmlnX2VuZGlhbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlYWRCaW5hcnlDb250ZW50IChoZWFkZXIsIGZpbGVDb250ZW50LCBoZWFkZXJTdHJpbmcubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaGVja1Jlc3VsdCA9PT0gUGx5SGVhZGVyQ2hlY2tSZXN1bHQuTm9WZXJ0aWNlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdUaGUgbW9kZWwgY29udGFpbnMgbm8gdmVydGljZXMuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoZWNrUmVzdWx0ID09PSBQbHlIZWFkZXJDaGVja1Jlc3VsdC5Ob0ZhY2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ1RoZSBtb2RlbCBjb250YWlucyBubyBmYWNlcy4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ludmFsaWQgaGVhZGVyIGluZm9ybWF0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9uRmluaXNoICgpO1xuICAgIH1cblxuICAgIEdldEhlYWRlckNvbnRlbnQgKGZpbGVDb250ZW50KVxuICAgIHtcbiAgICAgICAgbGV0IGhlYWRlckNvbnRlbnQgPSAnJztcbiAgICAgICAgbGV0IGJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheSAoZmlsZUNvbnRlbnQpO1xuICAgICAgICBsZXQgYnVmZmVySW5kZXggPSAwO1xuICAgICAgICBmb3IgKGJ1ZmZlckluZGV4ID0gMDsgYnVmZmVySW5kZXggPCBmaWxlQ29udGVudC5ieXRlTGVuZ3RoOyBidWZmZXJJbmRleCsrKSB7XG4gICAgICAgICAgICBoZWFkZXJDb250ZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUgKGJ1ZmZlclZpZXdbYnVmZmVySW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJDb250ZW50LmVuZHNXaXRoICgnZW5kX2hlYWRlcicpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVySW5kZXggKz0gMTtcbiAgICAgICAgd2hpbGUgKGJ1ZmZlckluZGV4IDwgZmlsZUNvbnRlbnQuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlIChidWZmZXJWaWV3W2J1ZmZlckluZGV4XSk7XG4gICAgICAgICAgICBoZWFkZXJDb250ZW50ICs9IGNoYXI7XG4gICAgICAgICAgICBidWZmZXJJbmRleCArPSAxO1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlckNvbnRlbnQ7XG4gICAgfVxuXG4gICAgUmVhZEhlYWRlciAoaGVhZGVyQ29udGVudClcbiAgICB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBuZXcgUGx5SGVhZGVyICgpO1xuICAgICAgICBSZWFkTGluZXMgKGhlYWRlckNvbnRlbnQsIChsaW5lKSA9PiB7XG4gICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IFBhcmFtZXRlcnNGcm9tTGluZSAobGluZSwgbnVsbCk7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDAgfHwgcGFyYW1ldGVyc1swXSA9PT0gJ2NvbW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVyc1swXSA9PT0gJ3BseScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnNbMF0gPT09ICdmb3JtYXQnICYmIHBhcmFtZXRlcnMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXIuU2V0Rm9ybWF0IChwYXJhbWV0ZXJzWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyc1swXSA9PT0gJ2VsZW1lbnQnICYmIHBhcmFtZXRlcnMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXIuQWRkRWxlbWVudCAocGFyYW1ldGVyc1sxXSwgcGFyc2VJbnQgKHBhcmFtZXRlcnNbMl0sIDEwKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnNbMF0gPT09ICdwcm9wZXJ0eScgJiYgcGFyYW1ldGVycy5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzWzFdID09PSAnbGlzdCcgJiYgcGFyYW1ldGVycy5sZW5ndGggPj0gNSkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXIuQWRkTGlzdEZvcm1hdCAocGFyYW1ldGVyc1syXSwgcGFyYW1ldGVyc1szXSwgcGFyYW1ldGVyc1s0XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLkFkZFNpbmdsZUZvcm1hdCAocGFyYW1ldGVyc1sxXSwgcGFyYW1ldGVyc1syXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgIH1cblxuICAgIFJlYWRBc2NpaUNvbnRlbnQgKGhlYWRlciwgZmlsZUNvbnRlbnQpXG4gICAge1xuICAgICAgICBsZXQgdmVydGV4ID0gaGVhZGVyLkdldEVsZW1lbnQgKCd2ZXJ0ZXgnKTtcbiAgICAgICAgbGV0IGZhY2UgPSBoZWFkZXIuR2V0RWxlbWVudCAoJ2ZhY2UnKTtcbiAgICAgICAgbGV0IGZvdW5kVmVydGV4ID0gMDtcbiAgICAgICAgbGV0IGZvdW5kRmFjZSA9IDA7XG4gICAgICAgIFJlYWRMaW5lcyAoZmlsZUNvbnRlbnQsIChsaW5lKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5XYXNFcnJvciAoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSBQYXJhbWV0ZXJzRnJvbUxpbmUgKGxpbmUsIG51bGwpO1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID09PSAwIHx8IHBhcmFtZXRlcnNbMF0gPT09ICdjb21tZW50Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZvdW5kVmVydGV4IDwgdmVydGV4LmNvdW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNoLkFkZFZlcnRleCAobmV3IENvb3JkM0QgKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0IChwYXJhbWV0ZXJzWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMl0pXG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZFZlcnRleCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmYWNlICE9PSBudWxsICYmIGZvdW5kRmFjZSA8IGZhY2UuY291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmVydGV4Q291bnQgPSBwYXJzZUludCAocGFyYW1ldGVyc1swXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPCB2ZXJ0ZXhDb3VudCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50IC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjAgPSBwYXJzZUludCAocGFyYW1ldGVyc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSBwYXJzZUludCAocGFyYW1ldGVyc1tpICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gcGFyc2VJbnQgKHBhcmFtZXRlcnNbaSArIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG5ldyBUcmlhbmdsZSAodjAsIHYxLCB2Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc2guQWRkVHJpYW5nbGUgKHRyaWFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3VuZEZhY2UgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBSZWFkQmluYXJ5Q29udGVudCAoaGVhZGVyLCBmaWxlQ29udGVudCwgaGVhZGVyTGVuZ3RoKVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gUmVhZEJ5Rm9ybWF0IChyZWFkZXIsIGZvcm1hdClcbiAgICAgICAge1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVhZFR5cGUgKHJlYWRlciwgdHlwZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NoYXInIHx8IHR5cGUgPT09ICdpbnQ4Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLlJlYWRDaGFyYWN0ZXI4ICgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3VjaGFyJyB8fCB0eXBlID09PSAndWludDgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuUmVhZFVuc2lnbmVkQ2hhcmFjdGVyOCAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaG9ydCcgfHwgdHlwZSA9PT0gJ2ludDE2Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLlJlYWRJbnRlZ2VyMTYgKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndXNob3J0JyB8fCB0eXBlID09PSAndWludDE2Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIxNiAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbnQnIHx8IHR5cGUgPT09ICdpbnQzMicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5SZWFkSW50ZWdlcjMyICgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3VpbnQnIHx8IHR5cGUgPT09ICd1aW50MzInKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuUmVhZFVuc2lnbmVkSW50ZWdlcjMyICgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Zsb2F0JyB8fCB0eXBlID09PSAnZmxvYXQzMicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkb3VibGUnIHx8IHR5cGUgPT09ICdkb3VibGU2NCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5SZWFkRG91YmxlNjQgKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZm9ybWF0LmlzU2luZ2xlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRUeXBlIChyZWFkZXIsIGZvcm1hdC5lbGVtVHlwZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gUmVhZFR5cGUgKHJlYWRlciwgZm9ybWF0LmNvdW50VHlwZSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaCAoUmVhZFR5cGUgKHJlYWRlciwgZm9ybWF0LmVsZW1UeXBlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gU2tpcEZvcm1hdCAocmVhZGVyLCBmb3JtYXQsIHN0YXJ0SW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgUmVhZEJ5Rm9ybWF0IChyZWFkZXIsIGZvcm1hdFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBTa2lwQW5kR2V0Q29sb3IgKHJlYWRlciwgZm9ybWF0LCBzdGFydEluZGV4KVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgciA9IG51bGw7XG4gICAgICAgICAgICBsZXQgZyA9IG51bGw7XG4gICAgICAgICAgICBsZXQgYiA9IG51bGw7XG4gICAgICAgICAgICBsZXQgYSA9IDI1NTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBmb3JtYXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VyckZvcm1hdCA9IGZvcm1hdFtpXTtcbiAgICAgICAgICAgICAgICBsZXQgdmFsID0gUmVhZEJ5Rm9ybWF0IChyZWFkZXIsIGN1cnJGb3JtYXQpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyRm9ybWF0Lm5hbWUgPT09ICdyZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSB2YWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyRm9ybWF0Lm5hbWUgPT09ICdncmVlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZyA9IHZhbDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJGb3JtYXQubmFtZSA9PT0gJ2JsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGIgPSB2YWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyRm9ybWF0Lm5hbWUgPT09ICdhbHBoYScpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyICE9PSBudWxsICYmIGcgIT09IG51bGwgJiYgYiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbciwgZywgYiwgYV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlYWRlciA9IG51bGw7XG4gICAgICAgIGlmIChoZWFkZXIuZm9ybWF0ID09PSAnYmluYXJ5X2xpdHRsZV9lbmRpYW4nKSB7XG4gICAgICAgICAgICByZWFkZXIgPSBuZXcgQmluYXJ5UmVhZGVyIChmaWxlQ29udGVudCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyLmZvcm1hdCA9PT0gJ2JpbmFyeV9iaWdfZW5kaWFuJykge1xuICAgICAgICAgICAgcmVhZGVyID0gbmV3IEJpbmFyeVJlYWRlciAoZmlsZUNvbnRlbnQsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWFkZXIuU2tpcCAoaGVhZGVyTGVuZ3RoKTtcblxuICAgICAgICBsZXQgbWF0ZXJpYWxIYW5kbGVyID0gbmV3IFBseU1hdGVyaWFsSGFuZGxlciAodGhpcy5tb2RlbCk7XG4gICAgICAgIGxldCBlbGVtZW50cyA9IGhlYWRlci5HZXRFbGVtZW50cyAoKTtcbiAgICAgICAgZm9yIChsZXQgZWxlbWVudEluZGV4ID0gMDsgZWxlbWVudEluZGV4IDwgZWxlbWVudHMubGVuZ3RoOyBlbGVtZW50SW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQubmFtZSA9PT0gJ3ZlcnRleCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2ZXJ0ZXhJbmRleCA9IDA7IHZlcnRleEluZGV4IDwgZWxlbWVudC5jb3VudDsgdmVydGV4SW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IFJlYWRCeUZvcm1hdCAocmVhZGVyLCBlbGVtZW50LmZvcm1hdFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gUmVhZEJ5Rm9ybWF0IChyZWFkZXIsIGVsZW1lbnQuZm9ybWF0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHogPSBSZWFkQnlGb3JtYXQgKHJlYWRlciwgZWxlbWVudC5mb3JtYXRbMl0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3IgPSBTa2lwQW5kR2V0Q29sb3IgKHJlYWRlciwgZWxlbWVudC5mb3JtYXQsIDMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzaC5BZGRWZXJ0ZXhDb2xvciAobmV3IFJHQkNvbG9yIChjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNoLkFkZFZlcnRleCAobmV3IENvb3JkM0QgKHgsIHksIHopKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubmFtZSA9PT0gJ2ZhY2UnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZmFjZUluZGV4ID0gMDsgZmFjZUluZGV4IDwgZWxlbWVudC5jb3VudDsgZmFjZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZlcnRpY2VzID0gUmVhZEJ5Rm9ybWF0IChyZWFkZXIsIGVsZW1lbnQuZm9ybWF0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZhY2VDb2xvciA9IFNraXBBbmRHZXRDb2xvciAocmVhZGVyLCBlbGVtZW50LmZvcm1hdCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjAgPSB2ZXJ0aWNlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHZlcnRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHZlcnRpY2VzW2kgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG5ldyBUcmlhbmdsZSAodjAsIHYxLCB2Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZUNvbG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUubWF0ID0gbWF0ZXJpYWxIYW5kbGVyLkdldE1hdGVyaWFsSW5kZXhCeUNvbG9yIChmYWNlQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1lc2guVmVydGV4Q29sb3JDb3VudCAoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5TZXRWZXJ0ZXhDb2xvcnMgKHYwLCB2MSwgdjIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNoLkFkZFRyaWFuZ2xlICh0cmlhbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubmFtZSA9PT0gJ3RyaXN0cmlwcycpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0cmlTdHJpcEluZGV4ID0gMDsgdHJpU3RyaXBJbmRleCA8IGVsZW1lbnQuY291bnQ7IHRyaVN0cmlwSW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmVydGljZXMgPSBSZWFkQnlGb3JtYXQgKHJlYWRlciwgZWxlbWVudC5mb3JtYXRbMF0pO1xuICAgICAgICAgICAgICAgICAgICBTa2lwRm9ybWF0IChyZWFkZXIsIGVsZW1lbnQuZm9ybWF0LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNjdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjAgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHZlcnRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHZlcnRpY2VzW2kgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2MiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2N3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2N3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcCA9IHYxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYxID0gdjI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdjIgPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjY3cgPSAhY2N3O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlICh2MCwgdjEsIHYyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzaC5BZGRUcmlhbmdsZSAodHJpYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBTa2lwRm9ybWF0IChyZWFkZXIsIGVsZW1lbnQuZm9ybWF0LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEdldEV4dGVybmFsTGliUGF0aCB9IGZyb20gJy4uL2lvL2V4dGVybmFsbGlicy5qcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vbW9kZWwvbm9kZS5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvckZyb21GbG9hdENvbXBvbmVudHMgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5pbXBvcnQgeyBDb252ZXJ0VGhyZWVHZW9tZXRyeVRvTWVzaCB9IGZyb20gJy4uL3RocmVlanMvdGhyZWV1dGlscy5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5pbXBvcnQgeyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgfSBmcm9tICcuL2ltcG9ydGVydXRpbHMuanMnO1xuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJPY2N0IGV4dGVuZHMgSW1wb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuXHRcdHRoaXMud29ya2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdzdHAnIHx8IGV4dGVuc2lvbiA9PT0gJ3N0ZXAnIHx8IGV4dGVuc2lvbiA9PT0gJ2lncycgfHwgZXh0ZW5zaW9uID09PSAnaWdlcycgfHwgZXh0ZW5zaW9uID09PSAnYnJwJyB8fCBleHRlbnNpb24gPT09ICdicmVwJztcbiAgICB9XG5cbiAgICBHZXRVcERpcmVjdGlvbiAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIERpcmVjdGlvbi5ZO1xuICAgIH1cblxuXHRDbGVhckNvbnRlbnQgKClcblx0e1xuICAgICAgICBpZiAodGhpcy53b3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMud29ya2VyLnRlcm1pbmF0ZSAoKTtcbiAgICAgICAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICAgICAgfVxuXHR9XG5cbiAgICBSZXNldENvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBsZXQgd29ya2VyUGF0aCA9IEdldEV4dGVybmFsTGliUGF0aCAoJ2xvYWRlcnMvb2NjdC1pbXBvcnQtanMtd29ya2VyLmpzJyk7XG4gICAgICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlciAod29ya2VyUGF0aCk7XG4gICAgICAgIHRoaXMud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIgKCdtZXNzYWdlJywgKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLkltcG9ydFJlc3VsdEpzb24gKGV2LmRhdGEsIG9uRmluaXNoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIgKCdlcnJvcicsIChldikgPT4ge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ZhaWxlZCB0byBsb2FkIG9jY3QtaW1wb3J0LWpzLicpO1xuICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBmb3JtYXQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5leHRlbnNpb24gPT09ICdzdHAnIHx8IHRoaXMuZXh0ZW5zaW9uID09PSAnc3RlcCcpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9ICdzdGVwJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmV4dGVuc2lvbiA9PT0gJ2lncycgfHwgdGhpcy5leHRlbnNpb24gPT09ICdpZ2VzJykge1xuICAgICAgICAgICAgZm9ybWF0ID0gJ2lnZXMnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZXh0ZW5zaW9uID09PSAnYnJwJyB8fCB0aGlzLmV4dGVuc2lvbiA9PT0gJ2JyZXAnKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSAnYnJlcCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWxlQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGZpbGVDb250ZW50KTtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2UgKHtcbiAgICAgICAgICAgIGZvcm1hdCA6IGZvcm1hdCxcbiAgICAgICAgICAgIGJ1ZmZlciA6IGZpbGVCdWZmZXIsXG4gICAgICAgICAgICBwYXJhbXMgOiBudWxsXG4gICAgICAgIH0pO1xuICAgIH1cblxuXHRJbXBvcnRSZXN1bHRKc29uIChyZXN1bHRDb250ZW50LCBvbkZpbmlzaClcblx0e1xuICAgICAgICBpZiAoIXJlc3VsdENvbnRlbnQuc3VjY2Vzcykge1xuICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbG9yVG9NYXRlcmlhbCA9IG5ldyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgKHRoaXMubW9kZWwpO1xuICAgICAgICBsZXQgcm9vdE5vZGUgPSB0aGlzLm1vZGVsLkdldFJvb3ROb2RlICgpO1xuICAgICAgICB0aGlzLkltcG9ydE5vZGUgKHJlc3VsdENvbnRlbnQsIHJlc3VsdENvbnRlbnQucm9vdCwgcm9vdE5vZGUsIGNvbG9yVG9NYXRlcmlhbCk7XG4gICAgICAgIG9uRmluaXNoICgpO1xuXHR9XG5cbiAgICBJbXBvcnROb2RlIChyZXN1bHRDb250ZW50LCBvY2N0Tm9kZSwgcGFyZW50Tm9kZSwgY29sb3JUb01hdGVyaWFsKVxuICAgIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZU1lc2hJbmRleCBvZiBvY2N0Tm9kZS5tZXNoZXMpIHtcbiAgICAgICAgICAgIGxldCBvY2N0TWVzaCA9IHJlc3VsdENvbnRlbnQubWVzaGVzW25vZGVNZXNoSW5kZXhdO1xuICAgICAgICAgICAgbGV0IG1lc2ggPSB0aGlzLkltcG9ydE1lc2ggKG9jY3RNZXNoLCBjb2xvclRvTWF0ZXJpYWwpO1xuICAgICAgICAgICAgbGV0IG1lc2hJbmRleCA9IHRoaXMubW9kZWwuQWRkTWVzaCAobWVzaCk7XG4gICAgICAgICAgICBwYXJlbnROb2RlLkFkZE1lc2hJbmRleCAobWVzaEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjaGlsZE9jY3ROb2RlIG9mIG9jY3ROb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGROb2RlID0gbmV3IE5vZGUgKCk7XG4gICAgICAgICAgICBjaGlsZE5vZGUuU2V0TmFtZSAoY2hpbGRPY2N0Tm9kZS5uYW1lKTtcbiAgICAgICAgICAgIHBhcmVudE5vZGUuQWRkQ2hpbGROb2RlIChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgdGhpcy5JbXBvcnROb2RlIChyZXN1bHRDb250ZW50LCBjaGlsZE9jY3ROb2RlLCBjaGlsZE5vZGUsIGNvbG9yVG9NYXRlcmlhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBJbXBvcnRNZXNoIChvY2N0TWVzaCwgY29sb3JUb01hdGVyaWFsKVxuICAgIHtcbiAgICAgICAgbGV0IG1hdGVyaWFsSW5kZXggPSBudWxsO1xuICAgICAgICBpZiAob2NjdE1lc2guY29sb3IpIHtcbiAgICAgICAgICAgIGxldCBjb2xvciA9IFJHQkNvbG9yRnJvbUZsb2F0Q29tcG9uZW50cyAob2NjdE1lc2guY29sb3JbMF0sIG9jY3RNZXNoLmNvbG9yWzFdLCBvY2N0TWVzaC5jb2xvclsyXSk7XG4gICAgICAgICAgICBtYXRlcmlhbEluZGV4ID0gY29sb3JUb01hdGVyaWFsLkdldE1hdGVyaWFsSW5kZXggKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtZXNoID0gQ29udmVydFRocmVlR2VvbWV0cnlUb01lc2ggKG9jY3RNZXNoLCBtYXRlcmlhbEluZGV4LCBudWxsKTtcbiAgICAgICAgaWYgKG9jY3RNZXNoLm5hbWUpIHtcbiAgICAgICAgICAgIG1lc2guU2V0TmFtZSAob2NjdE1lc2gubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYnJlcEZhY2Ugb2Ygb2NjdE1lc2guYnJlcF9mYWNlcykge1xuICAgICAgICAgICAgaWYgKGJyZXBGYWNlLmNvbG9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZmFjZUNvbG9yID0gUkdCQ29sb3JGcm9tRmxvYXRDb21wb25lbnRzIChicmVwRmFjZS5jb2xvclswXSwgYnJlcEZhY2UuY29sb3JbMV0sIGJyZXBGYWNlLmNvbG9yWzJdKTtcbiAgICAgICAgICAgIGxldCBmYWNlTWF0ZXJpYWxJbmRleCA9IGNvbG9yVG9NYXRlcmlhbC5HZXRNYXRlcmlhbEluZGV4IChmYWNlQ29sb3IuciwgZmFjZUNvbG9yLmcsIGZhY2VDb2xvci5iLCBudWxsKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBicmVwRmFjZS5maXJzdDsgaSA8PSBicmVwRmFjZS5sYXN0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChpKTtcbiAgICAgICAgICAgICAgICB0cmlhbmdsZS5TZXRNYXRlcmlhbCAoZmFjZU1hdGVyaWFsSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNoO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERpcmVjdGlvbiwgSXNQb3NpdGl2ZSB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEJpbmFyeVJlYWRlciB9IGZyb20gJy4uL2lvL2JpbmFyeXJlYWRlci5qcyc7XG5pbXBvcnQgeyBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyB9IGZyb20gJy4uL2lvL2J1ZmZlcnV0aWxzLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi9tb2RlbC9tZXNoLmpzJztcbmltcG9ydCB7IFRyaWFuZ2xlIH0gZnJvbSAnLi4vbW9kZWwvdHJpYW5nbGUuanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXJCYXNlIH0gZnJvbSAnLi9pbXBvcnRlcmJhc2UuanMnO1xuaW1wb3J0IHsgTmFtZUZyb21MaW5lLCBQYXJhbWV0ZXJzRnJvbUxpbmUsIFJlYWRMaW5lcyB9IGZyb20gJy4vaW1wb3J0ZXJ1dGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlclN0bCBleHRlbmRzIEltcG9ydGVyQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdzdGwnO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlo7XG4gICAgfVxuXG4gICAgQ2xlYXJDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLm1lc2ggPSBudWxsO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlID0gbnVsbDtcbiAgICB9XG5cbiAgICBSZXNldENvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoICgpO1xuICAgICAgICB0aGlzLm1vZGVsLkFkZE1lc2hUb1Jvb3ROb2RlICh0aGlzLm1lc2gpO1xuICAgICAgICB0aGlzLnRyaWFuZ2xlID0gbnVsbDtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5Jc0JpbmFyeVN0bEZpbGUgKGZpbGVDb250ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5Qcm9jZXNzQmluYXJ5IChmaWxlQ29udGVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdGV4dENvbnRlbnQgPSBBcnJheUJ1ZmZlclRvVXRmOFN0cmluZyAoZmlsZUNvbnRlbnQpO1xuICAgICAgICAgICAgUmVhZExpbmVzICh0ZXh0Q29udGVudCwgKGxpbmUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuV2FzRXJyb3IgKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5Qcm9jZXNzTGluZSAobGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgfVxuXG4gICAgSXNCaW5hcnlTdGxGaWxlIChmaWxlQ29udGVudClcbiAgICB7XG4gICAgICAgIGxldCBieXRlTGVuZ3RoID0gZmlsZUNvbnRlbnQuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCA4NCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBCaW5hcnlSZWFkZXIgKGZpbGVDb250ZW50LCB0cnVlKTtcbiAgICAgICAgcmVhZGVyLlNraXAgKDgwKTtcblxuICAgICAgICBsZXQgdHJpYW5nbGVDb3VudCA9IHJlYWRlci5SZWFkVW5zaWduZWRJbnRlZ2VyMzIgKCk7XG4gICAgICAgIGlmIChieXRlTGVuZ3RoICE9PSB0cmlhbmdsZUNvdW50ICogNTAgKyA4NCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgUHJvY2Vzc0xpbmUgKGxpbmUpXG4gICAge1xuICAgICAgICBpZiAobGluZVswXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyYW1ldGVycyA9IFBhcmFtZXRlcnNGcm9tTGluZSAobGluZSwgJyMnKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQga2V5d29yZCA9IHBhcmFtZXRlcnNbMF07XG4gICAgICAgIGlmIChrZXl3b3JkID09PSAnc29saWQnKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBOYW1lRnJvbUxpbmUgKGxpbmUsIGtleXdvcmQubGVuZ3RoLCAnIycpO1xuICAgICAgICAgICAgICAgIHRoaXMubWVzaC5TZXROYW1lIChuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXl3b3JkID09PSAnZmFjZXQnKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlICgtMSwgLTEsIC0xKTtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA+PSA1ICYmIHBhcmFtZXRlcnNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbFZlY3RvciA9IG5ldyBDb29yZDNEIChcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1syXSksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbM10pLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0IChwYXJhbWV0ZXJzWzRdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKElzUG9zaXRpdmUgKG5vcm1hbFZlY3Rvci5MZW5ndGggKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub3JtYWxJbmRleCA9IHRoaXMubWVzaC5BZGROb3JtYWwgKG5vcm1hbFZlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpYW5nbGUuU2V0Tm9ybWFscyAoXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5d29yZCA9PT0gJ3ZlcnRleCcgJiYgdGhpcy50cmlhbmdsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID49IDQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmVydGV4SW5kZXggPSB0aGlzLm1lc2guQWRkVmVydGV4IChuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQgKHBhcmFtZXRlcnNbMV0pLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0IChwYXJhbWV0ZXJzWzJdKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCAocGFyYW1ldGVyc1szXSlcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmlhbmdsZS52MCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlhbmdsZS52MCA9IHZlcnRleEluZGV4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmlhbmdsZS52MSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlhbmdsZS52MSA9IHZlcnRleEluZGV4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmlhbmdsZS52MiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlhbmdsZS52MiA9IHZlcnRleEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXl3b3JkID09PSAnZW5kZmFjZXQnICYmIHRoaXMudHJpYW5nbGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyaWFuZ2xlLnYwICE9PSAtMSAmJiB0aGlzLnRyaWFuZ2xlLnYxICE9PSAtMSAmJiB0aGlzLnRyaWFuZ2xlLnYyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLkFkZFRyaWFuZ2xlICh0aGlzLnRyaWFuZ2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudHJpYW5nbGUgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUHJvY2Vzc0JpbmFyeSAoZmlsZUNvbnRlbnQpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBSZWFkVmVjdG9yIChyZWFkZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBjb29yZCA9IG5ldyBDb29yZDNEICgpO1xuICAgICAgICAgICAgY29vcmQueCA9IHJlYWRlci5SZWFkRmxvYXQzMiAoKTtcbiAgICAgICAgICAgIGNvb3JkLnkgPSByZWFkZXIuUmVhZEZsb2F0MzIgKCk7XG4gICAgICAgICAgICBjb29yZC56ID0gcmVhZGVyLlJlYWRGbG9hdDMyICgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvb3JkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gQWRkVmVydGV4IChtZXNoLCByZWFkZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBjb29yZCA9IFJlYWRWZWN0b3IgKHJlYWRlcik7XG4gICAgICAgICAgICByZXR1cm4gbWVzaC5BZGRWZXJ0ZXggKGNvb3JkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgQmluYXJ5UmVhZGVyIChmaWxlQ29udGVudCwgdHJ1ZSk7XG4gICAgICAgIHJlYWRlci5Ta2lwICg4MCk7XG4gICAgICAgIGxldCB0cmlhbmdsZUNvdW50ID0gcmVhZGVyLlJlYWRVbnNpZ25lZEludGVnZXIzMiAoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlhbmdsZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub3JtYWxWZWN0b3IgPSBSZWFkVmVjdG9yIChyZWFkZXIpO1xuICAgICAgICAgICAgbGV0IHYwID0gQWRkVmVydGV4ICh0aGlzLm1lc2gsIHJlYWRlcik7XG4gICAgICAgICAgICBsZXQgdjEgPSBBZGRWZXJ0ZXggKHRoaXMubWVzaCwgcmVhZGVyKTtcbiAgICAgICAgICAgIGxldCB2MiA9IEFkZFZlcnRleCAodGhpcy5tZXNoLCByZWFkZXIpO1xuICAgICAgICAgICAgcmVhZGVyLlNraXAgKDIpO1xuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlICh2MCwgdjEsIHYyKTtcbiAgICAgICAgICAgIGlmIChJc1Bvc2l0aXZlIChub3JtYWxWZWN0b3IuTGVuZ3RoICgpKSkge1xuICAgICAgICAgICAgICAgIGxldCBub3JtYWwgPSB0aGlzLm1lc2guQWRkTm9ybWFsIChub3JtYWxWZWN0b3IpO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlLlNldE5vcm1hbHMgKG5vcm1hbCwgbm9ybWFsLCBub3JtYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tZXNoLkFkZFRyaWFuZ2xlICh0cmlhbmdsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJc09iamVjdEVtcHR5IH0gZnJvbSAnLi4vY29yZS9jb3JlLmpzJztcbmltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIH0gZnJvbSAnLi4vaW8vYnVmZmVydXRpbHMuanMnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uL21vZGVsL25vZGUuanMnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21vZGVsL21lc2guanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuLi9tb2RlbC90cmlhbmdsZS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvcXVhdGVybmlvbi5qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXguanMnO1xuaW1wb3J0IHsgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyc7XG5pbXBvcnQgeyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgfSBmcm9tICcuL2ltcG9ydGVydXRpbHMuanMnO1xuaW1wb3J0IHsgUHJvcGVydHksIFByb3BlcnR5R3JvdXAsIFByb3BlcnR5VHlwZSB9IGZyb20gJy4uL21vZGVsL3Byb3BlcnR5LmpzJztcblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyQmltIGV4dGVuZHMgSW1wb3J0ZXJCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ2JpbSc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWjtcbiAgICB9XG5cbiAgICBDbGVhckNvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWVzaElkVG9NZXNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb2xvclRvTWF0ZXJpYWwgPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5tZXNoSWRUb01lc2ggPSBuZXcgTWFwICgpO1xuICAgICAgICB0aGlzLmNvbG9yVG9NYXRlcmlhbCA9IG5ldyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgKHRoaXMubW9kZWwpO1xuICAgIH1cblxuICAgIEltcG9ydENvbnRlbnQgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGxldCB0ZXh0Q29udGVudCA9IEFycmF5QnVmZmVyVG9VdGY4U3RyaW5nIChmaWxlQ29udGVudCk7XG4gICAgICAgIGxldCBiaW1Kc29uID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJpbUpzb24gPSBKU09OLnBhcnNlICh0ZXh0Q29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ0ZhaWxlZCB0byBwYXJzZSBiaW0gZmlsZS4nKTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgYmltTWVzaCBvZiBiaW1Kc29uLm1lc2hlcykge1xuICAgICAgICAgICAgdGhpcy5tZXNoSWRUb01lc2guc2V0IChiaW1NZXNoLm1lc2hfaWQsIGJpbU1lc2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5JbXBvcnRQcm9wZXJ0aWVzIChiaW1Kc29uLCB0aGlzLm1vZGVsKTtcbiAgICAgICAgZm9yIChsZXQgYmltRWxlbWVudCBvZiBiaW1Kc29uLmVsZW1lbnRzKSB7XG4gICAgICAgICAgICBsZXQgbWVzaCA9IHRoaXMuSW1wb3J0RWxlbWVudCAoYmltRWxlbWVudCk7XG4gICAgICAgICAgICBtZXNoLlNldE5hbWUgKGJpbUVsZW1lbnQudHlwZSk7XG4gICAgICAgICAgICB0aGlzLkltcG9ydFByb3BlcnRpZXMgKGJpbUVsZW1lbnQsIG1lc2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgfVxuXG4gICAgSW1wb3J0RWxlbWVudCAoYmltRWxlbWVudClcbiAgICB7XG4gICAgICAgIGxldCBkZWZhdWx0TWF0ZXJpYWxJbmRleCA9IHRoaXMuY29sb3JUb01hdGVyaWFsLkdldE1hdGVyaWFsSW5kZXggKFxuICAgICAgICAgICAgYmltRWxlbWVudC5jb2xvci5yLFxuICAgICAgICAgICAgYmltRWxlbWVudC5jb2xvci5nLFxuICAgICAgICAgICAgYmltRWxlbWVudC5jb2xvci5iLFxuICAgICAgICAgICAgYmltRWxlbWVudC5jb2xvci5hXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IHJvb3ROb2RlID0gdGhpcy5tb2RlbC5HZXRSb290Tm9kZSAoKTtcblxuICAgICAgICBsZXQgYmltTWVzaCA9IHRoaXMubWVzaElkVG9NZXNoLmdldCAoYmltRWxlbWVudC5tZXNoX2lkKTtcbiAgICAgICAgbGV0IG1lc2ggPSB0aGlzLkltcG9ydE1lc2ggKGJpbU1lc2gsICh0cmlhbmdsZUluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoYmltRWxlbWVudC5mYWNlX2NvbG9ycykge1xuICAgICAgICAgICAgICAgIGxldCBmYWNlTWF0ZXJpYWxJbmRleCA9IHRoaXMuY29sb3JUb01hdGVyaWFsLkdldE1hdGVyaWFsSW5kZXggKFxuICAgICAgICAgICAgICAgICAgICBiaW1FbGVtZW50LmZhY2VfY29sb3JzW3RyaWFuZ2xlSW5kZXggKiA0ICsgMF0sXG4gICAgICAgICAgICAgICAgICAgIGJpbUVsZW1lbnQuZmFjZV9jb2xvcnNbdHJpYW5nbGVJbmRleCAqIDQgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgYmltRWxlbWVudC5mYWNlX2NvbG9yc1t0cmlhbmdsZUluZGV4ICogNCArIDJdLFxuICAgICAgICAgICAgICAgICAgICBiaW1FbGVtZW50LmZhY2VfY29sb3JzW3RyaWFuZ2xlSW5kZXggKiA0ICsgM11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWNlTWF0ZXJpYWxJbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRNYXRlcmlhbEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG1lc2hJbmRleCA9IHRoaXMubW9kZWwuQWRkTWVzaCAobWVzaCk7XG5cbiAgICAgICAgbGV0IGVsZW1lbnROb2RlID0gbmV3IE5vZGUgKCk7XG4gICAgICAgIGVsZW1lbnROb2RlLkFkZE1lc2hJbmRleCAobWVzaEluZGV4KTtcblxuICAgICAgICBsZXQgdHJhbnNsYXRpb24gPSBuZXcgQ29vcmQzRCAoMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIGlmIChiaW1FbGVtZW50LnZlY3Rvcikge1xuICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgYmltRWxlbWVudC52ZWN0b3IueCxcbiAgICAgICAgICAgICAgICBiaW1FbGVtZW50LnZlY3Rvci55LFxuICAgICAgICAgICAgICAgIGJpbUVsZW1lbnQudmVjdG9yLnpcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24gKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgIGlmIChiaW1FbGVtZW50LnJvdGF0aW9uKSB7XG4gICAgICAgICAgICByb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uIChcbiAgICAgICAgICAgICAgICBiaW1FbGVtZW50LnJvdGF0aW9uLnF4LFxuICAgICAgICAgICAgICAgIGJpbUVsZW1lbnQucm90YXRpb24ucXksXG4gICAgICAgICAgICAgICAgYmltRWxlbWVudC5yb3RhdGlvbi5xeixcbiAgICAgICAgICAgICAgICBiaW1FbGVtZW50LnJvdGF0aW9uLnF3XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzY2FsZSA9IG5ldyBDb29yZDNEICgxLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXggKCkuQ29tcG9zZVRSUyAodHJhbnNsYXRpb24sIHJvdGF0aW9uLCBzY2FsZSk7XG4gICAgICAgIGVsZW1lbnROb2RlLlNldFRyYW5zZm9ybWF0aW9uIChuZXcgVHJhbnNmb3JtYXRpb24gKG1hdHJpeCkpO1xuXG4gICAgICAgIHJvb3ROb2RlLkFkZENoaWxkTm9kZSAoZWxlbWVudE5vZGUpO1xuICAgICAgICByZXR1cm4gbWVzaDtcbiAgICB9XG5cbiAgICBJbXBvcnRNZXNoIChiaW1NZXNoLCBnZXRNYXRlcmlhbEluZGV4KVxuICAgIHtcbiAgICAgICAgbGV0IG1lc2ggPSBuZXcgTWVzaCAoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbU1lc2guY29vcmRpbmF0ZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIG1lc2guQWRkVmVydGV4IChuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICAgICAgYmltTWVzaC5jb29yZGluYXRlc1tpICsgMF0sXG4gICAgICAgICAgICAgICAgYmltTWVzaC5jb29yZGluYXRlc1tpICsgMV0sXG4gICAgICAgICAgICAgICAgYmltTWVzaC5jb29yZGluYXRlc1tpICsgMl1cbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW1NZXNoLmluZGljZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGxldCB0cmlhbmdsZSA9IG5ldyBUcmlhbmdsZSAoXG4gICAgICAgICAgICAgICAgYmltTWVzaC5pbmRpY2VzW2kgKyAwXSxcbiAgICAgICAgICAgICAgICBiaW1NZXNoLmluZGljZXNbaSArIDFdLFxuICAgICAgICAgICAgICAgIGJpbU1lc2guaW5kaWNlc1tpICsgMl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0cmlhbmdsZS5TZXRNYXRlcmlhbCAoZ2V0TWF0ZXJpYWxJbmRleCAoaSAvIDMpKTtcbiAgICAgICAgICAgIG1lc2guQWRkVHJpYW5nbGUgKHRyaWFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNoO1xuICAgIH1cblxuICAgIEltcG9ydFByb3BlcnRpZXMgKHNvdXJjZSwgdGFyZ2V0KVxuICAgIHtcbiAgICAgICAgZnVuY3Rpb24gQWRkUHJvcGVydHkgKGdyb3VwLCBuYW1lLCB2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5UZXh0LCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBncm91cC5BZGRQcm9wZXJ0eSAocHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzb3VyY2UuaW5mbyB8fCBJc09iamVjdEVtcHR5IChzb3VyY2UuaW5mbykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbmZvID0gc291cmNlLmluZm87XG4gICAgICAgIGxldCBwcm9wZXJ0eUdyb3VwID0gbmV3IFByb3BlcnR5R3JvdXAgKCdJbmZvJyk7XG4gICAgICAgIEFkZFByb3BlcnR5IChwcm9wZXJ0eUdyb3VwLCAnR3VpZCcsIHNvdXJjZS5ndWlkKTtcbiAgICAgICAgQWRkUHJvcGVydHkgKHByb3BlcnR5R3JvdXAsICdUeXBlJywgc291cmNlLnR5cGUpO1xuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgaW4gaW5mbykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCAoaW5mbywgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5mb1twcm9wZXJ0eU5hbWVdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBBZGRQcm9wZXJ0eSAocHJvcGVydHlHcm91cCwgcHJvcGVydHlOYW1lLCBpbmZvW3Byb3BlcnR5TmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuQWRkUHJvcGVydHlHcm91cCAocHJvcGVydHlHcm91cCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgV2FpdFdoaWxlIH0gZnJvbSAnLi4vY29yZS90YXNrcnVubmVyLmpzJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uL2dlb21ldHJ5L21hdHJpeC5qcyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybWF0aW9uLmpzJztcbmltcG9ydCB7IEJhc2U2NERhdGFVUklUb0FycmF5QnVmZmVyLCBDcmVhdGVPYmplY3RVcmwsIEdldEZpbGVFeHRlbnNpb25Gcm9tTWltZVR5cGUgfSBmcm9tICcuLi9pby9idWZmZXJ1dGlscy5qcyc7XG5pbXBvcnQgeyBHZXRGaWxlRXh0ZW5zaW9uLCBHZXRGaWxlTmFtZSB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBQaG9uZ01hdGVyaWFsLCBUZXh0dXJlTWFwIH0gZnJvbSAnLi4vbW9kZWwvbWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uL21vZGVsL25vZGUuanMnO1xuaW1wb3J0IHsgQ29udmVydFRocmVlQ29sb3JUb0NvbG9yLCBDb252ZXJ0VGhyZWVHZW9tZXRyeVRvTWVzaCwgVGhyZWVMaW5lYXJUb1NSR0JDb2xvckNvbnZlcnRlciwgVGhyZWVTUkdCVG9MaW5lYXJDb2xvckNvbnZlcnRlciB9IGZyb20gJy4uL3RocmVlanMvdGhyZWV1dGlscy5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlckJhc2UgfSBmcm9tICcuL2ltcG9ydGVyYmFzZS5qcyc7XG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRHQUxvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL1RHQUxvYWRlci5qcyc7XG5pbXBvcnQgeyBGQlhMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9GQlhMb2FkZXIuanMnO1xuaW1wb3J0IHsgQ29sbGFkYUxvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0NvbGxhZGFMb2FkZXIuanMnO1xuaW1wb3J0IHsgVlJNTExvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL1ZSTUxMb2FkZXIuanMnO1xuaW1wb3J0IHsgVGhyZWVNRkxvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzLzNNRkxvYWRlci5qcyc7XG5pbXBvcnQgeyBBTUZMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9BTUZMb2FkZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJUaHJlZUJhc2UgZXh0ZW5kcyBJbXBvcnRlckJhc2VcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKCk7XG5cbiAgICAgICAgdGhpcy5jb2xvckNvbnZlcnRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgQ3JlYXRlTG9hZGVyIChtYW5hZ2VyKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgR2V0TWFpbk9iamVjdCAobG9hZGVkT2JqZWN0KVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGxvYWRlZE9iamVjdDtcbiAgICB9XG5cbiAgICBJc01lc2hWaXNpYmxlIChtZXNoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgQ2xlYXJDb250ZW50ICgpXG4gICAge1xuICAgICAgICB0aGlzLmxvYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxJZFRvSW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLm9iamVjdFVybFRvRmlsZU5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIFJlc2V0Q29udGVudCAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm1hdGVyaWFsSWRUb0luZGV4ID0gbmV3IE1hcCAoKTtcbiAgICAgICAgdGhpcy5vYmplY3RVcmxUb0ZpbGVOYW1lID0gbmV3IE1hcCAoKTtcbiAgICB9XG5cbiAgICBJbXBvcnRDb250ZW50IChmaWxlQ29udGVudCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICB0aGlzLkxvYWRNb2RlbCAoZmlsZUNvbnRlbnQsIG9uRmluaXNoKTtcbiAgICB9XG5cbiAgICBMb2FkTW9kZWwgKGZpbGVDb250ZW50LCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGxldCBpc0FsbExvYWRlcnNEb25lID0gZmFsc2U7XG4gICAgICAgIGxldCBsb2FkaW5nTWFuYWdlciA9IG5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlciAoKCkgPT4ge1xuICAgICAgICAgICAgaXNBbGxMb2FkZXJzRG9uZSA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG1haW5GaWxlVXJsID0gQ3JlYXRlT2JqZWN0VXJsIChmaWxlQ29udGVudCk7XG4gICAgICAgIGxvYWRpbmdNYW5hZ2VyLnNldFVSTE1vZGlmaWVyICgodXJsKSA9PiB7XG4gICAgICAgICAgICBpZiAodXJsID09PSBtYWluRmlsZVVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gR2V0RmlsZU5hbWUgKHVybCk7XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSBHZXRGaWxlRXh0ZW5zaW9uICh1cmwpO1xuICAgICAgICAgICAgaWYgKGV4dGVuc2lvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5jYWxsYmFja3MuZ2V0RmlsZUJ1ZmZlciAodXJsKTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvYmplY3RVcmwgPSBDcmVhdGVPYmplY3RVcmwgKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0VXJsVG9GaWxlTmFtZS5zZXQgKG9iamVjdFVybCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RVcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgdGhyZWVMb2FkZXIgPSB0aGlzLkNyZWF0ZUxvYWRlciAobG9hZGluZ01hbmFnZXIpO1xuICAgICAgICBpZiAodGhyZWVMb2FkZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyZWVMb2FkZXIubG9hZCAobWFpbkZpbGVVcmwsXG4gICAgICAgICAgICAob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgV2FpdFdoaWxlICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FsbExvYWRlcnNEb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk9uVGhyZWVPYmplY3RzTG9hZGVkIChvYmplY3QsIG9uRmluaXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKGVycik7XG4gICAgICAgICAgICAgICAgb25GaW5pc2ggKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgT25UaHJlZU9iamVjdHNMb2FkZWQgKGxvYWRlZE9iamVjdCwgb25GaW5pc2gpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBHZXRPYmplY3RUcmFuc2Zvcm1hdGlvbiAodGhyZWVPYmplY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4ICgpLkNyZWF0ZUlkZW50aXR5ICgpO1xuICAgICAgICAgICAgdGhyZWVPYmplY3QudXBkYXRlTWF0cml4ICgpO1xuICAgICAgICAgICAgaWYgKHRocmVlT2JqZWN0Lm1hdHJpeCAhPT0gdW5kZWZpbmVkICYmIHRocmVlT2JqZWN0Lm1hdHJpeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1hdHJpeC5TZXQgKHRocmVlT2JqZWN0Lm1hdHJpeC5lbGVtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybWF0aW9uIChtYXRyaXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gQWRkT2JqZWN0IChpbXBvcnRlciwgbW9kZWwsIHRocmVlT2JqZWN0LCBwYXJlbnROb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IG5ldyBOb2RlICgpO1xuICAgICAgICAgICAgaWYgKHRocmVlT2JqZWN0Lm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5vZGUuU2V0TmFtZSAodGhyZWVPYmplY3QubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlLlNldFRyYW5zZm9ybWF0aW9uIChHZXRPYmplY3RUcmFuc2Zvcm1hdGlvbiAodGhyZWVPYmplY3QpKTtcbiAgICAgICAgICAgIHBhcmVudE5vZGUuQWRkQ2hpbGROb2RlIChub2RlKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGRPYmplY3Qgb2YgdGhyZWVPYmplY3QuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBBZGRPYmplY3QgKGltcG9ydGVyLCBtb2RlbCwgY2hpbGRPYmplY3QsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRocmVlT2JqZWN0LmlzTWVzaCAmJiBpbXBvcnRlci5Jc01lc2hWaXNpYmxlICh0aHJlZU9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzaCA9IGltcG9ydGVyLkNvbnZlcnRUaHJlZU1lc2ggKHRocmVlT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzaEluZGV4ID0gbW9kZWwuQWRkTWVzaCAobWVzaCk7XG4gICAgICAgICAgICAgICAgbm9kZS5BZGRNZXNoSW5kZXggKG1lc2hJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWFpbk9iamVjdCA9IHRoaXMuR2V0TWFpbk9iamVjdCAobG9hZGVkT2JqZWN0KTtcbiAgICAgICAgbGV0IHJvb3ROb2RlID0gdGhpcy5tb2RlbC5HZXRSb290Tm9kZSAoKTtcbiAgICAgICAgcm9vdE5vZGUuU2V0VHJhbnNmb3JtYXRpb24gKEdldE9iamVjdFRyYW5zZm9ybWF0aW9uIChtYWluT2JqZWN0KSk7XG4gICAgICAgIGZvciAobGV0IGNoaWxkT2JqZWN0IG9mIG1haW5PYmplY3QuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIEFkZE9iamVjdCAodGhpcywgdGhpcy5tb2RlbCwgY2hpbGRPYmplY3QsIHJvb3ROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uRmluaXNoICgpO1xuICAgIH1cblxuICAgIENvbnZlcnRUaHJlZU1lc2ggKHRocmVlTWVzaClcbiAgICB7XG4gICAgICAgIGxldCBtZXNoID0gbnVsbDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkgKHRocmVlTWVzaC5tYXRlcmlhbCkpIHtcbiAgICAgICAgICAgIG1lc2ggPSBDb252ZXJ0VGhyZWVHZW9tZXRyeVRvTWVzaCAodGhyZWVNZXNoLmdlb21ldHJ5LCBudWxsLCB0aGlzLmNvbG9yQ29udmVydGVyKTtcbiAgICAgICAgICAgIGlmICh0aHJlZU1lc2guZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciA9PT0gdW5kZWZpbmVkIHx8IHRocmVlTWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGVyaWFsSW5kaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhyZWVNZXNoLm1hdGVyaWFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhyZWVNZXNoLm1hdGVyaWFsW2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gdGhpcy5GaW5kT3JDcmVhdGVNYXRlcmlhbCAobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGljZXMucHVzaCAobWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhyZWVNZXNoLmdlb21ldHJ5Lmdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXAgPSB0aHJlZU1lc2guZ2VvbWV0cnkuZ3JvdXBzW2ldO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBFbmQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuY291bnQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEVuZCA9IG1lc2guVHJpYW5nbGVDb3VudCAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kID0gZ3JvdXAuc3RhcnQgLyAzICsgZ3JvdXAuY291bnQgLyAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBncm91cC5zdGFydCAvIDM7IGogPCBncm91cEVuZDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLlNldE1hdGVyaWFsIChtYXRlcmlhbEluZGljZXNbZ3JvdXAubWF0ZXJpYWxJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMuRmluZE9yQ3JlYXRlTWF0ZXJpYWwgKHRocmVlTWVzaC5tYXRlcmlhbCk7XG4gICAgICAgICAgICBtZXNoID0gQ29udmVydFRocmVlR2VvbWV0cnlUb01lc2ggKHRocmVlTWVzaC5nZW9tZXRyeSwgbWF0ZXJpYWxJbmRleCwgdGhpcy5jb2xvckNvbnZlcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRocmVlTWVzaC5uYW1lICE9PSB1bmRlZmluZWQgJiYgdGhyZWVNZXNoLm5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc2guU2V0TmFtZSAodGhyZWVNZXNoLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNoO1xuICAgIH1cblxuICAgIEZpbmRPckNyZWF0ZU1hdGVyaWFsICh0aHJlZU1hdGVyaWFsKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMubWF0ZXJpYWxJZFRvSW5kZXguaGFzICh0aHJlZU1hdGVyaWFsLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxJZFRvSW5kZXguZ2V0ICh0aHJlZU1hdGVyaWFsLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWF0ZXJpYWwgPSB0aGlzLkNvbnZlcnRUaHJlZU1hdGVyaWFsICh0aHJlZU1hdGVyaWFsKTtcbiAgICAgICAgbGV0IG1hdGVyaWFsSW5kZXggPSBudWxsO1xuICAgICAgICBpZiAobWF0ZXJpYWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsSW5kZXggPSB0aGlzLm1vZGVsLkFkZE1hdGVyaWFsIChtYXRlcmlhbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXRlcmlhbElkVG9JbmRleC5zZXQgKHRocmVlTWF0ZXJpYWwuaWQsIG1hdGVyaWFsSW5kZXgpO1xuICAgICAgICByZXR1cm4gbWF0ZXJpYWxJbmRleDtcbiAgICB9XG5cbiAgICBDb252ZXJ0VGhyZWVNYXRlcmlhbCAodGhyZWVNYXRlcmlhbClcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVRleHR1cmUgKHRocmVlTWFwLCBvYmplY3RVcmxUb0ZpbGVOYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBmdW5jdGlvbiBHZXREYXRhVXJsIChpbWcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGltZy5kYXRhICE9PSB1bmRlZmluZWQgJiYgaW1nLmRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGltYWdlRGF0YSA9IG5ldyBJbWFnZURhdGEgKGltZy53aWR0aCwgaW1nLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZVNpemUgPSBpbWcud2lkdGggKiBpbWcuaGVpZ2h0ICogNDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZVNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaV0gPSBpbWcuZGF0YVtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVEhSRUUuSW1hZ2VVdGlscy5nZXREYXRhVVJMIChpbWFnZURhdGEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUSFJFRS5JbWFnZVV0aWxzLmdldERhdGFVUkwgKGltZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhyZWVNYXAgPT09IHVuZGVmaW5lZCB8fCB0aHJlZU1hcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhyZWVNYXAuaW1hZ2UgPT09IHVuZGVmaW5lZCB8fCB0aHJlZU1hcC5pbWFnZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFVcmwgPSBHZXREYXRhVXJsICh0aHJlZU1hcC5pbWFnZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0QnVmZmVyID0gQmFzZTY0RGF0YVVSSVRvQXJyYXlCdWZmZXIgKGRhdGFVcmwpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlID0gbmV3IFRleHR1cmVNYXAgKCk7XG4gICAgICAgICAgICAgICAgbGV0IHRleHR1cmVOYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0VXJsVG9GaWxlTmFtZS5oYXMgKHRocmVlTWFwLmltYWdlLnNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZU5hbWUgPSBvYmplY3RVcmxUb0ZpbGVOYW1lLmdldCAodGhyZWVNYXAuaW1hZ2Uuc3JjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRocmVlTWFwLm5hbWUgIT09IHVuZGVmaW5lZCAmJiB0aHJlZU1hcC5uYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVOYW1lID0gdGhyZWVNYXAubmFtZSArICcuJyArIEdldEZpbGVFeHRlbnNpb25Gcm9tTWltZVR5cGUgKGJhc2U2NEJ1ZmZlci5taW1lVHlwZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZU5hbWUgPSAnRW1iZWRkZWRfJyArIHRocmVlTWFwLmlkLnRvU3RyaW5nICgpICsgJy4nICsgR2V0RmlsZUV4dGVuc2lvbkZyb21NaW1lVHlwZSAoYmFzZTY0QnVmZmVyLm1pbWVUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5uYW1lID0gdGV4dHVyZU5hbWU7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5taW1lVHlwZSA9IGJhc2U2NEJ1ZmZlci5taW1lVHlwZTtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmJ1ZmZlciA9IGJhc2U2NEJ1ZmZlci5idWZmZXI7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5yb3RhdGlvbiA9IHRocmVlTWFwLnJvdGF0aW9uO1xuICAgICAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LnggPSB0aHJlZU1hcC5vZmZzZXQueDtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLm9mZnNldC55ID0gdGhyZWVNYXAub2Zmc2V0Lnk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5zY2FsZS54ID0gdGhyZWVNYXAucmVwZWF0Lng7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5zY2FsZS55ID0gdGhyZWVNYXAucmVwZWF0Lnk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aHJlZU1hdGVyaWFsLm5hbWUgPT09IFRIUkVFLkxvYWRlci5ERUZBVUxUX01BVEVSSUFMX05BTUUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFBob25nTWF0ZXJpYWwgKCk7XG4gICAgICAgIG1hdGVyaWFsLm5hbWUgPSB0aHJlZU1hdGVyaWFsLm5hbWU7XG4gICAgICAgIG1hdGVyaWFsLmNvbG9yID0gdGhpcy5Db252ZXJ0VGhyZWVDb2xvciAodGhyZWVNYXRlcmlhbC5jb2xvcik7XG4gICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSB0aHJlZU1hdGVyaWFsLm9wYWNpdHk7XG4gICAgICAgIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdGhyZWVNYXRlcmlhbC50cmFuc3BhcmVudDtcbiAgICAgICAgbWF0ZXJpYWwuYWxwaGFUZXN0ID0gdGhyZWVNYXRlcmlhbC5hbHBoYVRlc3Q7XG4gICAgICAgIGlmICh0aHJlZU1hdGVyaWFsLnR5cGUgPT09ICdNZXNoUGhvbmdNYXRlcmlhbCcpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyID0gdGhpcy5Db252ZXJ0VGhyZWVDb2xvciAodGhyZWVNYXRlcmlhbC5zcGVjdWxhcik7XG4gICAgICAgICAgICBtYXRlcmlhbC5zaGluaW5lc3MgPSB0aHJlZU1hdGVyaWFsLnNoaW5pbmVzcyAvIDEwMC4wO1xuICAgICAgICB9XG4gICAgICAgIG1hdGVyaWFsLmRpZmZ1c2VNYXAgPSBDcmVhdGVUZXh0dXJlICh0aHJlZU1hdGVyaWFsLm1hcCwgdGhpcy5vYmplY3RVcmxUb0ZpbGVOYW1lKTtcbiAgICAgICAgbWF0ZXJpYWwubm9ybWFsTWFwID0gQ3JlYXRlVGV4dHVyZSAodGhyZWVNYXRlcmlhbC5ub3JtYWxNYXAsIHRoaXMub2JqZWN0VXJsVG9GaWxlTmFtZSk7XG4gICAgICAgIG1hdGVyaWFsLmJ1bXBNYXAgPSBDcmVhdGVUZXh0dXJlICh0aHJlZU1hdGVyaWFsLmJ1bXBNYXAsIHRoaXMub2JqZWN0VXJsVG9GaWxlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIH1cblxuICAgIENvbnZlcnRUaHJlZUNvbG9yICh0aHJlZUNvbG9yKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JDb252ZXJ0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocmVlQ29sb3IgPSB0aGlzLmNvbG9yQ29udmVydGVyLkNvbnZlcnQgKHRocmVlQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb252ZXJ0VGhyZWVDb2xvclRvQ29sb3IgKHRocmVlQ29sb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyVGhyZWVGYnggZXh0ZW5kcyBJbXBvcnRlclRocmVlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy5jb2xvckNvbnZlcnRlciA9IG5ldyBUaHJlZUxpbmVhclRvU1JHQkNvbG9yQ29udmVydGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ2ZieCc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWTtcbiAgICB9XG5cbiAgICBDcmVhdGVMb2FkZXIgKG1hbmFnZXIpXG4gICAge1xuICAgICAgICBtYW5hZ2VyLmFkZEhhbmRsZXIgKC9cXC50Z2EkL2ksIG5ldyBUR0FMb2FkZXIgKG1hbmFnZXIpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGQlhMb2FkZXIgKG1hbmFnZXIpO1xuICAgIH1cblxuICAgIEdldE1haW5PYmplY3QgKGxvYWRlZE9iamVjdClcbiAgICB7XG4gICAgICAgIHJldHVybiBsb2FkZWRPYmplY3Q7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW1wb3J0ZXJUaHJlZURhZSBleHRlbmRzIEltcG9ydGVyVGhyZWVCYXNlXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHN1cGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ2RhZSc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWTtcbiAgICB9XG5cbiAgICBDcmVhdGVMb2FkZXIgKG1hbmFnZXIpXG4gICAge1xuICAgICAgICBtYW5hZ2VyLmFkZEhhbmRsZXIgKC9cXC50Z2EkL2ksIG5ldyBUR0FMb2FkZXIgKG1hbmFnZXIpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsYWRhTG9hZGVyIChtYW5hZ2VyKTtcbiAgICB9XG5cbiAgICBHZXRNYWluT2JqZWN0IChsb2FkZWRPYmplY3QpXG4gICAge1xuICAgICAgICByZXR1cm4gbG9hZGVkT2JqZWN0LnNjZW5lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyVGhyZWVXcmwgZXh0ZW5kcyBJbXBvcnRlclRocmVlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICAgICAgdGhpcy5jb2xvckNvbnZlcnRlciA9IG5ldyBUaHJlZUxpbmVhclRvU1JHQkNvbG9yQ29udmVydGVyICgpO1xuICAgIH1cblxuICAgIENhbkltcG9ydEV4dGVuc2lvbiAoZXh0ZW5zaW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gJ3dybCc7XG4gICAgfVxuXG4gICAgR2V0VXBEaXJlY3Rpb24gKClcbiAgICB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uWTtcbiAgICB9XG5cbiAgICBDcmVhdGVMb2FkZXIgKG1hbmFnZXIpXG4gICAge1xuICAgICAgICByZXR1cm4gbmV3IFZSTUxMb2FkZXIgKG1hbmFnZXIpO1xuICAgIH1cblxuICAgIEdldE1haW5PYmplY3QgKGxvYWRlZE9iamVjdClcbiAgICB7XG4gICAgICAgIHJldHVybiBsb2FkZWRPYmplY3Q7XG4gICAgfVxuXG4gICAgSXNNZXNoVmlzaWJsZSAobWVzaClcbiAgICB7XG4gICAgICAgIGxldCBpc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSAobWVzaC5tYXRlcmlhbCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5tYXRlcmlhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChtZXNoLm1hdGVyaWFsW2ldLnNpZGUgPT09IFRIUkVFLkJhY2tTaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc1Zpc2libGUgPSAobWVzaC5tYXRlcmlhbC5zaWRlICE9PSBUSFJFRS5CYWNrU2lkZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlclRocmVlM21mIGV4dGVuZHMgSW1wb3J0ZXJUaHJlZUJhc2VcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMuY29sb3JDb252ZXJ0ZXIgPSBuZXcgVGhyZWVTUkdCVG9MaW5lYXJDb2xvckNvbnZlcnRlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICczbWYnO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlo7XG4gICAgfVxuXG4gICAgQ3JlYXRlTG9hZGVyIChtYW5hZ2VyKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaHJlZU1GTG9hZGVyIChtYW5hZ2VyKTtcbiAgICB9XG5cbiAgICBHZXRNYWluT2JqZWN0IChsb2FkZWRPYmplY3QpXG4gICAge1xuICAgICAgICByZXR1cm4gbG9hZGVkT2JqZWN0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyVGhyZWVBbWYgZXh0ZW5kcyBJbXBvcnRlclRocmVlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdhbWYnO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlo7XG4gICAgfVxuXG4gICAgQ3JlYXRlTG9hZGVyIChtYW5hZ2VyKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBTUZMb2FkZXIgKG1hbmFnZXIpO1xuICAgIH1cblxuICAgIEdldE1haW5PYmplY3QgKGxvYWRlZE9iamVjdClcbiAgICB7XG4gICAgICAgIHJldHVybiBsb2FkZWRPYmplY3Q7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXJCYXNlIH0gZnJvbSAnLi9pbXBvcnRlcmJhc2UuanMnO1xuaW1wb3J0IHsgR2V0RmlsZUV4dGVuc2lvbiB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBHZXRFeHRlcm5hbExpYlBhdGggfSBmcm9tICcuLi9pby9leHRlcm5hbGxpYnMuanMnO1xuaW1wb3J0IHsgQ29udmVydFRocmVlR2VvbWV0cnlUb01lc2ggfSBmcm9tICcuLi90aHJlZWpzL3RocmVldXRpbHMuanMnO1xuaW1wb3J0IHsgQXJyYXlCdWZmZXJUb1V0ZjhTdHJpbmcgfSBmcm9tICcuLi9pby9idWZmZXJ1dGlscy5qcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vbW9kZWwvbm9kZS5qcyc7XG5pbXBvcnQgeyBDb2xvclRvTWF0ZXJpYWxDb252ZXJ0ZXIgfSBmcm9tICcuL2ltcG9ydGVydXRpbHMuanMnO1xuaW1wb3J0IHsgUkdCQUNvbG9yIH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgUHJvcGVydHksIFByb3BlcnR5R3JvdXAsIFByb3BlcnR5VHlwZSB9IGZyb20gJy4uL21vZGVsL3Byb3BlcnR5LmpzJztcblxuaW1wb3J0ICogYXMgZmZsYXRlIGZyb20gJ2ZmbGF0ZSc7XG5cbmNvbnN0IERvY3VtZW50SW5pdFJlc3VsdCA9XG57XG4gICAgU3VjY2VzcyA6IDAsXG4gICAgTm9Eb2N1bWVudFhtbCA6IDFcbn07XG5cbmNsYXNzIEZyZWVDYWRPYmplY3RcbntcbiAgICBjb25zdHJ1Y3RvciAobmFtZSwgdHlwZSlcbiAgICB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuc2hhcGVOYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb2xvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlsZU5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbGVDb250ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbkxpbmtDb3VudCA9IDA7XG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IG51bGw7XG4gICAgfVxuXG4gICAgSXNDb252ZXJ0aWJsZSAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZU5hbWUgPT09IG51bGwgfHwgdGhpcy5maWxlQ29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbkxpbmtDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmNsYXNzIEZyZWVDYWREb2N1bWVudFxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLmZpbGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5vYmplY3ROYW1lcyA9IFtdO1xuICAgICAgICB0aGlzLm9iamVjdERhdGEgPSBuZXcgTWFwICgpO1xuICAgIH1cblxuICAgIEluaXQgKGZpbGVDb250ZW50KVxuICAgIHtcbiAgICAgICAgbGV0IGZpbGVDb250ZW50QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGZpbGVDb250ZW50KTtcbiAgICAgICAgdGhpcy5maWxlcyA9IGZmbGF0ZS51bnppcFN5bmMgKGZpbGVDb250ZW50QnVmZmVyKTtcbiAgICAgICAgaWYgKCF0aGlzLkxvYWREb2N1bWVudFhtbCAoKSkge1xuICAgICAgICAgICAgcmV0dXJuIERvY3VtZW50SW5pdFJlc3VsdC5Ob0RvY3VtZW50WG1sO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5Mb2FkR3VpRG9jdW1lbnRYbWwgKCk7XG4gICAgICAgIHJldHVybiBEb2N1bWVudEluaXRSZXN1bHQuU3VjY2VzcztcbiAgICB9XG5cbiAgICBHZXRPYmplY3RMaXN0VG9Db252ZXJ0ICgpXG4gICAge1xuICAgICAgICBsZXQgb2JqZWN0TGlzdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBvYmplY3ROYW1lIG9mIHRoaXMub2JqZWN0TmFtZXMpIHtcbiAgICAgICAgICAgIGxldCBvYmplY3QgPSB0aGlzLm9iamVjdERhdGEuZ2V0IChvYmplY3ROYW1lKTtcbiAgICAgICAgICAgIGlmICghb2JqZWN0LklzQ29udmVydGlibGUgKCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iamVjdExpc3QucHVzaCAob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0TGlzdDtcbiAgICB9XG5cbiAgICBJc1N1cHBvcnRlZFR5cGUgKHR5cGUpXG4gICAge1xuICAgICAgICBpZiAoIXR5cGUuc3RhcnRzV2l0aCAoJ1BhcnQ6OicpICYmICF0eXBlLnN0YXJ0c1dpdGggKCdQYXJ0RGVzaWduOjonKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlLmluZGV4T2YgKCdQYXJ0MkQnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBIYXNGaWxlIChmaWxlTmFtZSlcbiAgICB7XG4gICAgICAgIHJldHVybiAoZmlsZU5hbWUgaW4gdGhpcy5maWxlcyk7XG4gICAgfVxuXG4gICAgTG9hZERvY3VtZW50WG1sICgpXG4gICAge1xuICAgICAgICBsZXQgZG9jdW1lbnRYbWwgPSB0aGlzLkdldFhNTENvbnRlbnQgKCdEb2N1bWVudC54bWwnKTtcbiAgICAgICAgaWYgKGRvY3VtZW50WG1sID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgUHJvcGVydHlHcm91cCAoJ1Byb3BlcnRpZXMnKTtcbiAgICAgICAgbGV0IGRvY3VtZW50RWxlbWVudHMgPSBkb2N1bWVudFhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSAoJ0RvY3VtZW50Jyk7XG4gICAgICAgIGZvciAobGV0IGRvY3VtZW50RWxlbWVudCBvZiBkb2N1bWVudEVsZW1lbnRzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjaGlsZE5vZGUgb2YgZG9jdW1lbnRFbGVtZW50LmNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlLnRhZ05hbWUgPT09ICdQcm9wZXJ0aWVzJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkdldFByb3BlcnRpZXNGcm9tRWxlbWVudCAoY2hpbGROb2RlLCB0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYmplY3RzRWxlbWVudHMgPSBkb2N1bWVudFhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSAoJ09iamVjdHMnKTtcbiAgICAgICAgZm9yIChsZXQgb2JqZWN0c0VsZW1lbnQgb2Ygb2JqZWN0c0VsZW1lbnRzKSB7XG4gICAgICAgICAgICBsZXQgb2JqZWN0RWxlbWVudHMgPSBvYmplY3RzRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSAoJ09iamVjdCcpO1xuICAgICAgICAgICAgZm9yIChsZXQgb2JqZWN0RWxlbWVudCBvZiBvYmplY3RFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gb2JqZWN0RWxlbWVudC5nZXRBdHRyaWJ1dGUgKCduYW1lJyk7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvYmplY3RFbGVtZW50LmdldEF0dHJpYnV0ZSAoJ3R5cGUnKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuSXNTdXBwb3J0ZWRUeXBlICh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG9iamVjdCA9IG5ldyBGcmVlQ2FkT2JqZWN0IChuYW1lLCB0eXBlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdE5hbWVzLnB1c2ggKG5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0RGF0YS5zZXQgKG5hbWUsIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2JqZWN0RGF0YUVsZW1lbnRzID0gZG9jdW1lbnRYbWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKCdPYmplY3REYXRhJyk7XG4gICAgICAgIGZvciAobGV0IG9iamVjdERhdGFFbGVtZW50IG9mIG9iamVjdERhdGFFbGVtZW50cykge1xuICAgICAgICAgICAgbGV0IG9iamVjdEVsZW1lbnRzID0gb2JqZWN0RGF0YUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKCdPYmplY3QnKTtcbiAgICAgICAgICAgIGZvciAobGV0IG9iamVjdEVsZW1lbnQgb2Ygb2JqZWN0RWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IG9iamVjdEVsZW1lbnQuZ2V0QXR0cmlidXRlICgnbmFtZScpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vYmplY3REYXRhLmhhcyAobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IG9iamVjdCA9IHRoaXMub2JqZWN0RGF0YS5nZXQgKG5hbWUpO1xuICAgICAgICAgICAgICAgIG9iamVjdC5wcm9wZXJ0aWVzID0gbmV3IFByb3BlcnR5R3JvdXAgKCdQcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGROb2RlIG9mIG9iamVjdEVsZW1lbnQuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlLnRhZ05hbWUgPT09ICdQcm9wZXJ0aWVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5HZXRQcm9wZXJ0aWVzRnJvbUVsZW1lbnQgKGNoaWxkTm9kZSwgb2JqZWN0LnByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5RWxlbWVudHMgPSBvYmplY3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lICgnUHJvcGVydHknKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eUVsZW1lbnQgb2YgcHJvcGVydHlFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlOYW1lID0gcHJvcGVydHlFbGVtZW50LmdldEF0dHJpYnV0ZSAoJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ0xhYmVsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNoYXBlTmFtZSA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdTdHJpbmcnLCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdWaXNpYmlsaXR5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzVmlzaWJsZVN0cmluZyA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdCb29sJywgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaXNWaXNpYmxlID0gKGlzVmlzaWJsZVN0cmluZyA9PT0gJ3RydWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdWaXNpYmxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzVmlzaWJsZVN0cmluZyA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdCb29sJywgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaXNWaXNpYmxlID0gKGlzVmlzaWJsZVN0cmluZyA9PT0gJ3RydWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdTaGFwZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlTmFtZSA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdQYXJ0JywgJ2ZpbGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5IYXNGaWxlIChmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBleHRlbnNpb24gPSBHZXRGaWxlRXh0ZW5zaW9uIChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uICE9PSAnYnJwJyAmJiBleHRlbnNpb24gIT09ICdicmVwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuZmlsZUNvbnRlbnQgPSB0aGlzLmZpbGVzW2ZpbGVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsaW5rRWxlbWVudHMgPSBvYmplY3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lICgnTGluaycpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGxpbmtFbGVtZW50IG9mIGxpbmtFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlua2VkTmFtZSA9IGxpbmtFbGVtZW50LmdldEF0dHJpYnV0ZSAoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdERhdGEuaGFzIChsaW5rZWROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtlZE9iamVjdCA9IHRoaXMub2JqZWN0RGF0YS5nZXQgKGxpbmtlZE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2VkT2JqZWN0LmluTGlua0NvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBMb2FkR3VpRG9jdW1lbnRYbWwgKClcbiAgICB7XG4gICAgICAgIGxldCBkb2N1bWVudFhtbCA9IHRoaXMuR2V0WE1MQ29udGVudCAoJ0d1aURvY3VtZW50LnhtbCcpO1xuICAgICAgICBpZiAoZG9jdW1lbnRYbWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2aWV3UHJvdmlkZXJFbGVtZW50cyA9IGRvY3VtZW50WG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lICgnVmlld1Byb3ZpZGVyJyk7XG4gICAgICAgIGZvciAobGV0IHZpZXdQcm92aWRlckVsZW1lbnQgb2Ygdmlld1Byb3ZpZGVyRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gdmlld1Byb3ZpZGVyRWxlbWVudC5nZXRBdHRyaWJ1dGUgKCduYW1lJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub2JqZWN0RGF0YS5oYXMgKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBvYmplY3QgPSB0aGlzLm9iamVjdERhdGEuZ2V0IChuYW1lKTtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUVsZW1lbnRzID0gdmlld1Byb3ZpZGVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSAoJ1Byb3BlcnR5Jyk7XG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eUVsZW1lbnQgb2YgcHJvcGVydHlFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eUVsZW1lbnQuZ2V0QXR0cmlidXRlICgnbmFtZScpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdWaXNpYmlsaXR5Jykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNWaXNpYmxlU3RyaW5nID0gdGhpcy5HZXRGaXJzdENoaWxkVmFsdWUgKHByb3BlcnR5RWxlbWVudCwgJ0Jvb2wnLCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlzVmlzaWJsZSA9IChpc1Zpc2libGVTdHJpbmcgPT09ICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdTaGFwZUNvbG9yJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3JTdHJpbmcgPSB0aGlzLkdldEZpcnN0Q2hpbGRWYWx1ZSAocHJvcGVydHlFbGVtZW50LCAnUHJvcGVydHlDb2xvcicsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmdiYSA9IHBhcnNlSW50IChjb2xvclN0cmluZywgMTApO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY29sb3IgPSBuZXcgUkdCQUNvbG9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJnYmEgPj4gMjQgJiAweGZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmdiYSA+PiAxNiAmIDB4ZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICByZ2JhID4+IDggJiAweGZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgMjU1XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgR2V0UHJvcGVydGllc0Zyb21FbGVtZW50IChwcm9wZXJ0aWVzRWxlbWVudCwgcHJvcGVydHlHcm91cClcbiAgICB7XG4gICAgICAgIGxldCBwcm9wZXJ0eUVsZW1lbnRzID0gcHJvcGVydGllc0VsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKCdQcm9wZXJ0eScpO1xuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eUVsZW1lbnQgb2YgcHJvcGVydHlFbGVtZW50cykge1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5TmFtZSA9IHByb3BlcnR5RWxlbWVudC5nZXRBdHRyaWJ1dGUgKCduYW1lJyk7XG4gICAgICAgICAgICBsZXQgcHJvcGVydHlUeXBlID0gcHJvcGVydHlFbGVtZW50LmdldEF0dHJpYnV0ZSAoJ3R5cGUnKTtcblxuICAgICAgICAgICAgbGV0IHByb3BlcnR5ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eVR5cGUgPT09ICdBcHA6OlByb3BlcnR5Qm9vbCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdTdHJpbmcnLCAnYm9vbCcpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlICE9PSBudWxsICYmIHByb3BlcnR5VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLkJvb2xlYW4sIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSA9PT0gJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5VHlwZSA9PT0gJ0FwcDo6UHJvcGVydHlJbnRlZ2VyJykge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gdGhpcy5HZXRGaXJzdENoaWxkVmFsdWUgKHByb3BlcnR5RWxlbWVudCwgJ0ludGVnZXInLCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSAhPT0gbnVsbCAmJiBwcm9wZXJ0eVZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkgKFByb3BlcnR5VHlwZS5JbnRlZ2VyLCBwcm9wZXJ0eU5hbWUsIHBhcnNlSW50IChwcm9wZXJ0eVZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVR5cGUgPT09ICdBcHA6OlByb3BlcnR5U3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gdGhpcy5HZXRGaXJzdENoaWxkVmFsdWUgKHByb3BlcnR5RWxlbWVudCwgJ1N0cmluZycsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlICE9PSBudWxsICYmIHByb3BlcnR5VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLlRleHQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVR5cGUgPT09ICdBcHA6OlByb3BlcnR5VVVJRCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdVdWlkJywgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5VmFsdWUgIT09IG51bGwgJiYgcHJvcGVydHlWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gbmV3IFByb3BlcnR5IChQcm9wZXJ0eVR5cGUuVGV4dCwgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5VHlwZSA9PT0gJ0FwcDo6UHJvcGVydHlGbG9hdCcgfHwgcHJvcGVydHlUeXBlID09PSAnQXBwOjpQcm9wZXJ0eUxlbmd0aCcgfHwgcHJvcGVydHlUeXBlID09PSAnQXBwOjpQcm9wZXJ0eURpc3RhbmNlJyB8fCBwcm9wZXJ0eVR5cGUgPT09ICdBcHA6OlByb3BlcnR5QXJlYScgfHwgcHJvcGVydHlUeXBlID09PSAnQXBwOjpQcm9wZXJ0eVZvbHVtZScpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IHRoaXMuR2V0Rmlyc3RDaGlsZFZhbHVlIChwcm9wZXJ0eUVsZW1lbnQsICdGbG9hdCcsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlICE9PSBudWxsICYmIHByb3BlcnR5VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSAoUHJvcGVydHlUeXBlLk51bWJlciwgcHJvcGVydHlOYW1lLCBwYXJzZUZsb2F0IChwcm9wZXJ0eVZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlHcm91cC5BZGRQcm9wZXJ0eSAocHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgR2V0WE1MQ29udGVudCAoeG1sRmlsZU5hbWUpXG4gICAge1xuICAgICAgICBpZiAoIXRoaXMuSGFzRmlsZSAoeG1sRmlsZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB4bWxQYXJzZXIgPSBuZXcgRE9NUGFyc2VyICgpO1xuICAgICAgICBsZXQgeG1sU3RyaW5nID0gQXJyYXlCdWZmZXJUb1V0ZjhTdHJpbmcgKHRoaXMuZmlsZXNbeG1sRmlsZU5hbWVdKTtcbiAgICAgICAgcmV0dXJuIHhtbFBhcnNlci5wYXJzZUZyb21TdHJpbmcgKHhtbFN0cmluZywgJ3RleHQveG1sJyk7XG4gICAgfVxuXG4gICAgR2V0Rmlyc3RDaGlsZFZhbHVlIChlbGVtZW50LCBjaGlsZFRhZ05hbWUsIGNoaWxkQXR0cmlidXRlKVxuICAgIHtcbiAgICAgICAgbGV0IGNoaWxkT2JqZWN0cyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKGNoaWxkVGFnTmFtZSk7XG4gICAgICAgIGlmIChjaGlsZE9iamVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGRPYmplY3RzWzBdLmdldEF0dHJpYnV0ZSAoY2hpbGRBdHRyaWJ1dGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyRmNzdGQgZXh0ZW5kcyBJbXBvcnRlckJhc2VcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgc3VwZXIgKCk7XG4gICAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgQ2FuSW1wb3J0RXh0ZW5zaW9uIChleHRlbnNpb24pXG4gICAge1xuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uID09PSAnZmNzdGQnO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlo7XG4gICAgfVxuXG5cdENsZWFyQ29udGVudCAoKVxuXHR7XG4gICAgICAgIGlmICh0aGlzLndvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy53b3JrZXIudGVybWluYXRlICgpO1xuICAgICAgICAgICAgdGhpcy53b3JrZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBudWxsO1xuXHR9XG5cbiAgICBSZXNldENvbnRlbnQgKClcbiAgICB7XG4gICAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IG5ldyBGcmVlQ2FkRG9jdW1lbnQgKCk7XG4gICAgfVxuXG4gICAgSW1wb3J0Q29udGVudCAoZmlsZUNvbnRlbnQsIG9uRmluaXNoKVxuICAgIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuZG9jdW1lbnQuSW5pdCAoZmlsZUNvbnRlbnQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBEb2N1bWVudEluaXRSZXN1bHQuTm9Eb2N1bWVudFhtbCkge1xuICAgICAgICAgICAgdGhpcy5TZXRFcnJvciAoJ05vIERvY3VtZW50LnhtbCBmb3VuZC4nKTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQucHJvcGVydGllcyAhPT0gbnVsbCAmJiB0aGlzLmRvY3VtZW50LnByb3BlcnRpZXMuUHJvcGVydHlDb3VudCAoKSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuQWRkUHJvcGVydHlHcm91cCAodGhpcy5kb2N1bWVudC5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYmplY3RzVG9Db252ZXJ0ID0gdGhpcy5kb2N1bWVudC5HZXRPYmplY3RMaXN0VG9Db252ZXJ0ICgpO1xuICAgICAgICBpZiAob2JqZWN0c1RvQ29udmVydC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuU2V0RXJyb3IgKCdObyBpbXBvcnRhYmxlIG9iamVjdCBmb3VuZC4nKTtcbiAgICAgICAgICAgIG9uRmluaXNoICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5Db252ZXJ0T2JqZWN0cyAob2JqZWN0c1RvQ29udmVydCwgb25GaW5pc2gpO1xuICAgIH1cblxuICAgIENvbnZlcnRPYmplY3RzIChvYmplY3RzLCBvbkZpbmlzaClcbiAgICB7XG4gICAgICAgIGxldCB3b3JrZXJQYXRoID0gR2V0RXh0ZXJuYWxMaWJQYXRoICgnbG9hZGVycy9vY2N0LWltcG9ydC1qcy13b3JrZXIuanMnKTtcbiAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgV29ya2VyICh3b3JrZXJQYXRoKTtcblxuICAgICAgICBsZXQgY29udmVydGVkT2JqZWN0Q291bnQgPSAwO1xuICAgICAgICBsZXQgY29sb3JUb01hdGVyaWFsID0gbmV3IENvbG9yVG9NYXRlcmlhbENvbnZlcnRlciAodGhpcy5tb2RlbCk7XG4gICAgICAgIGxldCBvbkZpbGVDb252ZXJ0ZWQgPSAocmVzdWx0Q29udGVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudE9iamVjdCA9IG9iamVjdHNbY29udmVydGVkT2JqZWN0Q291bnRdO1xuICAgICAgICAgICAgICAgIHRoaXMuT25GaWxlQ29udmVydGVkIChjdXJyZW50T2JqZWN0LCByZXN1bHRDb250ZW50LCBjb2xvclRvTWF0ZXJpYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udmVydGVkT2JqZWN0Q291bnQgKz0gMTtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0ZWRPYmplY3RDb3VudCA9PT0gb2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvbkZpbmlzaCAoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRPYmplY3QgPSBvYmplY3RzW2NvbnZlcnRlZE9iamVjdENvdW50XTtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSAoe1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgOiAnYnJlcCcsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA6IGN1cnJlbnRPYmplY3QuZmlsZUNvbnRlbnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyICgnbWVzc2FnZScsIChldikgPT4ge1xuICAgICAgICAgICAgb25GaWxlQ29udmVydGVkIChldi5kYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lciAoJ2Vycm9yJywgKGV2KSA9PiB7XG4gICAgICAgICAgICBvbkZpbGVDb252ZXJ0ZWQgKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgY3VycmVudE9iamVjdCA9IG9iamVjdHNbY29udmVydGVkT2JqZWN0Q291bnRdO1xuICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSAoe1xuICAgICAgICAgICAgZm9ybWF0IDogJ2JyZXAnLFxuICAgICAgICAgICAgYnVmZmVyIDogY3VycmVudE9iamVjdC5maWxlQ29udGVudFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBPbkZpbGVDb252ZXJ0ZWQgKG9iamVjdCwgcmVzdWx0Q29udGVudCwgY29sb3JUb01hdGVyaWFsKVxuICAgIHtcbiAgICAgICAgaWYgKCFyZXN1bHRDb250ZW50LnN1Y2Nlc3MgfHwgcmVzdWx0Q29udGVudC5tZXNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2JqZWN0Tm9kZSA9IG5ldyBOb2RlICgpO1xuICAgICAgICBpZiAob2JqZWN0LnNoYXBlTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqZWN0Tm9kZS5TZXROYW1lIChvYmplY3Quc2hhcGVOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYmplY3RNZXNoSW5kZXggPSAxO1xuICAgICAgICBmb3IgKGxldCByZXN1bHRNZXNoIG9mIHJlc3VsdENvbnRlbnQubWVzaGVzKSB7XG4gICAgICAgICAgICBsZXQgbWF0ZXJpYWxJbmRleCA9IG51bGw7XG4gICAgICAgICAgICBpZiAob2JqZWN0LmNvbG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxJbmRleCA9IGNvbG9yVG9NYXRlcmlhbC5HZXRNYXRlcmlhbEluZGV4IChcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmNvbG9yLnIsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5jb2xvci5nLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY29sb3IuYixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmNvbG9yLmFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1lc2ggPSBDb252ZXJ0VGhyZWVHZW9tZXRyeVRvTWVzaCAocmVzdWx0TWVzaCwgbWF0ZXJpYWxJbmRleCwgbnVsbCk7XG4gICAgICAgICAgICBpZiAob2JqZWN0LnNoYXBlTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleFN0cmluZyA9IG9iamVjdE1lc2hJbmRleC50b1N0cmluZyAoKS5wYWRTdGFydCAoMywgJzAnKTtcbiAgICAgICAgICAgICAgICBtZXNoLlNldE5hbWUgKG9iamVjdC5zaGFwZU5hbWUgKyAnICcgKyBpbmRleFN0cmluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmplY3QucHJvcGVydGllcyAhPT0gbnVsbCAmJiBvYmplY3QucHJvcGVydGllcy5Qcm9wZXJ0eUNvdW50ICgpID4gMCkge1xuICAgICAgICAgICAgICAgIG1lc2guQWRkUHJvcGVydHlHcm91cCAob2JqZWN0LnByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbWVzaEluZGV4ID0gdGhpcy5tb2RlbC5BZGRNZXNoIChtZXNoKTtcbiAgICAgICAgICAgIG9iamVjdE5vZGUuQWRkTWVzaEluZGV4IChtZXNoSW5kZXgpO1xuICAgICAgICAgICAgb2JqZWN0TWVzaEluZGV4ICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcm9vdE5vZGUgPSB0aGlzLm1vZGVsLkdldFJvb3ROb2RlICgpO1xuICAgICAgICByb290Tm9kZS5BZGRDaGlsZE5vZGUgKG9iamVjdE5vZGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJ1blRhc2tBc3luYyB9IGZyb20gJy4uL2NvcmUvdGFza3J1bm5lci5qcyc7XG5pbXBvcnQgeyBGaWxlU291cmNlLCBHZXRGaWxlTmFtZSB9IGZyb20gJy4uL2lvL2ZpbGV1dGlscy5qcyc7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gJy4uL21vZGVsL2NvbG9yLmpzJztcbmltcG9ydCB7IEltcG9ydGVyRmlsZSwgSW1wb3J0ZXJGaWxlTGlzdCB9IGZyb20gJy4vaW1wb3J0ZXJmaWxlcy5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlcjNkbSB9IGZyb20gJy4vaW1wb3J0ZXIzZG0uanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXIzZHMgfSBmcm9tICcuL2ltcG9ydGVyM2RzLmpzJztcbmltcG9ydCB7IEltcG9ydGVyR2x0ZiB9IGZyb20gJy4vaW1wb3J0ZXJnbHRmLmpzJztcbmltcG9ydCB7IEltcG9ydGVySWZjIH0gZnJvbSAnLi9pbXBvcnRlcmlmYy5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlck9iaiB9IGZyb20gJy4vaW1wb3J0ZXJvYmouanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXJPZmYgfSBmcm9tICcuL2ltcG9ydGVyb2ZmLmpzJztcbmltcG9ydCB7IEltcG9ydGVyUGx5IH0gZnJvbSAnLi9pbXBvcnRlcnBseS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlck9jY3QgfSBmcm9tICcuL2ltcG9ydGVyb2NjdC5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlclN0bCB9IGZyb20gJy4vaW1wb3J0ZXJzdGwuanMnO1xuaW1wb3J0IHsgSW1wb3J0ZXJCaW0gfSBmcm9tICcuL2ltcG9ydGVyYmltLmpzJztcbmltcG9ydCB7IEltcG9ydGVyVGhyZWVBbWYsIEltcG9ydGVyVGhyZWUzbWYsIEltcG9ydGVyVGhyZWVEYWUsIEltcG9ydGVyVGhyZWVGYngsIEltcG9ydGVyVGhyZWVXcmwgfSBmcm9tICcuL2ltcG9ydGVydGhyZWUuanMnO1xuXG5pbXBvcnQgKiBhcyBmZmxhdGUgZnJvbSAnZmZsYXRlJztcbmltcG9ydCB7IEltcG9ydGVyRmNzdGQgfSBmcm9tICcuL2ltcG9ydGVyZmNzdGQuanMnO1xuXG5leHBvcnQgY2xhc3MgSW1wb3J0U2V0dGluZ3NcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0Q29sb3IgPSBuZXcgUkdCQ29sb3IgKDIwMCwgMjAwLCAyMDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEltcG9ydEVycm9yQ29kZSA9XG57XG4gICAgTm9JbXBvcnRhYmxlRmlsZSA6IDEsXG4gICAgRmFpbGVkVG9Mb2FkRmlsZSA6IDIsXG4gICAgSW1wb3J0RmFpbGVkIDogMyxcbiAgICBVbmtub3duRXJyb3IgOiA0XG59O1xuXG5leHBvcnQgY2xhc3MgSW1wb3J0RXJyb3JcbntcbiAgICBjb25zdHJ1Y3RvciAoY29kZSlcbiAgICB7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWFpbkZpbGUgPSBudWxsO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydFJlc3VsdFxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYWluRmlsZSA9IG51bGw7XG4gICAgICAgIHRoaXMudXBWZWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLnVzZWRGaWxlcyA9IG51bGw7XG4gICAgICAgIHRoaXMubWlzc2luZ0ZpbGVzID0gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbXBvcnRlckZpbGVBY2Nlc3Nvclxue1xuICAgIGNvbnN0cnVjdG9yIChnZXRCdWZmZXJDYWxsYmFjaylcbiAgICB7XG4gICAgICAgIHRoaXMuZ2V0QnVmZmVyQ2FsbGJhY2sgPSBnZXRCdWZmZXJDYWxsYmFjaztcbiAgICAgICAgdGhpcy5maWxlQnVmZmVycyA9IG5ldyBNYXAgKCk7XG4gICAgfVxuXG4gICAgR2V0RmlsZUJ1ZmZlciAoZmlsZVBhdGgpXG4gICAge1xuICAgICAgICBsZXQgZmlsZU5hbWUgPSBHZXRGaWxlTmFtZSAoZmlsZVBhdGgpO1xuICAgICAgICBpZiAodGhpcy5maWxlQnVmZmVycy5oYXMgKGZpbGVOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUJ1ZmZlcnMuZ2V0IChmaWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuZ2V0QnVmZmVyQ2FsbGJhY2sgKGZpbGVOYW1lKTtcbiAgICAgICAgdGhpcy5maWxlQnVmZmVycy5zZXQgKGZpbGVOYW1lLCBidWZmZXIpO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuaW1wb3J0ZXJzID0gW1xuICAgICAgICAgICAgbmV3IEltcG9ydGVyT2JqICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyU3RsICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyT2ZmICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyUGx5ICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyM2RzICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyR2x0ZiAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlckJpbSAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlcjNkbSAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlcklmYyAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlck9jY3QgKCksXG4gICAgICAgICAgICBuZXcgSW1wb3J0ZXJGY3N0ZCAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlclRocmVlRmJ4ICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyVGhyZWVEYWUgKCksXG4gICAgICAgICAgICBuZXcgSW1wb3J0ZXJUaHJlZVdybCAoKSxcbiAgICAgICAgICAgIG5ldyBJbXBvcnRlclRocmVlM21mICgpLFxuICAgICAgICAgICAgbmV3IEltcG9ydGVyVGhyZWVBbWYgKClcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5maWxlTGlzdCA9IG5ldyBJbXBvcnRlckZpbGVMaXN0ICgpO1xuICAgICAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy51c2VkRmlsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5taXNzaW5nRmlsZXMgPSBbXTtcbiAgICB9XG5cblx0QWRkSW1wb3J0ZXIgKGltcG9ydGVyKVxuXHR7XG5cdFx0dGhpcy5pbXBvcnRlcnMucHVzaCAoaW1wb3J0ZXIpO1xuXHR9XG5cbiAgICBJbXBvcnRGaWxlcyAoaW5wdXRGaWxlcywgc2V0dGluZ3MsIGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIGNhbGxiYWNrcy5vbkxvYWRTdGFydCAoKTtcbiAgICAgICAgdGhpcy5Mb2FkRmlsZXMgKGlucHV0RmlsZXMsIHtcbiAgICAgICAgICAgIG9uUmVhZHkgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uSW1wb3J0U3RhcnQgKCk7XG4gICAgICAgICAgICAgICAgUnVuVGFza0FzeW5jICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRGVjb21wcmVzc0FyY2hpdmVzICh0aGlzLmZpbGVMaXN0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkltcG9ydExvYWRlZEZpbGVzIChzZXR0aW5ncywgY2FsbGJhY2tzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25GaWxlTGlzdFByb2dyZXNzIDogY2FsbGJhY2tzLm9uRmlsZUxpc3RQcm9ncmVzcyxcbiAgICAgICAgICAgIG9uRmlsZUxvYWRQcm9ncmVzcyA6IGNhbGxiYWNrcy5vbkZpbGVMb2FkUHJvZ3Jlc3NcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgTG9hZEZpbGVzIChpbnB1dEZpbGVzLCBjYWxsYmFja3MpXG4gICAge1xuICAgICAgICBsZXQgbmV3RmlsZUxpc3QgPSBuZXcgSW1wb3J0ZXJGaWxlTGlzdCAoKTtcbiAgICAgICAgbmV3RmlsZUxpc3QuRmlsbEZyb21JbnB1dEZpbGVzIChpbnB1dEZpbGVzKTtcblxuICAgICAgICBsZXQgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuSGFzSW1wb3J0YWJsZUZpbGUgKG5ld0ZpbGVMaXN0KSkge1xuICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZvdW5kTWlzc2luZ0ZpbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5taXNzaW5nRmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbWlzc2luZ0ZpbGUgPSB0aGlzLm1pc3NpbmdGaWxlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3RmlsZUxpc3QuQ29udGFpbnNGaWxlQnlQYXRoIChtaXNzaW5nRmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRNaXNzaW5nRmlsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmb3VuZE1pc3NpbmdGaWxlKSB7XG4gICAgICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVMaXN0LkV4dGVuZEZyb21GaWxlTGlzdCAobmV3RmlsZUxpc3QpO1xuICAgICAgICAgICAgICAgIHJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVMaXN0ID0gbmV3RmlsZUxpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWxlTGlzdC5HZXRDb250ZW50ICh7XG4gICAgICAgICAgICBvblJlYWR5IDogY2FsbGJhY2tzLm9uUmVhZHksXG4gICAgICAgICAgICBvbkZpbGVMaXN0UHJvZ3Jlc3MgOiBjYWxsYmFja3Mub25GaWxlTGlzdFByb2dyZXNzLFxuICAgICAgICAgICAgb25GaWxlTG9hZFByb2dyZXNzIDogY2FsbGJhY2tzLm9uRmlsZUxvYWRQcm9ncmVzc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBJbXBvcnRMb2FkZWRGaWxlcyAoc2V0dGluZ3MsIGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJbXBvcnRMb2FkZWRGaWxlcyNtYWluRmlsZScsIHRoaXMuZmlsZUxpc3QpO1xuICAgICAgICBsZXQgaW1wb3J0YWJsZUZpbGVzID0gdGhpcy5HZXRJbXBvcnRhYmxlRmlsZXMgKHRoaXMuZmlsZUxpc3QpO1xuICAgICAgICBpZiAoaW1wb3J0YWJsZUZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2FsbGJhY2tzLm9uSW1wb3J0RXJyb3IgKG5ldyBJbXBvcnRFcnJvciAoSW1wb3J0RXJyb3JDb2RlLk5vSW1wb3J0YWJsZUZpbGUpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbXBvcnRhYmxlRmlsZXMubGVuZ3RoID09PSAxIHx8ICFjYWxsYmFja3Mub25TZWxlY3RNYWluRmlsZSkge1xuICAgICAgICAgICAgbGV0IG1haW5GaWxlID0gaW1wb3J0YWJsZUZpbGVzWzBdO1xuICAgICAgICAgICAgdGhpcy5JbXBvcnRMb2FkZWRNYWluRmlsZSAobWFpbkZpbGUsIHNldHRpbmdzLCBjYWxsYmFja3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZpbGVOYW1lcyA9IGltcG9ydGFibGVGaWxlcy5tYXAgKGltcG9ydGFibGVGaWxlID0+IGltcG9ydGFibGVGaWxlLmZpbGUubmFtZSk7XG4gICAgICAgICAgICBjYWxsYmFja3Mub25TZWxlY3RNYWluRmlsZSAoZmlsZU5hbWVzLCAobWFpbkZpbGVJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtYWluRmlsZUluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkltcG9ydEVycm9yIChuZXcgSW1wb3J0RXJyb3IgKEltcG9ydEVycm9yQ29kZS5Ob0ltcG9ydGFibGVGaWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUnVuVGFza0FzeW5jICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYWluRmlsZSA9IGltcG9ydGFibGVGaWxlc1ttYWluRmlsZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5JbXBvcnRMb2FkZWRNYWluRmlsZSAobWFpbkZpbGUsIHNldHRpbmdzLCBjYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBJbXBvcnRMb2FkZWRNYWluRmlsZSAobWFpbkZpbGUsIHNldHRpbmdzLCBjYWxsYmFja3MpXG4gICAge1xuICAgICAgY29uc29sZS5sb2coJ0ltcG9ydExvYWRlZE1haW5GaWxlI21haW5GaWxlJywgbWFpbkZpbGUpO1xuICAgICAgaWYgKG1haW5GaWxlID09PSBudWxsIHx8IG1haW5GaWxlLmZpbGUgPT09IG51bGwgfHwgbWFpbkZpbGUuZmlsZS5jb250ZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBuZXcgSW1wb3J0RXJyb3IgKEltcG9ydEVycm9yQ29kZS5GYWlsZWRUb0xvYWRGaWxlKTtcbiAgICAgICAgICAgIGlmIChtYWluRmlsZSAhPT0gbnVsbCAmJiBtYWluRmlsZS5maWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IubWFpbkZpbGUgPSBtYWluRmlsZS5maWxlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFja3Mub25JbXBvcnRFcnJvciAoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XG4gICAgICAgIHRoaXMudXNlZEZpbGVzID0gW107XG4gICAgICAgIHRoaXMubWlzc2luZ0ZpbGVzID0gW107XG4gICAgICAgIHRoaXMudXNlZEZpbGVzLnB1c2ggKG1haW5GaWxlLmZpbGUubmFtZSk7XG5cbiAgICAgICAgbGV0IGltcG9ydGVyID0gbWFpbkZpbGUuaW1wb3J0ZXI7XG4gICAgICAgIGxldCBmaWxlQWNjZXNzb3IgPSBuZXcgSW1wb3J0ZXJGaWxlQWNjZXNzb3IgKChmaWxlTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpbGVCdWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGZpbGUgPSB0aGlzLmZpbGVMaXN0LkZpbmRGaWxlQnlQYXRoIChmaWxlTmFtZSk7XG4gICAgICAgICAgICBpZiAoZmlsZSA9PT0gbnVsbCB8fCBmaWxlLmNvbnRlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pc3NpbmdGaWxlcy5wdXNoIChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgZmlsZUJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlZEZpbGVzLnB1c2ggKGZpbGVOYW1lKTtcbiAgICAgICAgICAgICAgICBmaWxlQnVmZmVyID0gZmlsZS5jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpbGVCdWZmZXI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGltcG9ydGVyLkltcG9ydCAobWFpbkZpbGUuZmlsZS5uYW1lLCBtYWluRmlsZS5maWxlLmV4dGVuc2lvbiwgbWFpbkZpbGUuZmlsZS5jb250ZW50LCB7XG4gICAgICAgICAgICBnZXREZWZhdWx0TWF0ZXJpYWxDb2xvciA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MuZGVmYXVsdENvbG9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEZpbGVCdWZmZXIgOiAoZmlsZVBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZUFjY2Vzc29yLkdldEZpbGVCdWZmZXIgKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblN1Y2Nlc3MgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IGltcG9ydGVyLkdldE1vZGVsICgpO1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBuZXcgSW1wb3J0UmVzdWx0ICgpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5tYWluRmlsZSA9IG1haW5GaWxlLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICByZXN1bHQubW9kZWwgPSB0aGlzLm1vZGVsO1xuICAgICAgICAgICAgICAgIHJlc3VsdC51c2VkRmlsZXMgPSB0aGlzLnVzZWRGaWxlcztcbiAgICAgICAgICAgICAgICByZXN1bHQubWlzc2luZ0ZpbGVzID0gdGhpcy5taXNzaW5nRmlsZXM7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnVwVmVjdG9yID0gaW1wb3J0ZXIuR2V0VXBEaXJlY3Rpb24gKCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uSW1wb3J0U3VjY2VzcyAocmVzdWx0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVycm9yIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBJbXBvcnRFcnJvciAoSW1wb3J0RXJyb3JDb2RlLkltcG9ydEZhaWxlZCk7XG4gICAgICAgICAgICAgICAgZXJyb3IubWFpbkZpbGUgPSBtYWluRmlsZS5maWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZSA9IGltcG9ydGVyLkdldEVycm9yTWVzc2FnZSAoKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25JbXBvcnRFcnJvciAoZXJyb3IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQ29tcGxldGUgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaW1wb3J0ZXIuQ2xlYXIgKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIERlY29tcHJlc3NBcmNoaXZlcyAoZmlsZUxpc3QsIG9uUmVhZHkpXG4gICAge1xuICAgICAgICBsZXQgZmlsZXMgPSBmaWxlTGlzdC5HZXRGaWxlcyAoKTtcbiAgICAgICAgbGV0IGFyY2hpdmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgICAgIGlmIChmaWxlLmV4dGVuc2lvbiA9PT0gJ3ppcCcpIHtcbiAgICAgICAgICAgICAgICBhcmNoaXZlcy5wdXNoIChmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJjaGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBvblJlYWR5ICgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJjaGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFyY2hpdmVGaWxlID0gYXJjaGl2ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBhcmNoaXZlQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGFyY2hpdmVGaWxlLmNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc3QgZGVjb21wcmVzc2VkID0gZmZsYXRlLnVuemlwU3luYyAoYXJjaGl2ZUJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVOYW1lIGluIGRlY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwgKGRlY29tcHJlc3NlZCwgZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlID0gbmV3IEltcG9ydGVyRmlsZSAoZmlsZU5hbWUsIEZpbGVTb3VyY2UuRGVjb21wcmVzc2VkLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZS5TZXRDb250ZW50IChkZWNvbXByZXNzZWRbZmlsZU5hbWVdLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0LkFkZEZpbGUgKGZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvblJlYWR5ICgpO1xuICAgIH1cblxuICAgIEdldEZpbGVMaXN0ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlTGlzdDtcbiAgICB9XG5cbiAgICBIYXNJbXBvcnRhYmxlRmlsZSAoZmlsZUxpc3QpXG4gICAge1xuICAgICAgICBsZXQgaW1wb3J0YWJsZUZpbGVzID0gdGhpcy5HZXRJbXBvcnRhYmxlRmlsZXMgKGZpbGVMaXN0KTtcbiAgICAgICAgcmV0dXJuIGltcG9ydGFibGVGaWxlcy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIEdldEltcG9ydGFibGVGaWxlcyAoZmlsZUxpc3QpXG4gICAge1xuICAgICAgICBmdW5jdGlvbiBGaW5kSW1wb3J0ZXIgKGZpbGUsIGltcG9ydGVycylcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yIChsZXQgaW1wb3J0ZXJJbmRleCA9IDA7IGltcG9ydGVySW5kZXggPCBpbXBvcnRlcnMubGVuZ3RoOyBpbXBvcnRlckluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW1wb3J0ZXIgPSBpbXBvcnRlcnNbaW1wb3J0ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGltcG9ydGVyLkNhbkltcG9ydEV4dGVuc2lvbiAoZmlsZS5leHRlbnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbXBvcnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbXBvcnRhYmxlRmlsZXMgPSBbXTtcbiAgICAgICAgbGV0IGZpbGVzID0gZmlsZUxpc3QuR2V0RmlsZXMgKCk7XG4gICAgICAgIGZvciAobGV0IGZpbGVJbmRleCA9IDA7IGZpbGVJbmRleCA8IGZpbGVzLmxlbmd0aDsgZmlsZUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBmaWxlID0gZmlsZXNbZmlsZUluZGV4XTtcbiAgICAgICAgICAgIGxldCBpbXBvcnRlciA9IEZpbmRJbXBvcnRlciAoZmlsZSwgdGhpcy5pbXBvcnRlcnMpO1xuICAgICAgICAgICAgaWYgKGltcG9ydGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0YWJsZUZpbGVzLnB1c2ggKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZSA6IGZpbGUsXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydGVyIDogaW1wb3J0ZXJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1wb3J0YWJsZUZpbGVzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IEltcG9ydGVyVGhyZWVCYXNlIH0gZnJvbSAnLi9pbXBvcnRlcnRocmVlLmpzJztcblxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgU1ZHTG9hZGVyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvU1ZHTG9hZGVyLmpzJztcblxuZXhwb3J0IGNsYXNzIEltcG9ydGVyVGhyZWVTdmcgZXh0ZW5kcyBJbXBvcnRlclRocmVlQmFzZVxue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICBzdXBlciAoKTtcbiAgICB9XG5cbiAgICBDYW5JbXBvcnRFeHRlbnNpb24gKGV4dGVuc2lvbilcbiAgICB7XG4gICAgICAgIHJldHVybiBleHRlbnNpb24gPT09ICdzdmcnO1xuICAgIH1cblxuICAgIEdldFVwRGlyZWN0aW9uICgpXG4gICAge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLlo7XG4gICAgfVxuXG4gICAgQ3JlYXRlTG9hZGVyIChtYW5hZ2VyKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTVkdMb2FkZXIgKG1hbmFnZXIpO1xuICAgIH1cblxuICAgIEdldE1haW5PYmplY3QgKGxvYWRlZE9iamVjdClcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIFNob3dGaWxsIChwYXRoKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IHBhdGgudXNlckRhdGEuc3R5bGU7XG4gICAgICAgICAgICBpZiAoc3R5bGUuZmlsbCA9PT0gdW5kZWZpbmVkIHx8IHN0eWxlLmZpbGwgPT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNYXRlcmlhbCAobWF0ZXJpYWxzLCBzdHlsZSwgb3BhY2l0eSlcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGV4aXN0aW5nTWF0ZXJpYWwgb2YgbWF0ZXJpYWxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nTWF0ZXJpYWwuc3R5bGUgPT09IHN0eWxlICYmIGV4aXN0aW5nTWF0ZXJpYWwub3BhY2l0eSA9PT0gb3BhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IGV4aXN0aW5nTWF0ZXJpYWwubWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsICh7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBuZXcgVEhSRUUuQ29sb3IgKCkuc2V0U3R5bGUgKHN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IG9wYWNpdHkgPCAxLjBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbHMucHVzaCAoe1xuICAgICAgICAgICAgICAgICAgICBzdHlsZSA6IHN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5IDogb3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgOiBtYXRlcmlhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1hdGVyaWFscyA9IFtdO1xuXG4gICAgICAgIGxldCBvYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QgKCk7XG4gICAgICAgIG9iamVjdC5yb3RhdGlvbi54ID0gTWF0aC5QSTtcblxuICAgICAgICBmb3IgKGxldCBwYXRoIG9mIGxvYWRlZE9iamVjdC5wYXRocykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcGVzID0gU1ZHTG9hZGVyLmNyZWF0ZVNoYXBlcyAocGF0aCk7XG4gICAgICAgICAgICBpZiAoU2hvd0ZpbGwgKHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhdGhTdHlsZSA9IHBhdGgudXNlckRhdGEuc3R5bGU7XG4gICAgICAgICAgICAgICAgbGV0IHBhdGhNYXRlcmlhbCA9IEdldE9yQ3JlYXRlTWF0ZXJpYWwgKG1hdGVyaWFscywgcGF0aFN0eWxlLmZpbGwsIHBhdGhTdHlsZS5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNoYXBlIG9mIHNoYXBlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5FeHRydWRlR2VvbWV0cnkgKHNoYXBlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXB0aDogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiZXZlbEVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2ggKGdlb21ldHJ5LCBwYXRoTWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgICAgICBtZXNoLm5hbWUgPSBwYXRoLnVzZXJEYXRhLm5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5hZGQgKG1lc2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkMkQgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDJkLmpzJztcbmltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IElzUG9zaXRpdmUsIElzTmVnYXRpdmUsIElzWmVybyB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuL21lc2guanMnO1xuaW1wb3J0IHsgVHJpYW5nbGUgfSBmcm9tICcuL3RyaWFuZ2xlLmpzJztcblxuZXhwb3J0IGNsYXNzIEdlbmVyYXRvclBhcmFtc1xue1xuICAgIGNvbnN0cnVjdG9yICgpXG4gICAge1xuICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBTZXROYW1lIChuYW1lKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgU2V0TWF0ZXJpYWwgKG1hdGVyaWFsKVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0b3JcbntcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1zKVxuICAgIHtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXMgfHwgbmV3IEdlbmVyYXRvclBhcmFtcyAoKTtcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2ggKCk7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5uYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1lc2guU2V0TmFtZSAodGhpcy5wYXJhbXMubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJ2ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgR2V0TWVzaCAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzaDtcbiAgICB9XG5cbiAgICBBZGRWZXJ0ZXggKHgsIHksIHopXG4gICAge1xuICAgICAgICBsZXQgY29vcmQgPSBuZXcgQ29vcmQzRCAoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc2guQWRkVmVydGV4IChjb29yZCk7XG4gICAgfVxuXG4gICAgQWRkVmVydGljZXMgKHZlcnRpY2VzKVxuICAgIHtcbiAgICAgICAgbGV0IGluZGljZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgaW5kaWNlcy5wdXNoICh0aGlzLkFkZFZlcnRleCAodmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRpY2VzO1xuICAgIH1cblxuICAgIFNldEN1cnZlIChjdXJ2ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgICB9XG5cbiAgICBSZXNldEN1cnZlICgpXG4gICAge1xuICAgICAgICB0aGlzLmN1cnZlID0gbnVsbDtcbiAgICB9XG5cbiAgICBBZGRUcmlhbmdsZSAodjAsIHYxLCB2MilcbiAgICB7XG4gICAgICAgIGxldCB0cmlhbmdsZSA9IG5ldyBUcmlhbmdsZSAodjAsIHYxLCB2Mik7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5tYXRlcmlhbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdHJpYW5nbGUubWF0ID0gdGhpcy5wYXJhbXMubWF0ZXJpYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3VydmUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRyaWFuZ2xlLlNldEN1cnZlICh0aGlzLmN1cnZlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tZXNoLkFkZFRyaWFuZ2xlICh0cmlhbmdsZSk7XG4gICAgfVxuXG4gICAgQWRkVHJpYW5nbGVJbnZlcnRlZCAodjAsIHYxLCB2MilcbiAgICB7XG4gICAgICAgIHRoaXMuQWRkVHJpYW5nbGUgKHYwLCB2MiwgdjEpO1xuICAgIH1cblxuICAgIEFkZENvbnZleFBvbHlnb24gKHZlcnRpY2VzKVxuICAgIHtcbiAgICAgICAgZm9yIChsZXQgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHZlcnRpY2VzLmxlbmd0aCAtIDI7IHZlcnRleEluZGV4KyspIHtcbiAgICAgICAgICAgIHRoaXMuQWRkVHJpYW5nbGUgKFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzWzBdLFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sXG4gICAgICAgICAgICAgICAgdmVydGljZXNbdmVydGV4SW5kZXggKyAyXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEFkZENvbnZleFBvbHlnb25JbnZlcnRlZCAodmVydGljZXMpXG4gICAge1xuICAgICAgICBmb3IgKGxldCB2ZXJ0ZXhJbmRleCA9IDA7IHZlcnRleEluZGV4IDwgdmVydGljZXMubGVuZ3RoIC0gMjsgdmVydGV4SW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy5BZGRUcmlhbmdsZUludmVydGVkIChcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1swXSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDFdLFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMl1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0b3JIZWxwZXJcbntcbiAgICBjb25zdHJ1Y3RvciAoZ2VuZXJhdG9yKVxuICAgIHtcbiAgICAgICAgdGhpcy5nZW5lcmF0b3IgPSBnZW5lcmF0b3I7XG4gICAgfVxuXG4gICAgR2VuZXJhdGVTdXJmYWNlQmV0d2VlblBvbHlnb25zIChzdGFydEluZGljZXMsIGVuZEluZGljZXMpXG4gICAge1xuICAgICAgICBpZiAoc3RhcnRJbmRpY2VzLmxlbmd0aCAhPT0gZW5kSW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IHN0YXJ0SW5kaWNlcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpO1xuICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKGkgPCB2ZXJ0ZXhDb3VudCAtIDEpID8gaW5kZXggKyAxIDogMDtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFtcbiAgICAgICAgICAgICAgICBzdGFydEluZGljZXNbaW5kZXhdLFxuICAgICAgICAgICAgICAgIHN0YXJ0SW5kaWNlc1tuZXh0SW5kZXhdLFxuICAgICAgICAgICAgICAgIGVuZEluZGljZXNbbmV4dEluZGV4XSxcbiAgICAgICAgICAgICAgICBlbmRJbmRpY2VzW2luZGV4XVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBHZW5lcmF0ZVRyaWFuZ2xlRmFuIChzdGFydEluZGljZXMsIGVuZEluZGV4KVxuICAgIHtcbiAgICAgICAgY29uc3QgdmVydGV4Q291bnQgPSBzdGFydEluZGljZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IChpIDwgdmVydGV4Q291bnQgLSAxKSA/IGluZGV4ICsgMSA6IDA7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRvci5BZGRUcmlhbmdsZSAoXG4gICAgICAgICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgICAgICAgc3RhcnRJbmRpY2VzW2luZGV4XSxcbiAgICAgICAgICAgICAgICBzdGFydEluZGljZXNbbmV4dEluZGV4XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gR2V0Q3lsaW5kcmljYWxDb29yZCAocmFkaXVzLCBhbmdsZSlcbntcbiAgICByZXR1cm4gbmV3IENvb3JkMkQgKFxuICAgICAgICByYWRpdXMgKiBNYXRoLmNvcyAoYW5nbGUpLFxuICAgICAgICByYWRpdXMgKiBNYXRoLnNpbiAoYW5nbGUpXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdlbmVyYXRlQ3Vib2lkIChnZW5QYXJhbXMsIHhTaXplLCB5U2l6ZSwgelNpemUpXG57XG4gICAgaWYgKCFJc1Bvc2l0aXZlICh4U2l6ZSkgfHwgIUlzUG9zaXRpdmUgKHlTaXplKSB8fCAhSXNQb3NpdGl2ZSAoelNpemUpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBnZW5lcmF0b3IgPSBuZXcgR2VuZXJhdG9yIChnZW5QYXJhbXMpO1xuXG4gICAgZ2VuZXJhdG9yLkFkZFZlcnRleCAoMC4wLCAwLjAsIDAuMCk7XG4gICAgZ2VuZXJhdG9yLkFkZFZlcnRleCAoeFNpemUsIDAuMCwgMC4wKTtcbiAgICBnZW5lcmF0b3IuQWRkVmVydGV4ICh4U2l6ZSwgeVNpemUsIDAuMCk7XG4gICAgZ2VuZXJhdG9yLkFkZFZlcnRleCAoMC4wLCB5U2l6ZSwgMC4wKTtcbiAgICBnZW5lcmF0b3IuQWRkVmVydGV4ICgwLjAsIDAuMCwgelNpemUpO1xuICAgIGdlbmVyYXRvci5BZGRWZXJ0ZXggKHhTaXplLCAwLjAsIHpTaXplKTtcbiAgICBnZW5lcmF0b3IuQWRkVmVydGV4ICh4U2l6ZSwgeVNpemUsIHpTaXplKTtcbiAgICBnZW5lcmF0b3IuQWRkVmVydGV4ICgwLjAsIHlTaXplLCB6U2l6ZSk7XG5cbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzAsIDMsIDIsIDFdKTtcbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzAsIDEsIDUsIDRdKTtcbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzEsIDIsIDYsIDVdKTtcbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzIsIDMsIDcsIDZdKTtcbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzMsIDAsIDQsIDddKTtcbiAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzQsIDUsIDYsIDddKTtcblxuICAgIHJldHVybiBnZW5lcmF0b3IuR2V0TWVzaCAoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdlbmVyYXRlQ29uZSAoZ2VuUGFyYW1zLCB0b3BSYWRpdXMsIGJvdHRvbVJhZGl1cywgaGVpZ2h0LCBzZWdtZW50cywgc21vb3RoKVxue1xuICAgIGlmIChJc05lZ2F0aXZlICh0b3BSYWRpdXMpIHx8IElzTmVnYXRpdmUgKGJvdHRvbVJhZGl1cykpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFJc1Bvc2l0aXZlIChoZWlnaHQpIHx8IHNlZ21lbnRzIDwgMykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgaXNaZXJvVG9wID0gSXNaZXJvICh0b3BSYWRpdXMpO1xuICAgIGxldCBpc1plcm9Cb3R0b20gPSBJc1plcm8gKGJvdHRvbVJhZGl1cyk7XG4gICAgaWYgKGlzWmVyb1RvcCAmJiBpc1plcm9Cb3R0b20pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGdlbmVyYXRvciA9IG5ldyBHZW5lcmF0b3IgKGdlblBhcmFtcyk7XG4gICAgbGV0IGhlbHBlciA9IG5ldyBHZW5lcmF0b3JIZWxwZXIgKGdlbmVyYXRvcik7XG4gICAgY29uc3Qgc3RlcCA9IDIuMCAqIE1hdGguUEkgLyBzZWdtZW50cztcbiAgICBjb25zdCBjdXJ2ZSA9IChzbW9vdGggPyAxIDogbnVsbCk7XG5cbiAgICBsZXQgdG9wUG9seWdvbiA9IFtdO1xuICAgIGlmIChpc1plcm9Ub3ApIHtcbiAgICAgICAgdG9wUG9seWdvbi5wdXNoIChnZW5lcmF0b3IuQWRkVmVydGV4ICgwLjAsIDAuMCwgaGVpZ2h0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdG9wVmVydGV4ID0gR2V0Q3lsaW5kcmljYWxDb29yZCAodG9wUmFkaXVzLCBpICogc3RlcCk7XG4gICAgICAgICAgICB0b3BQb2x5Z29uLnB1c2ggKGdlbmVyYXRvci5BZGRWZXJ0ZXggKHRvcFZlcnRleC54LCB0b3BWZXJ0ZXgueSwgaGVpZ2h0KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgYm90dG9tUG9seWdvbiA9IFtdO1xuICAgIGlmIChpc1plcm9Cb3R0b20pIHtcbiAgICAgICAgYm90dG9tUG9seWdvbi5wdXNoIChnZW5lcmF0b3IuQWRkVmVydGV4ICgwLjAsIDAuMCwgMC4wKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYm90dG9tVmVydGV4ID0gR2V0Q3lsaW5kcmljYWxDb29yZCAoYm90dG9tUmFkaXVzLCBpICogc3RlcCk7XG4gICAgICAgICAgICBib3R0b21Qb2x5Z29uLnB1c2ggKGdlbmVyYXRvci5BZGRWZXJ0ZXggKGJvdHRvbVZlcnRleC54LCBib3R0b21WZXJ0ZXgueSwgMC4wKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNaZXJvVG9wKSB7XG4gICAgICAgIGdlbmVyYXRvci5TZXRDdXJ2ZSAoY3VydmUpO1xuICAgICAgICBoZWxwZXIuR2VuZXJhdGVUcmlhbmdsZUZhbiAoYm90dG9tUG9seWdvbiwgdG9wUG9seWdvblswXSk7XG4gICAgICAgIGdlbmVyYXRvci5SZXNldEN1cnZlICgpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbkludmVydGVkIChib3R0b21Qb2x5Z29uKTtcbiAgICB9IGVsc2UgaWYgKGlzWmVyb0JvdHRvbSkge1xuICAgICAgICBnZW5lcmF0b3IuU2V0Q3VydmUgKGN1cnZlKTtcbiAgICAgICAgaGVscGVyLkdlbmVyYXRlVHJpYW5nbGVGYW4gKHRvcFBvbHlnb24uc2xpY2UgKCkucmV2ZXJzZSAoKSwgYm90dG9tUG9seWdvblswXSk7XG4gICAgICAgIGdlbmVyYXRvci5SZXNldEN1cnZlICgpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAodG9wUG9seWdvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2VuZXJhdG9yLlNldEN1cnZlIChjdXJ2ZSk7XG4gICAgICAgIGhlbHBlci5HZW5lcmF0ZVN1cmZhY2VCZXR3ZWVuUG9seWdvbnMgKGJvdHRvbVBvbHlnb24sIHRvcFBvbHlnb24pO1xuICAgICAgICBnZW5lcmF0b3IuUmVzZXRDdXJ2ZSAoKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb25JbnZlcnRlZCAoYm90dG9tUG9seWdvbik7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uICh0b3BQb2x5Z29uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yLkdldE1lc2ggKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZUN5bGluZGVyIChnZW5QYXJhbXMsIHJhZGl1cywgaGVpZ2h0LCBzZWdtZW50cywgc21vb3RoKVxue1xuICAgIHJldHVybiBHZW5lcmF0ZUNvbmUgKGdlblBhcmFtcywgcmFkaXVzLCByYWRpdXMsIGhlaWdodCwgc2VnbWVudHMsIHNtb290aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZVNwaGVyZSAoZ2VuUGFyYW1zLCByYWRpdXMsIHNlZ21lbnRzLCBzbW9vdGgpXG57XG4gICAgZnVuY3Rpb24gR2V0U3BoZXJpY2FsQ29vcmQgKHJhZGl1cywgdGhldGEsIHBoaSlcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgQ29vcmQzRCAoXG4gICAgICAgICAgICByYWRpdXMgKiBNYXRoLnNpbiAodGhldGEpICogTWF0aC5jb3MgKHBoaSksXG4gICAgICAgICAgICByYWRpdXMgKiBNYXRoLnNpbiAodGhldGEpICogTWF0aC5zaW4gKHBoaSksXG4gICAgICAgICAgICByYWRpdXMgKiBNYXRoLmNvcyAodGhldGEpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFJc1Bvc2l0aXZlIChyYWRpdXMpIHx8IHNlZ21lbnRzIDwgMykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgZ2VuZXJhdG9yID0gbmV3IEdlbmVyYXRvciAoZ2VuUGFyYW1zKTtcbiAgICBsZXQgaGVscGVyID0gbmV3IEdlbmVyYXRvckhlbHBlciAoZ2VuZXJhdG9yKTtcblxuICAgIGdlbmVyYXRvci5TZXRDdXJ2ZSAoc21vb3RoID8gMSA6IG51bGwpO1xuXG4gICAgbGV0IGFsbExldmVsVmVydGljZXMgPSBbXTtcbiAgICBsZXQgbGV2ZWxzID0gc2VnbWVudHMgKyAxO1xuICAgIGNvbnN0IGxldmVsU3RlcCA9IE1hdGguUEkgLyBzZWdtZW50cztcblx0Y29uc3QgY3lsaW5kcmljYWxTdGVwID0gMi4wICogTWF0aC5QSSAvIHNlZ21lbnRzO1xuICAgIGZvciAobGV0IGxldmVsSW5kZXggPSAxOyBsZXZlbEluZGV4IDwgbGV2ZWxzIC0gMTsgbGV2ZWxJbmRleCsrKSB7XG4gICAgICAgIGxldCBsZXZlbFZlcnRpY2VzID0gW107XG4gICAgICAgIGxldCB0aGV0YSA9IGxldmVsSW5kZXggKiBsZXZlbFN0ZXA7XG4gICAgICAgIGZvciAobGV0IGN5bGluZHJpY2FsSW5kZXggPSAwOyBjeWxpbmRyaWNhbEluZGV4IDwgc2VnbWVudHM7IGN5bGluZHJpY2FsSW5kZXgrKykge1xuICAgICAgICAgICAgbGV0IHBoaSA9IGN5bGluZHJpY2FsSW5kZXggKiBjeWxpbmRyaWNhbFN0ZXA7XG4gICAgICAgICAgICBsZXQgdmVydGV4ID0gR2V0U3BoZXJpY2FsQ29vcmQgKHJhZGl1cywgdGhldGEsIC1waGkpO1xuICAgICAgICAgICAgbGV2ZWxWZXJ0aWNlcy5wdXNoIChnZW5lcmF0b3IuQWRkVmVydGV4ICh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxldmVsSW5kZXggPiAxKSB7XG4gICAgICAgICAgICBoZWxwZXIuR2VuZXJhdGVTdXJmYWNlQmV0d2VlblBvbHlnb25zIChhbGxMZXZlbFZlcnRpY2VzW2FsbExldmVsVmVydGljZXMubGVuZ3RoIC0gMV0sIGxldmVsVmVydGljZXMpO1xuICAgICAgICB9XG4gICAgICAgIGFsbExldmVsVmVydGljZXMucHVzaCAobGV2ZWxWZXJ0aWNlcyk7XG4gICAgfVxuXG4gICAgbGV0IHRvcFZlcnRleCA9IGdlbmVyYXRvci5BZGRWZXJ0ZXggKDAuMCwgMC4wLCByYWRpdXMpO1xuICAgIGxldCBib3R0b21WZXJ0ZXggPSBnZW5lcmF0b3IuQWRkVmVydGV4ICgwLjAsIDAuMCwgLXJhZGl1cyk7XG4gICAgaGVscGVyLkdlbmVyYXRlVHJpYW5nbGVGYW4gKGFsbExldmVsVmVydGljZXNbMF0uc2xpY2UgKCkucmV2ZXJzZSAoKSwgdG9wVmVydGV4KTtcbiAgICBoZWxwZXIuR2VuZXJhdGVUcmlhbmdsZUZhbiAoYWxsTGV2ZWxWZXJ0aWNlc1thbGxMZXZlbFZlcnRpY2VzLmxlbmd0aCAtIDFdLCBib3R0b21WZXJ0ZXgpO1xuXG4gICAgZ2VuZXJhdG9yLlJlc2V0Q3VydmUgKCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yLkdldE1lc2ggKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZVBsYXRvbmljU29saWQgKGdlblBhcmFtcywgdHlwZSwgcmFkaXVzKVxue1xuICAgIGZ1bmN0aW9uIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIHgsIHksIHopXG4gICAge1xuICAgICAgICBsZXQgdmVydGV4ID0gbmV3IENvb3JkM0QgKHgsIHksIHopO1xuICAgICAgICB2ZXJ0ZXguTXVsdGlwbHlTY2FsYXIgKHJhZGl1cyAvIHZlcnRleC5MZW5ndGggKCkpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVmVydGV4ICh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcbiAgICB9XG5cbiAgICBpZiAoIUlzUG9zaXRpdmUgKHJhZGl1cykpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGdlbmVyYXRvciA9IG5ldyBHZW5lcmF0b3IgKGdlblBhcmFtcyk7XG4gICAgaWYgKHR5cGUgPT09ICd0ZXRyYWhlZHJvbicpIHtcbiAgICAgICAgbGV0IGEgPSAxLjA7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICthLCArYSwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCAtYSwgLWEsICthKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsICthLCAtYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICthLCAtYSwgLWEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDEsIDMpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDIsIDEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDMsIDIpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDIsIDMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hleGFoZWRyb24nKSB7XG4gICAgICAgIGxldCBhID0gMS4wO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYSwgK2EsICthKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2EsICthLCAtYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICthLCAtYSwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYSwgLWEsIC1hKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsICthLCArYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIC1hLCArYSwgLWEpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCAtYSwgLWEsICthKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsIC1hLCAtYSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMCwgMSwgNSwgNF0pO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzAsIDIsIDMsIDFdKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFswLCA0LCA2LCAyXSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMSwgMywgNywgNV0pO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzIsIDYsIDcsIDNdKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFs0LCA1LCA3LCA2XSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2N0YWhlZHJvbicpIHtcbiAgICAgICAgbGV0IGEgPSAxLjA7XG4gICAgICAgIGxldCBiID0gMC4wO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYSwgK2IsICtiKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsICtiLCArYik7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtiLCArYSwgK2IpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYiwgLWEsICtiKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2IsICtiLCArYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtiLCArYiwgLWEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDIsIDQpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDMsIDUpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDQsIDMpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDUsIDIpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDIsIDUpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDMsIDQpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDQsIDIpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDUsIDMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2RvZGVjYWhlZHJvbicpIHtcbiAgICAgICAgbGV0IGEgPSAxLjA7XG4gICAgICAgIGxldCBiID0gMC4wO1xuICAgICAgICBsZXQgYyA9ICgxLjAgKyBNYXRoLnNxcnQgKDUuMCkpIC8gMi4wO1xuICAgICAgICBsZXQgZCA9IDEuMCAvIGM7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICthLCArYSwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYSwgK2EsIC1hKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2EsIC1hLCArYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIC1hLCArYSwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYSwgLWEsIC1hKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsICthLCAtYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIC1hLCAtYSwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCAtYSwgLWEsIC1hKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2IsICtkLCArYyk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtiLCArZCwgLWMpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYiwgLWQsICtjKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2IsIC1kLCAtYyk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtkLCArYywgK2IpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArZCwgLWMsICtiKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWQsICtjLCArYik7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIC1kLCAtYywgK2IpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYywgK2IsICtkKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWMsICtiLCArZCk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtjLCArYiwgLWQpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCAtYywgK2IsIC1kKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFswLCA4LCAxMCwgMiwgMTZdKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFswLCAxNiwgMTgsIDEsIDEyXSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMCwgMTIsIDE0LCAzLCA4XSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMSwgOSwgNSwgMTQsIDEyXSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMSwgMTgsIDQsIDExLCA5XSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMiwgMTAsIDYsIDE1LCAxM10pO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzIsIDEzLCA0LCAxOCwgMTZdKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZENvbnZleFBvbHlnb24gKFszLCAxNCwgNSwgMTksIDE3XSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbMywgMTcsIDYsIDEwLCA4XSk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRDb252ZXhQb2x5Z29uIChbNCwgMTMsIDE1LCA3LCAxMV0pO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzUsIDksIDExLCA3LCAxOV0pO1xuICAgICAgICBnZW5lcmF0b3IuQWRkQ29udmV4UG9seWdvbiAoWzYsIDE3LCAxOSwgNywgMTVdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpY29zYWhlZHJvbicpIHtcbiAgICAgICAgbGV0IGEgPSAxLjA7XG4gICAgICAgIGxldCBiID0gMC4wO1xuICAgICAgICBsZXQgYyA9ICgxLjAgKyBNYXRoLnNxcnQgKDUuMCkpIC8gMi4wO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYiwgK2EsICtjKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2IsICthLCAtYyk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtiLCAtYSwgK2MpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYiwgLWEsIC1jKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgK2EsICtjLCArYik7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICthLCAtYywgK2IpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCAtYSwgK2MsICtiKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWEsIC1jLCArYik7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsICtjLCArYiwgK2EpO1xuICAgICAgICBBZGRWZXJ0ZXggKGdlbmVyYXRvciwgcmFkaXVzLCArYywgK2IsIC1hKTtcbiAgICAgICAgQWRkVmVydGV4IChnZW5lcmF0b3IsIHJhZGl1cywgLWMsICtiLCArYSk7XG4gICAgICAgIEFkZFZlcnRleCAoZ2VuZXJhdG9yLCByYWRpdXMsIC1jLCArYiwgLWEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDIsIDgpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDQsIDYpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDAsIDYsIDEwKTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZFRyaWFuZ2xlICgwLCA4LCA0KTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZFRyaWFuZ2xlICgwLCAxMCwgMik7XG4gICAgICAgIGdlbmVyYXRvci5BZGRUcmlhbmdsZSAoMSwgMywgMTEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDQsIDkpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDYsIDQpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDksIDMpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDEsIDExLCA2KTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZFRyaWFuZ2xlICgyLCA1LCA4KTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZFRyaWFuZ2xlICgyLCA3LCA1KTtcbiAgICAgICAgZ2VuZXJhdG9yLkFkZFRyaWFuZ2xlICgyLCAxMCwgNyk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRUcmlhbmdsZSAoMywgNSwgNyk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRUcmlhbmdsZSAoMywgNywgMTEpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDMsIDksIDUpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDQsIDgsIDkpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDUsIDksIDgpO1xuICAgICAgICBnZW5lcmF0b3IuQWRkVHJpYW5nbGUgKDYsIDExLCAxMCk7XG4gICAgICAgIGdlbmVyYXRvci5BZGRUcmlhbmdsZSAoNywgMTAsIDExKTtcbiAgICB9XG4gICAgcmV0dXJuIGdlbmVyYXRvci5HZXRNZXNoICgpO1xufVxuIiwiaW1wb3J0IHsgQ29vcmREaXN0YW5jZTNELCBDcm9zc1ZlY3RvcjNELCBEb3RWZWN0b3IzRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkM2QuanMnO1xuaW1wb3J0IHsgTW9kZWwgfSBmcm9tICcuL21vZGVsLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIEdldFRyaWFuZ2xlQXJlYSAodjAsIHYxLCB2MilcbntcbiAgICBjb25zdCBhID0gQ29vcmREaXN0YW5jZTNEICh2MCwgdjEpO1xuICAgIGNvbnN0IGIgPSBDb29yZERpc3RhbmNlM0QgKHYxLCB2Mik7XG4gICAgY29uc3QgYyA9IENvb3JkRGlzdGFuY2UzRCAodjAsIHYyKTtcbiAgICBjb25zdCBzID0gKGEgKyBiICsgYykgLyAyLjA7XG4gICAgY29uc3QgYXJlYVNxdWFyZSA9IHMgKiAocyAtIGEpICogKHMgLSBiKSAqIChzIC0gYyk7XG4gICAgaWYgKGFyZWFTcXVhcmUgPCAwLjApIHtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguc3FydCAoYXJlYVNxdWFyZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRUZXRyYWhlZHJvblNpZ25lZFZvbHVtZSAodjAsIHYxLCB2MilcbntcbiAgICByZXR1cm4gRG90VmVjdG9yM0QgKHYwLCBDcm9zc1ZlY3RvcjNEICh2MSwgdjIpKSAvIDYuMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbGN1bGF0ZVZvbHVtZSAob2JqZWN0M0QpXG57XG4gICAgaWYgKG9iamVjdDNEIGluc3RhbmNlb2YgTW9kZWwpIHtcbiAgICAgICAgbGV0IHZvbHVtZSA9IDAuMDtcbiAgICAgICAgb2JqZWN0M0QuRW51bWVyYXRlTWVzaEluc3RhbmNlcyAoKG1lc2hJbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgdm9sdW1lICs9IENhbGN1bGF0ZVZvbHVtZSAobWVzaEluc3RhbmNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2b2x1bWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHZvbHVtZSA9IDAuMDtcbiAgICAgICAgb2JqZWN0M0QuRW51bWVyYXRlVHJpYW5nbGVWZXJ0aWNlcyAoKHYwLCB2MSwgdjIpID0+IHtcbiAgICAgICAgICAgIHZvbHVtZSArPSBHZXRUZXRyYWhlZHJvblNpZ25lZFZvbHVtZSAodjAsIHYxLCB2Mik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdm9sdW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbGN1bGF0ZVN1cmZhY2VBcmVhIChvYmplY3QzRClcbntcbiAgICBsZXQgc3VyZmFjZSA9IDAuMDtcbiAgICBvYmplY3QzRC5FbnVtZXJhdGVUcmlhbmdsZVZlcnRpY2VzICgodjAsIHYxLCB2MikgPT4ge1xuICAgICAgICBzdXJmYWNlICs9IEdldFRyaWFuZ2xlQXJlYSAodjAsIHYxLCB2Mik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1cmZhY2U7XG59XG4iLCJpbXBvcnQgeyBDb29yZElzRXF1YWwzRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkM2QuanMnO1xuaW1wb3J0IHsgSXNFcXVhbCB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmpzJztcblxuLyoqXG4gKiBDYW1lcmEgcHJvamVjdGlvbiBtb2RlLlxuICogQGVudW1cbiAqL1xuZXhwb3J0IGNvbnN0IENhbWVyYU1vZGUgPVxue1xuICAgIC8qKiBQZXJzcGVjdGl2ZSBwcm9qZWN0aW9uLiAqL1xuXHRQZXJzcGVjdGl2ZSA6IDEsXG4gICAgLyoqIE9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uLiAqL1xuXHRPcnRob2dyYXBoaWMgOiAyXG59O1xuXG4vKipcbiAqIENhbWVyYSBvYmplY3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW1lcmFcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Nvb3JkM0R9IGV5ZSBFeWUgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtDb29yZDNEfSBjZW50ZXIgQ2VudGVyIHBvc2l0aW9uLiBTb21ldGltZXMgaXQncyBjYWxsZWQgdGFyZ2V0IG9yIGxvb2sgYXQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtDb29yZDNEfSB1cCBVcCB2ZWN0b3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZvdiBGaWVsZCBvZiB2aWV3IGluIGRlZ3JlZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKGV5ZSwgY2VudGVyLCB1cCwgZm92KVxuICAgIHtcbiAgICAgICAgdGhpcy5leWUgPSBleWU7XG4gICAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xuICAgICAgICB0aGlzLnVwID0gdXA7XG4gICAgICAgIHRoaXMuZm92ID0gZm92O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtDYW1lcmF9XG4gICAgICovXG4gICAgQ2xvbmUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgQ2FtZXJhIChcbiAgICAgICAgICAgIHRoaXMuZXllLkNsb25lICgpLFxuICAgICAgICAgICAgdGhpcy5jZW50ZXIuQ2xvbmUgKCksXG4gICAgICAgICAgICB0aGlzLnVwLkNsb25lICgpLFxuICAgICAgICAgICAgdGhpcy5mb3ZcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYW1lcmFJc0VxdWFsM0QgKGEsIGIpXG57XG5cdHJldHVybiBDb29yZElzRXF1YWwzRCAoYS5leWUsIGIuZXllKSAmJiBDb29yZElzRXF1YWwzRCAoYS5jZW50ZXIsIGIuY2VudGVyKSAmJiBDb29yZElzRXF1YWwzRCAoYS51cCwgYi51cCkgJiYgSXNFcXVhbCAoYS5mb3YsIGIuZm92KTtcbn1cbiIsImltcG9ydCB7IFJHQkNvbG9yIH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgQ29udmVydENvbG9yVG9UaHJlZUNvbG9yLCBEaXNwb3NlVGhyZWVPYmplY3RzIH0gZnJvbSAnLi4vdGhyZWVqcy90aHJlZXV0aWxzLmpzJztcblxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gU2V0VGhyZWVNZXNoUG9seWdvbk9mZnNldCAobWVzaCwgb2Zmc2V0KVxue1xuICAgIGZ1bmN0aW9uIFNldE1hdGVyaWFsc1BvbHlnb25PZmZzZXQgKG1hdGVyaWFscywgb2Zmc2V0KVxuICAgIHtcbiAgICAgICAgZm9yIChsZXQgbWF0ZXJpYWwgb2YgbWF0ZXJpYWxzKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXQgPSAxO1xuICAgICAgICAgICAgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTZXRNYXRlcmlhbHNQb2x5Z29uT2Zmc2V0IChtZXNoLm1hdGVyaWFsLCBvZmZzZXQpO1xuICAgIGlmIChtZXNoLnVzZXJEYXRhLnRocmVlTWF0ZXJpYWxzKSB7XG4gICAgICAgIFNldE1hdGVyaWFsc1BvbHlnb25PZmZzZXQgKG1lc2gudXNlckRhdGEudGhyZWVNYXRlcmlhbHMsIG9mZnNldCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlld2VyTW9kZWxcbntcbiAgICBjb25zdHJ1Y3RvciAoc2NlbmUpXG4gICAge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMucm9vdE9iamVjdCA9IG51bGw7XG4gICAgfVxuXG4gICAgSXNFbXB0eSAoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdE9iamVjdCA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICBTZXRSb290T2JqZWN0IChyb290T2JqZWN0KVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdE9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5DbGVhciAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3RPYmplY3QgPSByb290T2JqZWN0O1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCAodGhpcy5yb290T2JqZWN0KTtcbiAgICB9XG5cbiAgICBHZXRSb290T2JqZWN0ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290T2JqZWN0O1xuICAgIH1cblxuICAgIEFkZE9iamVjdCAob2JqZWN0KVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdE9iamVjdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG5ld1Jvb3RPYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QgKCk7XG4gICAgICAgICAgICB0aGlzLlNldFJvb3RPYmplY3QgKG5ld1Jvb3RPYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdE9iamVjdC5hZGQgKG9iamVjdCk7XG4gICAgfVxuXG4gICAgVHJhdmVyc2UgKGVudW1lcmF0b3IpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5yb290T2JqZWN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290T2JqZWN0LnRyYXZlcnNlICgob2JqKSA9PiB7XG4gICAgICAgICAgICBlbnVtZXJhdG9yIChvYmopO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBVcGRhdGVXb3JsZE1hdHJpeCAoKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdE9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yb290T2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4ICh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENsZWFyICgpXG4gICAge1xuICAgICAgICBEaXNwb3NlVGhyZWVPYmplY3RzICh0aGlzLnJvb3RPYmplY3QpO1xuICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZSAodGhpcy5yb290T2JqZWN0KTtcbiAgICAgICAgdGhpcy5yb290T2JqZWN0ID0gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogRWRnZSBzZXR0aW5ncyBvYmplY3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGdlU2V0dGluZ3NcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dFZGdlcyBTaG93IGVkZ2VzLlxuICAgICAqIEBwYXJhbSB7UkdCQ29sb3J9IGVkZ2VDb2xvciBDb2xvciBvZiB0aGUgZWRnZXMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVkZ2VUaHJlc2hvbGQgTWluaW11bSBhbmdsZSBiZXR3ZWVuIGZhY2VzIHRvIHNob3cgZWRnZXMgYmV0d2VlbiB0aGVtIGluLlxuICAgICAqIFRoZSB2YWx1ZSBtdXN0IGJlIGluIGRlZ3JlZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKHNob3dFZGdlcywgZWRnZUNvbG9yLCBlZGdlVGhyZXNob2xkKVxuICAgIHtcbiAgICAgICAgdGhpcy5zaG93RWRnZXMgPSBzaG93RWRnZXM7XG4gICAgICAgIHRoaXMuZWRnZUNvbG9yID0gZWRnZUNvbG9yO1xuICAgICAgICB0aGlzLmVkZ2VUaHJlc2hvbGQgPSBlZGdlVGhyZXNob2xkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtFZGdlU2V0dGluZ3N9XG4gICAgICovXG4gICAgQ2xvbmUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiBuZXcgRWRnZVNldHRpbmdzICh0aGlzLnNob3dFZGdlcywgdGhpcy5lZGdlQ29sb3IuQ2xvbmUgKCksIHRoaXMuZWRnZVRocmVzaG9sZCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlld2VyTWFpbk1vZGVsXG57XG4gICAgY29uc3RydWN0b3IgKHNjZW5lKVxuICAgIHtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuXG4gICAgICAgIHRoaXMubWFpbk1vZGVsID0gbmV3IFZpZXdlck1vZGVsICh0aGlzLnNjZW5lKTtcbiAgICAgICAgdGhpcy5lZGdlTW9kZWwgPSBuZXcgVmlld2VyTW9kZWwgKHRoaXMuc2NlbmUpO1xuXG4gICAgICAgIHRoaXMuZWRnZVNldHRpbmdzID0gbmV3IEVkZ2VTZXR0aW5ncyAoZmFsc2UsIG5ldyBSR0JDb2xvciAoMCwgMCwgMCksIDEpO1xuICAgIH1cblxuICAgIFNldE1haW5PYmplY3QgKG1haW5PYmplY3QpXG4gICAge1xuICAgICAgICB0aGlzLm1haW5Nb2RlbC5TZXRSb290T2JqZWN0IChtYWluT2JqZWN0KTtcbiAgICAgICAgaWYgKHRoaXMuZWRnZVNldHRpbmdzLnNob3dFZGdlcykge1xuICAgICAgICAgICAgdGhpcy5HZW5lcmF0ZUVkZ2VNb2RlbCAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFVwZGF0ZVdvcmxkTWF0cml4ICgpXG4gICAge1xuICAgICAgICB0aGlzLm1haW5Nb2RlbC5VcGRhdGVXb3JsZE1hdHJpeCAoKTtcbiAgICAgICAgdGhpcy5lZGdlTW9kZWwuVXBkYXRlV29ybGRNYXRyaXggKCk7XG4gICAgfVxuXG4gICAgU2V0RWRnZVNldHRpbmdzIChlZGdlU2V0dGluZ3MpXG4gICAge1xuICAgICAgICBsZXQgbmVlZFRvR2VuZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVkZ2VTZXR0aW5ncy5zaG93RWRnZXMgJiYgKCF0aGlzLmVkZ2VTZXR0aW5ncy5zaG93RWRnZXMgfHwgdGhpcy5lZGdlU2V0dGluZ3MuZWRnZVRocmVzaG9sZCAhPT0gZWRnZVNldHRpbmdzLmVkZ2VUaHJlc2hvbGQpKSB7XG4gICAgICAgICAgICBuZWVkVG9HZW5lcmF0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVkZ2VTZXR0aW5ncyA9IGVkZ2VTZXR0aW5ncztcblxuICAgICAgICBpZiAodGhpcy5tYWluTW9kZWwuSXNFbXB0eSAoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZWRnZVNldHRpbmdzLnNob3dFZGdlcykge1xuICAgICAgICAgICAgaWYgKG5lZWRUb0dlbmVyYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5DbGVhckVkZ2VNb2RlbCAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLkdlbmVyYXRlRWRnZU1vZGVsICgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZWRnZUNvbG9yID0gQ29udmVydENvbG9yVG9UaHJlZUNvbG9yICh0aGlzLmVkZ2VTZXR0aW5ncy5lZGdlQ29sb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuRW51bWVyYXRlRWRnZXMgKChlZGdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2UubWF0ZXJpYWwuY29sb3IgPSBlZGdlQ29sb3I7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLkNsZWFyRWRnZU1vZGVsICgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgR2VuZXJhdGVFZGdlTW9kZWwgKClcbiAgICB7XG4gICAgICAgIGxldCBlZGdlQ29sb3IgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKHRoaXMuZWRnZVNldHRpbmdzLmVkZ2VDb2xvcik7XG5cbiAgICAgICAgdGhpcy5VcGRhdGVXb3JsZE1hdHJpeCAoKTtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBTZXRUaHJlZU1lc2hQb2x5Z29uT2Zmc2V0IChtZXNoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBlZGdlcyA9IG5ldyBUSFJFRS5FZGdlc0dlb21ldHJ5IChtZXNoLmdlb21ldHJ5LCB0aGlzLmVkZ2VTZXR0aW5ncy5lZGdlVGhyZXNob2xkKTtcbiAgICAgICAgICAgIGxldCBsaW5lID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyAoZWRnZXMsIG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCAoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBlZGdlQ29sb3JcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGxpbmUuYXBwbHlNYXRyaXg0IChtZXNoLm1hdHJpeFdvcmxkKTtcbiAgICAgICAgICAgIGxpbmUudXNlckRhdGEgPSBtZXNoLnVzZXJEYXRhO1xuICAgICAgICAgICAgbGluZS52aXNpYmxlID0gbWVzaC52aXNpYmxlO1xuICAgICAgICAgICAgdGhpcy5lZGdlTW9kZWwuQWRkT2JqZWN0IChsaW5lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgR2V0Qm91bmRpbmdCb3ggKG5lZWRUb1Byb2Nlc3MpXG4gICAge1xuICAgICAgICBsZXQgaGFzTWVzaCA9IGZhbHNlO1xuICAgICAgICBsZXQgYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MyAoKTtcbiAgICAgICAgdGhpcy5FbnVtZXJhdGVNZXNoZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBpZiAobmVlZFRvUHJvY2VzcyAobWVzaC51c2VyRGF0YSkpIHtcbiAgICAgICAgICAgICAgICBib3VuZGluZ0JveC51bmlvbiAobmV3IFRIUkVFLkJveDMgKCkuc2V0RnJvbU9iamVjdCAobWVzaCkpO1xuICAgICAgICAgICAgICAgIGhhc01lc2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFoYXNNZXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmRpbmdCb3g7XG4gICAgfVxuXG4gICAgR2V0Qm91bmRpbmdTcGhlcmUgKG5lZWRUb1Byb2Nlc3MpXG4gICAge1xuICAgICAgICBsZXQgYm91bmRpbmdCb3ggPSB0aGlzLkdldEJvdW5kaW5nQm94IChuZWVkVG9Qcm9jZXNzKTtcbiAgICAgICAgaWYgKGJvdW5kaW5nQm94ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBib3VuZGluZ1NwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmUgKCk7XG4gICAgICAgIGJvdW5kaW5nQm94LmdldEJvdW5kaW5nU3BoZXJlIChib3VuZGluZ1NwaGVyZSk7XG4gICAgICAgIHJldHVybiBib3VuZGluZ1NwaGVyZTtcbiAgICB9XG5cbiAgICBDbGVhciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5tYWluTW9kZWwuQ2xlYXIgKCk7XG4gICAgICAgIHRoaXMuQ2xlYXJFZGdlTW9kZWwgKCk7XG4gICAgfVxuXG4gICAgQ2xlYXJFZGdlTW9kZWwgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmVkZ2VNb2RlbC5Jc0VtcHR5ICgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkVudW1lcmF0ZU1lc2hlcyAoKG1lc2gpID0+IHtcbiAgICAgICAgICAgIFNldFRocmVlTWVzaFBvbHlnb25PZmZzZXQgKG1lc2gsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWRnZU1vZGVsLkNsZWFyICgpO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZU1lc2hlcyAoZW51bWVyYXRvcilcbiAgICB7XG4gICAgICAgIHRoaXMubWFpbk1vZGVsLlRyYXZlcnNlICgob2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAob2JqLmlzTWVzaCkge1xuICAgICAgICAgICAgICAgIGVudW1lcmF0b3IgKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEVudW1lcmF0ZUVkZ2VzIChlbnVtZXJhdG9yKVxuICAgIHtcbiAgICAgICAgdGhpcy5lZGdlTW9kZWwuVHJhdmVyc2UgKChvYmopID0+IHtcbiAgICAgICAgICAgIGlmIChvYmouaXNMaW5lU2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhdG9yIChvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBHZXRNZXNoSW50ZXJzZWN0aW9uVW5kZXJNb3VzZSAobW91c2VDb29yZHMsIGNhbWVyYSwgd2lkdGgsIGhlaWdodClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLm1haW5Nb2RlbC5Jc0VtcHR5ICgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3VzZUNvb3Jkcy54IDwgMC4wIHx8IG1vdXNlQ29vcmRzLnggPiB3aWR0aCB8fCBtb3VzZUNvb3Jkcy55IDwgMC4wIHx8IG1vdXNlQ29vcmRzLnkgPiBoZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIgKCk7XG4gICAgICAgIGxldCBtb3VzZVBvcyA9IG5ldyBUSFJFRS5WZWN0b3IyICgpO1xuICAgICAgICBtb3VzZVBvcy54ID0gKG1vdXNlQ29vcmRzLnggLyB3aWR0aCkgKiAyIC0gMTtcbiAgICAgICAgbW91c2VQb3MueSA9IC0obW91c2VDb29yZHMueSAvIGhlaWdodCkgKiAyICsgMTtcbiAgICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEgKG1vdXNlUG9zLCBjYW1lcmEpO1xuICAgICAgICBsZXQgaVNlY3RPYmplY3RzID0gcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdCAodGhpcy5tYWluTW9kZWwuR2V0Um9vdE9iamVjdCAoKSwgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaVNlY3RPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaVNlY3RPYmplY3QgPSBpU2VjdE9iamVjdHNbaV07XG4gICAgICAgICAgICBpZiAoaVNlY3RPYmplY3Qub2JqZWN0LmlzTWVzaCAmJiBpU2VjdE9iamVjdC5vYmplY3QudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpU2VjdE9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IFJHQkFDb2xvciwgUkdCQ29sb3IgfSBmcm9tICcuLi9tb2RlbC9jb2xvci5qcyc7XG5pbXBvcnQgeyBDYW1lcmEsIENhbWVyYU1vZGUgfSBmcm9tICcuLi92aWV3ZXIvY2FtZXJhLmpzJztcbmltcG9ydCB7IEVkZ2VTZXR0aW5ncyB9IGZyb20gJy4uL3ZpZXdlci92aWV3ZXJtb2RlbC5qcyc7XG5cbmV4cG9ydCBsZXQgUGFyYW1ldGVyQ29udmVydGVyID1cbntcbiAgICBJbnRlZ2VyVG9TdHJpbmcgKGludGVnZXIpXG4gICAge1xuICAgICAgICByZXR1cm4gaW50ZWdlci50b1N0cmluZyAoKTtcbiAgICB9LFxuXG4gICAgU3RyaW5nVG9JbnRlZ2VyIChzdHIpXG4gICAge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQgKHN0ciwgMTApO1xuICAgIH0sXG5cbiAgICBOdW1iZXJUb1N0cmluZyAobnVtYmVyKVxuICAgIHtcbiAgICAgICAgbGV0IHByZWNpc2lvbiA9IDU7XG4gICAgICAgIHJldHVybiBudW1iZXIudG9GaXhlZCAocHJlY2lzaW9uKTtcbiAgICB9LFxuXG4gICAgU3RyaW5nVG9OdW1iZXIgKHN0cilcbiAgICB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0IChzdHIpO1xuICAgIH0sXG5cbiAgICBNb2RlbFVybHNUb1N0cmluZyA6IGZ1bmN0aW9uICh1cmxzKVxuICAgIHtcbiAgICAgICAgaWYgKHVybHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxzLmpvaW4gKCcsJyk7XG4gICAgfSxcblxuICAgIFN0cmluZ1RvTW9kZWxVcmxzIDogZnVuY3Rpb24gKHN0cilcbiAgICB7XG4gICAgICAgIGlmIChzdHIgPT09IG51bGwgfHwgc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCAoJywnKTtcbiAgICB9LFxuXG4gICAgQ2FtZXJhVG9TdHJpbmcgOiBmdW5jdGlvbiAoY2FtZXJhKVxuICAgIHtcbiAgICAgICAgaWYgKGNhbWVyYSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhbWVyYVBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB0aGlzLk51bWJlclRvU3RyaW5nIChjYW1lcmEuZXllLngpLCB0aGlzLk51bWJlclRvU3RyaW5nIChjYW1lcmEuZXllLnkpLCB0aGlzLk51bWJlclRvU3RyaW5nIChjYW1lcmEuZXllLnopLFxuICAgICAgICAgICAgdGhpcy5OdW1iZXJUb1N0cmluZyAoY2FtZXJhLmNlbnRlci54KSwgdGhpcy5OdW1iZXJUb1N0cmluZyAoY2FtZXJhLmNlbnRlci55KSwgdGhpcy5OdW1iZXJUb1N0cmluZyAoY2FtZXJhLmNlbnRlci56KSxcbiAgICAgICAgICAgIHRoaXMuTnVtYmVyVG9TdHJpbmcgKGNhbWVyYS51cC54KSwgdGhpcy5OdW1iZXJUb1N0cmluZyAoY2FtZXJhLnVwLnkpLCB0aGlzLk51bWJlclRvU3RyaW5nIChjYW1lcmEudXAueiksXG4gICAgICAgICAgICB0aGlzLk51bWJlclRvU3RyaW5nIChjYW1lcmEuZm92KVxuICAgICAgICBdLmpvaW4gKCcsJyk7XG4gICAgICAgIHJldHVybiBjYW1lcmFQYXJhbWV0ZXJzO1xuICAgIH0sXG5cbiAgICBDYW1lcmFNb2RlVG9TdHJpbmcgOiBmdW5jdGlvbiAoY2FtZXJhTW9kZSlcbiAgICB7XG4gICAgICAgIGlmIChjYW1lcmFNb2RlID09PSBDYW1lcmFNb2RlLlBlcnNwZWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BlcnNwZWN0aXZlJztcbiAgICAgICAgfSBlbHNlIGlmIChjYW1lcmFNb2RlID09PSBDYW1lcmFNb2RlLk9ydGhvZ3JhcGhpYykge1xuICAgICAgICAgICAgcmV0dXJuICdvcnRob2dyYXBoaWMnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBTdHJpbmdUb0NhbWVyYSA6IGZ1bmN0aW9uIChzdHIpXG4gICAge1xuICAgICAgICBpZiAoc3RyID09PSBudWxsIHx8IHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJhbVBhcnRzID0gc3RyLnNwbGl0ICgnLCcpO1xuICAgICAgICBpZiAocGFyYW1QYXJ0cy5sZW5ndGggIT09IDkgJiYgcGFyYW1QYXJ0cy5sZW5ndGggIT09IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWVsZE9mVmlldyA9IDQ1LjA7XG4gICAgICAgIGlmIChwYXJhbVBhcnRzLmxlbmd0aCA+PSAxMCkge1xuICAgICAgICAgICAgZmllbGRPZlZpZXcgPSB0aGlzLlN0cmluZ1RvTnVtYmVyIChwYXJhbVBhcnRzWzldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjYW1lcmEgPSBuZXcgQ2FtZXJhIChcbiAgICAgICAgICAgIG5ldyBDb29yZDNEICh0aGlzLlN0cmluZ1RvTnVtYmVyIChwYXJhbVBhcnRzWzBdKSwgdGhpcy5TdHJpbmdUb051bWJlciAocGFyYW1QYXJ0c1sxXSksIHRoaXMuU3RyaW5nVG9OdW1iZXIgKHBhcmFtUGFydHNbMl0pKSxcbiAgICAgICAgICAgIG5ldyBDb29yZDNEICh0aGlzLlN0cmluZ1RvTnVtYmVyIChwYXJhbVBhcnRzWzNdKSwgdGhpcy5TdHJpbmdUb051bWJlciAocGFyYW1QYXJ0c1s0XSksIHRoaXMuU3RyaW5nVG9OdW1iZXIgKHBhcmFtUGFydHNbNV0pKSxcbiAgICAgICAgICAgIG5ldyBDb29yZDNEICh0aGlzLlN0cmluZ1RvTnVtYmVyIChwYXJhbVBhcnRzWzZdKSwgdGhpcy5TdHJpbmdUb051bWJlciAocGFyYW1QYXJ0c1s3XSksIHRoaXMuU3RyaW5nVG9OdW1iZXIgKHBhcmFtUGFydHNbOF0pKSxcbiAgICAgICAgICAgIGZpZWxkT2ZWaWV3XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBjYW1lcmE7XG4gICAgfSxcblxuICAgIFN0cmluZ1RvQ2FtZXJhTW9kZSA6IGZ1bmN0aW9uIChzdHIpXG4gICAge1xuICAgICAgICBpZiAoc3RyID09PSAncGVyc3BlY3RpdmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FtZXJhTW9kZS5QZXJzcGVjdGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHIgPT09ICdvcnRob2dyYXBoaWMnKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FtZXJhTW9kZS5PcnRob2dyYXBoaWM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIFJHQkNvbG9yVG9TdHJpbmcgOiBmdW5jdGlvbiAoY29sb3IpXG4gICAge1xuICAgICAgICBpZiAoY29sb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLkludGVnZXJUb1N0cmluZyAoY29sb3IuciksXG4gICAgICAgICAgICB0aGlzLkludGVnZXJUb1N0cmluZyAoY29sb3IuZyksXG4gICAgICAgICAgICB0aGlzLkludGVnZXJUb1N0cmluZyAoY29sb3IuYilcbiAgICAgICAgXS5qb2luICgnLCcpO1xuICAgIH0sXG5cbiAgICBSR0JBQ29sb3JUb1N0cmluZyA6IGZ1bmN0aW9uIChjb2xvcilcbiAgICB7XG4gICAgICAgIGlmIChjb2xvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuSW50ZWdlclRvU3RyaW5nIChjb2xvci5yKSxcbiAgICAgICAgICAgIHRoaXMuSW50ZWdlclRvU3RyaW5nIChjb2xvci5nKSxcbiAgICAgICAgICAgIHRoaXMuSW50ZWdlclRvU3RyaW5nIChjb2xvci5iKSxcbiAgICAgICAgICAgIHRoaXMuSW50ZWdlclRvU3RyaW5nIChjb2xvci5hKVxuICAgICAgICBdLmpvaW4gKCcsJyk7XG4gICAgfSxcblxuICAgIFN0cmluZ1RvUkdCQ29sb3IgOiBmdW5jdGlvbiAoc3RyKVxuICAgIHtcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyYW1QYXJ0cyA9IHN0ci5zcGxpdCAoJywnKTtcbiAgICAgICAgaWYgKHBhcmFtUGFydHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJHQkNvbG9yIChcbiAgICAgICAgICAgIHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzBdKSxcbiAgICAgICAgICAgIHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzFdKSxcbiAgICAgICAgICAgIHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzJdKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBTdHJpbmdUb1JHQkFDb2xvciA6IGZ1bmN0aW9uIChzdHIpXG4gICAge1xuICAgICAgICBpZiAoc3RyID09PSBudWxsIHx8IHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJhbVBhcnRzID0gc3RyLnNwbGl0ICgnLCcpO1xuICAgICAgICBpZiAocGFyYW1QYXJ0cy5sZW5ndGggIT09IDMgJiYgcGFyYW1QYXJ0cy5sZW5ndGggIT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb2xvciA9IG5ldyBSR0JBQ29sb3IgKFxuICAgICAgICAgICAgdGhpcy5TdHJpbmdUb0ludGVnZXIgKHBhcmFtUGFydHNbMF0pLFxuICAgICAgICAgICAgdGhpcy5TdHJpbmdUb0ludGVnZXIgKHBhcmFtUGFydHNbMV0pLFxuICAgICAgICAgICAgdGhpcy5TdHJpbmdUb0ludGVnZXIgKHBhcmFtUGFydHNbMl0pLFxuICAgICAgICAgICAgMjU1XG4gICAgICAgICk7XG4gICAgICAgIGlmIChwYXJhbVBhcnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgY29sb3IuYSA9IHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzNdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfSxcblxuICAgIEVudmlyb25tZW50U2V0dGluZ3NUb1N0cmluZyAoZW52aXJvbm1lbnRTZXR0aW5ncylcbiAgICB7XG4gICAgICAgIGlmIChlbnZpcm9ubWVudFNldHRpbmdzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW52aXJvbm1lbnRTZXR0aW5nc1BhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICBlbnZpcm9ubWVudFNldHRpbmdzLmVudmlyb25tZW50TWFwTmFtZSxcbiAgICAgICAgICAgIGVudmlyb25tZW50U2V0dGluZ3MuYmFja2dyb3VuZElzRW52TWFwID8gJ29uJyA6ICdvZmYnXG4gICAgICAgIF0uam9pbiAoJywnKTtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50U2V0dGluZ3NQYXJhbWV0ZXJzO1xuICAgIH0sXG5cbiAgICBTdHJpbmdUb0Vudmlyb25tZW50U2V0dGluZ3MgOiBmdW5jdGlvbiAoc3RyKVxuICAgIHtcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyYW1QYXJ0cyA9IHN0ci5zcGxpdCAoJywnKTtcbiAgICAgICAgaWYgKHBhcmFtUGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW52aXJvbm1lbnRTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGVudmlyb25tZW50TWFwTmFtZSA6IHBhcmFtUGFydHNbMF0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSXNFbnZNYXAgOiBwYXJhbVBhcnRzWzFdID09PSAnb24nID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBlbnZpcm9ubWVudFNldHRpbmdzO1xuICAgIH0sXG5cbiAgICBFZGdlU2V0dGluZ3NUb1N0cmluZyA6IGZ1bmN0aW9uIChlZGdlU2V0dGluZ3MpXG4gICAge1xuICAgICAgICBpZiAoZWRnZVNldHRpbmdzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZWRnZVNldHRpbmdzUGFyYW1ldGVycyA9IFtcbiAgICAgICAgICAgIGVkZ2VTZXR0aW5ncy5zaG93RWRnZXMgPyAnb24nIDogJ29mZicsXG4gICAgICAgICAgICB0aGlzLlJHQkNvbG9yVG9TdHJpbmcgKGVkZ2VTZXR0aW5ncy5lZGdlQ29sb3IpLFxuICAgICAgICAgICAgdGhpcy5JbnRlZ2VyVG9TdHJpbmcgKGVkZ2VTZXR0aW5ncy5lZGdlVGhyZXNob2xkKSxcbiAgICAgICAgXS5qb2luICgnLCcpO1xuICAgICAgICByZXR1cm4gZWRnZVNldHRpbmdzUGFyYW1ldGVycztcbiAgICB9LFxuXG4gICAgU3RyaW5nVG9FZGdlU2V0dGluZ3MgOiBmdW5jdGlvbiAoc3RyKVxuICAgIHtcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyYW1QYXJ0cyA9IHN0ci5zcGxpdCAoJywnKTtcbiAgICAgICAgaWYgKHBhcmFtUGFydHMubGVuZ3RoICE9PSA1KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZWRnZVNldHRpbmdzID0gbmV3IEVkZ2VTZXR0aW5ncyAoXG4gICAgICAgICAgICBwYXJhbVBhcnRzWzBdID09PSAnb24nID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgbmV3IFJHQkNvbG9yIChcbiAgICAgICAgICAgICAgICB0aGlzLlN0cmluZ1RvSW50ZWdlciAocGFyYW1QYXJ0c1sxXSksXG4gICAgICAgICAgICAgICAgdGhpcy5TdHJpbmdUb0ludGVnZXIgKHBhcmFtUGFydHNbMl0pLFxuICAgICAgICAgICAgICAgIHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzNdKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRoaXMuU3RyaW5nVG9JbnRlZ2VyIChwYXJhbVBhcnRzWzRdKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZWRnZVNldHRpbmdzO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJMaXN0QnVpbGRlclxue1xuICAgIGNvbnN0cnVjdG9yIChzZXBhcmF0b3IpXG4gICAge1xuICAgICAgICB0aGlzLnNlcGFyYXRvciA9IHNlcGFyYXRvcjtcbiAgICAgICAgdGhpcy5wYXJhbUxpc3QgPSAnJztcbiAgICB9XG5cbiAgICBBZGRNb2RlbFVybHMgKHVybHMpXG4gICAge1xuICAgICAgICB0aGlzLkFkZFVybFBhcnQgKCdtb2RlbCcsIFBhcmFtZXRlckNvbnZlcnRlci5Nb2RlbFVybHNUb1N0cmluZyAodXJscykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBBZGRDYW1lcmEgKGNhbWVyYSlcbiAgICB7XG4gICAgICAgIHRoaXMuQWRkVXJsUGFydCAoJ2NhbWVyYScsIFBhcmFtZXRlckNvbnZlcnRlci5DYW1lcmFUb1N0cmluZyAoY2FtZXJhKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIEFkZENhbWVyYU1vZGUgKGNhbWVyYU1vZGUpXG4gICAge1xuICAgICAgICB0aGlzLkFkZFVybFBhcnQgKCdjYW1lcmFtb2RlJywgUGFyYW1ldGVyQ29udmVydGVyLkNhbWVyYU1vZGVUb1N0cmluZyAoY2FtZXJhTW9kZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBBZGRFbnZpcm9ubWVudFNldHRpbmdzIChlbnZTZXR0aW5ncylcbiAgICB7XG4gICAgICAgIHRoaXMuQWRkVXJsUGFydCAoJ2VudnNldHRpbmdzJywgUGFyYW1ldGVyQ29udmVydGVyLkVudmlyb25tZW50U2V0dGluZ3NUb1N0cmluZyAoZW52U2V0dGluZ3MpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgQWRkQmFja2dyb3VuZENvbG9yIChiYWNrZ3JvdW5kKVxuICAgIHtcbiAgICAgICAgdGhpcy5BZGRVcmxQYXJ0ICgnYmFja2dyb3VuZGNvbG9yJywgUGFyYW1ldGVyQ29udmVydGVyLlJHQkFDb2xvclRvU3RyaW5nIChiYWNrZ3JvdW5kKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIEFkZERlZmF1bHRDb2xvciAoY29sb3IpXG4gICAge1xuICAgICAgICB0aGlzLkFkZFVybFBhcnQgKCdkZWZhdWx0Y29sb3InLCBQYXJhbWV0ZXJDb252ZXJ0ZXIuUkdCQ29sb3JUb1N0cmluZyAoY29sb3IpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgQWRkRWRnZVNldHRpbmdzIChlZGdlU2V0dGluZ3MpXG4gICAge1xuICAgICAgICB0aGlzLkFkZFVybFBhcnQgKCdlZGdlc2V0dGluZ3MnLCBQYXJhbWV0ZXJDb252ZXJ0ZXIuRWRnZVNldHRpbmdzVG9TdHJpbmcgKGVkZ2VTZXR0aW5ncykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBBZGRVcmxQYXJ0IChrZXl3b3JkLCB1cmxQYXJ0KVxuICAgIHtcbiAgICAgICAgaWYgKGtleXdvcmQgPT09IG51bGwgfHwgdXJsUGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmFtTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtTGlzdCArPSB0aGlzLnNlcGFyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFtTGlzdCArPSBrZXl3b3JkICsgJz0nICsgdXJsUGFydDtcbiAgICB9XG5cbiAgICBHZXRQYXJhbWV0ZXJMaXN0ICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbUxpc3Q7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyTGlzdFBhcnNlclxue1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbUxpc3QsIHNlcGFyYXRvcilcbiAgICB7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yO1xuICAgICAgICB0aGlzLnBhcmFtTGlzdCA9IHBhcmFtTGlzdDtcbiAgICB9XG5cbiAgICBHZXRNb2RlbFVybHMgKClcbiAgICB7XG4gICAgICAgIC8vIGRldGVjdCBsZWdhY3kgbGlua3NcbiAgICAgICAgaWYgKHRoaXMucGFyYW1MaXN0LmluZGV4T2YgKCc9JykgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbUxpc3Quc3BsaXQgKCcsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQga2V5d29yZFBhcmFtcyA9IHRoaXMuR2V0S2V5d29yZFBhcmFtcyAoJ21vZGVsJyk7XG4gICAgICAgIHJldHVybiBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9Nb2RlbFVybHMgKGtleXdvcmRQYXJhbXMpO1xuICAgIH1cblxuICAgIEdldENhbWVyYSAoKVxuICAgIHtcbiAgICAgICAgbGV0IGtleXdvcmRQYXJhbXMgPSB0aGlzLkdldEtleXdvcmRQYXJhbXMgKCdjYW1lcmEnKTtcbiAgICAgICAgcmV0dXJuIFBhcmFtZXRlckNvbnZlcnRlci5TdHJpbmdUb0NhbWVyYSAoa2V5d29yZFBhcmFtcyk7XG4gICAgfVxuXG4gICAgR2V0Q2FtZXJhTW9kZSAoKVxuICAgIHtcbiAgICAgICAgbGV0IGtleXdvcmRQYXJhbXMgPSB0aGlzLkdldEtleXdvcmRQYXJhbXMgKCdjYW1lcmFtb2RlJyk7XG4gICAgICAgIHJldHVybiBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9DYW1lcmFNb2RlIChrZXl3b3JkUGFyYW1zKTtcbiAgICB9XG5cbiAgICBHZXRFbnZpcm9ubWVudFNldHRpbmdzICgpXG4gICAge1xuICAgICAgICBsZXQgZW52aXJvbm1lbnRTZXR0aW5nc1BhcmFtcyA9IHRoaXMuR2V0S2V5d29yZFBhcmFtcyAoJ2VudnNldHRpbmdzJyk7XG4gICAgICAgIHJldHVybiBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9FbnZpcm9ubWVudFNldHRpbmdzIChlbnZpcm9ubWVudFNldHRpbmdzUGFyYW1zKTtcbiAgICB9XG5cbiAgICBHZXRCYWNrZ3JvdW5kQ29sb3IgKClcbiAgICB7XG4gICAgICAgIGxldCBiYWNrZ3JvdW5kUGFyYW1zID0gdGhpcy5HZXRLZXl3b3JkUGFyYW1zICgnYmFja2dyb3VuZGNvbG9yJyk7XG4gICAgICAgIHJldHVybiBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9SR0JBQ29sb3IgKGJhY2tncm91bmRQYXJhbXMpO1xuICAgIH1cblxuICAgIEdldERlZmF1bHRDb2xvciAoKVxuICAgIHtcbiAgICAgICAgbGV0IGNvbG9yUGFyYW1zID0gdGhpcy5HZXRLZXl3b3JkUGFyYW1zICgnZGVmYXVsdGNvbG9yJyk7XG4gICAgICAgIHJldHVybiBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9SR0JDb2xvciAoY29sb3JQYXJhbXMpO1xuICAgIH1cblxuICAgIEdldEVkZ2VTZXR0aW5ncyAoKVxuICAgIHtcbiAgICAgICAgbGV0IGVkZ2VTZXR0aW5nc1BhcmFtcyA9IHRoaXMuR2V0S2V5d29yZFBhcmFtcyAoJ2VkZ2VzZXR0aW5ncycpO1xuICAgICAgICByZXR1cm4gUGFyYW1ldGVyQ29udmVydGVyLlN0cmluZ1RvRWRnZVNldHRpbmdzIChlZGdlU2V0dGluZ3NQYXJhbXMpO1xuICAgIH1cblxuICAgIEdldEtleXdvcmRQYXJhbXMgKGtleXdvcmQpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5wYXJhbUxpc3QgPT09IG51bGwgfHwgdGhpcy5wYXJhbUxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQga2V5d29yZFRva2VuID0ga2V5d29yZCArICc9JztcbiAgICAgICAgbGV0IHVybFBhcnRzID0gdGhpcy5wYXJhbUxpc3Quc3BsaXQgKHRoaXMuc2VwYXJhdG9yKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxQYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHVybFBhcnQgPSB1cmxQYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmICh1cmxQYXJ0LnN0YXJ0c1dpdGggKGtleXdvcmRUb2tlbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsUGFydC5zdWJzdHJpbmcgKGtleXdvcmRUb2tlbi5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVVybEJ1aWxkZXIgKClcbntcbiAgICByZXR1cm4gbmV3IFBhcmFtZXRlckxpc3RCdWlsZGVyICgnJCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlVXJsUGFyc2VyICh1cmxQYXJhbXMpXG57XG4gICAgcmV0dXJuIG5ldyBQYXJhbWV0ZXJMaXN0UGFyc2VyICh1cmxQYXJhbXMsICckJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVNb2RlbFVybFBhcmFtZXRlcnMgKHVybHMpXG57XG4gICAgbGV0IGJ1aWxkZXIgPSBDcmVhdGVVcmxCdWlsZGVyICgpO1xuICAgIGJ1aWxkZXIuQWRkTW9kZWxVcmxzICh1cmxzKTtcbiAgICByZXR1cm4gYnVpbGRlci5HZXRQYXJhbWV0ZXJMaXN0ICgpO1xufVxuIiwiaW1wb3J0IHsgUnVuVGFza3NCYXRjaCB9IGZyb20gJy4uL2NvcmUvdGFza3J1bm5lci5qcyc7XG5pbXBvcnQgeyBJc0VxdWFsIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgQ3JlYXRlT2JqZWN0VXJsLCBDcmVhdGVPYmplY3RVcmxXaXRoTWltZVR5cGUgfSBmcm9tICcuLi9pby9idWZmZXJ1dGlscy5qcyc7XG5pbXBvcnQgeyBNYXRlcmlhbFR5cGUgfSBmcm9tICcuLi9tb2RlbC9tYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBNZXNoSW5zdGFuY2UsIE1lc2hJbnN0YW5jZUlkIH0gZnJvbSAnLi4vbW9kZWwvbWVzaGluc3RhbmNlLmpzJztcbmltcG9ydCB7IEdldE1lc2hUeXBlLCBNZXNoVHlwZSB9IGZyb20gJy4uL21vZGVsL21lc2h1dGlscy5qcyc7XG5pbXBvcnQgeyBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IsIEdldFNoYWRpbmdUeXBlLCBTaGFkaW5nVHlwZSB9IGZyb20gJy4vdGhyZWV1dGlscy5qcyc7XG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGNsYXNzIE1vZGVsVG9UaHJlZUNvbnZlcnNpb25QYXJhbXNcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHRoaXMuZm9yY2VNZWRpdW1wRm9yTWF0ZXJpYWxzID0gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsVG9UaHJlZUNvbnZlcnNpb25PdXRwdXRcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHRoaXMuZGVmYXVsdE1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLm9iamVjdFVybHMgPSBbXTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVGhyZWVDb252ZXJzaW9uU3RhdGVIYW5kbGVyXG57XG5cdGNvbnN0cnVjdG9yIChjYWxsYmFja3MpXG5cdHtcblx0XHR0aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcblx0XHR0aGlzLnRleHR1cmVzTmVlZGVkID0gMDtcblx0XHR0aGlzLnRleHR1cmVzTG9hZGVkID0gMDtcblx0XHR0aGlzLnRocmVlT2JqZWN0ID0gbnVsbDtcblx0fVxuXG5cdE9uVGV4dHVyZU5lZWRlZCAoKVxuXHR7XG5cdFx0dGhpcy50ZXh0dXJlc05lZWRlZCArPSAxO1xuXHR9XG5cblx0T25UZXh0dXJlTG9hZGVkICgpXG5cdHtcblx0XHR0aGlzLnRleHR1cmVzTG9hZGVkICs9IDE7XG5cdFx0dGhpcy5jYWxsYmFja3Mub25UZXh0dXJlTG9hZGVkICgpO1xuXHRcdHRoaXMuRmluaXNoICgpO1xuXHR9XG5cblx0T25Nb2RlbExvYWRlZCAodGhyZWVPYmplY3QpXG5cdHtcblx0XHR0aGlzLnRocmVlT2JqZWN0ID0gdGhyZWVPYmplY3Q7XG5cdFx0dGhpcy5GaW5pc2ggKCk7XG5cdH1cblxuXHRGaW5pc2ggKClcblx0e1xuXHRcdGlmICh0aGlzLnRocmVlT2JqZWN0ICE9PSBudWxsICYmIHRoaXMudGV4dHVyZXNOZWVkZWQgPT09IHRoaXMudGV4dHVyZXNMb2FkZWQpIHtcblx0XHRcdHRoaXMuY2FsbGJhY2tzLm9uTW9kZWxMb2FkZWQgKHRoaXMudGhyZWVPYmplY3QpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVGhyZWVOb2RlVHJlZVxue1xuXHRjb25zdHJ1Y3RvciAobW9kZWwsIHRocmVlUm9vdE5vZGUpXG5cdHtcblx0XHR0aGlzLm1vZGVsID0gbW9kZWw7XG5cdFx0dGhpcy50aHJlZU5vZGVJdGVtcyA9IFtdO1xuXHRcdHRoaXMuQWRkTm9kZSAobW9kZWwuR2V0Um9vdE5vZGUgKCksIHRocmVlUm9vdE5vZGUpO1xuXHR9XG5cblx0QWRkTm9kZSAobm9kZSwgdGhyZWVOb2RlKVxuXHR7XG5cdFx0bGV0IG1hdHJpeCA9IG5vZGUuR2V0VHJhbnNmb3JtYXRpb24gKCkuR2V0TWF0cml4ICgpO1xuXHRcdGxldCB0aHJlZU1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0ICgpLmZyb21BcnJheSAobWF0cml4LkdldCAoKSk7XG5cdFx0dGhyZWVOb2RlLmFwcGx5TWF0cml4NCAodGhyZWVNYXRyaXgpO1xuXG5cdFx0Zm9yIChsZXQgY2hpbGROb2RlIG9mIG5vZGUuR2V0Q2hpbGROb2RlcyAoKSkge1xuXHRcdFx0bGV0IHRocmVlQ2hpbGROb2RlID0gbmV3IFRIUkVFLk9iamVjdDNEICgpO1xuXHRcdFx0dGhyZWVOb2RlLmFkZCAodGhyZWVDaGlsZE5vZGUpO1xuXHRcdFx0dGhpcy5BZGROb2RlIChjaGlsZE5vZGUsIHRocmVlQ2hpbGROb2RlKTtcblx0XHR9XG5cdFx0Zm9yIChsZXQgbWVzaEluZGV4IG9mIG5vZGUuR2V0TWVzaEluZGljZXMgKCkpIHtcblx0XHRcdGxldCBpZCA9IG5ldyBNZXNoSW5zdGFuY2VJZCAobm9kZS5HZXRJZCAoKSwgbWVzaEluZGV4KTtcblx0XHRcdGxldCBtZXNoID0gdGhpcy5tb2RlbC5HZXRNZXNoIChtZXNoSW5kZXgpO1xuXHRcdFx0dGhpcy50aHJlZU5vZGVJdGVtcy5wdXNoICh7XG5cdFx0XHRcdG1lc2hJbnN0YW5jZSA6IG5ldyBNZXNoSW5zdGFuY2UgKGlkLCBub2RlLCBtZXNoKSxcblx0XHRcdFx0dGhyZWVOb2RlIDogdGhyZWVOb2RlXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRHZXROb2RlSXRlbXMgKClcblx0e1xuXHRcdHJldHVybiB0aGlzLnRocmVlTm9kZUl0ZW1zO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb252ZXJ0TW9kZWxUb1RocmVlT2JqZWN0IChtb2RlbCwgcGFyYW1zLCBvdXRwdXQsIGNhbGxiYWNrcylcbntcblx0ZnVuY3Rpb24gQ3JlYXRlVGhyZWVNYXRlcmlhbCAoc3RhdGVIYW5kbGVyLCBtb2RlbCwgbWF0ZXJpYWxJbmRleCwgc2hhZGluZ1R5cGUsIHBhcmFtcywgb3V0cHV0KVxuXHR7XG5cdFx0ZnVuY3Rpb24gU2V0VGV4dHVyZVBhcmFtZXRlcnMgKHRleHR1cmUsIHRocmVlVGV4dHVyZSlcblx0XHR7XG5cdFx0XHR0aHJlZVRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcblx0XHRcdHRocmVlVGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0dGhyZWVUZXh0dXJlLnJvdGF0aW9uID0gdGV4dHVyZS5yb3RhdGlvbjtcblx0XHRcdHRocmVlVGV4dHVyZS5vZmZzZXQueCA9IHRleHR1cmUub2Zmc2V0Lng7XG5cdFx0XHR0aHJlZVRleHR1cmUub2Zmc2V0LnkgPSB0ZXh0dXJlLm9mZnNldC55O1xuXHRcdFx0dGhyZWVUZXh0dXJlLnJlcGVhdC54ID0gdGV4dHVyZS5zY2FsZS54O1xuXHRcdFx0dGhyZWVUZXh0dXJlLnJlcGVhdC55ID0gdGV4dHVyZS5zY2FsZS55O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIExvYWRUZXh0dXJlIChzdGF0ZUhhbmRsZXIsIHRocmVlTWF0ZXJpYWwsIHRleHR1cmUsIG91dHB1dCwgb25UZXh0dXJlTG9hZGVkKVxuXHRcdHtcblx0XHRcdGlmICh0ZXh0dXJlID09PSBudWxsIHx8ICF0ZXh0dXJlLklzVmFsaWQgKCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bGV0IGxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyICgpO1xuXHRcdFx0c3RhdGVIYW5kbGVyLk9uVGV4dHVyZU5lZWRlZCAoKTtcblx0XHRcdGxldCB0ZXh0dXJlT2JqZWN0VXJsID0gbnVsbDtcblx0XHRcdGlmICh0ZXh0dXJlLm1pbWVUeXBlICE9PSBudWxsKSB7XG5cdFx0XHRcdHRleHR1cmVPYmplY3RVcmwgPSBDcmVhdGVPYmplY3RVcmxXaXRoTWltZVR5cGUgKHRleHR1cmUuYnVmZmVyLCB0ZXh0dXJlLm1pbWVUeXBlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRleHR1cmVPYmplY3RVcmwgPSBDcmVhdGVPYmplY3RVcmwgKHRleHR1cmUuYnVmZmVyKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5vYmplY3RVcmxzLnB1c2ggKHRleHR1cmVPYmplY3RVcmwpO1xuXHRcdFx0bG9hZGVyLmxvYWQgKHRleHR1cmVPYmplY3RVcmwsXG5cdFx0XHRcdCh0aHJlZVRleHR1cmUpID0+IHtcblx0XHRcdFx0XHRTZXRUZXh0dXJlUGFyYW1ldGVycyAodGV4dHVyZSwgdGhyZWVUZXh0dXJlKTtcblx0XHRcdFx0XHR0aHJlZU1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRvblRleHR1cmVMb2FkZWQgKHRocmVlVGV4dHVyZSk7XG5cdFx0XHRcdFx0c3RhdGVIYW5kbGVyLk9uVGV4dHVyZUxvYWRlZCAoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0bnVsbCxcblx0XHRcdFx0KGVycikgPT4ge1xuXHRcdFx0XHRcdHN0YXRlSGFuZGxlci5PblRleHR1cmVMb2FkZWQgKCk7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0bGV0IG1hdGVyaWFsID0gbW9kZWwuR2V0TWF0ZXJpYWwgKG1hdGVyaWFsSW5kZXgpO1xuXHRcdGxldCBiYXNlQ29sb3IgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1hdGVyaWFsLmNvbG9yKTtcblx0XHRpZiAobWF0ZXJpYWwudmVydGV4Q29sb3JzKSB7XG5cdFx0XHRiYXNlQ29sb3Iuc2V0UkdCICgxLjAsIDEuMCwgMS4wKTtcblx0XHR9XG5cblx0XHRsZXQgbWF0ZXJpYWxQYXJhbXMgPSB7XG5cdFx0XHRjb2xvciA6IGJhc2VDb2xvcixcblx0XHRcdHZlcnRleENvbG9ycyA6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblx0XHRcdG9wYWNpdHkgOiBtYXRlcmlhbC5vcGFjaXR5LFxuXHRcdFx0dHJhbnNwYXJlbnQgOiBtYXRlcmlhbC50cmFuc3BhcmVudCxcblx0XHRcdGFscGhhVGVzdCA6IG1hdGVyaWFsLmFscGhhVGVzdCxcblx0XHRcdHNpZGUgOiBUSFJFRS5Eb3VibGVTaWRlXG5cdFx0fTtcblxuXHRcdGlmIChwYXJhbXMuZm9yY2VNZWRpdW1wRm9yTWF0ZXJpYWxzKSB7XG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5wcmVjaXNpb24gPSAnbWVkaXVtcCc7XG5cdFx0fVxuXG5cdFx0bGV0IHRocmVlTWF0ZXJpYWwgPSBudWxsO1xuXHRcdGlmIChzaGFkaW5nVHlwZSA9PT0gU2hhZGluZ1R5cGUuUGhvbmcpIHtcblx0XHRcdHRocmVlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwgKG1hdGVyaWFsUGFyYW1zKTtcblx0XHRcdGlmIChtYXRlcmlhbC50eXBlID09PSBNYXRlcmlhbFR5cGUuUGhvbmcpIHtcblx0XHRcdFx0bGV0IHNwZWN1bGFyQ29sb3IgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1hdGVyaWFsLnNwZWN1bGFyKTtcblx0XHRcdFx0aWYgKElzRXF1YWwgKG1hdGVyaWFsLnNoaW5pbmVzcywgMC4wKSkge1xuXHRcdFx0XHRcdHNwZWN1bGFyQ29sb3Iuc2V0UkdCICgwLjAsIDAuMCwgMC4wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aHJlZU1hdGVyaWFsLnNwZWN1bGFyID0gc3BlY3VsYXJDb2xvcjtcblx0XHRcdFx0dGhyZWVNYXRlcmlhbC5zaGluaW5lc3MgPSBtYXRlcmlhbC5zaGluaW5lc3MgKiAxMDAuMDtcblx0XHRcdFx0TG9hZFRleHR1cmUgKHN0YXRlSGFuZGxlciwgdGhyZWVNYXRlcmlhbCwgbWF0ZXJpYWwuc3BlY3VsYXJNYXAsIG91dHB1dCwgKHRocmVlVGV4dHVyZSkgPT4ge1xuXHRcdFx0XHRcdHRocmVlTWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSB0aHJlZVRleHR1cmU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoc2hhZGluZ1R5cGUgPT09IFNoYWRpbmdUeXBlLlBoeXNpY2FsKSB7XG5cdFx0XHR0aHJlZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIChtYXRlcmlhbFBhcmFtcyk7XG5cdFx0XHRpZiAobWF0ZXJpYWwudHlwZSA9PT0gTWF0ZXJpYWxUeXBlLlBoeXNpY2FsKSB7XG5cdFx0XHRcdHRocmVlTWF0ZXJpYWwubWV0YWxuZXNzID0gbWF0ZXJpYWwubWV0YWxuZXNzO1xuXHRcdFx0XHR0aHJlZU1hdGVyaWFsLnJvdWdobmVzcyA9IG1hdGVyaWFsLnJvdWdobmVzcztcblx0XHRcdFx0TG9hZFRleHR1cmUgKHN0YXRlSGFuZGxlciwgdGhyZWVNYXRlcmlhbCwgbWF0ZXJpYWwubWV0YWxuZXNzTWFwLCBvdXRwdXQsICh0aHJlZVRleHR1cmUpID0+IHtcblx0XHRcdFx0XHR0aHJlZU1hdGVyaWFsLm1ldGFsbmVzcyA9IDEuMDtcblx0XHRcdFx0XHR0aHJlZU1hdGVyaWFsLnJvdWdobmVzcyA9IDEuMDtcblx0XHRcdFx0XHR0aHJlZU1hdGVyaWFsLm1ldGFsbmVzc01hcCA9IHRocmVlVGV4dHVyZTtcblx0XHRcdFx0XHR0aHJlZU1hdGVyaWFsLnJvdWdobmVzc01hcCA9IHRocmVlVGV4dHVyZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IGVtaXNzaXZlQ29sb3IgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1hdGVyaWFsLmVtaXNzaXZlKTtcblx0XHR0aHJlZU1hdGVyaWFsLmVtaXNzaXZlID0gZW1pc3NpdmVDb2xvcjtcblxuXHRcdExvYWRUZXh0dXJlIChzdGF0ZUhhbmRsZXIsIHRocmVlTWF0ZXJpYWwsIG1hdGVyaWFsLmRpZmZ1c2VNYXAsIG91dHB1dCwgKHRocmVlVGV4dHVyZSkgPT4ge1xuXHRcdFx0aWYgKCFtYXRlcmlhbC5tdWx0aXBseURpZmZ1c2VNYXApIHtcblx0XHRcdFx0dGhyZWVNYXRlcmlhbC5jb2xvci5zZXRSR0IgKDEuMCwgMS4wLCAxLjApO1xuXHRcdFx0fVxuXHRcdFx0dGhyZWVNYXRlcmlhbC5tYXAgPSB0aHJlZVRleHR1cmU7XG5cdFx0fSk7XG5cdFx0TG9hZFRleHR1cmUgKHN0YXRlSGFuZGxlciwgdGhyZWVNYXRlcmlhbCwgbWF0ZXJpYWwuYnVtcE1hcCwgb3V0cHV0LCAodGhyZWVUZXh0dXJlKSA9PiB7XG5cdFx0XHR0aHJlZU1hdGVyaWFsLmJ1bXBNYXAgPSB0aHJlZVRleHR1cmU7XG5cdFx0fSk7XG5cdFx0TG9hZFRleHR1cmUgKHN0YXRlSGFuZGxlciwgdGhyZWVNYXRlcmlhbCwgbWF0ZXJpYWwubm9ybWFsTWFwLCBvdXRwdXQsICh0aHJlZVRleHR1cmUpID0+IHtcblx0XHRcdHRocmVlTWF0ZXJpYWwubm9ybWFsTWFwID0gdGhyZWVUZXh0dXJlO1xuXHRcdH0pO1xuXHRcdExvYWRUZXh0dXJlIChzdGF0ZUhhbmRsZXIsIHRocmVlTWF0ZXJpYWwsIG1hdGVyaWFsLmVtaXNzaXZlTWFwLCBvdXRwdXQsICh0aHJlZVRleHR1cmUpID0+IHtcblx0XHRcdHRocmVlTWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSB0aHJlZVRleHR1cmU7XG5cdFx0fSk7XG5cblx0XHRpZiAobWF0ZXJpYWwuaXNEZWZhdWx0KSB7XG5cdFx0XHRvdXRwdXQuZGVmYXVsdE1hdGVyaWFsID0gdGhyZWVNYXRlcmlhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhyZWVNYXRlcmlhbDtcblx0fVxuXG5cdGZ1bmN0aW9uIENyZWF0ZVRocmVlTWVzaCAobWVzaEluc3RhbmNlLCBtb2RlbFRocmVlTWF0ZXJpYWxzKVxuXHR7XG5cdFx0bGV0IG1lc2ggPSBtZXNoSW5zdGFuY2UubWVzaDtcblx0XHRsZXQgdHJpYW5nbGVDb3VudCA9IG1lc2guVHJpYW5nbGVDb3VudCAoKTtcblxuXHRcdGxldCB0cmlhbmdsZUluZGljZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlQ291bnQ7IGkrKykge1xuXHRcdFx0dHJpYW5nbGVJbmRpY2VzLnB1c2ggKGkpO1xuXHRcdH1cblx0XHR0cmlhbmdsZUluZGljZXMuc29ydCAoKGEsIGIpID0+IHtcblx0XHRcdGxldCBhVHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChhKTtcblx0XHRcdGxldCBiVHJpYW5nbGUgPSBtZXNoLkdldFRyaWFuZ2xlIChiKTtcblx0XHRcdHJldHVybiBhVHJpYW5nbGUubWF0IC0gYlRyaWFuZ2xlLm1hdDtcblx0XHR9KTtcblxuXHRcdGxldCB0aHJlZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5ICgpO1xuXHRcdGxldCBtZXNoVGhyZWVNYXRlcmlhbHMgPSBbXTtcblx0XHRsZXQgbWVzaE9yaWdpbmFsTWF0ZXJpYWxzID0gW107XG5cdFx0bGV0IG1vZGVsVG9UaHJlZU1hdGVyaWFscyA9IG5ldyBNYXAgKCk7XG5cblx0XHRsZXQgdmVydGljZXMgPSBbXTtcblx0XHRsZXQgdmVydGV4Q29sb3JzID0gW107XG5cdFx0bGV0IG5vcm1hbHMgPSBbXTtcblx0XHRsZXQgdXZzID0gW107XG5cblx0XHRsZXQgZ3JvdXBzID0gW107XG5cdFx0Z3JvdXBzLnB1c2ggKHtcblx0XHRcdHN0YXJ0IDogMCxcblx0XHRcdGVuZCA6IC0xXG5cdFx0fSk7XG5cblx0XHRsZXQgbWVzaEhhc1ZlcnRleENvbG9ycyA9IChtZXNoLlZlcnRleENvbG9yQ291bnQgKCkgPiAwKTtcblx0XHRsZXQgbWVzaEhhc1VWcyA9IChtZXNoLlRleHR1cmVVVkNvdW50ICgpID4gMCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0cmlhbmdsZUluZGljZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCB0cmlhbmdsZUluZGV4ID0gdHJpYW5nbGVJbmRpY2VzW2ldO1xuXHRcdFx0bGV0IHRyaWFuZ2xlID0gbWVzaC5HZXRUcmlhbmdsZSAodHJpYW5nbGVJbmRleCk7XG5cblx0XHRcdGxldCB2MCA9IG1lc2guR2V0VmVydGV4ICh0cmlhbmdsZS52MCk7XG5cdFx0XHRsZXQgdjEgPSBtZXNoLkdldFZlcnRleCAodHJpYW5nbGUudjEpO1xuXHRcdFx0bGV0IHYyID0gbWVzaC5HZXRWZXJ0ZXggKHRyaWFuZ2xlLnYyKTtcblx0XHRcdHZlcnRpY2VzLnB1c2ggKHYwLngsIHYwLnksIHYwLnosIHYxLngsIHYxLnksIHYxLnosIHYyLngsIHYyLnksIHYyLnopO1xuXG5cdFx0XHRpZiAodHJpYW5nbGUuSGFzVmVydGV4Q29sb3JzICgpKSB7XG5cdFx0XHRcdGxldCB2YzAgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1lc2guR2V0VmVydGV4Q29sb3IgKHRyaWFuZ2xlLmMwKSk7XG5cdFx0XHRcdGxldCB2YzEgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1lc2guR2V0VmVydGV4Q29sb3IgKHRyaWFuZ2xlLmMxKSk7XG5cdFx0XHRcdGxldCB2YzIgPSBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IgKG1lc2guR2V0VmVydGV4Q29sb3IgKHRyaWFuZ2xlLmMyKSk7XG5cdFx0XHRcdHZlcnRleENvbG9ycy5wdXNoIChcblx0XHRcdFx0XHR2YzAuciwgdmMwLmcsIHZjMC5iLFxuXHRcdFx0XHRcdHZjMS5yLCB2YzEuZywgdmMxLmIsXG5cdFx0XHRcdFx0dmMyLnIsIHZjMi5nLCB2YzIuYlxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIGlmIChtZXNoSGFzVmVydGV4Q29sb3JzKSB7XG5cdFx0XHRcdHZlcnRleENvbG9ycy5wdXNoIChcblx0XHRcdFx0XHQwLjAsIDAuMCwgMC4wLFxuXHRcdFx0XHRcdDAuMCwgMC4wLCAwLjAsXG5cdFx0XHRcdFx0MC4wLCAwLjAsIDAuMFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgbjAgPSBtZXNoLkdldE5vcm1hbCAodHJpYW5nbGUubjApO1xuXHRcdFx0bGV0IG4xID0gbWVzaC5HZXROb3JtYWwgKHRyaWFuZ2xlLm4xKTtcblx0XHRcdGxldCBuMiA9IG1lc2guR2V0Tm9ybWFsICh0cmlhbmdsZS5uMik7XG5cdFx0XHRub3JtYWxzLnB1c2ggKG4wLngsIG4wLnksIG4wLnosIG4xLngsIG4xLnksIG4xLnosIG4yLngsIG4yLnksIG4yLnopO1xuXG5cdFx0XHRpZiAodHJpYW5nbGUuSGFzVGV4dHVyZVVWcyAoKSkge1xuXHRcdFx0XHRsZXQgdTAgPSBtZXNoLkdldFRleHR1cmVVViAodHJpYW5nbGUudTApO1xuXHRcdFx0XHRsZXQgdTEgPSBtZXNoLkdldFRleHR1cmVVViAodHJpYW5nbGUudTEpO1xuXHRcdFx0XHRsZXQgdTIgPSBtZXNoLkdldFRleHR1cmVVViAodHJpYW5nbGUudTIpO1xuXHRcdFx0XHR1dnMucHVzaCAodTAueCwgdTAueSwgdTEueCwgdTEueSwgdTIueCwgdTIueSk7XG5cdFx0XHR9IGVsc2UgaWYgKG1lc2hIYXNVVnMpIHtcblx0XHRcdFx0dXZzLnB1c2ggKDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjApO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgbW9kZWxNYXRlcmlhbEluZGV4ID0gdHJpYW5nbGUubWF0O1xuXHRcdFx0aWYgKCFtb2RlbFRvVGhyZWVNYXRlcmlhbHMuaGFzIChtb2RlbE1hdGVyaWFsSW5kZXgpKSB7XG5cdFx0XHRcdG1vZGVsVG9UaHJlZU1hdGVyaWFscy5zZXQgKG1vZGVsTWF0ZXJpYWxJbmRleCwgbWVzaFRocmVlTWF0ZXJpYWxzLmxlbmd0aCk7XG5cdFx0XHRcdG1lc2hUaHJlZU1hdGVyaWFscy5wdXNoIChtb2RlbFRocmVlTWF0ZXJpYWxzW21vZGVsTWF0ZXJpYWxJbmRleF0pO1xuXHRcdFx0XHRtZXNoT3JpZ2luYWxNYXRlcmlhbHMucHVzaCAobW9kZWxNYXRlcmlhbEluZGV4KTtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2dyb3Vwcy5sZW5ndGggLSAxXS5lbmQgPSBpIC0gMTtcblx0XHRcdFx0XHRncm91cHMucHVzaCAoe1xuXHRcdFx0XHRcdFx0c3RhcnQgOiBncm91cHNbZ3JvdXBzLmxlbmd0aCAtIDFdLmVuZCArIDEsXG5cdFx0XHRcdFx0XHRlbmQgOiAtMVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z3JvdXBzW2dyb3Vwcy5sZW5ndGggLSAxXS5lbmQgPSB0cmlhbmdsZUNvdW50IC0gMTtcblxuXHRcdHRocmVlR2VvbWV0cnkuc2V0QXR0cmlidXRlICgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSAodmVydGljZXMsIDMpKTtcblx0XHRpZiAodmVydGV4Q29sb3JzLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0dGhyZWVHZW9tZXRyeS5zZXRBdHRyaWJ1dGUgKCdjb2xvcicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlICh2ZXJ0ZXhDb2xvcnMsIDMpKTtcblx0XHR9XG5cdFx0dGhyZWVHZW9tZXRyeS5zZXRBdHRyaWJ1dGUgKCdub3JtYWwnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSAobm9ybWFscywgMykpO1xuXHRcdGlmICh1dnMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHR0aHJlZUdlb21ldHJ5LnNldEF0dHJpYnV0ZSAoJ3V2JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgKHV2cywgMikpO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IGdyb3VwID0gZ3JvdXBzW2ldO1xuXHRcdFx0dGhyZWVHZW9tZXRyeS5hZGRHcm91cCAoZ3JvdXAuc3RhcnQgKiAzLCAoZ3JvdXAuZW5kIC0gZ3JvdXAuc3RhcnQgKyAxKSAqIDMsIGkpO1xuXHRcdH1cblxuXHRcdGxldCB0aHJlZU1lc2ggPSBuZXcgVEhSRUUuTWVzaCAodGhyZWVHZW9tZXRyeSwgbWVzaFRocmVlTWF0ZXJpYWxzKTtcblx0XHR0aHJlZU1lc2gubmFtZSA9IG1lc2guR2V0TmFtZSAoKTtcblx0XHR0aHJlZU1lc2gudXNlckRhdGEgPSB7XG5cdFx0XHRvcmlnaW5hbE1lc2hJbnN0YW5jZSA6IG1lc2hJbnN0YW5jZSxcblx0XHRcdG9yaWdpbmFsTWF0ZXJpYWxzIDogbWVzaE9yaWdpbmFsTWF0ZXJpYWxzLFxuXHRcdFx0dGhyZWVNYXRlcmlhbHMgOiBudWxsXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aHJlZU1lc2g7XG5cdH1cblxuXHRmdW5jdGlvbiBDb252ZXJ0TWVzaCAodGhyZWVPYmplY3QsIG1lc2hJbnN0YW5jZSwgbW9kZWxUaHJlZU1hdGVyaWFscylcblx0e1xuXHRcdGxldCB0eXBlID0gR2V0TWVzaFR5cGUgKG1lc2hJbnN0YW5jZS5tZXNoKTtcblx0XHRpZiAodHlwZSA9PT0gTWVzaFR5cGUuVHJpYW5nbGVNZXNoKSB7XG5cdFx0XHRsZXQgdGhyZWVNZXNoID0gQ3JlYXRlVGhyZWVNZXNoIChtZXNoSW5zdGFuY2UsIG1vZGVsVGhyZWVNYXRlcmlhbHMpO1xuXHRcdFx0dGhyZWVPYmplY3QuYWRkICh0aHJlZU1lc2gpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIENvbnZlcnROb2RlSGllcmFyY2h5ICh0aHJlZVJvb3ROb2RlLCBtb2RlbCwgbW9kZWxUaHJlZU1hdGVyaWFscywgc3RhdGVIYW5kbGVyKVxuXHR7XG5cdFx0bGV0IG5vZGVUcmVlID0gbmV3IFRocmVlTm9kZVRyZWUgKG1vZGVsLCB0aHJlZVJvb3ROb2RlKTtcblx0XHRsZXQgdGhyZWVOb2RlSXRlbXMgPSBub2RlVHJlZS5HZXROb2RlSXRlbXMgKCk7XG5cblx0XHRSdW5UYXNrc0JhdGNoICh0aHJlZU5vZGVJdGVtcy5sZW5ndGgsIDEwMCwge1xuXHRcdFx0cnVuVGFzayA6IChmaXJzdE1lc2hJbnN0YW5jZUluZGV4LCBsYXN0TWVzaEluc3RhbmNlSW5kZXgsIG9uUmVhZHkpID0+IHtcblx0XHRcdFx0Zm9yIChsZXQgbWVzaEluc3RhbmNlSW5kZXggPSBmaXJzdE1lc2hJbnN0YW5jZUluZGV4OyBtZXNoSW5zdGFuY2VJbmRleCA8PSBsYXN0TWVzaEluc3RhbmNlSW5kZXg7IG1lc2hJbnN0YW5jZUluZGV4KyspIHtcblx0XHRcdFx0XHRsZXQgbm9kZUl0ZW0gPSB0aHJlZU5vZGVJdGVtc1ttZXNoSW5zdGFuY2VJbmRleF07XG5cdFx0XHRcdFx0Q29udmVydE1lc2ggKG5vZGVJdGVtLnRocmVlTm9kZSwgbm9kZUl0ZW0ubWVzaEluc3RhbmNlLCBtb2RlbFRocmVlTWF0ZXJpYWxzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvblJlYWR5ICgpO1xuXHRcdFx0fSxcblx0XHRcdG9uUmVhZHkgOiAoKSA9PiB7XG5cdFx0XHRcdHN0YXRlSGFuZGxlci5Pbk1vZGVsTG9hZGVkICh0aHJlZVJvb3ROb2RlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGxldCBzdGF0ZUhhbmRsZXIgPSBuZXcgVGhyZWVDb252ZXJzaW9uU3RhdGVIYW5kbGVyIChjYWxsYmFja3MpO1xuXHRsZXQgc2hhZGluZ1R5cGUgPSBHZXRTaGFkaW5nVHlwZSAobW9kZWwpO1xuXG5cdGxldCBtb2RlbFRocmVlTWF0ZXJpYWxzID0gW107XG5cdGZvciAobGV0IG1hdGVyaWFsSW5kZXggPSAwOyBtYXRlcmlhbEluZGV4IDwgbW9kZWwuTWF0ZXJpYWxDb3VudCAoKTsgbWF0ZXJpYWxJbmRleCsrKSB7XG5cdFx0bGV0IHRocmVlTWF0ZXJpYWwgPSBDcmVhdGVUaHJlZU1hdGVyaWFsIChzdGF0ZUhhbmRsZXIsIG1vZGVsLCBtYXRlcmlhbEluZGV4LCBzaGFkaW5nVHlwZSwgcGFyYW1zLCBvdXRwdXQpO1xuXHRcdG1vZGVsVGhyZWVNYXRlcmlhbHMucHVzaCAodGhyZWVNYXRlcmlhbCk7XG5cdH1cblxuXHRsZXQgdGhyZWVPYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QgKCk7XG5cdENvbnZlcnROb2RlSGllcmFyY2h5ICh0aHJlZU9iamVjdCwgbW9kZWwsIG1vZGVsVGhyZWVNYXRlcmlhbHMsIHN0YXRlSGFuZGxlcik7XG59XG4iLCJpbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBJbXBvcnRlciB9IGZyb20gJy4uL2ltcG9ydC9pbXBvcnRlci5qcyc7XG5pbXBvcnQgeyBSZXZva2VPYmplY3RVcmwgfSBmcm9tICcuLi9pby9idWZmZXJ1dGlscy5qcyc7XG5pbXBvcnQgeyBDb252ZXJ0TW9kZWxUb1RocmVlT2JqZWN0LCBNb2RlbFRvVGhyZWVDb252ZXJzaW9uT3V0cHV0LCBNb2RlbFRvVGhyZWVDb252ZXJzaW9uUGFyYW1zIH0gZnJvbSAnLi90aHJlZWNvbnZlcnRlci5qcyc7XG5pbXBvcnQgeyBDb252ZXJ0Q29sb3JUb1RocmVlQ29sb3IsIEhhc0hpZ2hwRHJpdmVySXNzdWUgfSBmcm9tICcuL3RocmVldXRpbHMuanMnO1xuXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmV4cG9ydCBjbGFzcyBUaHJlZU1vZGVsTG9hZGVyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuaW1wb3J0ZXIgPSBuZXcgSW1wb3J0ZXIgKCk7XG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlZmF1bHRNYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHRoaXMub2JqZWN0VXJscyA9IG51bGw7XG4gICAgICB0aGlzLmhhc0hpZ2hwRHJpdmVySXNzdWUgPSBmYWxzZTsgLy8gSGFzSGlnaHBEcml2ZXJJc3N1ZSAoKTtcbiAgICB9XG5cbiAgICBJblByb2dyZXNzICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5pblByb2dyZXNzO1xuICAgIH1cblxuICAgIExvYWRNb2RlbCAoaW5wdXRGaWxlcywgc2V0dGluZ3MsIGNhbGxiYWNrcylcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIHRoaXMuUmV2b2tlT2JqZWN0VXJscyAoKTtcbiAgICAgICAgdGhpcy5pbXBvcnRlci5JbXBvcnRGaWxlcyAoaW5wdXRGaWxlcywgc2V0dGluZ3MsIHtcbiAgICAgICAgICAgIG9uTG9hZFN0YXJ0IDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkxvYWRTdGFydCAoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkZpbGVMaXN0UHJvZ3Jlc3MgOiAoY3VycmVudCwgdG90YWwpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25GaWxlTGlzdFByb2dyZXNzIChjdXJyZW50LCB0b3RhbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25GaWxlTG9hZFByb2dyZXNzIDogKGN1cnJlbnQsIHRvdGFsKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uRmlsZUxvYWRQcm9ncmVzcyAoY3VycmVudCwgdG90YWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSW1wb3J0U3RhcnQgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uSW1wb3J0U3RhcnQgKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TZWxlY3RNYWluRmlsZSA6IChmaWxlTmFtZXMsIHNlbGVjdEZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrcy5vblNlbGVjdE1haW5GaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGUgKDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblNlbGVjdE1haW5GaWxlIChmaWxlTmFtZXMsIHNlbGVjdEZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkltcG9ydFN1Y2Nlc3MgOiAoaW1wb3J0UmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RocmVlTW9kZWxMb2FkZXIjb25JbXBvcnRTdWNjZXNzJylcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25WaXN1YWxpemF0aW9uU3RhcnQgKCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBNb2RlbFRvVGhyZWVDb252ZXJzaW9uUGFyYW1zICgpO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5mb3JjZU1lZGl1bXBGb3JNYXRlcmlhbHMgPSB0aGlzLmhhc0hpZ2hwRHJpdmVySXNzdWU7XG4gICAgICAgICAgICAgICAgbGV0IG91dHB1dCA9IG5ldyBNb2RlbFRvVGhyZWVDb252ZXJzaW9uT3V0cHV0ICgpO1xuICAgICAgICAgICAgICAgIENvbnZlcnRNb2RlbFRvVGhyZWVPYmplY3QgKGltcG9ydFJlc3VsdC5tb2RlbCwgcGFyYW1zLCBvdXRwdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgb25UZXh0dXJlTG9hZGVkIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uVGV4dHVyZUxvYWRlZCAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25Nb2RlbExvYWRlZCA6ICh0aHJlZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0TWF0ZXJpYWwgPSBvdXRwdXQuZGVmYXVsdE1hdGVyaWFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3RVcmxzID0gb3V0cHV0Lm9iamVjdFVybHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1wb3J0UmVzdWx0LnVwVmVjdG9yID09PSBEaXJlY3Rpb24uWCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uICgpLnNldEZyb21BeGlzQW5nbGUgKG5ldyBUSFJFRS5WZWN0b3IzICgwLjAsIDAuMCwgMS4wKSwgTWF0aC5QSSAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWVPYmplY3QucXVhdGVybmlvbi5tdWx0aXBseSAocm90YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbXBvcnRSZXN1bHQudXBWZWN0b3IgPT09IERpcmVjdGlvbi5aKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdGF0aW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24gKCkuc2V0RnJvbUF4aXNBbmdsZSAobmV3IFRIUkVFLlZlY3RvcjMgKDEuMCwgMC4wLCAwLjApLCAtTWF0aC5QSSAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWVPYmplY3QucXVhdGVybmlvbi5tdWx0aXBseSAocm90YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uTW9kZWxGaW5pc2hlZCAoaW1wb3J0UmVzdWx0LCB0aHJlZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSW1wb3J0RXJyb3IgOiAoaW1wb3J0RXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKCdUaHJlZU1vZGVsTG9hZGVyI29uSW1wb3J0RXJyb3InLCBpbXBvcnRFcnJvcik7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uTG9hZEVycm9yIChpbXBvcnRFcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEdldEltcG9ydGVyICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRlcjtcbiAgICB9XG5cbiAgICBHZXREZWZhdWx0TWF0ZXJpYWwgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRNYXRlcmlhbDtcbiAgICB9XG5cbiAgICBSZXBsYWNlRGVmYXVsdE1hdGVyaWFsQ29sb3IgKGRlZmF1bHRDb2xvcilcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRNYXRlcmlhbCAhPT0gbnVsbCAmJiAhdGhpcy5kZWZhdWx0TWF0ZXJpYWwudmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRNYXRlcmlhbC5jb2xvciA9IENvbnZlcnRDb2xvclRvVGhyZWVDb2xvciAoZGVmYXVsdENvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFJldm9rZU9iamVjdFVybHMgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLm9iamVjdFVybHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBvYmplY3RVcmwgb2YgdGhpcy5vYmplY3RVcmxzKSB7XG4gICAgICAgICAgICBSZXZva2VPYmplY3RVcmwgKG9iamVjdFVybCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYmplY3RVcmxzID0gbnVsbDtcbiAgICB9XG5cbiAgICBEZXN0cm95ICgpXG4gICAge1xuICAgICAgICB0aGlzLlJldm9rZU9iamVjdFVybHMgKCk7XG4gICAgICAgIHRoaXMuaW1wb3J0ZXIgPSBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkMkQgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDJkLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIEdldEludGVnZXJGcm9tU3R5bGUgKHBhcmFtZXRlcilcbntcbiAgICByZXR1cm4gTWF0aC5yb3VuZCAocGFyc2VGbG9hdCAocGFyYW1ldGVyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXREb21FbGVtZW50RXh0ZXJuYWxXaWR0aCAoc3R5bGUpXG57XG4gICAgbGV0IHBhZGRpbmcgPSBHZXRJbnRlZ2VyRnJvbVN0eWxlIChzdHlsZS5wYWRkaW5nTGVmdCkgKyBHZXRJbnRlZ2VyRnJvbVN0eWxlIChzdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgIGxldCBib3JkZXIgPSBHZXRJbnRlZ2VyRnJvbVN0eWxlIChzdHlsZS5ib3JkZXJMZWZ0V2lkdGgpICsgR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCk7XG4gICAgbGV0IG1hcmdpbiA9IEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLm1hcmdpbkxlZnQpICsgR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUubWFyZ2luUmlnaHQpO1xuICAgIHJldHVybiBwYWRkaW5nICsgYm9yZGVyICsgbWFyZ2luO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0RG9tRWxlbWVudEV4dGVybmFsSGVpZ2h0IChzdHlsZSlcbntcbiAgICBsZXQgcGFkZGluZyA9IEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLnBhZGRpbmdUb3ApICsgR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgbGV0IGJvcmRlciA9IEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLmJvcmRlclRvcFdpZHRoKSArIEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICBsZXQgbWFyZ2luID0gR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUubWFyZ2luVG9wKSArIEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gICAgcmV0dXJuIHBhZGRpbmcgKyBib3JkZXIgKyBtYXJnaW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXREb21FbGVtZW50SW5uZXJEaW1lbnNpb25zIChlbGVtZW50LCBvdXRlcldpZHRoLCBvdXRlckhlaWdodClcbntcbiAgICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlIChlbGVtZW50KTtcbiAgICBsZXQgd2lkdGggPSBvdXRlcldpZHRoIC0gR2V0RG9tRWxlbWVudEV4dGVybmFsV2lkdGggKHN0eWxlKTtcbiAgICBsZXQgaGVpZ2h0ID0gb3V0ZXJIZWlnaHQgLSBHZXREb21FbGVtZW50RXh0ZXJuYWxIZWlnaHQgKHN0eWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCA6IHdpZHRoLFxuICAgICAgICBoZWlnaHQgOiBoZWlnaHRcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0RG9tRWxlbWVudENsaWVudENvb3JkaW5hdGVzIChlbGVtZW50LCBjbGllbnRYLCBjbGllbnRZKVxue1xuICAgIGlmIChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgICBsZXQgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICgpO1xuICAgICAgICBjbGllbnRYIC09IGNsaWVudFJlY3QubGVmdDtcbiAgICAgICAgY2xpZW50WSAtPSBjbGllbnRSZWN0LnRvcDtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5wYWdlWE9mZnNldCAmJiB3aW5kb3cucGFnZVlPZmZzZXQpIHtcbiAgICAgICAgY2xpZW50WCArPSB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICAgIGNsaWVudFkgKz0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIH1cbiAgICByZXR1cm4gKG5ldyBDb29yZDJEIChjbGllbnRYLCBjbGllbnRZKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVEb21FbGVtZW50IChlbGVtZW50VHlwZSwgY2xhc3NOYW1lLCBpbm5lckhUTUwpXG57XG4gICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IChlbGVtZW50VHlwZSk7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICB9XG4gICAgaWYgKGlubmVySFRNTCkge1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBZGREb21FbGVtZW50IChwYXJlbnRFbGVtZW50LCBlbGVtZW50VHlwZSwgY2xhc3NOYW1lLCBpbm5lckhUTUwpXG57XG4gICAgbGV0IGVsZW1lbnQgPSBDcmVhdGVEb21FbGVtZW50IChlbGVtZW50VHlwZSwgY2xhc3NOYW1lLCBpbm5lckhUTUwpO1xuICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQgKGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkRGl2IChwYXJlbnRFbGVtZW50LCBjbGFzc05hbWUsIGlubmVySFRNTClcbntcbiAgICByZXR1cm4gQWRkRG9tRWxlbWVudCAocGFyZW50RWxlbWVudCwgJ2RpdicsIGNsYXNzTmFtZSwgaW5uZXJIVE1MKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENsZWFyRG9tRWxlbWVudCAoZWxlbWVudClcbntcbiAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQgKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gSW5zZXJ0RG9tRWxlbWVudEJlZm9yZSAobmV3RWxlbWVudCwgZXhpc3RpbmdFbGVtZW50KVxue1xuICAgIGV4aXN0aW5nRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSAobmV3RWxlbWVudCwgZXhpc3RpbmdFbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEluc2VydERvbUVsZW1lbnRBZnRlciAobmV3RWxlbWVudCwgZXhpc3RpbmdFbGVtZW50KVxue1xuICAgIGV4aXN0aW5nRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSAobmV3RWxlbWVudCwgZXhpc3RpbmdFbGVtZW50Lm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNob3dEb21FbGVtZW50IChlbGVtZW50LCBzaG93KVxue1xuICAgIGlmIChzaG93KSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzRG9tRWxlbWVudFZpc2libGUgKGVsZW1lbnQpXG57XG4gICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V0RG9tRWxlbWVudFdpZHRoIChlbGVtZW50LCB3aWR0aClcbntcbiAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGgudG9TdHJpbmcgKCkgKyAncHgnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V0RG9tRWxlbWVudEhlaWdodCAoZWxlbWVudCwgaGVpZ2h0KVxue1xuICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0LnRvU3RyaW5nICgpICsgJ3B4Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldERvbUVsZW1lbnRPdXRlcldpZHRoIChlbGVtZW50KVxue1xuICAgIGxldCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUgKGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFdpZHRoICsgR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUubWFyZ2luTGVmdCkgKyBHZXRJbnRlZ2VyRnJvbVN0eWxlIChzdHlsZS5tYXJnaW5SaWdodCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXREb21FbGVtZW50T3V0ZXJIZWlnaHQgKGVsZW1lbnQpXG57XG4gICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSAoZWxlbWVudCk7XG4gICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgR2V0SW50ZWdlckZyb21TdHlsZSAoc3R5bGUubWFyZ2luVG9wKSArIEdldEludGVnZXJGcm9tU3R5bGUgKHN0eWxlLm1hcmdpbkJvdHRvbSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXREb21FbGVtZW50T3V0ZXJXaWR0aCAoZWxlbWVudCwgd2lkdGgpXG57XG4gICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSAoZWxlbWVudCk7XG4gICAgU2V0RG9tRWxlbWVudFdpZHRoIChlbGVtZW50LCB3aWR0aCAtIEdldERvbUVsZW1lbnRFeHRlcm5hbFdpZHRoIChzdHlsZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V0RG9tRWxlbWVudE91dGVySGVpZ2h0IChlbGVtZW50LCBoZWlnaHQpXG57XG4gICAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSAoZWxlbWVudCk7XG4gICAgU2V0RG9tRWxlbWVudEhlaWdodCAoZWxlbWVudCwgaGVpZ2h0IC0gR2V0RG9tRWxlbWVudEV4dGVybmFsSGVpZ2h0IChzdHlsZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlRGl2IChjbGFzc05hbWUsIGlubmVySFRNTClcbntcbiAgICByZXR1cm4gQ3JlYXRlRG9tRWxlbWVudCAoJ2RpdicsIGNsYXNzTmFtZSwgaW5uZXJIVE1MKTtcbn1cbiIsImltcG9ydCB7IENvb3JkMkQsIENvb3JkRGlzdGFuY2UyRCwgU3ViQ29vcmQyRCB9IGZyb20gJy4uL2dlb21ldHJ5L2Nvb3JkMmQuanMnO1xuaW1wb3J0IHsgQ29vcmREaXN0YW5jZTNELCBDcm9zc1ZlY3RvcjNELCBTdWJDb29yZDNELCBWZWN0b3JBbmdsZTNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvY29vcmQzZC5qcyc7XG5pbXBvcnQgeyBEZWdSYWQsIElzR3JlYXRlciwgSXNMb3dlciwgSXNaZXJvIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgUGFyYWJvbGljVHdlZW5GdW5jdGlvbiwgVHdlZW5Db29yZDNEIH0gZnJvbSAnLi4vZ2VvbWV0cnkvdHdlZW4uanMnO1xuaW1wb3J0IHsgQ2FtZXJhSXNFcXVhbDNEIH0gZnJvbSAnLi9jYW1lcmEuanMnO1xuaW1wb3J0IHsgR2V0RG9tRWxlbWVudENsaWVudENvb3JkaW5hdGVzIH0gZnJvbSAnLi9kb211dGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNb3VzZUludGVyYWN0aW9uXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMucHJldiA9IG5ldyBDb29yZDJEICgwLjAsIDAuMCk7XG4gICAgICAgIHRoaXMuY3VyciA9IG5ldyBDb29yZDJEICgwLjAsIDAuMCk7XG4gICAgICAgIHRoaXMuZGlmZiA9IG5ldyBDb29yZDJEICgwLjAsIDAuMCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IFtdO1xuICAgIH1cblxuICAgIERvd24gKGNhbnZhcywgZXYpXG4gICAge1xuICAgICAgICB0aGlzLmJ1dHRvbnMucHVzaCAoZXYud2hpY2gpO1xuICAgICAgICB0aGlzLmN1cnIgPSB0aGlzLkdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcbiAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyLkNsb25lICgpO1xuICAgIH1cblxuICAgIE1vdmUgKGNhbnZhcywgZXYpXG4gICAge1xuICAgICAgICB0aGlzLmN1cnIgPSB0aGlzLkdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0XHR0aGlzLmRpZmYgPSBTdWJDb29yZDJEICh0aGlzLmN1cnIsIHRoaXMucHJldik7XG5cdFx0dGhpcy5wcmV2ID0gdGhpcy5jdXJyLkNsb25lICgpO1xuXHR9XG5cblx0VXAgKGNhbnZhcywgZXYpXG5cdHtcblx0XHRsZXQgYnV0dG9uSW5kZXggPSB0aGlzLmJ1dHRvbnMuaW5kZXhPZiAoZXYud2hpY2gpO1xuXHRcdGlmIChidXR0b25JbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMuYnV0dG9ucy5zcGxpY2UgKGJ1dHRvbkluZGV4LCAxKTtcblx0XHR9XG5cdFx0dGhpcy5jdXJyID0gdGhpcy5HZXRQb3NpdGlvbkZyb21FdmVudCAoY2FudmFzLCBldik7XG5cdH1cblxuXHRMZWF2ZSAoY2FudmFzLCBldilcblx0e1xuXHRcdHRoaXMuYnV0dG9ucyA9IFtdO1xuXHRcdHRoaXMuY3VyciA9IHRoaXMuR2V0UG9zaXRpb25Gcm9tRXZlbnQgKGNhbnZhcywgZXYpO1xuXHR9XG5cblx0SXNCdXR0b25Eb3duICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5idXR0b25zLmxlbmd0aCA+IDA7XG5cdH1cblxuXHRHZXRCdXR0b24gKClcblx0e1xuXHRcdGxldCBsZW5ndGggPSB0aGlzLmJ1dHRvbnMubGVuZ3RoO1xuXHRcdGlmIChsZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5idXR0b25zW2xlbmd0aCAtIDFdO1xuXHR9XG5cblx0R2V0UG9zaXRpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLmN1cnI7XG5cdH1cblxuXHRHZXRNb3ZlRGlmZiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuZGlmZjtcblx0fVxuXG5cdEdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KVxuXHR7XG5cdFx0cmV0dXJuIEdldERvbUVsZW1lbnRDbGllbnRDb29yZGluYXRlcyAoY2FudmFzLCBldi5jbGllbnRYLCBldi5jbGllbnRZKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVG91Y2hJbnRlcmFjdGlvblxue1xuXHRjb25zdHJ1Y3RvciAoKVxuXHR7XG5cdFx0dGhpcy5wcmV2UG9zID0gbmV3IENvb3JkMkQgKDAuMCwgMC4wKTtcblx0XHR0aGlzLmN1cnJQb3MgPSBuZXcgQ29vcmQyRCAoMC4wLCAwLjApO1xuXHRcdHRoaXMuZGlmZlBvcyA9IG5ldyBDb29yZDJEICgwLjAsIDAuMCk7XG5cdFx0dGhpcy5wcmV2RGlzdCA9IDAuMDtcblx0XHR0aGlzLmN1cnJEaXN0ID0gMC4wO1xuXHRcdHRoaXMuZGlmZkRpc3QgPSAwLjA7XG5cdFx0dGhpcy5maW5nZXJzID0gMDtcblx0fVxuXG5cdFN0YXJ0IChjYW52YXMsIGV2KVxuXHR7XG5cdFx0aWYgKGV2LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5maW5nZXJzID0gZXYudG91Y2hlcy5sZW5ndGg7XG5cblx0XHR0aGlzLmN1cnJQb3MgPSB0aGlzLkdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0XHR0aGlzLnByZXZQb3MgPSB0aGlzLmN1cnJQb3MuQ2xvbmUgKCk7XG5cblx0XHR0aGlzLmN1cnJEaXN0ID0gdGhpcy5HZXRUb3VjaERpc3RhbmNlRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0XHR0aGlzLnByZXZEaXN0ID0gdGhpcy5jdXJyRGlzdDtcblx0fVxuXG5cdE1vdmUgKGNhbnZhcywgZXYpXG5cdHtcblx0XHRpZiAoZXYudG91Y2hlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmN1cnJQb3MgPSB0aGlzLkdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0XHR0aGlzLmRpZmZQb3MgPSBTdWJDb29yZDJEICh0aGlzLmN1cnJQb3MsIHRoaXMucHJldlBvcyk7XG5cdFx0dGhpcy5wcmV2UG9zID0gdGhpcy5jdXJyUG9zLkNsb25lICgpO1xuXG5cdFx0dGhpcy5jdXJyRGlzdCA9IHRoaXMuR2V0VG91Y2hEaXN0YW5jZUZyb21FdmVudCAoY2FudmFzLCBldik7XG5cdFx0dGhpcy5kaWZmRGlzdCA9IHRoaXMuY3VyckRpc3QgLSB0aGlzLnByZXZEaXN0O1xuXHRcdHRoaXMucHJldkRpc3QgPSB0aGlzLmN1cnJEaXN0O1xuXHR9XG5cblx0RW5kIChjYW52YXMsIGV2KVxuXHR7XG5cdFx0aWYgKGV2LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5maW5nZXJzID0gMDtcblx0XHR0aGlzLmN1cnJQb3MgPSB0aGlzLkdldFBvc2l0aW9uRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0XHR0aGlzLmN1cnJEaXN0ID0gdGhpcy5HZXRUb3VjaERpc3RhbmNlRnJvbUV2ZW50IChjYW52YXMsIGV2KTtcblx0fVxuXG5cdElzRmluZ2VyRG93biAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuZmluZ2VycyAhPT0gMDtcblx0fVxuXG5cdEdldEZpbmdlckNvdW50ICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5maW5nZXJzO1xuXHR9XG5cblx0R2V0UG9zaXRpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLmN1cnJQb3M7XG5cdH1cblxuXHRHZXRNb3ZlRGlmZiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuZGlmZlBvcztcblx0fVxuXG5cdEdldERpc3RhbmNlRGlmZiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuZGlmZkRpc3Q7XG5cdH1cblxuXHRHZXRQb3NpdGlvbkZyb21FdmVudCAoY2FudmFzLCBldilcblx0e1xuXHRcdGxldCBjb29yZCA9IG51bGw7XG5cdFx0aWYgKGV2LnRvdWNoZXMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRsZXQgdG91Y2hFdiA9IGV2LnRvdWNoZXNbMF07XG5cdFx0XHRjb29yZCA9IEdldERvbUVsZW1lbnRDbGllbnRDb29yZGluYXRlcyAoY2FudmFzLCB0b3VjaEV2LnBhZ2VYLCB0b3VjaEV2LnBhZ2VZKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvb3JkO1xuXHR9XG5cblx0R2V0VG91Y2hEaXN0YW5jZUZyb21FdmVudCAoY2FudmFzLCBldilcblx0e1xuXHRcdGlmIChldi50b3VjaGVzLmxlbmd0aCAhPT0gMikge1xuXHRcdFx0cmV0dXJuIDAuMDtcblx0XHR9XG5cdFx0bGV0IHRvdWNoRXYxID0gZXYudG91Y2hlc1swXTtcblx0XHRsZXQgdG91Y2hFdjIgPSBldi50b3VjaGVzWzFdO1xuXHRcdGxldCBkaXN0YW5jZSA9IENvb3JkRGlzdGFuY2UyRCAoXG5cdFx0XHRHZXREb21FbGVtZW50Q2xpZW50Q29vcmRpbmF0ZXMgKGNhbnZhcywgdG91Y2hFdjEucGFnZVgsIHRvdWNoRXYxLnBhZ2VZKSxcblx0XHRcdEdldERvbUVsZW1lbnRDbGllbnRDb29yZGluYXRlcyAoY2FudmFzLCB0b3VjaEV2Mi5wYWdlWCwgdG91Y2hFdjIucGFnZVkpXG5cdFx0KTtcblx0XHRyZXR1cm4gZGlzdGFuY2U7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIENsaWNrRGV0ZWN0b3Jcbntcblx0Y29uc3RydWN0b3IgKClcblx0e1xuXHRcdHRoaXMuaXNDbGljayA9IGZhbHNlO1xuXHRcdHRoaXMuc3RhcnRQb3NpdGlvbiA9IG51bGw7XG5cdH1cblxuXHRTdGFydCAoc3RhcnRQb3NpdGlvbilcblx0e1xuXHRcdHRoaXMuaXNDbGljayA9IHRydWU7XG5cdFx0dGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcblx0fVxuXG5cdE1vdmUgKGN1cnJlbnRQb3NpdGlvbilcblx0e1xuXHRcdGlmICghdGhpcy5pc0NsaWNrKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhcnRQb3NpdGlvbiAhPT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgbWF4Q2xpY2tEaXN0YW5jZSA9IDMuMDtcblx0XHRcdGNvbnN0IGN1cnJlbnREaXN0YW5jZSA9IENvb3JkRGlzdGFuY2UyRCAodGhpcy5zdGFydFBvc2l0aW9uLCBjdXJyZW50UG9zaXRpb24pO1xuXHRcdFx0aWYgKGN1cnJlbnREaXN0YW5jZSA+IG1heENsaWNrRGlzdGFuY2UpIHtcblx0XHRcdFx0dGhpcy5DYW5jZWwgKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuQ2FuY2VsICgpO1xuXHRcdH1cblx0fVxuXG5cdEVuZCAoKVxuXHR7XG5cdFx0dGhpcy5zdGFydFBvc2l0aW9uID0gbnVsbDtcblx0fVxuXG5cdENhbmNlbCAoKVxuXHR7XG5cdFx0dGhpcy5pc0NsaWNrID0gZmFsc2U7XG5cdFx0dGhpcy5zdGFydFBvc2l0aW9uID0gbnVsbDtcblx0fVxuXG5cdElzQ2xpY2sgKClcblx0e1xuXHRcdHJldHVybiB0aGlzLmlzQ2xpY2s7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb25UeXBlID1cbntcblx0Tm9uZSA6IDAsXG5cdE9yYml0IDogMSxcblx0UGFuIDogMixcblx0Wm9vbSA6IDNcbn07XG5cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uXG57XG5cdGNvbnN0cnVjdG9yIChjYW52YXMsIGNhbWVyYSwgY2FsbGJhY2tzKVxuXHR7XG5cdFx0dGhpcy5jYW52YXMgPSBjYW52YXM7XG5cdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cdFx0dGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG5cdFx0dGhpcy5maXhVcFZlY3RvciA9IHRydWU7XG5cblx0XHR0aGlzLm1vdXNlID0gbmV3IE1vdXNlSW50ZXJhY3Rpb24gKCk7XG5cdFx0dGhpcy50b3VjaCA9IG5ldyBUb3VjaEludGVyYWN0aW9uICgpO1xuXHRcdHRoaXMuY2xpY2tEZXRlY3RvciA9IG5ldyBDbGlja0RldGVjdG9yICgpO1xuXG5cdFx0dGhpcy5vbk1vdXNlQ2xpY2sgPSBudWxsO1xuXHRcdHRoaXMub25Nb3VzZU1vdmUgPSBudWxsO1xuXHRcdHRoaXMub25Db250ZXh0ID0gbnVsbDtcblxuXHRcdGlmICh0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHR0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyICgnbW91c2Vkb3duJywgdGhpcy5Pbk1vdXNlRG93bi5iaW5kICh0aGlzKSk7XG5cdFx0XHR0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyICgnd2hlZWwnLCB0aGlzLk9uTW91c2VXaGVlbC5iaW5kICh0aGlzKSk7XG5cdFx0XHR0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyICgndG91Y2hzdGFydCcsIHRoaXMuT25Ub3VjaFN0YXJ0LmJpbmQgKHRoaXMpKTtcblx0XHRcdHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIgKCd0b3VjaG1vdmUnLCB0aGlzLk9uVG91Y2hNb3ZlLmJpbmQgKHRoaXMpKTtcblx0XHRcdHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIgKCd0b3VjaGNhbmNlbCcsIHRoaXMuT25Ub3VjaEVuZC5iaW5kICh0aGlzKSk7XG5cdFx0XHR0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyICgndG91Y2hlbmQnLCB0aGlzLk9uVG91Y2hFbmQuYmluZCAodGhpcykpO1xuXHRcdFx0dGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciAoJ2NvbnRleHRtZW51JywgdGhpcy5PbkNvbnRleHRNZW51LmJpbmQgKHRoaXMpKTtcblx0XHR9XG5cdFx0aWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKCdtb3VzZW1vdmUnLCB0aGlzLk9uTW91c2VNb3ZlLmJpbmQgKHRoaXMpKTtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKCdtb3VzZXVwJywgdGhpcy5Pbk1vdXNlVXAuYmluZCAodGhpcykpO1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAoJ21vdXNlbGVhdmUnLCB0aGlzLk9uTW91c2VMZWF2ZS5iaW5kICh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0U2V0TW91c2VDbGlja0hhbmRsZXIgKG9uTW91c2VDbGljaylcblx0e1xuXHRcdHRoaXMub25Nb3VzZUNsaWNrID0gb25Nb3VzZUNsaWNrO1xuXHR9XG5cblx0U2V0TW91c2VNb3ZlSGFuZGxlciAob25Nb3VzZU1vdmUpXG5cdHtcblx0XHR0aGlzLm9uTW91c2VNb3ZlID0gb25Nb3VzZU1vdmU7XG5cdH1cblxuXHRTZXRDb250ZXh0TWVudUhhbmRsZXIgKG9uQ29udGV4dClcblx0e1xuXHRcdHRoaXMub25Db250ZXh0ID0gb25Db250ZXh0O1xuXHR9XG5cblx0SXNGaXhVcFZlY3RvciAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuZml4VXBWZWN0b3I7XG5cdH1cblxuXHRTZXRGaXhVcFZlY3RvciAoaXNGaXhVcFZlY3Rvcilcblx0e1xuXHRcdHRoaXMuZml4VXBWZWN0b3IgPSBpc0ZpeFVwVmVjdG9yO1xuXHR9XG5cblx0R2V0Q2FtZXJhICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5jYW1lcmE7XG5cdH1cblxuXHRTZXRDYW1lcmEgKGNhbWVyYSlcblx0e1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHR9XG5cblx0TW92ZUNhbWVyYSAobmV3Q2FtZXJhLCBzdGVwQ291bnQpXG5cdHtcblx0XHRmdW5jdGlvbiBTdGVwIChvYmosIHN0ZXBzLCBjb3VudCwgaW5kZXgpXG5cdFx0e1xuXHRcdFx0b2JqLmNhbWVyYS5leWUgPSBzdGVwcy5leWVbaW5kZXhdO1xuXHRcdFx0b2JqLmNhbWVyYS5jZW50ZXIgPSBzdGVwcy5jZW50ZXJbaW5kZXhdO1xuXHRcdFx0b2JqLmNhbWVyYS51cCA9IHN0ZXBzLnVwW2luZGV4XTtcblx0XHRcdG9iai5VcGRhdGUgKCk7XG5cblx0XHRcdGlmIChpbmRleCA8IGNvdW50IC0gMSkge1xuXHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKCgpID0+IHtcblx0XHRcdFx0XHRTdGVwIChvYmosIHN0ZXBzLCBjb3VudCwgaW5kZXggKyAxKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG5ld0NhbWVyYSA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChzdGVwQ291bnQgPT09IDAgfHwgQ2FtZXJhSXNFcXVhbDNEICh0aGlzLmNhbWVyYSwgbmV3Q2FtZXJhKSkge1xuXHRcdFx0dGhpcy5jYW1lcmEgPSBuZXdDYW1lcmE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCB0d2VlbkZ1bmMgPSBQYXJhYm9saWNUd2VlbkZ1bmN0aW9uO1xuXHRcdFx0bGV0IHN0ZXBzID0ge1xuXHRcdFx0XHRleWUgOiBUd2VlbkNvb3JkM0QgKHRoaXMuY2FtZXJhLmV5ZSwgbmV3Q2FtZXJhLmV5ZSwgc3RlcENvdW50LCB0d2VlbkZ1bmMpLFxuXHRcdFx0XHRjZW50ZXIgOiBUd2VlbkNvb3JkM0QgKHRoaXMuY2FtZXJhLmNlbnRlciwgbmV3Q2FtZXJhLmNlbnRlciwgc3RlcENvdW50LCB0d2VlbkZ1bmMpLFxuXHRcdFx0XHR1cCA6IFR3ZWVuQ29vcmQzRCAodGhpcy5jYW1lcmEudXAsIG5ld0NhbWVyYS51cCwgc3RlcENvdW50LCB0d2VlbkZ1bmMpXG5cdFx0XHR9O1xuXHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lICgoKSA9PiB7XG5cdFx0XHRcdFN0ZXAgKHRoaXMsIHN0ZXBzLCBzdGVwQ291bnQsIDApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5VcGRhdGUgKCk7XG5cdH1cblxuXHRHZXRGaXRUb1NwaGVyZUNhbWVyYSAoY2VudGVyLCByYWRpdXMpXG5cdHtcblx0XHRpZiAoSXNaZXJvIChyYWRpdXMpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRsZXQgZml0Q2FtZXJhID0gdGhpcy5jYW1lcmEuQ2xvbmUgKCk7XG5cblx0XHRsZXQgb2Zmc2V0VG9PcmlnbyA9IFN1YkNvb3JkM0QgKGZpdENhbWVyYS5jZW50ZXIsIGNlbnRlcik7XG5cdFx0Zml0Q2FtZXJhLmV5ZSA9IFN1YkNvb3JkM0QgKGZpdENhbWVyYS5leWUsIG9mZnNldFRvT3JpZ28pO1xuXHRcdGZpdENhbWVyYS5jZW50ZXIgPSBjZW50ZXIuQ2xvbmUgKCk7XG5cblx0XHRsZXQgY2VudGVyRXllRGlyZWN0aW9uID0gU3ViQ29vcmQzRCAoZml0Q2FtZXJhLmV5ZSwgZml0Q2FtZXJhLmNlbnRlcikuTm9ybWFsaXplICgpO1xuXHRcdGxldCBmaWVsZE9mVmlldyA9IHRoaXMuY2FtZXJhLmZvdiAvIDIuMDtcblx0XHRpZiAodGhpcy5jYW52YXMud2lkdGggPCB0aGlzLmNhbnZhcy5oZWlnaHQpIHtcblx0XHRcdGZpZWxkT2ZWaWV3ID0gZmllbGRPZlZpZXcgKiB0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMuY2FudmFzLmhlaWdodDtcblx0XHR9XG5cdFx0bGV0IGRpc3RhbmNlID0gcmFkaXVzIC8gTWF0aC5zaW4gKGZpZWxkT2ZWaWV3ICogRGVnUmFkKTtcblxuXHRcdGZpdENhbWVyYS5leWUgPSBmaXRDYW1lcmEuY2VudGVyLkNsb25lICgpLk9mZnNldCAoY2VudGVyRXllRGlyZWN0aW9uLCBkaXN0YW5jZSk7XG5cblx0XHRyZXR1cm4gZml0Q2FtZXJhO1xuXHR9XG5cblx0T25Nb3VzZURvd24gKGV2KVxuXHR7XG5cdFx0ZXYucHJldmVudERlZmF1bHQgKCk7XG5cblx0XHR0aGlzLm1vdXNlLkRvd24gKHRoaXMuY2FudmFzLCBldik7XG5cdFx0dGhpcy5jbGlja0RldGVjdG9yLlN0YXJ0ICh0aGlzLm1vdXNlLkdldFBvc2l0aW9uICgpKTtcblx0fVxuXG5cdE9uTW91c2VNb3ZlIChldilcblx0e1xuXHRcdHRoaXMubW91c2UuTW92ZSAodGhpcy5jYW52YXMsIGV2KTtcblx0XHR0aGlzLmNsaWNrRGV0ZWN0b3IuTW92ZSAodGhpcy5tb3VzZS5HZXRQb3NpdGlvbiAoKSk7XG5cdFx0aWYgKHRoaXMub25Nb3VzZU1vdmUpIHtcblx0XHRcdGxldCBtb3VzZUNvb3JkcyA9IEdldERvbUVsZW1lbnRDbGllbnRDb29yZGluYXRlcyAodGhpcy5jYW52YXMsIGV2LmNsaWVudFgsIGV2LmNsaWVudFkpO1xuXHRcdFx0dGhpcy5vbk1vdXNlTW92ZSAobW91c2VDb29yZHMpO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5tb3VzZS5Jc0J1dHRvbkRvd24gKCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgbW92ZURpZmYgPSB0aGlzLm1vdXNlLkdldE1vdmVEaWZmICgpO1xuXHRcdGxldCBtb3VzZUJ1dHRvbiA9IHRoaXMubW91c2UuR2V0QnV0dG9uICgpO1xuXG5cdFx0bGV0IG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuTm9uZTtcblx0XHRpZiAobW91c2VCdXR0b24gPT09IDEpIHtcblx0XHRcdGlmIChldi5jdHJsS2V5KSB7XG5cdFx0XHRcdG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuWm9vbTtcblx0XHRcdH0gZWxzZSBpZiAoZXYuc2hpZnRLZXkpIHtcblx0XHRcdFx0bmF2aWdhdGlvblR5cGUgPSBOYXZpZ2F0aW9uVHlwZS5QYW47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuYXZpZ2F0aW9uVHlwZSA9IE5hdmlnYXRpb25UeXBlLk9yYml0O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobW91c2VCdXR0b24gPT09IDIgfHwgbW91c2VCdXR0b24gPT09IDMpIHtcblx0XHRcdG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuUGFuO1xuXHRcdH1cblxuXHRcdGlmIChuYXZpZ2F0aW9uVHlwZSA9PT0gTmF2aWdhdGlvblR5cGUuT3JiaXQpIHtcblx0XHRcdGxldCBvcmJpdFJhdGlvID0gMC41O1xuXHRcdFx0dGhpcy5PcmJpdCAobW92ZURpZmYueCAqIG9yYml0UmF0aW8sIG1vdmVEaWZmLnkgKiBvcmJpdFJhdGlvKTtcblx0XHR9IGVsc2UgaWYgKG5hdmlnYXRpb25UeXBlID09PSBOYXZpZ2F0aW9uVHlwZS5QYW4pIHtcblx0XHRcdGxldCBleWVDZW50ZXJEaXN0YW5jZSA9IENvb3JkRGlzdGFuY2UzRCAodGhpcy5jYW1lcmEuZXllLCB0aGlzLmNhbWVyYS5jZW50ZXIpO1xuXHRcdFx0bGV0IHBhblJhdGlvID0gMC4wMDEgKiBleWVDZW50ZXJEaXN0YW5jZTtcblx0XHRcdHRoaXMuUGFuIChtb3ZlRGlmZi54ICogcGFuUmF0aW8sIG1vdmVEaWZmLnkgKiBwYW5SYXRpbyk7XG5cdFx0fSBlbHNlIGlmIChuYXZpZ2F0aW9uVHlwZSA9PT0gTmF2aWdhdGlvblR5cGUuWm9vbSkge1xuXHRcdFx0bGV0IHpvb21SYXRpbyA9IDAuMDA1O1xuXHRcdFx0dGhpcy5ab29tICgtbW92ZURpZmYueSAqIHpvb21SYXRpbyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5VcGRhdGUgKCk7XG5cdH1cblxuXHRPbk1vdXNlVXAgKGV2KVxuXHR7XG5cdFx0dGhpcy5tb3VzZS5VcCAodGhpcy5jYW52YXMsIGV2KTtcblx0XHR0aGlzLmNsaWNrRGV0ZWN0b3IuRW5kICgpO1xuXG5cdFx0aWYgKHRoaXMuY2xpY2tEZXRlY3Rvci5Jc0NsaWNrICgpKSB7XG5cdFx0XHRsZXQgbW91c2VDb29yZHMgPSB0aGlzLm1vdXNlLkdldFBvc2l0aW9uICgpO1xuXHRcdFx0dGhpcy5DbGljayAoZXYud2hpY2gsIG1vdXNlQ29vcmRzKTtcblx0XHR9XG5cdH1cblxuXHRPbk1vdXNlTGVhdmUgKGV2KVxuXHR7XG5cdFx0dGhpcy5tb3VzZS5MZWF2ZSAodGhpcy5jYW52YXMsIGV2KTtcblx0XHR0aGlzLmNsaWNrRGV0ZWN0b3IuQ2FuY2VsICgpO1xuXHR9XG5cblx0T25Ub3VjaFN0YXJ0IChldilcblx0e1xuXHRcdGV2LnByZXZlbnREZWZhdWx0ICgpO1xuXG5cdFx0dGhpcy50b3VjaC5TdGFydCAodGhpcy5jYW52YXMsIGV2KTtcblx0XHR0aGlzLmNsaWNrRGV0ZWN0b3IuU3RhcnQgKHRoaXMudG91Y2guR2V0UG9zaXRpb24gKCkpO1xuXHR9XG5cblx0T25Ub3VjaE1vdmUgKGV2KVxuXHR7XG5cdFx0ZXYucHJldmVudERlZmF1bHQgKCk7XG5cblx0XHR0aGlzLnRvdWNoLk1vdmUgKHRoaXMuY2FudmFzLCBldik7XG5cdFx0dGhpcy5jbGlja0RldGVjdG9yLk1vdmUgKHRoaXMudG91Y2guR2V0UG9zaXRpb24gKCkpO1xuXHRcdGlmICghdGhpcy50b3VjaC5Jc0ZpbmdlckRvd24gKCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgbW92ZURpZmYgPSB0aGlzLnRvdWNoLkdldE1vdmVEaWZmICgpO1xuXHRcdGxldCBkaXN0YW5jZURpZmYgPSB0aGlzLnRvdWNoLkdldERpc3RhbmNlRGlmZiAoKTtcblx0XHRsZXQgZmluZ2VyQ291bnQgPSB0aGlzLnRvdWNoLkdldEZpbmdlckNvdW50ICgpO1xuXG5cdFx0bGV0IG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuTm9uZTtcblx0XHRpZiAoZmluZ2VyQ291bnQgPT09IDEpIHtcblx0XHRcdG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuT3JiaXQ7XG5cdFx0fSBlbHNlIGlmIChmaW5nZXJDb3VudCA9PT0gMikge1xuXHRcdFx0bmF2aWdhdGlvblR5cGUgPSBOYXZpZ2F0aW9uVHlwZS5QYW47XG5cdFx0fVxuXG5cdFx0aWYgKG5hdmlnYXRpb25UeXBlID09PSBOYXZpZ2F0aW9uVHlwZS5PcmJpdCkge1xuXHRcdFx0bGV0IG9yYml0UmF0aW8gPSAwLjU7XG5cdFx0XHR0aGlzLk9yYml0IChtb3ZlRGlmZi54ICogb3JiaXRSYXRpbywgbW92ZURpZmYueSAqIG9yYml0UmF0aW8pO1xuXHRcdH0gZWxzZSBpZiAobmF2aWdhdGlvblR5cGUgPT09IE5hdmlnYXRpb25UeXBlLlBhbikge1xuXHRcdFx0bGV0IHpvb21SYXRpbyA9IDAuMDA1O1xuXHRcdFx0dGhpcy5ab29tIChkaXN0YW5jZURpZmYgKiB6b29tUmF0aW8pO1xuXHRcdFx0bGV0IHBhblJhdGlvID0gMC4wMDEgKiBDb29yZERpc3RhbmNlM0QgKHRoaXMuY2FtZXJhLmV5ZSwgdGhpcy5jYW1lcmEuY2VudGVyKTtcblx0XHRcdHRoaXMuUGFuIChtb3ZlRGlmZi54ICogcGFuUmF0aW8sIG1vdmVEaWZmLnkgKiBwYW5SYXRpbyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5VcGRhdGUgKCk7XG5cdH1cblxuXHRPblRvdWNoRW5kIChldilcblx0e1xuXHRcdGV2LnByZXZlbnREZWZhdWx0ICgpO1xuXG5cdFx0dGhpcy50b3VjaC5FbmQgKHRoaXMuY2FudmFzLCBldik7XG5cdFx0dGhpcy5jbGlja0RldGVjdG9yLkVuZCAoKTtcblxuXHRcdGlmICh0aGlzLmNsaWNrRGV0ZWN0b3IuSXNDbGljayAoKSkge1xuXHRcdFx0bGV0IHRvdWNoQ29vcmRzID0gdGhpcy50b3VjaC5HZXRQb3NpdGlvbiAoKTtcblx0XHRcdGlmICh0aGlzLnRvdWNoLkdldEZpbmdlckNvdW50ICgpID09PSAxKSB7XG5cdFx0XHRcdHRoaXMuQ2xpY2sgKDEsIHRvdWNoQ29vcmRzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRPbk1vdXNlV2hlZWwgKGV2KVxuXHR7XG5cdFx0bGV0IHBhcmFtcyA9IGV2IHx8IHdpbmRvdy5ldmVudDtcblx0XHRwYXJhbXMucHJldmVudERlZmF1bHQgKCk7XG5cblx0XHRsZXQgZGVsdGEgPSAtcGFyYW1zLmRlbHRhWSAvIDQwO1xuXHRcdGxldCByYXRpbyA9IDAuMTtcblx0XHRpZiAoZGVsdGEgPCAwKSB7XG5cdFx0XHRyYXRpbyA9IHJhdGlvICogLTEuMDtcblx0XHR9XG5cblx0XHR0aGlzLlpvb20gKHJhdGlvKTtcblx0XHR0aGlzLlVwZGF0ZSAoKTtcblx0fVxuXG5cdE9uQ29udGV4dE1lbnUgKGV2KVxuXHR7XG5cdFx0ZXYucHJldmVudERlZmF1bHQgKCk7XG5cblx0XHRpZiAodGhpcy5jbGlja0RldGVjdG9yLklzQ2xpY2sgKCkpIHtcblx0XHRcdHRoaXMuQ29udGV4dCAoZXYuY2xpZW50WCwgZXYuY2xpZW50WSk7XG5cdFx0XHR0aGlzLmNsaWNrRGV0ZWN0b3IuQ2FuY2VsICgpO1xuXHRcdH1cblx0fVxuXG5cdE9yYml0IChhbmdsZVgsIGFuZ2xlWSlcblx0e1xuXHRcdGxldCByYWRBbmdsZVggPSBhbmdsZVggKiBEZWdSYWQ7XG5cdFx0bGV0IHJhZEFuZ2xlWSA9IGFuZ2xlWSAqIERlZ1JhZDtcblxuXHRcdGxldCB2aWV3RGlyZWN0aW9uID0gU3ViQ29vcmQzRCAodGhpcy5jYW1lcmEuY2VudGVyLCB0aGlzLmNhbWVyYS5leWUpLk5vcm1hbGl6ZSAoKTtcblx0XHRsZXQgaG9yaXpvbnRhbERpcmVjdGlvbiA9IENyb3NzVmVjdG9yM0QgKHZpZXdEaXJlY3Rpb24sIHRoaXMuY2FtZXJhLnVwKS5Ob3JtYWxpemUgKCk7XG5cblx0XHRpZiAodGhpcy5maXhVcFZlY3Rvcikge1xuXHRcdFx0bGV0IG9yaWdpbmFsQW5nbGUgPSBWZWN0b3JBbmdsZTNEICh2aWV3RGlyZWN0aW9uLCB0aGlzLmNhbWVyYS51cCk7XG5cdFx0XHRsZXQgbmV3QW5nbGUgPSBvcmlnaW5hbEFuZ2xlICsgcmFkQW5nbGVZO1xuXHRcdFx0aWYgKElzR3JlYXRlciAobmV3QW5nbGUsIDAuMCkgJiYgSXNMb3dlciAobmV3QW5nbGUsIE1hdGguUEkpKSB7XG5cdFx0XHRcdHRoaXMuY2FtZXJhLmV5ZS5Sb3RhdGUgKGhvcml6b250YWxEaXJlY3Rpb24sIC1yYWRBbmdsZVksIHRoaXMuY2FtZXJhLmNlbnRlcik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNhbWVyYS5leWUuUm90YXRlICh0aGlzLmNhbWVyYS51cCwgLXJhZEFuZ2xlWCwgdGhpcy5jYW1lcmEuY2VudGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IHZlcnRpY2FsRGlyZWN0aW9uID0gQ3Jvc3NWZWN0b3IzRCAoaG9yaXpvbnRhbERpcmVjdGlvbiwgdmlld0RpcmVjdGlvbikuTm9ybWFsaXplICgpO1xuXHRcdFx0dGhpcy5jYW1lcmEuZXllLlJvdGF0ZSAoaG9yaXpvbnRhbERpcmVjdGlvbiwgLXJhZEFuZ2xlWSwgdGhpcy5jYW1lcmEuY2VudGVyKTtcblx0XHRcdHRoaXMuY2FtZXJhLmV5ZS5Sb3RhdGUgKHZlcnRpY2FsRGlyZWN0aW9uLCAtcmFkQW5nbGVYLCB0aGlzLmNhbWVyYS5jZW50ZXIpO1xuXHRcdFx0dGhpcy5jYW1lcmEudXAgPSB2ZXJ0aWNhbERpcmVjdGlvbjtcblx0XHR9XG5cdH1cblxuXHRQYW4gKG1vdmVYLCBtb3ZlWSlcblx0e1xuXHRcdGxldCB2aWV3RGlyZWN0aW9uID0gU3ViQ29vcmQzRCAodGhpcy5jYW1lcmEuY2VudGVyLCB0aGlzLmNhbWVyYS5leWUpLk5vcm1hbGl6ZSAoKTtcblx0XHRsZXQgaG9yaXpvbnRhbERpcmVjdGlvbiA9IENyb3NzVmVjdG9yM0QgKHZpZXdEaXJlY3Rpb24sIHRoaXMuY2FtZXJhLnVwKS5Ob3JtYWxpemUgKCk7XG5cdFx0bGV0IHZlcnRpY2FsRGlyZWN0aW9uID0gQ3Jvc3NWZWN0b3IzRCAoaG9yaXpvbnRhbERpcmVjdGlvbiwgdmlld0RpcmVjdGlvbikuTm9ybWFsaXplICgpO1xuXG5cdFx0dGhpcy5jYW1lcmEuZXllLk9mZnNldCAoaG9yaXpvbnRhbERpcmVjdGlvbiwgLW1vdmVYKTtcblx0XHR0aGlzLmNhbWVyYS5jZW50ZXIuT2Zmc2V0IChob3Jpem9udGFsRGlyZWN0aW9uLCAtbW92ZVgpO1xuXG5cdFx0dGhpcy5jYW1lcmEuZXllLk9mZnNldCAodmVydGljYWxEaXJlY3Rpb24sIG1vdmVZKTtcblx0XHR0aGlzLmNhbWVyYS5jZW50ZXIuT2Zmc2V0ICh2ZXJ0aWNhbERpcmVjdGlvbiwgbW92ZVkpO1xuXHR9XG5cblx0Wm9vbSAocmF0aW8pXG5cdHtcblx0XHRsZXQgZGlyZWN0aW9uID0gU3ViQ29vcmQzRCAodGhpcy5jYW1lcmEuY2VudGVyLCB0aGlzLmNhbWVyYS5leWUpO1xuXHRcdGxldCBkaXN0YW5jZSA9IGRpcmVjdGlvbi5MZW5ndGggKCk7XG5cdFx0bGV0IG1vdmUgPSBkaXN0YW5jZSAqIHJhdGlvO1xuXHRcdHRoaXMuY2FtZXJhLmV5ZS5PZmZzZXQgKGRpcmVjdGlvbiwgbW92ZSk7XG5cdH1cblxuXHRVcGRhdGUgKClcblx0e1xuXHRcdHRoaXMuY2FsbGJhY2tzLm9uVXBkYXRlICgpO1xuXHR9XG5cblx0Q2xpY2sgKGJ1dHRvbiwgbW91c2VDb29yZHMpXG5cdHtcblx0XHRpZiAodGhpcy5vbk1vdXNlQ2xpY2spIHtcblx0XHRcdHRoaXMub25Nb3VzZUNsaWNrIChidXR0b24sIG1vdXNlQ29vcmRzKTtcblx0XHR9XG5cdH1cblxuXHRDb250ZXh0IChjbGllbnRYLCBjbGllbnRZKVxuXHR7XG5cdFx0aWYgKHRoaXMub25Db250ZXh0KSB7XG5cdFx0XHRsZXQgZ2xvYmFsQ29vcmRzID0ge1xuXHRcdFx0XHR4IDogY2xpZW50WCxcblx0XHRcdFx0eSA6IGNsaWVudFlcblx0XHRcdH07XG5cdFx0XHRsZXQgbG9jYWxDb29yZHMgPSBHZXREb21FbGVtZW50Q2xpZW50Q29vcmRpbmF0ZXMgKHRoaXMuY2FudmFzLCBjbGllbnRYLCBjbGllbnRZKTtcblx0XHRcdHRoaXMub25Db250ZXh0IChnbG9iYWxDb29yZHMsIGxvY2FsQ29vcmRzKTtcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IFN1YkNvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IENhbWVyYU1vZGUgfSBmcm9tICcuLi92aWV3ZXIvY2FtZXJhLmpzJztcbmltcG9ydCB7IENvbnZlcnRDb2xvclRvVGhyZWVDb2xvciwgU2hhZGluZ1R5cGUgfSBmcm9tICcuLi90aHJlZWpzL3RocmVldXRpbHMuanMnO1xuXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbi8qKlxuICogRW52aXJvbm1lbnQgc2V0dGluZ3Mgb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgRW52aXJvbm1lbnRTZXR0aW5nc1xue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRleHR1cmVOYW1lcyBVcmxzIG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgaW1hZ2VzIGluIHRoaXMgb3JkZXI6XG4gICAgICogcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnei5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJhY2tncm91bmRJc0Vudk1hcCBVc2UgdGhlIGVudmlyb25tZW50IG1hcCBhcyBiYWNrZ3JvdW5kLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yICh0ZXh0dXJlTmFtZXMsIGJhY2tncm91bmRJc0Vudk1hcClcbiAgICB7XG4gICAgICAgIHRoaXMudGV4dHVyZU5hbWVzID0gdGV4dHVyZU5hbWVzO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRJc0Vudk1hcCA9IGJhY2tncm91bmRJc0Vudk1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RW52aXJvbm1lbnRTZXR0aW5nc31cbiAgICAgKi9cbiAgICBDbG9uZSAoKVxuICAgIHtcbiAgICAgICAgbGV0IHRleHR1cmVOYW1lcyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnRleHR1cmVOYW1lcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGV4dHVyZU5hbWVzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB0ZXh0dXJlTmFtZSBvZiB0aGlzLnRleHR1cmVOYW1lcykge1xuICAgICAgICAgICAgICAgIHRleHR1cmVOYW1lcy5wdXNoICh0ZXh0dXJlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFbnZpcm9ubWVudFNldHRpbmdzICh0ZXh0dXJlTmFtZXMsIHRoaXMuYmFja2dyb3VuZElzRW52TWFwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFkaW5nTW9kZWxcbntcbiAgICBjb25zdHJ1Y3RvciAoc2NlbmUpXG4gICAge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG5cbiAgICAgICAgdGhpcy50eXBlID0gU2hhZGluZ1R5cGUuUGhvbmc7XG4gICAgICAgIHRoaXMuY2FtZXJhTW9kZSA9IENhbWVyYU1vZGUuUGVyc3BlY3RpdmU7XG4gICAgICAgIHRoaXMuYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCAoMHg4ODg4ODgpO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCAoMHg4ODg4ODgpO1xuICAgICAgICB0aGlzLmVudmlyb25tZW50U2V0dGluZ3MgPSBuZXcgRW52aXJvbm1lbnRTZXR0aW5ncyAobnVsbCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmVudmlyb25tZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLnNjZW5lLmFkZCAodGhpcy5hbWJpZW50TGlnaHQpO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCAodGhpcy5kaXJlY3Rpb25hbExpZ2h0KTtcbiAgICB9XG5cbiAgICBTZXRTaGFkaW5nVHlwZSAodHlwZSlcbiAgICB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuVXBkYXRlU2hhZGluZyAoKTtcbiAgICB9XG5cbiAgICBTZXRDYW1lcmFNb2RlIChjYW1lcmFNb2RlKVxuICAgIHtcbiAgICAgICAgdGhpcy5jYW1lcmFNb2RlID0gY2FtZXJhTW9kZTtcbiAgICAgICAgdGhpcy5VcGRhdGVTaGFkaW5nICgpO1xuICAgIH1cblxuICAgIFVwZGF0ZVNoYWRpbmcgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFNoYWRpbmdUeXBlLlBob25nKSB7XG4gICAgICAgICAgICB0aGlzLmFtYmllbnRMaWdodC5jb2xvci5zZXQgKDB4ODg4ODg4KTtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5jb2xvci5zZXQgKDB4ODg4ODg4KTtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuZW52aXJvbm1lbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gU2hhZGluZ1R5cGUuUGh5c2ljYWwpIHtcbiAgICAgICAgICAgIHRoaXMuYW1iaWVudExpZ2h0LmNvbG9yLnNldCAoMHgwMDAwMDApO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LmNvbG9yLnNldCAoMHg1NTU1NTUpO1xuICAgICAgICAgICAgdGhpcy5zY2VuZS5lbnZpcm9ubWVudCA9IHRoaXMuZW52aXJvbm1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnRTZXR0aW5ncy5iYWNrZ3JvdW5kSXNFbnZNYXAgJiYgdGhpcy5jYW1lcmFNb2RlID09PSBDYW1lcmFNb2RlLlBlcnNwZWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLmJhY2tncm91bmQgPSB0aGlzLmVudmlyb25tZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFNldEVudmlyb25tZW50TWFwU2V0dGluZ3MgKGVudmlyb25tZW50U2V0dGluZ3MsIG9uTG9hZGVkKVxuICAgIHtcbiAgICAgICAgbGV0IGxvYWRlciA9IG5ldyBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlciAoKTtcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IGxvYWRlci5sb2FkIChlbnZpcm9ubWVudFNldHRpbmdzLnRleHR1cmVOYW1lcywgKHRleHR1cmUpID0+IHtcbiAgICAgICAgICAgIHRleHR1cmUuY29sb3JTcGFjZSA9IFRIUkVFLkxpbmVhclNSR0JDb2xvclNwYWNlO1xuICAgICAgICAgICAgb25Mb2FkZWQgKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVudmlyb25tZW50U2V0dGluZ3MgPSBlbnZpcm9ubWVudFNldHRpbmdzO1xuICAgIH1cblxuICAgIFVwZGF0ZUJ5Q2FtZXJhIChjYW1lcmEpXG4gICAge1xuICAgICAgICBjb25zdCBsaWdodERpciA9IFN1YkNvb3JkM0QgKGNhbWVyYS5leWUsIGNhbWVyYS5jZW50ZXIpO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0IChsaWdodERpci54LCBsaWdodERpci55LCBsaWdodERpci56KTtcbiAgICB9XG5cbiAgICBDcmVhdGVIaWdobGlnaHRNYXRlcmlhbCAoaGlnaGxpZ2h0Q29sb3IsIHdpdGhPZmZzZXQpXG4gICAge1xuICAgICAgICBsZXQgbWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSBTaGFkaW5nVHlwZS5QaG9uZykge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwgKHtcbiAgICAgICAgICAgICAgICBjb2xvciA6IENvbnZlcnRDb2xvclRvVGhyZWVDb2xvciAoaGlnaGxpZ2h0Q29sb3IpLFxuICAgICAgICAgICAgICAgIHNpZGUgOiBUSFJFRS5Eb3VibGVTaWRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IFNoYWRpbmdUeXBlLlBoeXNpY2FsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCAoe1xuICAgICAgICAgICAgICAgIGNvbG9yIDogQ29udmVydENvbG9yVG9UaHJlZUNvbG9yIChoaWdobGlnaHRDb2xvciksXG4gICAgICAgICAgICAgICAgc2lkZSA6IFRIUkVFLkRvdWJsZVNpZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbCAhPT0gbnVsbCAmJiB3aXRoT2Zmc2V0KSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0ID0gMTtcbiAgICAgICAgICAgIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb29yZDNELCBDb29yZERpc3RhbmNlM0QsIFN1YkNvb3JkM0QgfSBmcm9tICcuLi9nZW9tZXRyeS9jb29yZDNkLmpzJztcbmltcG9ydCB7IERlZ1JhZCwgRGlyZWN0aW9uLCBJc0VxdWFsIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgQ29sb3JDb21wb25lbnRUb0Zsb2F0IH0gZnJvbSAnLi4vbW9kZWwvY29sb3IuanMnO1xuaW1wb3J0IHsgU2hhZGluZ1R5cGUgfSBmcm9tICcuLi90aHJlZWpzL3RocmVldXRpbHMuanMnO1xuaW1wb3J0IHsgQ2FtZXJhLCBDYW1lcmFNb2RlIH0gZnJvbSAnLi9jYW1lcmEuanMnO1xuaW1wb3J0IHsgR2V0RG9tRWxlbWVudElubmVyRGltZW5zaW9ucyB9IGZyb20gJy4vZG9tdXRpbHMuanMnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbiB9IGZyb20gJy4vbmF2aWdhdGlvbi5qcyc7XG5pbXBvcnQgeyBTaGFkaW5nTW9kZWwgfSBmcm9tICcuL3NoYWRpbmdtb2RlbC5qcyc7XG5pbXBvcnQgeyBWaWV3ZXJNb2RlbCwgVmlld2VyTWFpbk1vZGVsIH0gZnJvbSAnLi92aWV3ZXJtb2RlbC5qcyc7XG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGZ1bmN0aW9uIEdldERlZmF1bHRDYW1lcmEgKGRpcmVjdGlvbilcbntcbiAgICBsZXQgZmllbGRPZlZpZXcgPSA0NS4wO1xuICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5YKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2FtZXJhIChcbiAgICAgICAgICAgIG5ldyBDb29yZDNEICgyLjAsIC0zLjAsIDEuNSksXG4gICAgICAgICAgICBuZXcgQ29vcmQzRCAoMC4wLCAwLjAsIDAuMCksXG4gICAgICAgICAgICBuZXcgQ29vcmQzRCAoMS4wLCAwLjAsIDAuMCksXG4gICAgICAgICAgICBmaWVsZE9mVmlld1xuICAgICAgICApO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uWSkge1xuICAgICAgICByZXR1cm4gbmV3IENhbWVyYSAoXG4gICAgICAgICAgICBuZXcgQ29vcmQzRCAoLTEuNSwgMi4wLCAzLjApLFxuICAgICAgICAgICAgbmV3IENvb3JkM0QgKDAuMCwgMC4wLCAwLjApLFxuICAgICAgICAgICAgbmV3IENvb3JkM0QgKDAuMCwgMS4wLCAwLjApLFxuICAgICAgICAgICAgZmllbGRPZlZpZXdcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYW1lcmEgKFxuICAgICAgICAgICAgbmV3IENvb3JkM0QgKC0xLjUsIC0zLjAsIDIuMCksXG4gICAgICAgICAgICBuZXcgQ29vcmQzRCAoMC4wLCAwLjAsIDAuMCksXG4gICAgICAgICAgICBuZXcgQ29vcmQzRCAoMC4wLCAwLjAsIDEuMCksXG4gICAgICAgICAgICBmaWVsZE9mVmlld1xuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRyYXZlcnNlVGhyZWVPYmplY3QgKG9iamVjdCwgcHJvY2Vzc29yKVxue1xuICAgIGlmICghcHJvY2Vzc29yIChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgY2hpbGQgb2Ygb2JqZWN0LmNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghVHJhdmVyc2VUaHJlZU9iamVjdCAoY2hpbGQsIHByb2Nlc3NvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdldFNoYWRpbmdUeXBlT2ZPYmplY3QgKG1haW5PYmplY3QpXG57XG4gICAgbGV0IHNoYWRpbmdUeXBlID0gbnVsbDtcbiAgICBUcmF2ZXJzZVRocmVlT2JqZWN0IChtYWluT2JqZWN0LCAob2JqKSA9PiB7XG4gICAgICAgIGlmIChvYmouaXNNZXNoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1hdGVyaWFsIG9mIG9iai5tYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC50eXBlID09PSAnTWVzaFBob25nTWF0ZXJpYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRpbmdUeXBlID0gU2hhZGluZ1R5cGUuUGhvbmc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRlcmlhbC50eXBlID09PSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRpbmdUeXBlID0gU2hhZGluZ1R5cGUuUGh5c2ljYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2hhZGluZ1R5cGU7XG59XG5cbmV4cG9ydCBjbGFzcyBDYW1lcmFWYWxpZGF0b3JcbntcbiAgICBjb25zdHJ1Y3RvciAoKVxuICAgIHtcbiAgICAgICAgdGhpcy5leWVDZW50ZXJEaXN0YW5jZSA9IDAuMDtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgRm9yY2VVcGRhdGUgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIFZhbGlkYXRlUGVyc3BlY3RpdmUgKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgVmFsaWRhdGVPcnRob2dyYXBoaWMgKGV5ZUNlbnRlckRpc3RhbmNlKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMuZm9yY2VVcGRhdGUgfHwgIUlzRXF1YWwgKHRoaXMuZXllQ2VudGVyRGlzdGFuY2UsIGV5ZUNlbnRlckRpc3RhbmNlKSkge1xuICAgICAgICAgICAgdGhpcy5leWVDZW50ZXJEaXN0YW5jZSA9IGV5ZUNlbnRlckRpc3RhbmNlO1xuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwVmVjdG9yXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gRGlyZWN0aW9uLlk7XG4gICAgICAgIHRoaXMuaXNGaXhlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNGbGlwcGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgU2V0RGlyZWN0aW9uIChuZXdEaXJlY3Rpb24sIG9sZENhbWVyYSlcbiAgICB7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgICAgICB0aGlzLmlzRmxpcHBlZCA9IGZhbHNlO1xuXG4gICAgICAgIGxldCBkZWZhdWx0Q2FtZXJhID0gR2V0RGVmYXVsdENhbWVyYSAodGhpcy5kaXJlY3Rpb24pO1xuICAgICAgICBsZXQgZGVmYXVsdERpciA9IFN1YkNvb3JkM0QgKGRlZmF1bHRDYW1lcmEuZXllLCBkZWZhdWx0Q2FtZXJhLmNlbnRlcik7XG5cbiAgICAgICAgbGV0IGRpc3RhbmNlID0gQ29vcmREaXN0YW5jZTNEIChvbGRDYW1lcmEuY2VudGVyLCBvbGRDYW1lcmEuZXllKTtcbiAgICAgICAgbGV0IG5ld0V5ZSA9IG9sZENhbWVyYS5jZW50ZXIuQ2xvbmUgKCkuT2Zmc2V0IChkZWZhdWx0RGlyLCBkaXN0YW5jZSk7XG5cbiAgICAgICAgbGV0IG5ld0NhbWVyYSA9IG9sZENhbWVyYS5DbG9uZSAoKTtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uWCkge1xuICAgICAgICAgICAgbmV3Q2FtZXJhLnVwID0gbmV3IENvb3JkM0QgKDEuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgbmV3Q2FtZXJhLmV5ZSA9IG5ld0V5ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlkpIHtcbiAgICAgICAgICAgIG5ld0NhbWVyYS51cCA9IG5ldyBDb29yZDNEICgwLjAsIDEuMCwgMC4wKTtcbiAgICAgICAgICAgIG5ld0NhbWVyYS5leWUgPSBuZXdFeWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5aKSB7XG4gICAgICAgICAgICBuZXdDYW1lcmEudXAgPSBuZXcgQ29vcmQzRCAoMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICBuZXdDYW1lcmEuZXllID0gbmV3RXllO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdDYW1lcmE7XG4gICAgfVxuXG4gICAgU2V0Rml4ZWQgKGlzRml4ZWQsIG9sZENhbWVyYSlcbiAgICB7XG4gICAgICAgIHRoaXMuaXNGaXhlZCA9IGlzRml4ZWQ7XG4gICAgICAgIGlmICh0aGlzLmlzRml4ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlNldERpcmVjdGlvbiAodGhpcy5kaXJlY3Rpb24sIG9sZENhbWVyYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgRmxpcCAob2xkQ2FtZXJhKVxuICAgIHtcbiAgICAgICAgdGhpcy5pc0ZsaXBwZWQgPSAhdGhpcy5pc0ZsaXBwZWQ7XG4gICAgICAgIGxldCBuZXdDYW1lcmEgPSBvbGRDYW1lcmEuQ2xvbmUgKCk7XG4gICAgICAgIG5ld0NhbWVyYS51cC5NdWx0aXBseVNjYWxhciAoLTEuMCk7XG4gICAgICAgIHJldHVybiBuZXdDYW1lcmE7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlld2VyXG57XG4gICAgY29uc3RydWN0b3IgKClcbiAgICB7XG4gICAgICAgIFRIUkVFLkNvbG9yTWFuYWdlbWVudC5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY2VuZSA9IG51bGw7XG4gICAgICAgIHRoaXMubWFpbk1vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5leHRyYU1vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbWVyYU1vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbWVyYVZhbGlkYXRvciA9IG51bGw7XG4gICAgICAgIHRoaXMuc2hhZGluZ01vZGVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy51cFZlY3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBhbmltYXRpb25TdGVwcyA6IDQwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgSW5pdChjYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgdGhpcy5jYW52YXMuaWQgPSAndmlld2VyJztcbiAgICAgIGxldCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICBjYW52YXMgOiB0aGlzLmNhbnZhcyxcbiAgICAgICAgYW50aWFsaWFzIDogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRoaXMuSW5pdFByaXZhdGUocGFyYW1ldGVycyk7XG4gICAgfVxuXG5cbiAgSW5pdFdpdGhDdHgoZ2xDdHgpIHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IHtcbiAgICAgICAgd2lkdGg6IDEwMjQsXG4gICAgICAgIGhlaWdodDogNzY4LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiAxMDI0LFxuICAgICAgICAgIGhlaWdodDogNzY4LFxuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiAoKSA9PiB7fSxcbiAgICAgIH07XG4gICAgICBsZXQgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgY29udGV4dDogZ2xDdHgsXG4gICAgICAgIGNhbnZhczogY2FudmFzLFxuICAgICAgICBhbnRpYWxpYXM6IHRydWVcbiAgICAgIH07XG4gICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgIHRoaXMuSW5pdFByaXZhdGUocGFyYW1ldGVycyk7XG4gICAgfVxuXG5cbiAgICBJbml0UHJpdmF0ZSAocGFyYW1ldGVycylcbiAge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIgKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UgPSBUSFJFRS5MaW5lYXJTUkdCQ29sb3JTcGFjZTtcblxuICAgICAgICBpZiAod2luZG93LmRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyAod2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvciAoJyNmZmZmZmYnLCAxLjApO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUgKHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUgKCk7XG4gICAgICAgIHRoaXMubWFpbk1vZGVsID0gbmV3IFZpZXdlck1haW5Nb2RlbCAodGhpcy5zY2VuZSk7XG4gICAgICAgIHRoaXMuZXh0cmFNb2RlbCA9IG5ldyBWaWV3ZXJNb2RlbCAodGhpcy5zY2VuZSk7XG5cbiAgICAgICAgdGhpcy5Jbml0TmF2aWdhdGlvbiAoKTtcbiAgICAgICAgdGhpcy5Jbml0U2hhZGluZyAoKTtcblxuICAgICAgICB0aGlzLlJlbmRlciAoKTtcbiAgICB9XG5cbiAgICBTZXRNb3VzZUNsaWNrSGFuZGxlciAob25Nb3VzZUNsaWNrKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLlNldE1vdXNlQ2xpY2tIYW5kbGVyIChvbk1vdXNlQ2xpY2spO1xuICAgIH1cblxuICAgIFNldE1vdXNlTW92ZUhhbmRsZXIgKG9uTW91c2VNb3ZlKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLlNldE1vdXNlTW92ZUhhbmRsZXIgKG9uTW91c2VNb3ZlKTtcbiAgICB9XG5cbiAgICBTZXRDb250ZXh0TWVudUhhbmRsZXIgKG9uQ29udGV4dClcbiAgICB7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvbi5TZXRDb250ZXh0TWVudUhhbmRsZXIgKG9uQ29udGV4dCk7XG4gICAgfVxuXG4gICAgU2V0RWRnZVNldHRpbmdzIChlZGdlU2V0dGluZ3MpXG4gICAge1xuICAgICAgICBsZXQgbmV3RWRnZVNldHRpbmdzID0gZWRnZVNldHRpbmdzLkNsb25lICgpO1xuICAgICAgICB0aGlzLm1haW5Nb2RlbC5TZXRFZGdlU2V0dGluZ3MgKG5ld0VkZ2VTZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgIH1cblxuICAgIFNldEVudmlyb25tZW50TWFwU2V0dGluZ3MgKGVudmlyb25tZW50U2V0dGluZ3MpXG4gICAge1xuICAgICAgICBsZXQgbmV3RW52aXJvbm1lbnRTZXR0aW5ncyA9IGVudmlyb25tZW50U2V0dGluZ3MuQ2xvbmUgKCk7XG4gICAgICAgIHRoaXMuc2hhZGluZ01vZGVsLlNldEVudmlyb25tZW50TWFwU2V0dGluZ3MgKG5ld0Vudmlyb25tZW50U2V0dGluZ3MsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaGFkaW5nTW9kZWwuVXBkYXRlU2hhZGluZyAoKTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgU2V0QmFja2dyb3VuZENvbG9yIChjb2xvcilcbiAgICB7XG4gICAgICAgIGxldCBiZ0NvbG9yID0gbmV3IFRIUkVFLkNvbG9yIChcbiAgICAgICAgICAgIENvbG9yQ29tcG9uZW50VG9GbG9hdCAoY29sb3IuciksXG4gICAgICAgICAgICBDb2xvckNvbXBvbmVudFRvRmxvYXQgKGNvbG9yLmcpLFxuICAgICAgICAgICAgQ29sb3JDb21wb25lbnRUb0Zsb2F0IChjb2xvci5iKVxuICAgICAgICApO1xuICAgICAgICBsZXQgYWxwaGEgPSBDb2xvckNvbXBvbmVudFRvRmxvYXQgKGNvbG9yLmEpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQ29sb3IgKGJnQ29sb3IsIGFscGhhKTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgR2V0Q2FudmFzICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXM7XG4gICAgfVxuXG4gICAgR2V0Q2FtZXJhICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5uYXZpZ2F0aW9uLkdldENhbWVyYSAoKTtcbiAgICB9XG5cbiAgICBHZXRDYW1lcmFNb2RlICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW1lcmFNb2RlO1xuICAgIH1cblxuICAgIFNldENhbWVyYSAoY2FtZXJhKVxuICAgIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLlNldENhbWVyYSAoY2FtZXJhKTtcbiAgICAgICAgdGhpcy5jYW1lcmFWYWxpZGF0b3IuRm9yY2VVcGRhdGUgKCk7XG4gICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgIH1cblxuICAgIFNldENhbWVyYU1vZGUgKGNhbWVyYU1vZGUpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5jYW1lcmFNb2RlID09PSBjYW1lcmFNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZSAodGhpcy5jYW1lcmEpO1xuICAgICAgICBpZiAoY2FtZXJhTW9kZSA9PT0gQ2FtZXJhTW9kZS5QZXJzcGVjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEgKDQ1LjAsIDEuMCwgMC4xLCAxMDAwLjApO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbWVyYU1vZGUgPT09IENhbWVyYU1vZGUuT3J0aG9ncmFwaGljKSB7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEgKC0xLjAsIDEuMCwgMS4wLCAtMS4wLCAwLjEsIDEwMDAuMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2VuZS5hZGQgKHRoaXMuY2FtZXJhKTtcblxuICAgICAgICB0aGlzLmNhbWVyYU1vZGUgPSBjYW1lcmFNb2RlO1xuICAgICAgICB0aGlzLnNoYWRpbmdNb2RlbC5TZXRDYW1lcmFNb2RlIChjYW1lcmFNb2RlKTtcbiAgICAgICAgdGhpcy5jYW1lcmFWYWxpZGF0b3IuRm9yY2VVcGRhdGUgKCk7XG5cbiAgICAgICAgdGhpcy5BZGp1c3RDbGlwcGluZ1BsYW5lcyAoKTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgUmVzaXplICh3aWR0aCwgaGVpZ2h0KVxuICAgIHtcbiAgICAgICAgbGV0IGlubmVyU2l6ZSA9IEdldERvbUVsZW1lbnRJbm5lckRpbWVuc2lvbnMgKHRoaXMuY2FudmFzLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5SZXNpemVSZW5kZXJlciAoaW5uZXJTaXplLndpZHRoLCBpbm5lclNpemUuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBSZXNpemVSZW5kZXJlciAod2lkdGgsIGhlaWdodClcbiAgICB7XG4gICAgICAgIGlmICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplICh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW1lcmFWYWxpZGF0b3IuRm9yY2VVcGRhdGUgKCk7XG4gICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgIH1cblxuICAgIEZpdFNwaGVyZVRvV2luZG93IChib3VuZGluZ1NwaGVyZSwgYW5pbWF0aW9uKVxuICAgIHtcbiAgICAgICAgaWYgKGJvdW5kaW5nU3BoZXJlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNlbnRlciA9IG5ldyBDb29yZDNEIChib3VuZGluZ1NwaGVyZS5jZW50ZXIueCwgYm91bmRpbmdTcGhlcmUuY2VudGVyLnksIGJvdW5kaW5nU3BoZXJlLmNlbnRlci56KTtcbiAgICAgICAgbGV0IHJhZGl1cyA9IGJvdW5kaW5nU3BoZXJlLnJhZGl1cztcblxuICAgICAgICBsZXQgbmV3Q2FtZXJhID0gdGhpcy5uYXZpZ2F0aW9uLkdldEZpdFRvU3BoZXJlQ2FtZXJhIChjZW50ZXIsIHJhZGl1cyk7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvbi5Nb3ZlQ2FtZXJhIChuZXdDYW1lcmEsIGFuaW1hdGlvbiA/IHRoaXMuc2V0dGluZ3MuYW5pbWF0aW9uU3RlcHMgOiAwKTtcbiAgICB9XG5cbiAgICBBZGp1c3RDbGlwcGluZ1BsYW5lcyAoKVxuICAgIHtcbiAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlID0gdGhpcy5HZXRCb3VuZGluZ1NwaGVyZSAoKG1lc2hVc2VyRGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLkFkanVzdENsaXBwaW5nUGxhbmVzVG9TcGhlcmUgKGJvdW5kaW5nU3BoZXJlKTtcbiAgICB9XG5cbiAgICBBZGp1c3RDbGlwcGluZ1BsYW5lc1RvU3BoZXJlIChib3VuZGluZ1NwaGVyZSlcbiAgICB7XG4gICAgICAgIGlmIChib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib3VuZGluZ1NwaGVyZS5yYWRpdXMgPCAxMC4wKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5uZWFyID0gMC4wMTtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLmZhciA9IDEwMC4wO1xuICAgICAgICB9IGVsc2UgaWYgKGJvdW5kaW5nU3BoZXJlLnJhZGl1cyA8IDEwMC4wKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5uZWFyID0gMC4xO1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEuZmFyID0gMTAwMC4wO1xuICAgICAgICB9IGVsc2UgaWYgKGJvdW5kaW5nU3BoZXJlLnJhZGl1cyA8IDEwMDAuMCkge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEubmVhciA9IDEwLjA7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5mYXIgPSAxMDAwMC4wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEubmVhciA9IDEwMC4wO1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEuZmFyID0gMTAwMDAwMC4wO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW1lcmFWYWxpZGF0b3IuRm9yY2VVcGRhdGUgKCk7XG4gICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgIH1cblxuICAgIElzRml4VXBWZWN0b3IgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb24uSXNGaXhVcFZlY3RvciAoKTtcbiAgICB9XG5cbiAgICBTZXRGaXhVcFZlY3RvciAoaXNGaXhVcFZlY3RvcilcbiAgICB7XG4gICAgICAgIGxldCBvbGRDYW1lcmEgPSB0aGlzLm5hdmlnYXRpb24uR2V0Q2FtZXJhICgpO1xuICAgICAgICBsZXQgbmV3Q2FtZXJhID0gdGhpcy51cFZlY3Rvci5TZXRGaXhlZCAoaXNGaXhVcFZlY3Rvciwgb2xkQ2FtZXJhKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLlNldEZpeFVwVmVjdG9yIChpc0ZpeFVwVmVjdG9yKTtcbiAgICAgICAgaWYgKG5ld0NhbWVyYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLk1vdmVDYW1lcmEgKG5ld0NhbWVyYSwgdGhpcy5zZXR0aW5ncy5hbmltYXRpb25TdGVwcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgU2V0VXBWZWN0b3IgKHVwRGlyZWN0aW9uLCBhbmltYXRlKVxuICAgIHtcbiAgICAgICAgbGV0IG9sZENhbWVyYSA9IHRoaXMubmF2aWdhdGlvbi5HZXRDYW1lcmEgKCk7XG4gICAgICAgIGxldCBuZXdDYW1lcmEgPSB0aGlzLnVwVmVjdG9yLlNldERpcmVjdGlvbiAodXBEaXJlY3Rpb24sIG9sZENhbWVyYSk7XG4gICAgICAgIGxldCBhbmltYXRpb25TdGVwcyA9IGFuaW1hdGUgPyB0aGlzLnNldHRpbmdzLmFuaW1hdGlvblN0ZXBzIDogMDtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLk1vdmVDYW1lcmEgKG5ld0NhbWVyYSwgYW5pbWF0aW9uU3RlcHMpO1xuICAgICAgICB0aGlzLlJlbmRlciAoKTtcbiAgICB9XG5cbiAgICBGbGlwVXBWZWN0b3IgKClcbiAgICB7XG4gICAgICAgIGxldCBvbGRDYW1lcmEgPSB0aGlzLm5hdmlnYXRpb24uR2V0Q2FtZXJhICgpO1xuICAgICAgICBsZXQgbmV3Q2FtZXJhID0gdGhpcy51cFZlY3Rvci5GbGlwIChvbGRDYW1lcmEpO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb24uTW92ZUNhbWVyYSAobmV3Q2FtZXJhLCAwKTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgUmVuZGVyICgpXG4gICAge1xuICAgICAgICBsZXQgbmF2aWdhdGlvbkNhbWVyYSA9IHRoaXMubmF2aWdhdGlvbi5HZXRDYW1lcmEgKCk7XG5cbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0IChuYXZpZ2F0aW9uQ2FtZXJhLmV5ZS54LCBuYXZpZ2F0aW9uQ2FtZXJhLmV5ZS55LCBuYXZpZ2F0aW9uQ2FtZXJhLmV5ZS56KTtcbiAgICAgICAgdGhpcy5jYW1lcmEudXAuc2V0IChuYXZpZ2F0aW9uQ2FtZXJhLnVwLngsIG5hdmlnYXRpb25DYW1lcmEudXAueSwgbmF2aWdhdGlvbkNhbWVyYS51cC56KTtcbiAgICAgICAgdGhpcy5jYW1lcmEubG9va0F0IChuZXcgVEhSRUUuVmVjdG9yMyAobmF2aWdhdGlvbkNhbWVyYS5jZW50ZXIueCwgbmF2aWdhdGlvbkNhbWVyYS5jZW50ZXIueSwgbmF2aWdhdGlvbkNhbWVyYS5jZW50ZXIueikpO1xuXG4gICAgICAgIGlmICh0aGlzLmNhbWVyYU1vZGUgPT09IENhbWVyYU1vZGUuUGVyc3BlY3RpdmUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW1lcmFWYWxpZGF0b3IuVmFsaWRhdGVQZXJzcGVjdGl2ZSAoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmZvdiA9IG5hdmlnYXRpb25DYW1lcmEuZm92O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXggKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jYW1lcmFNb2RlID09PSBDYW1lcmFNb2RlLk9ydGhvZ3JhcGhpYykge1xuICAgICAgICAgICAgbGV0IGV5ZUNlbnRlckRpc3RhbmNlID0gQ29vcmREaXN0YW5jZTNEIChuYXZpZ2F0aW9uQ2FtZXJhLmV5ZSwgbmF2aWdhdGlvbkNhbWVyYS5jZW50ZXIpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNhbWVyYVZhbGlkYXRvci5WYWxpZGF0ZU9ydGhvZ3JhcGhpYyAoZXllQ2VudGVyRGlzdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFzcGVjdCA9IHRoaXMuY2FudmFzLndpZHRoIC8gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxldCBleWVDZW50ZXJEaXN0YW5jZSA9IENvb3JkRGlzdGFuY2UzRCAobmF2aWdhdGlvbkNhbWVyYS5leWUsIG5hdmlnYXRpb25DYW1lcmEuY2VudGVyKTtcbiAgICAgICAgICAgICAgICBsZXQgZnJ1c3R1bUhhbGZIZWlnaHQgPSBleWVDZW50ZXJEaXN0YW5jZSAqIE1hdGgudGFuICgwLjUgKiBuYXZpZ2F0aW9uQ2FtZXJhLmZvdiAqIERlZ1JhZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEubGVmdCA9IC1mcnVzdHVtSGFsZkhlaWdodCAqIGFzcGVjdDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5yaWdodCA9IGZydXN0dW1IYWxmSGVpZ2h0ICogYXNwZWN0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLnRvcCA9IGZydXN0dW1IYWxmSGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmJvdHRvbSA9IC1mcnVzdHVtSGFsZkhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4ICgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaGFkaW5nTW9kZWwuVXBkYXRlQnlDYW1lcmEgKG5hdmlnYXRpb25DYW1lcmEpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlciAodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgIH1cblxuICAgIFNldE1haW5PYmplY3QgKG9iamVjdClcbiAgICB7XG4gICAgICAgIGNvbnN0IHNoYWRpbmdUeXBlID0gR2V0U2hhZGluZ1R5cGVPZk9iamVjdCAob2JqZWN0KTtcbiAgICAgICAgdGhpcy5tYWluTW9kZWwuU2V0TWFpbk9iamVjdCAob2JqZWN0KTtcbiAgICAgICAgdGhpcy5zaGFkaW5nTW9kZWwuU2V0U2hhZGluZ1R5cGUgKHNoYWRpbmdUeXBlKTtcblxuICAgICAgICB0aGlzLlJlbmRlciAoKTtcbiAgICB9XG5cbiAgICBBZGRFeHRyYU9iamVjdCAob2JqZWN0KVxuICAgIHtcbiAgICAgICAgdGhpcy5leHRyYU1vZGVsLkFkZE9iamVjdCAob2JqZWN0KTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgQ2xlYXIgKClcbiAgICB7XG4gICAgICAgIHRoaXMubWFpbk1vZGVsLkNsZWFyICgpO1xuICAgICAgICB0aGlzLmV4dHJhTW9kZWwuQ2xlYXIgKCk7XG4gICAgICAgIHRoaXMuUmVuZGVyICgpO1xuICAgIH1cblxuICAgIENsZWFyRXh0cmEgKClcbiAgICB7XG4gICAgICAgIHRoaXMuZXh0cmFNb2RlbC5DbGVhciAoKTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgU2V0TWVzaGVzVmlzaWJpbGl0eSAoaXNWaXNpYmxlKVxuICAgIHtcbiAgICAgICAgdGhpcy5tYWluTW9kZWwuRW51bWVyYXRlTWVzaGVzICgobWVzaCkgPT4ge1xuICAgICAgICAgICAgbGV0IHZpc2libGUgPSBpc1Zpc2libGUgKG1lc2gudXNlckRhdGEpO1xuICAgICAgICAgICAgaWYgKG1lc2gudmlzaWJsZSAhPT0gdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIG1lc2gudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1haW5Nb2RlbC5FbnVtZXJhdGVFZGdlcyAoKGVkZ2UpID0+IHtcbiAgICAgICAgICAgIGxldCB2aXNpYmxlID0gaXNWaXNpYmxlIChlZGdlLnVzZXJEYXRhKTtcbiAgICAgICAgICAgIGlmIChlZGdlLnZpc2libGUgIT09IHZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBlZGdlLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgU2V0TWVzaGVzSGlnaGxpZ2h0IChoaWdobGlnaHRDb2xvciwgaXNIaWdobGlnaHRlZClcbiAgICB7XG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZUhpZ2hsaWdodE1hdGVyaWFscyAob3JpZ2luYWxNYXRlcmlhbHMsIGhpZ2hsaWdodE1hdGVyaWFsKVxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgaGlnaGxpZ2h0TWF0ZXJpYWxzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yaWdpbmFsTWF0ZXJpYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0TWF0ZXJpYWxzLnB1c2ggKGhpZ2hsaWdodE1hdGVyaWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoaWdobGlnaHRNYXRlcmlhbHM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoaWdobGlnaHRNYXRlcmlhbCA9IHRoaXMuQ3JlYXRlSGlnaGxpZ2h0TWF0ZXJpYWwgKGhpZ2hsaWdodENvbG9yKTtcbiAgICAgICAgdGhpcy5tYWluTW9kZWwuRW51bWVyYXRlTWVzaGVzICgobWVzaCkgPT4ge1xuICAgICAgICAgICAgbGV0IGhpZ2hsaWdodGVkID0gaXNIaWdobGlnaHRlZCAobWVzaC51c2VyRGF0YSk7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzaC51c2VyRGF0YS50aHJlZU1hdGVyaWFscyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtZXNoLnVzZXJEYXRhLnRocmVlTWF0ZXJpYWxzID0gbWVzaC5tYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IENyZWF0ZUhpZ2hsaWdodE1hdGVyaWFscyAobWVzaC5tYXRlcmlhbCwgaGlnaGxpZ2h0TWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc2gudXNlckRhdGEudGhyZWVNYXRlcmlhbHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IG1lc2gudXNlckRhdGEudGhyZWVNYXRlcmlhbHM7XG4gICAgICAgICAgICAgICAgICAgIG1lc2gudXNlckRhdGEudGhyZWVNYXRlcmlhbHMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgfVxuXG4gICAgQ3JlYXRlSGlnaGxpZ2h0TWF0ZXJpYWwgKGhpZ2hsaWdodENvbG9yKVxuICAgIHtcbiAgICAgICAgY29uc3Qgc2hvd0VkZ2VzID0gdGhpcy5tYWluTW9kZWwuZWRnZVNldHRpbmdzLnNob3dFZGdlcztcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhZGluZ01vZGVsLkNyZWF0ZUhpZ2hsaWdodE1hdGVyaWFsIChoaWdobGlnaHRDb2xvciwgc2hvd0VkZ2VzKTtcbiAgICB9XG5cbiAgICBHZXRNZXNoVXNlckRhdGFVbmRlck1vdXNlIChtb3VzZUNvb3JkcylcbiAgICB7XG4gICAgICAgIGxldCBpbnRlcnNlY3Rpb24gPSB0aGlzLkdldE1lc2hJbnRlcnNlY3Rpb25VbmRlck1vdXNlIChtb3VzZUNvb3Jkcyk7XG4gICAgICAgIGlmIChpbnRlcnNlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24ub2JqZWN0LnVzZXJEYXRhO1xuICAgIH1cblxuICAgIEdldE1lc2hJbnRlcnNlY3Rpb25VbmRlck1vdXNlIChtb3VzZUNvb3JkcylcbiAgICB7XG4gICAgICAgIGxldCBjYW52YXNTaXplID0gdGhpcy5HZXRDYW52YXNTaXplICgpO1xuICAgICAgICBsZXQgaW50ZXJzZWN0aW9uID0gdGhpcy5tYWluTW9kZWwuR2V0TWVzaEludGVyc2VjdGlvblVuZGVyTW91c2UgKG1vdXNlQ29vcmRzLCB0aGlzLmNhbWVyYSwgY2FudmFzU2l6ZS53aWR0aCwgY2FudmFzU2l6ZS5oZWlnaHQpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xuICAgIH1cblxuICAgIEdldEJvdW5kaW5nQm94IChuZWVkVG9Qcm9jZXNzKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFpbk1vZGVsLkdldEJvdW5kaW5nQm94IChuZWVkVG9Qcm9jZXNzKTtcbiAgICB9XG5cbiAgICBHZXRCb3VuZGluZ1NwaGVyZSAobmVlZFRvUHJvY2VzcylcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLm1haW5Nb2RlbC5HZXRCb3VuZGluZ1NwaGVyZSAobmVlZFRvUHJvY2Vzcyk7XG4gICAgfVxuXG4gICAgRW51bWVyYXRlTWVzaGVzVXNlckRhdGEgKGVudW1lcmF0b3IpXG4gICAge1xuICAgICAgICB0aGlzLm1haW5Nb2RlbC5FbnVtZXJhdGVNZXNoZXMgKChtZXNoKSA9PiB7XG4gICAgICAgICAgICBlbnVtZXJhdG9yIChtZXNoLnVzZXJEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgSW5pdE5hdmlnYXRpb24gKClcbiAgICB7XG4gICAgICAgIGxldCBjYW1lcmEgPSBHZXREZWZhdWx0Q2FtZXJhIChEaXJlY3Rpb24uWSk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhICg0NS4wLCAxLjAsIDAuMSwgMTAwMC4wKTtcbiAgICAgICAgdGhpcy5jYW1lcmFNb2RlID0gQ2FtZXJhTW9kZS5QZXJzcGVjdGl2ZTtcbiAgICAgICAgdGhpcy5jYW1lcmFWYWxpZGF0b3IgPSBuZXcgQ2FtZXJhVmFsaWRhdG9yICgpO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCAodGhpcy5jYW1lcmEpO1xuXG4gICAgICAgIGxldCBjYW52YXNFbGVtID0gdGhpcy5yZW5kZXJlci5kb21FbGVtZW50O1xuICAgICAgICB0aGlzLm5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbiAoY2FudmFzRWxlbSwgY2FtZXJhLCB7XG4gICAgICAgICAgICBvblVwZGF0ZSA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLlJlbmRlciAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cFZlY3RvciA9IG5ldyBVcFZlY3RvciAoKTtcbiAgICB9XG5cbiAgICBJbml0U2hhZGluZyAgKClcbiAgICB7XG4gICAgICAgIHRoaXMuc2hhZGluZ01vZGVsID0gbmV3IFNoYWRpbmdNb2RlbCAodGhpcy5zY2VuZSk7XG4gICAgfVxuXG4gICAgR2V0U2hhZGluZ1R5cGUgKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYWRpbmdNb2RlbC50eXBlO1xuICAgIH1cblxuICAgIEdldEltYWdlU2l6ZSAoKVxuICAgIHtcbiAgICAgICAgbGV0IG9yaWdpbmFsU2l6ZSA9IG5ldyBUSFJFRS5WZWN0b3IyICgpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmdldFNpemUgKG9yaWdpbmFsU2l6ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aCA6IHBhcnNlSW50IChvcmlnaW5hbFNpemUueCwgMTApLFxuICAgICAgICAgICAgaGVpZ2h0IDogcGFyc2VJbnQgKG9yaWdpbmFsU2l6ZS55LCAxMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBHZXRDYW52YXNTaXplICgpXG4gICAge1xuICAgICAgICBsZXQgd2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICAgICAgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICB3aWR0aCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgIGhlaWdodCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGggOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA6IGhlaWdodFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEdldEltYWdlQXNEYXRhVXJsICh3aWR0aCwgaGVpZ2h0LCBpc1RyYW5zcGFyZW50KVxuICAgIHtcbiAgICAgICAgbGV0IG9yaWdpbmFsU2l6ZSA9IHRoaXMuR2V0SW1hZ2VTaXplICgpO1xuICAgICAgICBsZXQgcmVuZGVyV2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IHJlbmRlckhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICByZW5kZXJXaWR0aCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgIHJlbmRlckhlaWdodCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2xlYXJBbHBoYSA9IHRoaXMucmVuZGVyZXIuZ2V0Q2xlYXJBbHBoYSAoKTtcbiAgICAgICAgaWYgKGlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJBbHBoYSAoMC4wKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlJlc2l6ZVJlbmRlcmVyIChyZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0KTtcbiAgICAgICAgdGhpcy5SZW5kZXIgKCk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQudG9EYXRhVVJMICgpO1xuICAgICAgICB0aGlzLlJlc2l6ZVJlbmRlcmVyIChvcmlnaW5hbFNpemUud2lkdGgsIG9yaWdpbmFsU2l6ZS5oZWlnaHQpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQWxwaGEgKGNsZWFyQWxwaGEpO1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIERlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIHRoaXMuQ2xlYXIgKCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuZGlzcG9zZSAoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJc0RlZmluZWQgfSBmcm9tICcuLi9jb3JlL2NvcmUuanMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgSW5wdXRGaWxlc0Zyb21GaWxlT2JqZWN0cywgSW5wdXRGaWxlc0Zyb21VcmxzIH0gZnJvbSAnLi4vaW1wb3J0L2ltcG9ydGVyZmlsZXMuanMnO1xuaW1wb3J0IHsgSW1wb3J0RXJyb3JDb2RlLCBJbXBvcnRTZXR0aW5ncyB9IGZyb20gJy4uL2ltcG9ydC9pbXBvcnRlci5qcyc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1GaWxlSG9zdFVybHMgfSBmcm9tICcuLi9pby9maWxldXRpbHMuanMnO1xuaW1wb3J0IHsgUGFyYW1ldGVyQ29udmVydGVyIH0gZnJvbSAnLi4vcGFyYW1ldGVycy9wYXJhbWV0ZXJsaXN0LmpzJztcbmltcG9ydCB7IFRocmVlTW9kZWxMb2FkZXIgfSBmcm9tICcuLi90aHJlZWpzL3RocmVlbW9kZWxsb2FkZXIuanMnO1xuaW1wb3J0IHsgVmlld2VyIH0gZnJvbSAnLi92aWV3ZXIuanMnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXR0aW5ncyB9IGZyb20gJy4vc2hhZGluZ21vZGVsLmpzJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIG9iamVjdCBmb3IgZW1iZWRkaW5nIHRoZSB2aWV3ZXIgb24gYSB3ZWJzaXRlLlxuICovXG5leHBvcnQgY2xhc3MgRW1iZWRkZWRWaWV3ZXJcbntcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRFbGVtZW50IFRoZSBwYXJlbnQgZWxlbWVudCBmb3IgdGhlIHZpZXdlciBjYW52YXMuIEl0IG11c3QgYmUgYW5cbiAgICAgKiBleGlzdGluZyBET00gZWxlbWVudCBhbmQgaXQgd2lsbCBiZSB0aGUgY29udGFpbmVyIGZvciB0aGUgY2FudmFzLiBUaGUgc2l6ZSBvZiB0aGUgdmlld2VyIHdpbGxcbiAgICAgKiBiZSBhdXRvbWF0aWNhbGx5IGFkanVzdGVkIHRvIHRoZSBzaXplIG9mIHRoZSBwYXJlbnQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1ldGVycyBQYXJhbWV0ZXJzIGZvciBlbWJlZGRpbmcuXG4gICAgICogQHBhcmFtIHtDYW1lcmF9IFtwYXJhbWV0ZXJzLmNhbWVyYV0gQ2FtZXJhIHRvIHVzZS4gSWYgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgY2FtZXJhIHdpbGxcbiAgICAgKiBiZSB1c2VkIGFuZCB0aGUgbW9kZWwgd2lsbCBiZSBmaXR0ZWQgdG8gdGhlIHdpbmRvdy5cbiAgICAgKiBAcGFyYW0ge0NhbWVyYU1vZGV9IFtwYXJhbWV0ZXJzLmNhbWVyYU1vZGVdIENhbWVyYSBwcm9qZWN0aW9uIG1vZGUuXG4gICAgICogQHBhcmFtIHtSR0JBQ29sb3J9IFtwYXJhbWV0ZXJzLmJhY2tncm91bmRDb2xvcl0gQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgY2FudmFzLlxuICAgICAqIEBwYXJhbSB7UkdCQ29sb3J9IFtwYXJhbWV0ZXJzLmRlZmF1bHRDb2xvcl0gRGVmYXVsdCBjb2xvciBvZiB0aGUgbW9kZWwuIEl0IGhhcyBlZmZlY3Qgb25seVxuICAgICAqIGlmIHRoZSBpbXBvcnRlZCBtb2RlbCBkb2Vzbid0IHNwZWNpZnkgYW55IGNvbG9yLlxuICAgICAqIEBwYXJhbSB7RWRnZVNldHRpbmdzfSBbcGFyYW1ldGVycy5lZGdlU2V0dGluZ3NdIEVkZ2Ugc2V0dGluZ3MuXG4gICAgICogQHBhcmFtIHtFbnZpcm9ubWVudFNldHRpbmdzfSBbcGFyYW1ldGVycy5lbnZpcm9ubWVudFNldHRpbmdzXSBFbnZpcm9ubWVudCBzZXR0aW5ncy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbcGFyYW1ldGVycy5vbk1vZGVsTG9hZGVkXSBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBtb2RlbCB3aXRoIGFsbFxuICAgICAqIG9mIHRoZSB0ZXh0dXJlcyBpcyBmdWxseSBsb2FkZWQuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAocGFyZW50RWxlbWVudCwgcGFyYW1ldGVycylcbiAgICB7XG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgICAgICBpZiAoSXNEZWZpbmVkIChwYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICAgICAgfVxuXG4gICAgICB0aGlzLnZpZXdlciA9IG5ldyBWaWV3ZXIgKCk7XG5cbiAgICAgIGlmIChJc0RlZmluZWQocGFyYW1ldGVycy5jb250ZXh0KSkge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IHtcbiAgICAgICAgICB3aWR0aDogMTAyNCxcbiAgICAgICAgICBoZWlnaHQ6IDc2OCxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgd2lkdGg6IDEwMjQsXG4gICAgICAgICAgICBoZWlnaHQ6IDc2OCxcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudmlld2VyLkluaXRXaXRoQ3R4KHBhcmFtZXRlcnMuY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCdjYW52YXMnKTtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkICh0aGlzLmNhbnZhcyk7XG4gICAgICAgIHRoaXMudmlld2VyLkluaXQgKHRoaXMuY2FudmFzKTtcbiAgICAgIH1cbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5wYXJlbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gdGhpcy5wYXJlbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgdGhpcy52aWV3ZXIuUmVzaXplICh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmNhbWVyYU1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLlNldENhbWVyYU1vZGUgKHRoaXMucGFyYW1ldGVycy5jYW1lcmFNb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdlci5TZXRCYWNrZ3JvdW5kQ29sb3IgKHRoaXMucGFyYW1ldGVycy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5lZGdlU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLlNldEVkZ2VTZXR0aW5ncyAodGhpcy5wYXJhbWV0ZXJzLmVkZ2VTZXR0aW5ncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmVudmlyb25tZW50U2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLlNldEVudmlyb25tZW50TWFwU2V0dGluZ3MgKHRoaXMucGFyYW1ldGVycy5lbnZpcm9ubWVudFNldHRpbmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLm1vZGVsTG9hZGVyID0gbmV3IFRocmVlTW9kZWxMb2FkZXIgKCk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLlJlc2l6ZSAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIG1vZGVsIGJhc2VkIG9uIGEgbGlzdCBvZiB1cmxzLiBUaGUgbGlzdCBtdXN0IGNvbnRhaW4gdGhlIG1haW4gbW9kZWwgZmlsZSBhbmQgYWxsXG4gICAgICogb2YgdGhlIHJlZmVyZW5jZWQgZmlsZXMuIEZvciBleGFtcGxlIGluIGNhc2Ugb2YgYW4gb2JqIGZpbGUgdGhlIGxpc3QgbXVzdCBjb250YWluIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgbXRsIGFuZCB0ZXh0dXJlIGZpbGVzLCB0b28uXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gbW9kZWxVcmxzIFVybCBsaXN0IG9mIG1vZGVsIGZpbGVzLlxuICAgICAqL1xuICAgIExvYWRNb2RlbEZyb21VcmxMaXN0IChtb2RlbFVybHMpXG4gICAge1xuICAgICAgICBUcmFuc2Zvcm1GaWxlSG9zdFVybHMgKG1vZGVsVXJscyk7XG4gICAgICBsZXQgaW5wdXRGaWxlcyA9IElucHV0RmlsZXNGcm9tVXJscyAobW9kZWxVcmxzKTtcbiAgICAgIGNvbnNvbGUubG9nKCdpbnB1dEZpbGVzJywgaW5wdXRGaWxlcylcbiAgICAgICAgdGhpcy5Mb2FkTW9kZWxGcm9tSW5wdXRGaWxlcyAoaW5wdXRGaWxlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIG1vZGVsIGJhc2VkIG9uIGEgbGlzdCBvZiB7QGxpbmsgRmlsZX0gb2JqZWN0cy4gVGhlIGxpc3QgbXVzdCBjb250YWluIHRoZSBtYWluIG1vZGVsXG4gICAgICogZmlsZSBhbmQgYWxsIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVzLiBZb3UgbXVzdCB1c2UgdGhpcyBtZXRob2Qgd2hlbiB5b3UgYXJlIHVzaW5nIGEgZmlsZSBwaWNrZXJcbiAgICAgKiBvciBkcmFnIGFuZCBkcm9wIHRvIHNlbGVjdCBmaWxlcyBmcm9tIGEgY29tcHV0ZXIuXG4gICAgICogQHBhcmFtIHtGaWxlW119IGZpbGVMaXN0IEZpbGUgb2JqZWN0IGxpc3Qgb2YgbW9kZWwgZmlsZXMuXG4gICAgICovXG4gICAgTG9hZE1vZGVsRnJvbUZpbGVMaXN0IChmaWxlTGlzdClcbiAgICB7XG4gICAgICAgIGxldCBpbnB1dEZpbGVzID0gSW5wdXRGaWxlc0Zyb21GaWxlT2JqZWN0cyAoZmlsZUxpc3QpO1xuICAgICAgICB0aGlzLkxvYWRNb2RlbEZyb21JbnB1dEZpbGVzIChpbnB1dEZpbGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgbW9kZWwgYmFzZWQgb24gYSBsaXN0IG9mIHtAbGluayBJbnB1dEZpbGV9IG9iamVjdHMuIFRoaXMgbWV0aG9kIGlzIHVzZWRcbiAgICAgKiBpbnRlcm5hbGx5LCB5b3Ugc2hvdWxkIHVzZSBMb2FkTW9kZWxGcm9tVXJsTGlzdCBvciBMb2FkTW9kZWxGcm9tRmlsZUxpc3QgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0ge0lucHV0RmlsZVtdfSBpbnB1dEZpbGVzIExpc3Qgb2YgbW9kZWwgZmlsZXMuXG4gICAgICovXG4gICAgTG9hZE1vZGVsRnJvbUlucHV0RmlsZXMgKGlucHV0RmlsZXMpXG4gICAge1xuICAgICAgICBpZiAoaW5wdXRGaWxlcyA9PT0gbnVsbCB8fCBpbnB1dEZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aWV3ZXIuQ2xlYXIgKCk7XG4gICAgICAgIGxldCBzZXR0aW5ncyA9IG5ldyBJbXBvcnRTZXR0aW5ncyAoKTtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5kZWZhdWx0Q29sb3IpIHtcbiAgICAgICAgICAgIHNldHRpbmdzLmRlZmF1bHRDb2xvciA9IHRoaXMucGFyYW1ldGVycy5kZWZhdWx0Q29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICAgIC8vIGxldCBwcm9ncmVzc0RpdiA9IG51bGw7XG4gICAgICAgIHRoaXMubW9kZWxMb2FkZXIuTG9hZE1vZGVsIChpbnB1dEZpbGVzLCBzZXR0aW5ncywge1xuICAgICAgICAgICAgb25Mb2FkU3RhcnQgOiAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIC8vIHByb2dyZXNzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAoJ2RpdicpO1xuICAgICAgICAgICAgICAvLyBwcm9ncmVzc0Rpdi5pbm5lckhUTUwgPSAnTG9hZGluZyBtb2RlbC4uLic7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIG1vZGVsLi4uJyk7XG4gICAgICAgICAgICAgIC8vIHRoaXMucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCAocHJvZ3Jlc3NEaXYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRmlsZUxpc3RQcm9ncmVzcyA6IChjdXJyZW50LCB0b3RhbCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRmlsZUxvYWRQcm9ncmVzcyA6IChjdXJyZW50LCB0b3RhbCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSW1wb3J0U3RhcnQgOiAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIHByb2dyZXNzRGl2LmlubmVySFRNTCA9ICdJbXBvcnRpbmcgbW9kZWwuLi4nO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW1wb3J0aW5nIG1vZGVsLi4uJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25WaXN1YWxpemF0aW9uU3RhcnQgOiAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIHByb2dyZXNzRGl2LmlubmVySFRNTCA9ICdWaXN1YWxpemluZyBtb2RlbC4uLic7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWaXN1YWxpemluZyBtb2RlbC4uLicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW9kZWxGaW5pc2hlZCA6IChpbXBvcnRSZXN1bHQsIHRocmVlT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgIC8vIHRoaXMucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCAocHJvZ3Jlc3NEaXYpO1xuICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgICB0aGlzLnZpZXdlci5TZXRNYWluT2JqZWN0ICh0aHJlZU9iamVjdCk7XG4gICAgICAgICAgICAgIGxldCBib3VuZGluZ1NwaGVyZSA9IHRoaXMudmlld2VyLkdldEJvdW5kaW5nU3BoZXJlICgobWVzaFVzZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aGlzLnZpZXdlci5BZGp1c3RDbGlwcGluZ1BsYW5lc1RvU3BoZXJlIChib3VuZGluZ1NwaGVyZSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuY2FtZXJhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ZXIuU2V0Q2FtZXJhICh0aGlzLnBhcmFtZXRlcnMuY2FtZXJhKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlci5TZXRVcFZlY3RvciAoRGlyZWN0aW9uLlksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlci5GaXRTcGhlcmVUb1dpbmRvdyAoYm91bmRpbmdTcGhlcmUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubW9kZWwgPSBpbXBvcnRSZXN1bHQubW9kZWw7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMub25Nb2RlbExvYWRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5vbk1vZGVsTG9hZGVkICgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25UZXh0dXJlTG9hZGVkIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmlld2VyLlJlbmRlciAoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkxvYWRFcnJvciA6IChpbXBvcnRFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJ1Vua25vd24gZXJyb3IuJztcbiAgICAgICAgICAgICAgICBpZiAoaW1wb3J0RXJyb3IuY29kZSA9PT0gSW1wb3J0RXJyb3JDb2RlLk5vSW1wb3J0YWJsZUZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdObyBpbXBvcnRhYmxlIGZpbGUgZm91bmQuJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGltcG9ydEVycm9yLmNvZGUgPT09IEltcG9ydEVycm9yQ29kZS5GYWlsZWRUb0xvYWRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnRmFpbGVkIHRvIGxvYWQgZmlsZSBmb3IgaW1wb3J0Lic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbXBvcnRFcnJvci5jb2RlID09PSBJbXBvcnRFcnJvckNvZGUuSW1wb3J0RmFpbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnRmFpbGVkIHRvIGltcG9ydCBtb2RlbC4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW1wb3J0RXJyb3IubWVzc2FnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9ICcgKCcgKyBpbXBvcnRFcnJvci5tZXNzYWdlICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gcHJvZ3Jlc3NEaXYuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgY29uc29sZS50cmFjZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBWaWV3ZXIgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtWaWV3ZXJ9XG4gICAgICovXG4gICAgR2V0Vmlld2VyICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBNb2RlbCBvYmplY3QuXG4gICAgICogQHJldHVybnMge01vZGVsfVxuICAgICAqL1xuICAgIEdldE1vZGVsICgpXG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCB3aGVuIHRoZSBzaXplIG9mIHRoZSBwYXJlbnQgZWxlbWVudCBjaGFuZ2VzIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZVxuICAgICAqIGNvbnRleHQgaGFzIHRoZSBzYW1lIGRpbWVuc2lvbnMgYXMgdGhlIHBhcmVudCBlbGVtZW50LlxuICAgICAqL1xuICAgIFJlc2l6ZSAoKVxuICAgIHtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5wYXJlbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gdGhpcy5wYXJlbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgdGhpcy52aWV3ZXIuUmVzaXplICh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGcmVlcyB1cCBhbGwgdGhlIG1lbW9yeSB0aGF0IGlzIGFsbG9jYXRlZCBieSB0aGUgdmlld2VyLiBZb3Ugc2hvdWxkIGNhbGwgdGhpcyBmdW5jdGlvbiBpZlxuICAgICAqIHlvIGRvbid0IG5lZWQgdGhlIHZpZXdlciBhbnltb3JlLlxuICAgICAqL1xuICAgIERlc3Ryb3kgKClcbiAgICB7XG4gICAgICAgIHRoaXMubW9kZWxMb2FkZXIuRGVzdHJveSAoKTtcbiAgICAgICAgdGhpcy52aWV3ZXIuRGVzdHJveSAoKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XG4gICAgfVxufVxuXG4vKipcbiAqIExvYWRzIHRoZSBtb2RlbCBzcGVjaWZpZWQgYnkgdXJscy5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudEVsZW1lbnQgVGhlIHBhcmVudCBlbGVtZW50IGZvciB0aGUgdmlld2VyIGNhbnZhcy5cbiAqIEBwYXJhbSB7c3RyaW5nW119IG1vZGVsVXJscyBVcmwgbGlzdCBvZiBtb2RlbCBmaWxlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbWV0ZXJzIFNlZSB7QGxpbmsgRW1iZWRkZWRWaWV3ZXJ9IGNvbnN0cnVjdG9yIGZvciBkZXRhaWxzLlxuICogQHJldHVybnMge0VtYmVkZGVkVmlld2VyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gSW5pdDNEVmlld2VyRnJvbVVybExpc3QgKHBhcmVudEVsZW1lbnQsIG1vZGVsVXJscywgcGFyYW1ldGVycylcbntcbiAgICBsZXQgdmlld2VyID0gbmV3IEVtYmVkZGVkVmlld2VyIChwYXJlbnRFbGVtZW50LCBwYXJhbWV0ZXJzKTtcbiAgICB2aWV3ZXIuTG9hZE1vZGVsRnJvbVVybExpc3QgKG1vZGVsVXJscyk7XG4gICAgcmV0dXJuIHZpZXdlcjtcbn1cblxuLyoqXG4gKiBMb2FkcyB0aGUgbW9kZWwgc3BlY2lmaWVkIGJ5IEZpbGUgb2JqZWN0cy5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudEVsZW1lbnQgVGhlIHBhcmVudCBlbGVtZW50IGZvciB0aGUgdmlld2VyIGNhbnZhcy5cbiAqIEBwYXJhbSB7RmlsZVtdfSBtb2RlbHMgRmlsZSBvYmplY3QgbGlzdCBvZiBtb2RlbCBmaWxlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbWV0ZXJzIFNlZSB7QGxpbmsgRW1iZWRkZWRWaWV3ZXJ9IGNvbnN0cnVjdG9yIGZvciBkZXRhaWxzLlxuICogQHJldHVybnMge0VtYmVkZGVkVmlld2VyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gSW5pdDNEVmlld2VyRnJvbUZpbGVMaXN0IChwYXJlbnRFbGVtZW50LCBtb2RlbHMsIHBhcmFtZXRlcnMpXG57XG4gICAgbGV0IHZpZXdlciA9IG5ldyBFbWJlZGRlZFZpZXdlciAocGFyZW50RWxlbWVudCwgcGFyYW1ldGVycyk7XG4gICAgdmlld2VyLkxvYWRNb2RlbEZyb21GaWxlTGlzdCAobW9kZWxzKTtcbiAgICByZXR1cm4gdmlld2VyO1xufVxuXG4vKipcbiAqIExvYWRzIGFsbCB0aGUgbW9kZWxzIG9uIHRoZSBwYWdlLiBUaGlzIGZ1bmN0aW9uIGxvb2tzIGZvciBhbGwgdGhlIGVsZW1lbnRzIHdpdGggb25saW5lXzNkX3ZpZXdlclxuICogY2xhc3MgbmFtZSwgYW5kIGxvYWRzIHRoZSBtb2RlbCBhY2NvcmRpbmcgdG8gdGhlIHRhZydzIHBhcmFtZXRlcnMuIEl0IG11c3QgYmUgY2FsbGVkIGFmdGVyIHRoZVxuICogZG9jdW1lbnQgaXMgbG9hZGVkLlxuICogQHJldHVybnMge0VtYmVkZGVkVmlld2VyW119IEFycmF5IG9mIHRoZSBjcmVhdGVkIHtAbGluayBFbWJlZGRlZFZpZXdlcn0gb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEluaXQzRFZpZXdlckVsZW1lbnRzIChvblJlYWR5KVxue1xuICAgIGZ1bmN0aW9uIExvYWRFbGVtZW50IChlbGVtZW50KVxuICAgIHtcbiAgICAgICAgbGV0IGNhbWVyYSA9IG51bGw7XG4gICAgICAgIGxldCBjYW1lcmFQYXJhbXMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSAoJ2NhbWVyYScpO1xuICAgICAgICBpZiAoY2FtZXJhUGFyYW1zKSB7XG4gICAgICAgICAgICBjYW1lcmEgPSBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9DYW1lcmEgKGNhbWVyYVBhcmFtcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2FtZXJhTW9kZSA9IG51bGw7XG4gICAgICAgIGxldCBjYW1lcmFNb2RlUGFyYW1zID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUgKCdjYW1lcmFtb2RlJyk7XG4gICAgICAgIGlmIChjYW1lcmFNb2RlUGFyYW1zKSB7XG4gICAgICAgICAgICBjYW1lcmFNb2RlID0gUGFyYW1ldGVyQ29udmVydGVyLlN0cmluZ1RvQ2FtZXJhTW9kZSAoY2FtZXJhTW9kZVBhcmFtcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYmFja2dyb3VuZENvbG9yID0gbnVsbDtcbiAgICAgICAgbGV0IGJhY2tncm91bmRDb2xvclBhcmFtcyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlICgnYmFja2dyb3VuZGNvbG9yJyk7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3JQYXJhbXMpIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IFBhcmFtZXRlckNvbnZlcnRlci5TdHJpbmdUb1JHQkFDb2xvciAoYmFja2dyb3VuZENvbG9yUGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZWZhdWx0Q29sb3IgPSBudWxsO1xuICAgICAgICBsZXQgZGVmYXVsdENvbG9yUGFyYW1zID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUgKCdkZWZhdWx0Y29sb3InKTtcbiAgICAgICAgaWYgKGRlZmF1bHRDb2xvclBhcmFtcykge1xuICAgICAgICAgICAgZGVmYXVsdENvbG9yID0gUGFyYW1ldGVyQ29udmVydGVyLlN0cmluZ1RvUkdCQ29sb3IgKGRlZmF1bHRDb2xvclBhcmFtcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZWRnZVNldHRpbmdzID0gbnVsbDtcbiAgICAgICAgbGV0IGVkZ2VTZXR0aW5nc1BhcmFtcyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlICgnZWRnZXNldHRpbmdzJyk7XG4gICAgICAgIGlmIChlZGdlU2V0dGluZ3NQYXJhbXMpIHtcbiAgICAgICAgICAgIGVkZ2VTZXR0aW5ncyA9IFBhcmFtZXRlckNvbnZlcnRlci5TdHJpbmdUb0VkZ2VTZXR0aW5ncyAoZWRnZVNldHRpbmdzUGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnZpcm9ubWVudFNldHRpbmdzID0gbnVsbDtcbiAgICAgICAgbGV0IGVudmlyb25tZW50TWFwUGFyYW1zID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUgKCdlbnZpcm9ubWVudG1hcCcpO1xuICAgICAgICBpZiAoZW52aXJvbm1lbnRNYXBQYXJhbXMpIHtcbiAgICAgICAgICAgIGxldCBlbnZpcm9ubWVudE1hcFBhcnRzID0gZW52aXJvbm1lbnRNYXBQYXJhbXMuc3BsaXQgKCcsJyk7XG4gICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRNYXBQYXJ0cy5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFja2dyb3VuZElzRW52TWFwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGV0IGJhY2tncm91bmRJc0Vudk1hcFBhcmFtID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUgKCdlbnZpcm9ubWVudG1hcGJnJyk7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tncm91bmRJc0Vudk1hcFBhcmFtICYmIGJhY2tncm91bmRJc0Vudk1hcFBhcmFtID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZElzRW52TWFwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRTZXR0aW5ncyA9IG5ldyBFbnZpcm9ubWVudFNldHRpbmdzIChlbnZpcm9ubWVudE1hcFBhcnRzLCBiYWNrZ3JvdW5kSXNFbnZNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1vZGVsVXJscyA9IG51bGw7XG4gICAgICAgIGxldCBtb2RlbFBhcmFtcyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlICgnbW9kZWwnKTtcbiAgICAgICAgaWYgKG1vZGVsUGFyYW1zKSB7XG4gICAgICAgICAgICBtb2RlbFVybHMgPSBQYXJhbWV0ZXJDb252ZXJ0ZXIuU3RyaW5nVG9Nb2RlbFVybHMgKG1vZGVsUGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBJbml0M0RWaWV3ZXJGcm9tVXJsTGlzdCAoZWxlbWVudCwgbW9kZWxVcmxzLCB7XG4gICAgICAgICAgICBjYW1lcmEgOiBjYW1lcmEsXG4gICAgICAgICAgICBjYW1lcmFNb2RlIDogY2FtZXJhTW9kZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGRlZmF1bHRDb2xvciA6IGRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgIGVkZ2VTZXR0aW5ncyA6IGVkZ2VTZXR0aW5ncyxcbiAgICAgICAgICAgIGVudmlyb25tZW50U2V0dGluZ3MgOiBlbnZpcm9ubWVudFNldHRpbmdzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCB2aWV3ZXJFbGVtZW50cyA9IFtdO1xuICAgIGxldCBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKCdvbmxpbmVfM2Rfdmlld2VyJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBsZXQgdmlld2VyRWxlbWVudCA9IExvYWRFbGVtZW50IChlbGVtZW50KTtcbiAgICAgICAgdmlld2VyRWxlbWVudHMucHVzaCAodmlld2VyRWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3ZXJFbGVtZW50cztcbn1cbiJdLCJuYW1lcyI6WyJGaWxlUmVhZGVyTW9kdWxlIiwiR2x0ZkNvbXBvbmVudFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFPLFNBQVMsU0FBUyxFQUFFLEdBQUc7QUFDOUI7QUFDQSxJQUFJLE9BQU8sR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQzdDLENBQUM7QUFDRDtBQUNPLFNBQVMsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFHO0FBQ3hDO0FBQ0EsSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtBQUMzQyxRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLEtBQUs7QUFD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SUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hGLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUY7QUFDQSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNwQixFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxLQUFLLENBQUM7QUFDUCxDQUFDO0FBQ0QsRUFBRSxPQUFPLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUMsRUFBRTtBQUNGLENBQUM7QUFDRDtBQUNPLFNBQVMsY0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3BDO0FBQ0EsQ0FBQyxPQUFPLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFDRDtBQUNPLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ2hDO0FBQ0EsQ0FBQyxPQUFPLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNEO0FBQ08sU0FBUyxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDaEM7QUFDQSxDQUFDLE9BQU8sSUFBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0Q7QUFDTyxTQUFTLGVBQWUsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyQztBQUNBLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEcsQ0FBQztB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QUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtBQUM1QixFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtBQUM1QixFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtBQUM1QixFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtBQUM1QixFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtBQUM1QixFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzdDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDN0MsRUFBRSxNQUFNO0FBQ1IsRUFBRSxPQUFPLElBQUksQ0FBQztBQUNkLEVBQUU7QUFDRjtBQUNBLENBQUMsT0FBTyxVQUFVLENBQUM7QUFDbkI7O0FDNUVPLE1BQU0sTUFBTTtBQUNuQjtBQUNBLElBQUksV0FBVyxDQUFDLENBQUMsTUFBTTtBQUN2QixJQUFJO0FBQ0osUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUMzQixRQUFRLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO0FBQ3JELFlBQVksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDakMsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLElBQUksT0FBTyxDQUFDO0FBQ1osSUFBSTtBQUNKLFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQztBQUNwQyxLQUFLO0FBQ0w7QUFDQSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU07QUFDZixJQUFJO0FBQ0osUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUM3QixRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTDtBQUNBLElBQUksR0FBRyxDQUFDO0FBQ1IsSUFBSTtBQUNKLFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLEtBQUs7QUFDTDtBQUNBLElBQUksS0FBSyxDQUFDO0FBQ1YsSUFBSTtBQUNKLFFBQVEsSUFBSSxNQUFNLEdBQUc7QUFDckIsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMxRSxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzFFLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDNUUsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUM5RSxTQUFTLENBQUM7QUFDVixRQUFRLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbkMsS0FBSztBQUNMO0FBQ0EsSUFBSSxjQUFjLENBQUM7QUFDbkIsSUFBSTtBQUNKLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRztBQUN0QixZQUFZLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7QUFDOUIsWUFBWSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0FBQzlCLFlBQVksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztBQUM5QixZQUFZLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7QUFDOUIsU0FBUyxDQUFDO0FBQ1YsUUFBUSxPQUFPLElBQUksQ0FBQztBQUNwQixLQUFLO0FBQ0w7QUFDQSxJQUFJLFVBQVUsQ0FBQztBQUNmLElBQUk7QUFDSixRQUFRLElBQUksUUFBUSxHQUFHLElBQUksTUFBTSxHQUFHLENBQUMsY0FBYyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDOUQsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JDLFlBQVksSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3hELGdCQUFnQixPQUFPLEtBQUssQ0FBQztBQUM3QixhQUFhO0FBQ2IsU0FBUztBQUNULFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsS0FBSztBQUNMO0FBQ0EsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUM5QixJQUFJO0FBQ0osUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHO0FBQ3RCLFlBQVksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztBQUM5QixZQUFZLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7QUFDOUIsWUFBWSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0FBQzlCLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRztBQUN4QixTQUFTLENBQUM7QUFDVixRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTDtBQUNBLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUM5QixJQUFJO0FBQ0osUUFBUSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLFFBQVEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixRQUFRLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsUUFBUSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQVEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUFRLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDeEIsUUFBUSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQVEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUFRLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDeEIsUUFBUSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQVEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUFRLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDeEIsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHO0FBQ3RCLFlBQVksR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRztBQUNsRCxZQUFZLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUc7QUFDbEQsWUFBWSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHO0FBQ2xELFlBQVksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztBQUM5QixTQUFTLENBQUM7QUFDVixRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTDtBQUNBLElBQUksdUJBQXVCLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSztBQUN4QyxJQUFJO0FBQ0osUUFBUSxJQUFJLFVBQVUsR0FBRyx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0QsUUFBUSxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVGLEtBQUs7QUFDTDtBQUNBLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3hCLElBQUk7QUFDSixRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUc7QUFDdEIsWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0FBQzVCLFlBQVksR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRztBQUM1QixZQUFZLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUc7QUFDNUIsWUFBWSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0FBQzlCLFNBQVMsQ0FBQztBQUNWLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsS0FBSztBQUNMO0FBQ0EsSUFBSSxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEtBQUs7QUFDNUMsSUFBSTtBQUNKLFFBQVEsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUMvQixRQUFRLElBQUksRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDL0IsUUFBUSxJQUFJLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQVEsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUM1QixRQUFRLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDNUIsUUFBUSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzVCLFFBQVEsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUM1QixRQUFRLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDekIsUUFBUSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6QjtBQUNBLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDekIsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDekIsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDekIsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLFFBQVEsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDekIsUUFBUSxJQUFJLEVB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ckMsWUFBWSxRQUFRLEdBQUcsUUFBUTtBQUMvQixZQUFZLEtBQUssR0FBRyxLQUFLO0FBQ3pCLFNBQVMsQ0FBQztBQUNWLEtBQUs7QUFDTDtBQUNBLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQUk7QUFDSixRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEM7QUFDQSxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QztBQUNBLFFBQVEsSUFBSSxXQUFXLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEcsUUFBUSxPQUFPLFdBQVcsQ0FBQztBQUMzQixLQUFLO0FBQ0w7QUFDQSxJQUFJLE1BQU0sQ0FBQztBQUNYLElBQUk7QUFDSixRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEM7QUFDQSxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QyxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUN4QztBQUNBLFFBQVEsSUFBSSxXQUFXLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEcsUUFBUSxJQUFJLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDeEMsWUFBWSxPQUFPLElBQUksQ0FBQztBQUN4QixTQUFTO0FBQ1Q7QUFDQSxRQUFRLElBQUksTUFBTSxHQUFHO0FBQ3JCLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXO0FBQzdELFNBQVMsQ0FBQztBQUNWO0FBQ0EsUUFBUSxPQUFPLElBQUksTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLEtBQUs7QUFDTDtBQUNBLElBQUksU0FBUyxDQUFDO0FBQ2QsSUFBSTtBQUNKLFFBQVEsSUFBSSxNQUFNLEdBQUc7QUFDckIsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUMzRSxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0FBQzNFLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDNUUsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUM1RSxTQUFTLENBQUM7QUFDVixRQUFRLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbkMsS0FBSztBQUNMO0FBQ0EsSUFBSSxlQUFlLENBQUM7QUFDcEIsSUFBSTtBQUNKLFFBQVEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO0FBQ3BDLFFBQVEsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO0FBQzdCLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUM7QUFDbkMsS0FBSztBQUNMO0FBQ0EsSUFBSSxjQUFjLENBQUMsQ0FBQyxNQUFNO0FBQzFCLElBQUk7QUFDSixRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0IsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzQixRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0I7QUFDQSxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEM7QUFDQSxRQUFRLElBQUksTUFBTSxHQUFHLElBQUksT0FBTztBQUNoQyxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ3pELFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDekQsWUFBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztBQUN6RCxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ3pELFNBQVMsQ0FBQztBQUNWLFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsS0FBSztBQUNMO0FBQ0EsSUFBSSxjQUFjLENBQUMsQ0FBQyxNQUFNO0FBQzFCLElBQUk7QUFDSixRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEM7QUFDQSxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEM7QUFDQSxRQUFRLElBQUksTUFBTSxHQUFHO0FBQ3JCLFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDekQsWUFBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztBQUN6RCxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ3pELFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDekQsWUFBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztBQUN6RCxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ3pELFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDekQsWUFBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxH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QUFDLFNBQVMsR0FBRyxDQUFDO0FBQ25ELFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUM1RSxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDNUUsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQzVFO0FBQ0EsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUUsUUFBUSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0UsS0FBSztBQUNMO0FBQ0EsSUFBSSxlQUFlLENBQUMsQ0FBQyxLQUFLO0FBQzFCLElBQUk7QUFDSixRQUFRLElBQUksT0FBTztBQUNuQixZQUFZLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlELFlBQVksZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsWUFBWSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5RCxZQUFZLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FB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LENBQUM7QUFDMUMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUM7QUFDQSxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUMsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLElBQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QyxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUMsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLElBQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QztBQUNBLElBQUksT0FBTyxTQUFTLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDaEMsQ0FBQztBQUNEO0FBQ08sU0FBUyxZQUFZLEVBQUUsU0FBUyxFQUFFLFNBQVMs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QUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxZQUFZLEVBQUU7QUFDdEMsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDcEIsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssWUFBWSxFQUFFO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxjQUFjLEVBQUU7QUFDeEMsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDcEIsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDcEIsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDeEIsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RCxRQUFRLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQVEsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkQsUUFBUSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssYUFBYSxFQUFFO0FBQ3ZDLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDOUMsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsS0FBSztBQUNMLElBQUksT0FBTyxTQUFTLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDaEM7O0FDN2FPLFNBQVMsZUFBZSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUMzQztBQUNBLElBQUksTUFB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QUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUM7QUFDcEYsRUFBRSxJQUFJLG1CQUFtQixHQUFHLGFBQWEsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQztBQUN2RixFQUFFLElBQUksaUJBQWlCLEdBQUcsYUFBYSxFQUFFLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDO0FBQzFGO0FBQ0EsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2RCxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFEO0FBQ0EsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEQsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLO0FBQ1osQ0FBQztBQUNELEVBQUUsSUFBSSxTQUFTLEdBQUcsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkUsRUFBRSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7QUFDckMsRUFBRSxJQUFJLElBQUksR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzlCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENB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QVMsQ0FBQyxDQUFDO0FBQzlELFFBQVEsSUFBSSxVQUFVLEdBQUcsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlFO0FBQ0EsUUFBUSxJQUFJLFFBQVEsR0FBRyxlQUFlLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekUsUUFBUSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDN0U7QUFDQSxRQUFRLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztBQUMzQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxFQUFFO0FBQzVDLFlBQVksU0FBUyxDQUFDLEVBQUUsR0FBRyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFlBQVksU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDbkMsU0FBUyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxFQUFFO0FBQ25ELFlBQVksU0FBUyxDQUFDLEVBQUUsR0FBRyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFlBQVksU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDbkMsU0FBUyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxFQUFFO0FBQ25ELFlBQVksU0FBUyxDQUFDLEVBQUUsR0FBRyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFlBQVksU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDbkMsU0FBUztBQUNULFFBQVEsT0FB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
